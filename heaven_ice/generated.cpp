#pragma clang diagnostic ignored "-Wunused-label"
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wunused-variable"

#include "generated.hpp"

#include "inst_impls.hpp"
#include "magic_constants.hpp"
#include "manual_functions.hpp"

#include "bee/print.hpp"

namespace heaven_ice {
namespace {

ulong_t tmp_L;
uword_t tmp_W;
ubyte_t tmp_B;

struct GeneratedImpl final : public GeneratedIntf {
  void JUMP_MAP(ulong_t addr)
  {
    _log_call(__func__);

    switch (addr) {
    case 0x542:
      F322c();
      break;
    case 0x546:
      F290a();
      break;
    case 0x54a:
      F4d96();
      break;
    case 0x54e:
      F4d96();
      break;
    case 0x552:
      F4d96();
      break;
    case 0x556:
      F4d96();
      break;
    case 0x55a:
      F4d96();
      break;
    case 0x55e:
      F4d96();
      break;
    case 0x562:
      F4d96();
      break;
    case 0x566:
      F4d96();
      break;
    case 0x56a:
      F4d96();
      break;
    case 0x56e:
      F4d96();
      break;
    case 0x572:
      F4d96();
      break;
    case 0x576:
      F4d96();
      break;
    case 0x57a:
      F4d96();
      break;
    case 0x57e:
      F4d96();
      break;
    case 0x582:
      F4d96();
      break;
    case 0x586:
      F4d96();
      break;
    case 0x58a:
      F4d96();
      break;
    case 0x58e:
      F4d96();
      break;
    case 0x592:
      F4d96();
      break;
    case 0x596:
      F4d96();
      break;
    case 0x59a:
      F4d96();
      break;
    case 0x59e:
      F4d96();
      break;
    case 0x5a2:
      F4d96();
      break;
    case 0x5a6:
      F4d96();
      break;
    case 0x5aa:
      F4d96();
      break;
    case 0x5ae:
      F4d96();
      break;
    case 0x5b2:
      F4d96();
      break;
    case 0x5b6:
      F4d96();
      break;
    case 0x5ba:
      F4d96();
      break;
    case 0x5be:
      F4d96();
      break;
    case 0x5c2:
      F4d96();
      break;
    case 0x5c6:
      F4d96();
      break;
    case 0x5ca:
      F22bc();
      break;
    case 0x5ce:
      F22bc();
      break;
    case 0x5d2:
      F22bc();
      break;
    case 0x5d6:
      F22bc();
      break;
    case 0x5da:
      F22bc();
      break;
    case 0x5de:
      F4182();
      break;
    case 0x9ce:
      Faf4();
      break;
    case 0x9d2:
      Fb30();
      break;
    case 0x9d6:
      Fb6a();
      break;
    case 0x9da:
      Fba6();
      break;
    case 0x9de:
      Fbe0();
      break;
    case 0x9e2:
      Fbf2();
      break;
    case 0x9e6:
      Fc04();
      break;
    case 0x9ea:
      Fc16();
      break;
    case 0x9ee:
      Fc28();
      break;
    case 0x9f2:
      Fc58();
      break;
    case 0x9f6:
      Fc96();
      break;
    case 0x9fa:
      Fcd4();
      break;
    case 0x9fe:
      Fd12();
      break;
    case 0xa02:
      Fd50();
      break;
    case 0xa06:
      Fd62();
      break;
    case 0xa0a:
      Fd74();
      break;
    case 0xa0e:
      Fd86();
      break;
    case 0xa12:
      Fd98();
      break;
    case 0xa16:
      Fdc8();
      break;
    case 0xa1a:
      Fe06();
      break;
    case 0xa1e:
      Fe44();
      break;
    case 0xa22:
      Fe82();
      break;
    case 0xa26:
      Fec0();
      break;
    case 0xa2a:
      Fed2();
      break;
    case 0xa2e:
      Fee4();
      break;
    case 0xa32:
      Fef6();
      break;
    case 0xa36:
      Ff08();
      break;
    case 0x3c70:
      F3c7c();
      break;
    case 0x3c74:
      F3c94();
      break;
    case 0x3c78:
      F3cae();
      break;
    case 0x3e2e:
      F3e2e();
      break;
    case 0x3e4a:
      F3e4a();
      break;
    case 0x3eb2:
      F3eb2();
      break;
    case 0x3eea:
      F3eea();
      break;
    case 0x4718:
      F4718();
      break;
    case 0x4f86:
      F4f86();
      break;
    case 0x50a0:
      F50a0();
      break;
    case 0x50d4:
      F50d4();
      break;
    case 0x50e6:
      F50e6();
      break;
    case 0x5114:
      F5114();
      break;
    case 0x518e:
      F518e();
      break;
    case 0x5192:
      F5192();
      break;
    case 0x519e:
      F519e();
      break;
    case 0x51a2:
      F51a2();
      break;
    case 0x5984:
      _m->update_sprite_with_something(G.a[6]);
      break;
    case 0x5a9a:
      F5a9a();
      break;
    case 0x5abc:
      F5abc();
      break;
    case 0x5ade:
      F5ade();
      break;
    case 0x5ae2:
      F5ae2();
      break;
    case 0x5b5e:
      F5b5e();
      break;
    case 0x5bf4:
      _m->clear_sprites();
      break;
    case 0x5d9a:
      _m->vblank(G.d[0].w());
      break;
    case 0x5dc8:
      _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
      break;
    case 0x5e08:
      _m->clear_cram();
      break;
    case 0x5e3c:
      _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
      break;
    case 0x5f28:
      F5f28();
      break;
    case 0x62d0:
      F62d0();
      break;
    case 0x63e8:
      _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
        G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
      break;
    case 0x6414:
      F6414();
      break;
    case 0x6442:
      _m->clear_all_planes();
      break;
    case 0x64aa:
      _m->push_scroll_state();
      break;
    case 0x654c:
      F654c();
      break;
    case 0x65a4:
      F65a4();
      break;
    case 0x6600:
      F6600();
      break;
    case 0x663a:
      F663a();
      break;
    case 0x6658:
      F6658();
      break;
    case 0x66b2:
      F66a2();
      break;
    case 0x66b4:
      F66aa();
      break;
    case 0x66b6:
      F66aa();
      break;
    case 0x66b8:
      F66a2();
      break;
    case 0x66ba:
      F66aa();
      break;
    case 0x66bc:
      F66a2();
      break;
    case 0x66be:
      F66a2();
      break;
    case 0x66c0:
      F66aa();
      break;
    case 0x66e2:
      F66e2();
      break;
    case 0x675a:
      F675a();
      break;
    case 0x677c:
      _m->F677c_manual(G.a[6]);
      break;
    case 0x67dc:
      _m->noop();
      break;
    case 0x67de:
      _m->exg_d2_d3();
      break;
    case 0x67e0:
      _m->exg_d2_d3_neg_w_d2();
      break;
    case 0x67e2:
      _m->neg_w_d2();
      break;
    case 0x67e4:
      _m->neg_w_d2_d3();
      break;
    case 0x67e6:
      _m->exg_neg_w_d2_d3();
      break;
    case 0x67e8:
      _m->neg_w_d2_exg_d2_d3();
      break;
    case 0x67ea:
      _m->neg_w_d3();
      break;
    case 0x6820:
      F6820();
      break;
    case 0x6858:
      F6858();
      break;
    case 0x6870:
      F6870();
      break;
    case 0x6b12:
      F6b12();
      break;
    case 0x6b1c:
      F6b1c();
      break;
    case 0x6b22:
      F6b22();
      break;
    case 0x6bd0:
      F6bd0();
      break;
    case 0x736a:
      F736a();
      break;
    case 0x75ca:
      F75ca();
      break;
    case 0x76b2:
      F76b2();
      break;
    case 0x775e:
      F775e();
      break;
    case 0x7810:
      F7810();
      break;
    case 0x79a4:
      F79a4();
      break;
    case 0x7a34:
      F7a34();
      break;
    case 0x7ba4:
      F7ba4();
      break;
    case 0x7c04:
      F7c04();
      break;
    case 0x7d06:
      F7d06();
      break;
    case 0x7d3c:
      F7d3c();
      break;
    case 0x7e4a:
      F7e4a();
      break;
    case 0x7ec8:
      F7ec8();
      break;
    case 0x7f9a:
      F7f9a();
      break;
    case 0x801c:
      F801c();
      break;
    case 0x814a:
      F814a();
      break;
    case 0x81de:
      F81de();
      break;
    case 0x83a0:
      F83a0();
      break;
    case 0x842a:
      F842a();
      break;
    case 0x8558:
      F8558();
      break;
    case 0x8592:
      F8592();
      break;
    case 0x861c:
      F861c();
      break;
    case 0x86a4:
      F86a4();
      break;
    case 0x8792:
      F8792();
      break;
    case 0x87d2:
      F87d2();
      break;
    case 0x885a:
      F885a();
      break;
    case 0x88cc:
      F88cc();
      break;
    case 0x8b5e:
      F8b5e();
      break;
    case 0x8bb8:
      F8bb8();
      break;
    case 0x8cd6:
      F8cd6();
      break;
    case 0x8d2a:
      F8d2a();
      break;
    case 0x8dbe:
      F8dbe();
      break;
    case 0x8df0:
      F8df0();
      break;
    case 0x8e88:
      F8e88();
      break;
    case 0x8ec0:
      F8ec0();
      break;
    case 0x8f3c:
      F8f3c();
      break;
    case 0x8f92:
      F8f92();
      break;
    case 0x9084:
      F9084();
      break;
    case 0x90c4:
      F90c4();
      break;
    case 0x90e2:
      F90e2();
      break;
    case 0x915a:
      F915a();
      break;
    case 0x91fa:
      F91fa();
      break;
    case 0x926c:
      F926c();
      break;
    case 0x932e:
      F932e();
      break;
    case 0x93d0:
      F93d0();
      break;
    case 0x9608:
      F9608();
      break;
    case 0x9652:
      F9652();
      break;
    case 0x9746:
      F9746();
      break;
    case 0x97a6:
      F97a6();
      break;
    case 0x98ac:
      F98ac();
      break;
    case 0x99e0:
      F99e0();
      break;
    case 0x9cc2:
      F9cc2();
      break;
    case 0x9d46:
      F9d46();
      break;
    case 0x9f5a:
      F9f5a();
      break;
    case 0x9fb0:
      F9fb0();
      break;
    case 0xa0d4:
      Fa0d4();
      break;
    case 0xa170:
      Fa170();
      break;
    case 0xa2b2:
      Fa2b2();
      break;
    case 0xa358:
      Fa358();
      break;
    case 0xa4d8:
      Fa4d8();
      break;
    case 0xa502:
      Fa502();
      break;
    case 0xa546:
      Fa546();
      break;
    case 0xa5b6:
      Fa5b6();
      break;
    case 0xa77a:
      Fa77a();
      break;
    case 0xa79e:
      Fa79e();
      break;
    case 0xa7d0:
      Fa7d0();
      break;
    case 0xa7f6:
      Fa7f6();
      break;
    case 0xb3d0:
      Fb3d0();
      break;
    case 0xb42a:
      Fb42a();
      break;
    case 0xb4a6:
      Fb4a6();
      break;
    case 0xb4e4:
      Fb4e4();
      break;
    case 0xb574:
      Fb574();
      break;
    case 0xb58e:
      Fb58e();
      break;
    case 0xb6ae:
      Fb6ae();
      break;
    case 0xb768:
      Fb768();
      break;
    case 0xb974:
      Fb974();
      break;
    case 0xba14:
      Fba14();
      break;
    case 0xbb22:
      Fbb22();
      break;
    case 0xbb58:
      Fbb58();
      break;
    case 0xbbd4:
      Fbbd4();
      break;
    case 0xbc2c:
      Fbc2c();
      break;
    case 0xbf30:
      Fbf30();
      break;
    case 0xc0be:
      Fc0be();
      break;
    case 0xc812:
      Fc812();
      break;
    case 0xc8b0:
      Fc8b0();
      break;
    case 0xcf02:
      Fcf02();
      break;
    case 0xd04c:
      Fd04c();
      break;
    case 0xd1c4:
      Fd1c4();
      break;
    case 0xd1ce:
      Fd1ce();
      break;
    case 0xd324:
      Fd324();
      break;
    case 0xd438:
      Fd438();
      break;
    case 0xd43a:
      Fd43a();
      break;
    case 0xd6aa:
      Fd6aa();
      break;
    case 0xd880:
      Fd880();
      break;
    case 0xdc44:
      Fdc44();
      break;
    case 0xdca4:
      Fdca4();
      break;
    case 0xdd42:
      Fdd42();
      break;
    case 0xde36:
      Fde36();
      break;
    case 0xe18a:
      Fe18a();
      break;
    case 0xe1cc:
      Fe1cc();
      break;
    case 0xe294:
      Fe294();
      break;
    case 0xe360:
      Fe360();
      break;
    case 0xe836:
      Fe836();
      break;
    case 0xe940:
      Fe940();
      break;
    case 0xe9ea:
      Fe9ea();
      break;
    case 0xea48:
      Fea48();
      break;
    case 0xeb1a:
      Feb1a();
      break;
    case 0xebee:
      Febee();
      break;
    case 0xee5c:
      Fee5c();
      break;
    case 0xeeb2:
      Feeb2();
      break;
    case 0xf6d4:
      Ff6d4();
      break;
    case 0xf870:
      Ff870();
      break;
    case 0xfc14:
      Ffc14();
      break;
    case 0xfdc2:
      Ffdc2();
      break;
    case 0x10076:
      F10076();
      break;
    case 0x10214:
      F10214();
      break;
    case 0x10464:
      F10464();
      break;
    case 0x104c6:
      F104c6();
      break;
    case 0x1054e:
      F1054e();
      break;
    case 0x105ce:
      F105ce();
      break;
    case 0x10638:
      F10638();
      break;
    case 0x1063c:
      F1063c();
      break;
    case 0x10640:
      F10640();
      break;
    case 0x10644:
      F10644();
      break;
    case 0x10648:
      F10648();
      break;
    case 0x1064c:
      F1064c();
      break;
    case 0x10650:
      F10650();
      break;
    case 0x10654:
      F10654();
      break;
    case 0x10658:
      F10658();
      break;
    case 0x1065c:
      F1065c();
      break;
    case 0x10e08:
      F10e08();
      break;
    case 0x10e64:
      F10e64();
      break;
    case 0x10f5e:
      F10f5e();
      break;
    default:
      raise_error("No mapping for address: {x}", addr);
    }
    _log_ret(__func__);
  }

  void F5e2()
  {
    _log_call(__func__);

    // 0005e2: LEA.L dst:A5 src:(ff0842)
    G.a[5] = 0xff0842;
    // 0005e8: MOVE.W dst:D0 src:(A5)
    G.d[0].w(G.io->w(G.a[5]));
    // 0005ea: ANDI.W dst:D0 src:#f000
    G.d[0].w(AND<W>(G.d[0].w(), 0xf000));
    // 0005ee: CMPI.W dst:D0 src:#8000
    CMP<W>(G.d[0].w(), 0x8000);
    // 0005f2: Bcc cond:NE src:(714)
    if (G.sr.check_condition(Condition::NE)) { goto L714; }
    // 0005f6: MOVEM.W src:(A5.L)+14 regs:D0,D1,D2,D3,D4,D5
    G.d[0].l(G.io->w(G.a[5] + 0x14));
    G.d[1].l(G.io->w(G.a[5] + 0x16));
    G.d[2].l(G.io->w(G.a[5] + 0x18));
    G.d[3].l(G.io->w(G.a[5] + 0x1a));
    G.d[4].l(G.io->w(G.a[5] + 0x1c));
    G.d[5].l(G.io->w(G.a[5] + 0x1e));
    // 0005fc: AND.L dst:D0 src:#ffff
    G.d[0].l(AND<L>(G.d[0].l(), 0xffff));
    // 000602: ADDI.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 000606: ADDI.W dst:D1 src:#4800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x4800));
    // 00060a: LEA.L dst:A0 src:(ff24c2)
    G.a[0] = 0xff24c2;
    // 000610: MOVE.L dst:D6 src:D0
    G.d[6].l(G.d[0].l());
    // 000612: ADD.L dst:D0 src:D2
    G.d[0].l(ADD<L>(G.d[0].l(), G.d[2].l()));
    // 000614: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000616: SUB.L dst:D6 src:D3
    G.d[6].l(SUB<L>(G.d[6].l(), G.d[3].l()));
    // 000618: MOVE.L dst:(A0)+ src:D6
    G.io->l(G.a[0], UCC(G.d[6].l()));
    G.a[0] += 4;
    // 00061a: ASL.L dst:D0 src:#1
    G.d[0].l(ASL<L>(G.d[0].l(), 1));
    // 00061c: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 00061e: ASL.L dst:D6 src:#1
    G.d[6].l(ASL<L>(G.d[6].l(), 1));
    // 000620: MOVE.L dst:(A0)+ src:D6
    G.io->l(G.a[0], UCC(G.d[6].l()));
    G.a[0] += 4;
    // 000622: ASR.L dst:D0 src:#2
    G.d[0].l(ASR<L>(G.d[0].l(), 2));
    // 000624: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000626: ASR.L dst:D6 src:#2
    G.d[6].l(ASR<L>(G.d[6].l(), 2));
    // 000628: MOVE.L dst:(A0)+ src:D6
    G.io->l(G.a[0], UCC(G.d[6].l()));
    G.a[0] += 4;
    // 00062a: MOVE.L dst:D6 src:D1
    G.d[6].l(G.d[1].l());
    // 00062c: ADD.L dst:D1 src:D4
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[4].l()));
    // 00062e: MOVE.L dst:(A0)+ src:D1
    G.io->l(G.a[0], UCC(G.d[1].l()));
    G.a[0] += 4;
    // 000630: SUB.L dst:D6 src:D5
    G.d[6].l(SUB<L>(G.d[6].l(), G.d[5].l()));
    // 000632: MOVE.L dst:(A0)+ src:D6
    G.io->l(G.a[0], UCC(G.d[6].l()));
    G.a[0] += 4;
    // 000634: MOVE.W dst:(A0) src:#1
    G.io->w(G.a[0], UCC(1));
    // 000638: MOVEM.L src:(ff24c2) regs:D3,D4
    G.d[3].l(G.io->l(0xff24c2));
    G.d[4].l(G.io->l(0xff24c6));
    // 000640: MOVEM.L src:(ff24da) regs:D5,D6
    G.d[5].l(G.io->l(0xff24da));
    G.d[6].l(G.io->l(0xff24de));
    // 000648: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 00064e: MOVEQ.L dst:D7 src:#f
    G.d[7].l(UCC(15));

  L650:;
    // 000650: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 000652: Bcc cond:PL src:(67e)
    if (G.sr.check_condition(Condition::PL)) { goto L67e; }
    // 000654: MOVEM.W src:(A6.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x14));
    G.d[1].l(G.io->w(G.a[6] + 0x16));
    // 00065a: ADDI.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 00065e: ADDI.W dst:D1 src:#4800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x4800));
    // 000662: CMP.W dst:D3 src:D0
    CMP<W>(G.d[3].w(), G.d[0].w());
    // 000664: Bcc cond:CS src:(67e)
    if (G.sr.check_condition(Condition::CS)) { goto L67e; }
    // 000666: CMP.W dst:D4 src:D0
    CMP<W>(G.d[4].w(), G.d[0].w());
    // 000668: Bcc cond:CC src:(67e)
    if (G.sr.check_condition(Condition::CC)) { goto L67e; }
    // 00066a: CMP.W dst:D5 src:D1
    CMP<W>(G.d[5].w(), G.d[1].w());
    // 00066c: Bcc cond:CS src:(67e)
    if (G.sr.check_condition(Condition::CS)) { goto L67e; }
    // 00066e: CMP.W dst:D6 src:D1
    CMP<W>(G.d[6].w(), G.d[1].w());
    // 000670: Bcc cond:CC src:(67e)
    if (G.sr.check_condition(Condition::CC)) { goto L67e; }
    // 000672: ORI.W dst:(A6) src:#4000
    G.io->w(G.a[6], OR<W>(G.io->w(G.a[6]), 0x4000));
    // 000676: ORI.W dst:(A5) src:#4000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x4000));
    // 00067a: Bcc cond:True src:(714)
    goto L714;

  L67e:;
    // 00067e: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 000682: DBcc.W cond:False dst:D7 src:(650)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L650; }
    // 000686: LEA.L dst:A6 src:(ff0182)
    G.a[6] = 0xff0182;
    // 00068c: MOVEQ.L dst:D7 src:#9
    G.d[7].l(UCC(9));

  L68e:;
    // 00068e: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 000690: Bcc cond:PL src:(6a0)
    if (G.sr.check_condition(Condition::PL)) { goto L6a0; }
    // 000692: BSR src:(8f0)
    _m->F8f0_manual(G.a[5], G.a[6]);
    // 000696: Bcc cond:EQ src:(6a0)
    if (G.sr.check_condition(Condition::EQ)) { goto L6a0; }
    // 000698: ORI.W dst:(A5) src:#4000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x4000));
    // 00069c: Bcc cond:True src:(714)
    goto L714;

  L6a0:;
    // 0006a0: LEA.L dst:A6 src:(A6.L)+20
    G.a[6] += 0x20;
    // 0006a4: DBcc.W cond:False dst:D7 src:(68e)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L68e; }
    // 0006a8: LEA.L dst:A6 src:(ff0cc2)
    G.a[6] = 0xff0cc2;
    // 0006ae: MOVEQ.L dst:D7 src:#1f
    G.d[7].l(UCC(0x1f));

  L6b0:;
    // 0006b0: MOVE.W dst:D0 src:(A6)
    G.d[0].w(G.io->w(G.a[6]));
    // 0006b2: AND.W dst:D0 src:#f000
    G.d[0].w(AND<W>(G.d[0].w(), 0xf000));
    // 0006b6: CMP.W dst:D0 src:#8000
    CMP<W>(G.d[0].w(), 0x8000);
    // 0006ba: Bcc cond:NE src:(6da)
    if (G.sr.check_condition(Condition::NE)) { goto L6da; }
    // 0006bc: BSR src:(8f0)
    _m->F8f0_manual(G.a[5], G.a[6]);
    // 0006c0: Bcc cond:EQ src:(6da)
    if (G.sr.check_condition(Condition::EQ)) { goto L6da; }
    // 0006c2: ORI.W dst:(A5) src:#4000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x4000));
    // 0006c6: BTST.B dst:(A6.L)+1 src:#3
    BTST<B>(G.io->b(G.a[6] + 1), 3);
    // 0006cc: Bcc cond:NE src:(714)
    if (G.sr.check_condition(Condition::NE)) { goto L714; }
    // 0006ce: ORI.W dst:(A6) src:#4000
    G.io->w(G.a[6], OR<W>(G.io->w(G.a[6]), 0x4000));
    // 0006d2: ADDI.W dst:(A6.L)+c src:#10
    G.io->w(G.a[6] + 12, ADD<W>(G.io->w(G.a[6] + 12), 0x10));
    // 0006d8: Bcc cond:True src:(714)
    goto L714;

  L6da:;
    // 0006da: LEA.L dst:A6 src:(A6.L)+c0
    G.a[6] += 0xc0;
    // 0006de: DBcc.W cond:False dst:D7 src:(6b0)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L6b0; }
    // 0006e2: LEA.L dst:A6 src:(ff06c2)
    G.a[6] = 0xff06c2;
    // 0006e8: MOVEQ.L dst:D7 src:#4
    G.d[7].l(UCC(4));

  L6ea:;
    // 0006ea: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 0006ec: Bcc cond:PL src:(6f8)
    if (G.sr.check_condition(Condition::PL)) { goto L6f8; }
    // 0006ee: BSR src:(8f0)
    _m->F8f0_manual(G.a[5], G.a[6]);
    // 0006f2: Bcc cond:EQ src:(6f8)
    if (G.sr.check_condition(Condition::EQ)) { goto L6f8; }
    // 0006f4: ORI.W dst:(A6) src:#4000
    G.io->w(G.a[6], OR<W>(G.io->w(G.a[6]), 0x4000));

  L6f8:;
    // 0006f8: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 0006fc: DBcc.W cond:False dst:D7 src:(6ea)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L6ea; }
    // 000700: LEA.L dst:A6 src:(ff0802)
    G.a[6] = 0xff0802;
    // 000706: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 000708: Bcc cond:PL src:(714)
    if (G.sr.check_condition(Condition::PL)) { goto L714; }
    // 00070a: BSR src:(8f0)
    _m->F8f0_manual(G.a[5], G.a[6]);
    // 00070e: Bcc cond:EQ src:(714)
    if (G.sr.check_condition(Condition::EQ)) { goto L714; }
    // 000710: ORI.W dst:(A6) src:#800
    G.io->w(G.a[6], OR<W>(G.io->w(G.a[6]), 0x800));

  L714:;
    // 000714: LEA.L dst:A5 src:(ff0802)
    G.a[5] = 0xff0802;
    // 00071a: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 00071c: Bcc cond:PL src:(800)
    if (G.sr.check_condition(Condition::PL)) { goto L800; }
    // 000720: MOVEM.W src:(A5.L)+14 regs:D0,D1,D2,D3,D4,D5
    G.d[0].l(G.io->w(G.a[5] + 0x14));
    G.d[1].l(G.io->w(G.a[5] + 0x16));
    G.d[2].l(G.io->w(G.a[5] + 0x18));
    G.d[3].l(G.io->w(G.a[5] + 0x1a));
    G.d[4].l(G.io->w(G.a[5] + 0x1c));
    G.d[5].l(G.io->w(G.a[5] + 0x1e));
    // 000726: AND.L dst:D0 src:#ffff
    G.d[0].l(AND<L>(G.d[0].l(), 0xffff));
    // 00072c: ADDI.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 000730: ADDI.W dst:D1 src:#4800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x4800));
    // 000734: LEA.L dst:A0 src:(ff24c2)
    G.a[0] = 0xff24c2;
    // 00073a: MOVE.L dst:D6 src:D0
    G.d[6].l(G.d[0].l());
    // 00073c: ADD.L dst:D0 src:D2
    G.d[0].l(ADD<L>(G.d[0].l(), G.d[2].l()));
    // 00073e: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000740: SUB.L dst:D6 src:D3
    G.d[6].l(SUB<L>(G.d[6].l(), G.d[3].l()));
    // 000742: MOVE.L dst:(A0)+ src:D6
    G.io->l(G.a[0], UCC(G.d[6].l()));
    G.a[0] += 4;
    // 000744: ASL.L dst:D0 src:#1
    G.d[0].l(ASL<L>(G.d[0].l(), 1));
    // 000746: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000748: ASL.L dst:D6 src:#1
    G.d[6].l(ASL<L>(G.d[6].l(), 1));
    // 00074a: MOVE.L dst:(A0)+ src:D6
    G.io->l(G.a[0], UCC(G.d[6].l()));
    G.a[0] += 4;
    // 00074c: ASR.L dst:D0 src:#2
    G.d[0].l(ASR<L>(G.d[0].l(), 2));
    // 00074e: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000750: ASR.L dst:D6 src:#2
    G.d[6].l(ASR<L>(G.d[6].l(), 2));
    // 000752: MOVE.L dst:(A0)+ src:D6
    G.io->l(G.a[0], UCC(G.d[6].l()));
    G.a[0] += 4;
    // 000754: MOVE.L dst:D6 src:D1
    G.d[6].l(G.d[1].l());
    // 000756: ADD.L dst:D1 src:D4
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[4].l()));
    // 000758: MOVE.L dst:(A0)+ src:D1
    G.io->l(G.a[0], UCC(G.d[1].l()));
    G.a[0] += 4;
    // 00075a: SUB.L dst:D6 src:D5
    G.d[6].l(SUB<L>(G.d[6].l(), G.d[5].l()));
    // 00075c: MOVE.L dst:(A0)+ src:D6
    G.io->l(G.a[0], UCC(G.d[6].l()));
    G.a[0] += 4;
    // 00075e: MOVE.W dst:(A0) src:#1
    G.io->w(G.a[0], UCC(1));
    // 000762: MOVEM.L src:(ff24c2) regs:D3,D4
    G.d[3].l(G.io->l(0xff24c2));
    G.d[4].l(G.io->l(0xff24c6));
    // 00076a: MOVEM.L src:(ff24da) regs:D5,D6
    G.d[5].l(G.io->l(0xff24da));
    G.d[6].l(G.io->l(0xff24de));
    // 000772: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 000778: MOVEQ.L dst:D7 src:#f
    G.d[7].l(UCC(15));

  L77a:;
    // 00077a: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 00077c: Bcc cond:PL src:(7a4)
    if (G.sr.check_condition(Condition::PL)) { goto L7a4; }
    // 00077e: MOVEM.W src:(A6.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x14));
    G.d[1].l(G.io->w(G.a[6] + 0x16));
    // 000784: ADDI.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 000788: ADDI.W dst:D1 src:#4800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x4800));
    // 00078c: CMP.W dst:D3 src:D0
    CMP<W>(G.d[3].w(), G.d[0].w());
    // 00078e: Bcc cond:CS src:(7a4)
    if (G.sr.check_condition(Condition::CS)) { goto L7a4; }
    // 000790: CMP.W dst:D4 src:D0
    CMP<W>(G.d[4].w(), G.d[0].w());
    // 000792: Bcc cond:CC src:(7a4)
    if (G.sr.check_condition(Condition::CC)) { goto L7a4; }
    // 000794: CMP.W dst:D5 src:D1
    CMP<W>(G.d[5].w(), G.d[1].w());
    // 000796: Bcc cond:CS src:(7a4)
    if (G.sr.check_condition(Condition::CS)) { goto L7a4; }
    // 000798: CMP.W dst:D6 src:D1
    CMP<W>(G.d[6].w(), G.d[1].w());
    // 00079a: Bcc cond:CC src:(7a4)
    if (G.sr.check_condition(Condition::CC)) { goto L7a4; }
    // 00079c: ORI.W dst:(A6) src:#4000
    G.io->w(G.a[6], OR<W>(G.io->w(G.a[6]), 0x4000));
    // 0007a0: ORI.W dst:(A5) src:#1000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x1000));

  L7a4:;
    // 0007a4: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 0007a8: DBcc.W cond:False dst:D7 src:(77a)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L77a; }
    // 0007ac: LEA.L dst:A6 src:(ff0182)
    G.a[6] = 0xff0182;
    // 0007b2: MOVEQ.L dst:D7 src:#9
    G.d[7].l(UCC(9));

  L7b4:;
    // 0007b4: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 0007b6: Bcc cond:PL src:(7c2)
    if (G.sr.check_condition(Condition::PL)) { goto L7c2; }
    // 0007b8: BSR src:(8f0)
    _m->F8f0_manual(G.a[5], G.a[6]);
    // 0007bc: Bcc cond:EQ src:(7c2)
    if (G.sr.check_condition(Condition::EQ)) { goto L7c2; }
    // 0007be: ORI.W dst:(A5) src:#2000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x2000));

  L7c2:;
    // 0007c2: LEA.L dst:A6 src:(A6.L)+20
    G.a[6] += 0x20;
    // 0007c6: DBcc.W cond:False dst:D7 src:(7b4)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L7b4; }
    // 0007ca: LEA.L dst:A6 src:(ff0cc2)
    G.a[6] = 0xff0cc2;
    // 0007d0: MOVEQ.L dst:D7 src:#1f
    G.d[7].l(UCC(0x1f));

  L7d2:;
    // 0007d2: MOVE.W dst:D0 src:(A6)
    G.d[0].w(G.io->w(G.a[6]));
    // 0007d4: AND.W dst:D0 src:#b000
    G.d[0].w(AND<W>(G.d[0].w(), 0xb000));
    // 0007d8: CMP.W dst:D0 src:#8000
    CMP<W>(G.d[0].w(), 0x8000);
    // 0007dc: Bcc cond:NE src:(7f8)
    if (G.sr.check_condition(Condition::NE)) { goto L7f8; }
    // 0007de: BSR src:(8f0)
    _m->F8f0_manual(G.a[5], G.a[6]);
    // 0007e2: Bcc cond:EQ src:(7f8)
    if (G.sr.check_condition(Condition::EQ)) { goto L7f8; }
    // 0007e4: ORI.W dst:(A5) src:#4000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x4000));
    // 0007e8: BTST.B dst:(A6.L)+1 src:#3
    BTST<B>(G.io->b(G.a[6] + 1), 3);
    // 0007ee: Bcc cond:NE src:(7f8)
    if (G.sr.check_condition(Condition::NE)) { goto L7f8; }
    // 0007f0: ORI.W dst:(A6) src:#4000
    G.io->w(G.a[6], OR<W>(G.io->w(G.a[6]), 0x4000));
    // 0007f4: ADDQ.W dst:(A6.L)+c src:#1
    G.io->w(G.a[6] + 12, ADD<W>(G.io->w(G.a[6] + 12), 1));

  L7f8:;
    // 0007f8: LEA.L dst:A6 src:(A6.L)+c0
    G.a[6] += 0xc0;
    // 0007fc: DBcc.W cond:False dst:D7 src:(7d2)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L7d2; }

  L800:;
    // 000800: LEA.L dst:A5 src:(ff02c2)
    G.a[5] = 0xff02c2;
    // 000806: MOVEQ.L dst:D6 src:#f
    G.d[6].l(UCC(15));

  L808:;
    // 000808: MOVE.W dst:D0 src:(A5)
    G.d[0].w(G.io->w(G.a[5]));
    // 00080a: AND.W dst:D0 src:#8002
    G.d[0].w(AND<W>(G.d[0].w(), 0x8002));
    // 00080e: CMPI.W dst:D0 src:#8000
    CMP<W>(G.d[0].w(), 0x8000);
    // 000812: Bcc cond:NE src:(862)
    if (G.sr.check_condition(Condition::NE)) { goto L862; }
    // 000816: CLR.W dst:(ff2526)
    G.io->w(0xff2526, UCC(0));
    // 00081c: LEA.L dst:A6 src:(ff0182)
    G.a[6] = 0xff0182;
    // 000822: MOVEQ.L dst:D7 src:#9
    G.d[7].l(UCC(9));

  L824:;
    // 000824: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 000826: Bcc cond:PL src:(834)
    if (G.sr.check_condition(Condition::PL)) { goto L834; }
    // 000828: BSR src:(a3a)
    Fa3a();
    // 00082c: Bcc cond:EQ src:(834)
    if (G.sr.check_condition(Condition::EQ)) { goto L834; }
    // 00082e: ORI.W dst:(A5) src:#4000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x4000));
    // 000832: Bcc cond:True src:(862)
    goto L862;

  L834:;
    // 000834: LEA.L dst:A6 src:(A6.L)+20
    G.a[6] += 0x20;
    // 000838: DBcc.W cond:False dst:D7 src:(824)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L824; }
    // 00083c: LEA.L dst:A6 src:(ff0cc2)
    G.a[6] = 0xff0cc2;
    // 000842: MOVEQ.L dst:D7 src:#1f
    G.d[7].l(UCC(0x1f));

  L844:;
    // 000844: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 000846: Bcc cond:PL src:(85a)
    if (G.sr.check_condition(Condition::PL)) { goto L85a; }
    // 000848: TST.B src:(A6.L)+1
    TST<B>(G.io->b(G.a[6] + 1));
    // 00084c: Bcc cond:PL src:(85a)
    if (G.sr.check_condition(Condition::PL)) { goto L85a; }
    // 00084e: BSR src:(a3a)
    Fa3a();
    // 000852: Bcc cond:EQ src:(85a)
    if (G.sr.check_condition(Condition::EQ)) { goto L85a; }
    // 000854: ORI.W dst:(A5) src:#4000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x4000));
    // 000858: Bcc cond:True src:(862)
    goto L862;

  L85a:;
    // 00085a: LEA.L dst:A6 src:(A6.L)+c0
    G.a[6] += 0xc0;
    // 00085e: DBcc.W cond:False dst:D7 src:(844)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L844; }

  L862:;
    // 000862: LEA.L dst:A5 src:(A5.L)+40
    G.a[5] += 0x40;
    // 000866: DBcc.W cond:False dst:D6 src:(808)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L808; }
    // 00086a: LEA.L dst:A5 src:(ff08c2)
    G.a[5] = 0xff08c2;
    // 000870: MOVEQ.L dst:D6 src:#f
    G.d[6].l(UCC(15));

  L872:;
    // 000872: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 000874: Bcc cond:PL src:(8e6)
    if (G.sr.check_condition(Condition::PL)) { goto L8e6; }
    // 000878: CLR.W dst:(ff24e2)
    G.io->w(0xff24e2, UCC(0));
    // 00087e: LEA.L dst:A6 src:(ff0cc2)
    G.a[6] = 0xff0cc2;
    // 000884: MOVEQ.L dst:D7 src:#1f
    G.d[7].l(UCC(0x1f));

  L886:;
    // 000886: MOVE.W dst:D0 src:(A6)
    G.d[0].w(G.io->w(G.a[6]));
    // 000888: AND.W dst:D0 src:#b000
    G.d[0].w(AND<W>(G.d[0].w(), 0xb000));
    // 00088c: CMP.W dst:D0 src:#8000
    CMP<W>(G.d[0].w(), 0x8000);
    // 000890: Bcc cond:NE src:(8be)
    if (G.sr.check_condition(Condition::NE)) { goto L8be; }
    // 000892: BSR src:(8f0)
    _m->F8f0_manual(G.a[5], G.a[6]);
    // 000896: Bcc cond:EQ src:(8be)
    if (G.sr.check_condition(Condition::EQ)) { goto L8be; }
    // 000898: ORI.W dst:(A5) src:#4000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x4000));
    // 00089c: BTST.B dst:(A6.L)+1 src:#3
    BTST<B>(G.io->b(G.a[6] + 1), 3);
    // 0008a2: Bcc cond:NE src:(8e6)
    if (G.sr.check_condition(Condition::NE)) { goto L8e6; }
    // 0008a4: MOVE.W dst:D0 src:(A5)
    G.d[0].w(G.io->w(G.a[5]));
    // 0008a6: AND.W dst:D0 src:#3f0
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f0));
    // 0008aa: Bcc cond:NE src:(8ba)
    if (G.sr.check_condition(Condition::NE)) { goto L8ba; }
    // 0008ac: ORI.W dst:(A6) src:#4000
    G.io->w(G.a[6], OR<W>(G.io->w(G.a[6]), 0x4000));
    // 0008b0: MOVE.W dst:D0 src:(A5.L)+c
    G.d[0].w(G.io->w(G.a[5] + 12));
    // 0008b4: ADD.W dst:(A6.L)+c src:D0
    G.io->w(G.a[6] + 12, ADD<W>(G.io->w(G.a[6] + 12), G.d[0].w()));
    // 0008b8: Bcc cond:True src:(8e6)
    goto L8e6;

  L8ba:;
    // 0008ba: SUBQ.W dst:(A6.L)+48 src:#1
    G.io->w(G.a[6] + 0x48, SUB<W>(G.io->w(G.a[6] + 0x48), 1));

  L8be:;
    // 0008be: LEA.L dst:A6 src:(A6.L)+c0
    G.a[6] += 0xc0;
    // 0008c2: DBcc.W cond:False dst:D7 src:(886)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L886; }
    // 0008c6: LEA.L dst:A6 src:(ff0182)
    G.a[6] = 0xff0182;
    // 0008cc: MOVEQ.L dst:D7 src:#9
    G.d[7].l(UCC(9));

  L8ce:;
    // 0008ce: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 0008d0: Bcc cond:PL src:(8de)
    if (G.sr.check_condition(Condition::PL)) { goto L8de; }
    // 0008d2: BSR src:(8f0)
    _m->F8f0_manual(G.a[5], G.a[6]);
    // 0008d6: Bcc cond:EQ src:(8de)
    if (G.sr.check_condition(Condition::EQ)) { goto L8de; }
    // 0008d8: ORI.W dst:(A5) src:#4000
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x4000));
    // 0008dc: Bcc cond:True src:(8e6)
    goto L8e6;

  L8de:;
    // 0008de: LEA.L dst:A6 src:(A6.L)+20
    G.a[6] += 0x20;
    // 0008e2: DBcc.W cond:False dst:D7 src:(8ce)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L8ce; }

  L8e6:;
    // 0008e6: LEA.L dst:A5 src:(A5.L)+40
    G.a[5] += 0x40;
    // 0008ea: DBcc.W cond:False dst:D6 src:(872)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L872; }
    // 0008ee: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa26()
  {
    _log_call(__func__);

    // 000a26: Bcc cond:True src:(ec0)
    Fec0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa3a()
  {
    _log_call(__func__);

    // 000a3a: MOVE.W dst:D2 src:(A6.L)+2
    G.d[2].w(UCC(G.io->w(G.a[6] + 2)));
    // 000a3e: Bcc cond:NE src:(a98)
    if (G.sr.check_condition(Condition::NE)) { goto La98; }
    // 000a40: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 000a42: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 000a44: MOVE.W dst:D0 src:(A5.L)+14
    G.d[0].w(G.io->w(G.a[5] + 0x14));
    // 000a48: MOVE.W dst:D1 src:(A5.L)+16
    G.d[1].w(G.io->w(G.a[5] + 0x16));
    // 000a4c: ADDI.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 000a50: ADDI.W dst:D1 src:#4800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x4800));
    // 000a54: MOVEQ.L dst:D3 src:#0
    G.d[3].l(0);
    // 000a56: MOVEQ.L dst:D4 src:#0
    G.d[4].l(0);
    // 000a58: MOVE.W dst:D3 src:(A6.L)+14
    G.d[3].w(G.io->w(G.a[6] + 0x14));
    // 000a5c: MOVE.W dst:D4 src:(A6.L)+16
    G.d[4].w(G.io->w(G.a[6] + 0x16));
    // 000a60: ADDI.W dst:D3 src:#3000
    G.d[3].w(ADD<W>(G.d[3].w(), 0x3000));
    // 000a64: ADDI.W dst:D4 src:#4800
    G.d[4].w(ADD<W>(G.d[4].w(), 0x4800));
    // 000a68: MOVE.W dst:D5 src:D3
    G.d[5].w(G.d[3].w());
    // 000a6a: ADD.W dst:D5 src:(A6.L)+18
    G.d[5].w(ADD<W>(G.d[5].w(), G.io->w(G.a[6] + 0x18)));
    // 000a6e: CMP.W dst:D0 src:D5
    CMP<W>(G.d[0].w(), G.d[5].w());
    // 000a70: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000a74: SUB.W dst:D3 src:(A6.L)+1a
    G.d[3].w(SUB<W>(G.d[3].w(), G.io->w(G.a[6] + 0x1a)));
    // 000a78: CMP.W dst:D0 src:D3
    CMP<W>(G.d[0].w(), G.d[3].w());
    // 000a7a: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000a7e: MOVE.W dst:D3 src:D4
    G.d[3].w(G.d[4].w());
    // 000a80: ADD.W dst:D4 src:(A6.L)+1c
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[6] + 0x1c)));
    // 000a84: CMP.W dst:D1 src:D4
    CMP<W>(G.d[1].w(), G.d[4].w());
    // 000a86: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000a8a: SUB.W dst:D3 src:(A6.L)+1e
    G.d[3].w(SUB<W>(G.d[3].w(), G.io->w(G.a[6] + 0x1e)));
    // 000a8e: CMP.W dst:D1 src:D3
    CMP<W>(G.d[1].w(), G.d[3].w());
    // 000a90: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000a94: Bcc cond:True src:(958)
    _m->set_d0_1();
    goto end;

  La98:;
    // 000a98: SUBQ.W dst:D2 src:#4
    G.d[2].w(SUB<W>(G.d[2].w(), 4));
    // 000a9a: LEA.L dst:A0 src:(ff2506)
    G.a[0] = 0xff2506;
    // 000aa0: BTST.B dst:(A0.L)+21 src:#0
    BTST<B>(G.io->b(G.a[0] + 0x21), 0);
    // 000aa6: Bcc cond:NE src:(ad0)
    if (G.sr.check_condition(Condition::NE)) { goto Lad0; }
    // 000aa8: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 000aaa: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 000aac: MOVE.W dst:D0 src:(A5.L)+14
    G.d[0].w(G.io->w(G.a[5] + 0x14));
    // 000ab0: MOVE.W dst:D1 src:(A5.L)+16
    G.d[1].w(G.io->w(G.a[5] + 0x16));
    // 000ab4: ADDI.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 000ab8: ADDI.W dst:D1 src:#4800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x4800));
    // 000abc: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000abe: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000ac0: ASL.L dst:D0 src:#1
    G.d[0].l(ASL<L>(G.d[0].l(), 1));
    // 000ac2: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000ac4: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000ac6: LSR.L dst:D0 src:#2
    G.d[0].l(LSR<L>(G.d[0].l(), 2));
    // 000ac8: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000aca: MOVE.L dst:(A0)+ src:D0
    G.io->l(G.a[0], UCC(G.d[0].l()));
    G.a[0] += 4;
    // 000acc: MOVE.L dst:(A0)+ src:D1
    G.io->l(G.a[0], UCC(G.d[1].l()));
    G.a[0] += 4;
    // 000ace: MOVE.L dst:(A0)+ src:D1
    G.io->l(G.a[0], UCC(G.d[1].l()));
    G.a[0] += 4;

  Lad0:;
    // 000ad0: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 000ad2: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 000ad4: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 000ad8: MOVE.W dst:D1 src:(A6.L)+16
    G.d[1].w(G.io->w(G.a[6] + 0x16));
    // 000adc: ADDI.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 000ae0: ADDI.W dst:D1 src:#4800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x4800));
    // 000ae4: LEA.L dst:A0 src:(ff2506)
    G.a[0] = 0xff2506;
    // 000aea: LEA.L dst:A1 src:(9ce)
    G.a[1] = 0x9ce;
    // 000af0: ADDA.W dst:A1 src:D2
    G.a[1] = ADD<L>(G.a[1], G.d[2].w());
    // 000af2: JMP src:(A1)
    JUMP_MAP(G.a[1]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void Faf4()
  {
    _log_call(__func__);

    // 000af4: MOVE.L dst:D2 src:D1
    G.d[2].l(G.d[1].l());
    // 000af6: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000af8: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000afc: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000b00: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000b04: ADD.L dst:D0 src:(A6.L)+18
    G.d[0].l(ADD<L>(G.d[0].l(), G.io->l(G.a[6] + 0x18)));
    // 000b08: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000b0c: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000b10: ADD.L dst:D1 src:(A6.L)+18
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[6] + 0x18)));
    // 000b14: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000b18: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000b1c: ADD.L dst:D0 src:D2
    G.d[0].l(ADD<L>(G.d[0].l(), G.d[2].l()));
    // 000b1e: MOVE.L dst:D1 src:(A0.L)+4
    G.d[1].l(G.io->l(G.a[0] + 4));
    // 000b22: ADD.L dst:D1 src:(A0.L)+1c
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c)));
    // 000b26: CMP.L dst:D0 src:D1
    CMP<L>(G.d[0].l(), G.d[1].l());
    // 000b28: Bcc cond:LT src:(95c)
    if (G.sr.check_condition(Condition::LT)) {
      _m->clear_d0();
      goto end;
    }
    // 000b2c: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000b2e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb30()
  {
    _log_call(__func__);

    // 000b30: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000b32: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000b36: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000b3a: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000b3e: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000b42: SUB.L dst:D0 src:(A6.L)+18
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[6] + 0x18)));
    // 000b46: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000b48: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000b4c: ADD.L dst:D1 src:(A6.L)+18
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[6] + 0x18)));
    // 000b50: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000b54: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000b58: SUB.L dst:D1 src:D2
    G.d[1].l(SUB<L>(G.d[1].l(), G.d[2].l()));
    // 000b5a: MOVE.L dst:D0 src:(A0.L)+1c
    G.d[0].l(G.io->l(G.a[0] + 0x1c));
    // 000b5e: SUB.L dst:D0 src:(A0)
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[0])));
    // 000b60: CMP.L dst:D0 src:D1
    CMP<L>(G.d[0].l(), G.d[1].l());
    // 000b62: Bcc cond:GT src:(95c)
    if (G.sr.check_condition(Condition::GT)) {
      _m->clear_d0();
      goto end;
    }
    // 000b66: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000b68: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb6a()
  {
    _log_call(__func__);

    // 000b6a: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000b6c: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000b6e: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000b72: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000b76: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000b7a: ADD.L dst:D0 src:(A6.L)+18
    G.d[0].l(ADD<L>(G.d[0].l(), G.io->l(G.a[6] + 0x18)));
    // 000b7e: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000b82: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000b86: SUB.L dst:D1 src:(A6.L)+18
    G.d[1].l(SUB<L>(G.d[1].l(), G.io->l(G.a[6] + 0x18)));
    // 000b8a: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000b8e: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000b92: SUB.L dst:D1 src:D2
    G.d[1].l(SUB<L>(G.d[1].l(), G.d[2].l()));
    // 000b94: MOVE.L dst:D0 src:(A0.L)+18
    G.d[0].l(G.io->l(G.a[0] + 0x18));
    // 000b98: SUB.L dst:D0 src:(A0.L)+4
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[0] + 4)));
    // 000b9c: CMP.L dst:D0 src:D1
    CMP<L>(G.d[0].l(), G.d[1].l());
    // 000b9e: Bcc cond:LT src:(95c)
    if (G.sr.check_condition(Condition::LT)) {
      _m->clear_d0();
      goto end;
    }
    // 000ba2: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000ba4: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fba6()
  {
    _log_call(__func__);

    // 000ba6: MOVE.L dst:D2 src:D1
    G.d[2].l(G.d[1].l());
    // 000ba8: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000bac: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000bb0: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000bb4: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000bb8: SUB.L dst:D0 src:(A6.L)+18
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[6] + 0x18)));
    // 000bbc: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000bbe: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000bc2: SUB.L dst:D1 src:(A6.L)+18
    G.d[1].l(SUB<L>(G.d[1].l(), G.io->l(G.a[6] + 0x18)));
    // 000bc6: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000bca: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000bce: ADD.L dst:D0 src:D2
    G.d[0].l(ADD<L>(G.d[0].l(), G.d[2].l()));
    // 000bd0: MOVE.L dst:D1 src:(A0.L)+18
    G.d[1].l(G.io->l(G.a[0] + 0x18));
    // 000bd4: ADD.L dst:D1 src:(A0)
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[0])));
    // 000bd6: CMP.L dst:D0 src:D1
    CMP<L>(G.d[0].l(), G.d[1].l());
    // 000bd8: Bcc cond:GT src:(95c)
    if (G.sr.check_condition(Condition::GT)) {
      _m->clear_d0();
      goto end;
    }
    // 000bdc: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000bde: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbe0()
  {
    _log_call(__func__);

    // 000be0: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000be4: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000be8: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000bea: Bcc cond:CS src:(af4)
    if (G.sr.check_condition(Condition::CS)) {
      Faf4();
      goto end;
    }
    // 000bee: Bcc cond:True src:(b30)
    Fb30();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbf2()
  {
    _log_call(__func__);

    // 000bf2: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000bf6: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000bfa: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000bfc: Bcc cond:CS src:(af4)
    if (G.sr.check_condition(Condition::CS)) {
      Faf4();
      goto end;
    }
    // 000c00: Bcc cond:True src:(b6a)
    Fb6a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc04()
  {
    _log_call(__func__);

    // 000c04: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000c08: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000c0c: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000c0e: Bcc cond:CS src:(b6a)
    if (G.sr.check_condition(Condition::CS)) {
      Fb6a();
      goto end;
    }
    // 000c12: Bcc cond:True src:(ba6)
    Fba6();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc16()
  {
    _log_call(__func__);

    // 000c16: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000c1a: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000c1e: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000c20: Bcc cond:CS src:(b30)
    if (G.sr.check_condition(Condition::CS)) {
      Fb30();
      goto end;
    }
    // 000c24: Bcc cond:True src:(ba6)
    Fba6();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc28()
  {
    _log_call(__func__);

    // 000c28: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000c2c: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000c30: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000c32: Bcc cond:CC src:(c46)
    if (G.sr.check_condition(Condition::CC)) { goto Lc46; }
    // 000c34: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000c38: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000c3c: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000c3e: Bcc cond:CS src:(af4)
    if (G.sr.check_condition(Condition::CS)) {
      Faf4();
      goto end;
    }
    // 000c42: Bcc cond:True src:(b6a)
    Fb6a();
    goto end;

  Lc46:;
    // 000c46: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000c4a: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000c4e: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000c50: Bcc cond:CS src:(b30)
    if (G.sr.check_condition(Condition::CS)) {
      Fb30();
      goto end;
    }
    // 000c54: Bcc cond:True src:(ba6)
    Fba6();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc58()
  {
    _log_call(__func__);

    // 000c58: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000c5a: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000c5c: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000c60: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000c64: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000c68: ADD.L dst:D0 src:(A6.L)+1c
    G.d[0].l(ADD<L>(G.d[0].l(), G.io->l(G.a[6] + 0x1c)));
    // 000c6c: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000c70: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000c74: ADD.L dst:D1 src:(A6.L)+18
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[6] + 0x18)));
    // 000c78: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000c7c: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000c80: LSR.L dst:D2 src:#1
    G.d[2].l(LSR<L>(G.d[2].l(), 1));
    // 000c82: ADD.L dst:D2 src:D1
    G.d[2].l(ADD<L>(G.d[2].l(), G.d[1].l()));
    // 000c84: MOVE.L dst:D1 src:(A0.L)+1c
    G.d[1].l(G.io->l(G.a[0] + 0x1c));
    // 000c88: ADD.L dst:D1 src:(A0.L)+14
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[0] + 0x14)));
    // 000c8c: CMP.L dst:D2 src:D1
    CMP<L>(G.d[2].l(), G.d[1].l());
    // 000c8e: Bcc cond:LT src:(95c)
    if (G.sr.check_condition(Condition::LT)) {
      _m->clear_d0();
      goto end;
    }
    // 000c92: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000c94: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc96()
  {
    _log_call(__func__);

    // 000c96: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000c98: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000c9c: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000ca0: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000ca4: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000ca8: SUB.L dst:D0 src:(A6.L)+1c
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[6] + 0x1c)));
    // 000cac: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000cae: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000cb2: ADD.L dst:D1 src:(A6.L)+18
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[6] + 0x18)));
    // 000cb6: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000cba: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000cbe: LSR.L dst:D2 src:#1
    G.d[2].l(LSR<L>(G.d[2].l(), 1));
    // 000cc0: SUB.L dst:D1 src:D2
    G.d[1].l(SUB<L>(G.d[1].l(), G.d[2].l()));
    // 000cc2: MOVE.L dst:D0 src:(A0.L)+1c
    G.d[0].l(G.io->l(G.a[0] + 0x1c));
    // 000cc6: SUB.L dst:D0 src:(A0.L)+10
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[0] + 0x10)));
    // 000cca: CMP.L dst:D0 src:D1
    CMP<L>(G.d[0].l(), G.d[1].l());
    // 000ccc: Bcc cond:GT src:(95c)
    if (G.sr.check_condition(Condition::GT)) {
      _m->clear_d0();
      goto end;
    }
    // 000cd0: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000cd2: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fcd4()
  {
    _log_call(__func__);

    // 000cd4: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000cd6: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000cd8: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000cdc: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000ce0: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000ce4: ADD.L dst:D0 src:(A6.L)+1c
    G.d[0].l(ADD<L>(G.d[0].l(), G.io->l(G.a[6] + 0x1c)));
    // 000ce8: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000cec: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000cf0: SUB.L dst:D1 src:(A6.L)+18
    G.d[1].l(SUB<L>(G.d[1].l(), G.io->l(G.a[6] + 0x18)));
    // 000cf4: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000cf8: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000cfc: LSR.L dst:D2 src:#1
    G.d[2].l(LSR<L>(G.d[2].l(), 1));
    // 000cfe: SUB.L dst:D1 src:D2
    G.d[1].l(SUB<L>(G.d[1].l(), G.d[2].l()));
    // 000d00: MOVE.L dst:D0 src:(A0.L)+18
    G.d[0].l(G.io->l(G.a[0] + 0x18));
    // 000d04: SUB.L dst:D0 src:(A0.L)+14
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[0] + 0x14)));
    // 000d08: CMP.L dst:D0 src:D1
    CMP<L>(G.d[0].l(), G.d[1].l());
    // 000d0a: Bcc cond:LT src:(95c)
    if (G.sr.check_condition(Condition::LT)) {
      _m->clear_d0();
      goto end;
    }
    // 000d0e: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000d10: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd12()
  {
    _log_call(__func__);

    // 000d12: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000d14: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000d18: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000d1c: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000d20: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000d24: SUB.L dst:D0 src:(A6.L)+1c
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[6] + 0x1c)));
    // 000d28: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000d2a: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000d2e: SUB.L dst:D1 src:(A6.L)+18
    G.d[1].l(SUB<L>(G.d[1].l(), G.io->l(G.a[6] + 0x18)));
    // 000d32: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000d36: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000d3a: LSR.L dst:D2 src:#1
    G.d[2].l(LSR<L>(G.d[2].l(), 1));
    // 000d3c: ADD.L dst:D2 src:D1
    G.d[2].l(ADD<L>(G.d[2].l(), G.d[1].l()));
    // 000d3e: MOVE.L dst:D1 src:(A0.L)+18
    G.d[1].l(G.io->l(G.a[0] + 0x18));
    // 000d42: ADD.L dst:D1 src:(A0.L)+10
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[0] + 0x10)));
    // 000d46: CMP.L dst:D2 src:D1
    CMP<L>(G.d[2].l(), G.d[1].l());
    // 000d48: Bcc cond:GT src:(95c)
    if (G.sr.check_condition(Condition::GT)) {
      _m->clear_d0();
      goto end;
    }
    // 000d4c: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000d4e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd50()
  {
    _log_call(__func__);

    // 000d50: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000d54: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000d58: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000d5a: Bcc cond:CS src:(c58)
    if (G.sr.check_condition(Condition::CS)) {
      Fc58();
      goto end;
    }
    // 000d5e: Bcc cond:True src:(c96)
    Fc96();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd62()
  {
    _log_call(__func__);

    // 000d62: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000d66: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000d6a: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000d6c: Bcc cond:CS src:(c58)
    if (G.sr.check_condition(Condition::CS)) {
      Fc58();
      goto end;
    }
    // 000d70: Bcc cond:True src:(cd4)
    Fcd4();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd74()
  {
    _log_call(__func__);

    // 000d74: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000d78: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000d7c: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000d7e: Bcc cond:CS src:(cd4)
    if (G.sr.check_condition(Condition::CS)) {
      Fcd4();
      goto end;
    }
    // 000d82: Bcc cond:True src:(d12)
    Fd12();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd86()
  {
    _log_call(__func__);

    // 000d86: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000d8a: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000d8e: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000d90: Bcc cond:CS src:(c96)
    if (G.sr.check_condition(Condition::CS)) {
      Fc96();
      goto end;
    }
    // 000d94: Bcc cond:True src:(d12)
    Fd12();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd98()
  {
    _log_call(__func__);

    // 000d98: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000d9c: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000da0: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000da2: Bcc cond:CC src:(db6)
    if (G.sr.check_condition(Condition::CC)) { goto Ldb6; }
    // 000da4: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000da8: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000dac: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000dae: Bcc cond:CS src:(c58)
    if (G.sr.check_condition(Condition::CS)) {
      Fc58();
      goto end;
    }
    // 000db2: Bcc cond:True src:(cd4)
    Fcd4();
    goto end;

  Ldb6:;
    // 000db6: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000dba: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000dbe: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000dc0: Bcc cond:CS src:(c96)
    if (G.sr.check_condition(Condition::CS)) {
      Fc96();
      goto end;
    }
    // 000dc4: Bcc cond:True src:(d12)
    Fd12();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fdc8()
  {
    _log_call(__func__);

    // 000dc8: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000dca: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000dcc: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000dd0: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000dd4: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000dd8: ADD.L dst:D0 src:(A6.L)+18
    G.d[0].l(ADD<L>(G.d[0].l(), G.io->l(G.a[6] + 0x18)));
    // 000ddc: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000de0: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000de4: ADD.L dst:D1 src:(A6.L)+1c
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[6] + 0x1c)));
    // 000de8: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000dec: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000df0: ASL.L dst:D2 src:#1
    G.d[2].l(ASL<L>(G.d[2].l(), 1));
    // 000df2: ADD.L dst:D2 src:D1
    G.d[2].l(ADD<L>(G.d[2].l(), G.d[1].l()));
    // 000df4: MOVE.L dst:D1 src:(A0.L)+1c
    G.d[1].l(G.io->l(G.a[0] + 0x1c));
    // 000df8: ADD.L dst:D1 src:(A0.L)+c
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[0] + 12)));
    // 000dfc: CMP.L dst:D2 src:D1
    CMP<L>(G.d[2].l(), G.d[1].l());
    // 000dfe: Bcc cond:LT src:(95c)
    if (G.sr.check_condition(Condition::LT)) {
      _m->clear_d0();
      goto end;
    }
    // 000e02: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000e04: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe06()
  {
    _log_call(__func__);

    // 000e06: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000e08: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000e0c: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000e10: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000e14: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000e18: SUB.L dst:D0 src:(A6.L)+18
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[6] + 0x18)));
    // 000e1c: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000e1e: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000e22: ADD.L dst:D1 src:(A6.L)+1c
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[6] + 0x1c)));
    // 000e26: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000e2a: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000e2e: ASL.L dst:D2 src:#1
    G.d[2].l(ASL<L>(G.d[2].l(), 1));
    // 000e30: SUB.L dst:D1 src:D2
    G.d[1].l(SUB<L>(G.d[1].l(), G.d[2].l()));
    // 000e32: MOVE.L dst:D0 src:(A0.L)+1c
    G.d[0].l(G.io->l(G.a[0] + 0x1c));
    // 000e36: SUB.L dst:D0 src:(A0.L)+8
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[0] + 8)));
    // 000e3a: CMP.L dst:D0 src:D1
    CMP<L>(G.d[0].l(), G.d[1].l());
    // 000e3c: Bcc cond:GT src:(95c)
    if (G.sr.check_condition(Condition::GT)) {
      _m->clear_d0();
      goto end;
    }
    // 000e40: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000e42: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe44()
  {
    _log_call(__func__);

    // 000e44: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000e46: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000e48: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000e4c: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000e50: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000e54: ADD.L dst:D0 src:(A6.L)+18
    G.d[0].l(ADD<L>(G.d[0].l(), G.io->l(G.a[6] + 0x18)));
    // 000e58: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000e5c: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000e60: SUB.L dst:D1 src:(A6.L)+1c
    G.d[1].l(SUB<L>(G.d[1].l(), G.io->l(G.a[6] + 0x1c)));
    // 000e64: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000e68: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000e6c: ASL.L dst:D2 src:#1
    G.d[2].l(ASL<L>(G.d[2].l(), 1));
    // 000e6e: SUB.L dst:D1 src:D2
    G.d[1].l(SUB<L>(G.d[1].l(), G.d[2].l()));
    // 000e70: MOVE.L dst:D0 src:(A0.L)+18
    G.d[0].l(G.io->l(G.a[0] + 0x18));
    // 000e74: SUB.L dst:D0 src:(A0.L)+c
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[0] + 12)));
    // 000e78: CMP.L dst:D0 src:D1
    CMP<L>(G.d[0].l(), G.d[1].l());
    // 000e7a: Bcc cond:LT src:(95c)
    if (G.sr.check_condition(Condition::LT)) {
      _m->clear_d0();
      goto end;
    }
    // 000e7e: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000e80: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe82()
  {
    _log_call(__func__);

    // 000e82: MOVE.L dst:D2 src:D0
    G.d[2].l(G.d[0].l());
    // 000e84: CMP.L dst:D0 src:(A0.L)+4
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 4));
    // 000e88: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000e8c: CMP.L dst:D1 src:(A0.L)+1c
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x1c));
    // 000e90: Bcc cond:CS src:(95c)
    if (G.sr.check_condition(Condition::CS)) {
      _m->clear_d0();
      goto end;
    }
    // 000e94: SUB.L dst:D0 src:(A6.L)+18
    G.d[0].l(SUB<L>(G.d[0].l(), G.io->l(G.a[6] + 0x18)));
    // 000e98: CMP.L dst:D0 src:(A0)
    CMP<L>(G.d[0].l(), G.io->l(G.a[0]));
    // 000e9a: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000e9e: SUB.L dst:D1 src:(A6.L)+1c
    G.d[1].l(SUB<L>(G.d[1].l(), G.io->l(G.a[6] + 0x1c)));
    // 000ea2: CMP.L dst:D1 src:(A0.L)+18
    CMP<L>(G.d[1].l(), G.io->l(G.a[0] + 0x18));
    // 000ea6: Bcc cond:CC src:(95c)
    if (G.sr.check_condition(Condition::CC)) {
      _m->clear_d0();
      goto end;
    }
    // 000eaa: ASL.L dst:D2 src:#1
    G.d[2].l(ASL<L>(G.d[2].l(), 1));
    // 000eac: ADD.L dst:D2 src:D1
    G.d[2].l(ADD<L>(G.d[2].l(), G.d[1].l()));
    // 000eae: MOVE.L dst:D1 src:(A0.L)+18
    G.d[1].l(G.io->l(G.a[0] + 0x18));
    // 000eb2: ADD.L dst:D1 src:(A0.L)+8
    G.d[1].l(ADD<L>(G.d[1].l(), G.io->l(G.a[0] + 8)));
    // 000eb6: CMP.L dst:D2 src:D1
    CMP<L>(G.d[2].l(), G.d[1].l());
    // 000eb8: Bcc cond:GT src:(95c)
    if (G.sr.check_condition(Condition::GT)) {
      _m->clear_d0();
      goto end;
    }
    // 000ebc: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 000ebe: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fec0()
  {
    _log_call(__func__);

    // 000ec0: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000ec4: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000ec8: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000eca: Bcc cond:CS src:(dc8)
    if (G.sr.check_condition(Condition::CS)) {
      Fdc8();
      goto end;
    }
    // 000ece: Bcc cond:True src:(e06)
    Fe06();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fed2()
  {
    _log_call(__func__);

    // 000ed2: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000ed6: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000eda: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000edc: Bcc cond:CS src:(dc8)
    if (G.sr.check_condition(Condition::CS)) {
      Fdc8();
      goto end;
    }
    // 000ee0: Bcc cond:True src:(e44)
    Fe44();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fee4()
  {
    _log_call(__func__);

    // 000ee4: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000ee8: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000eec: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000eee: Bcc cond:CS src:(e44)
    if (G.sr.check_condition(Condition::CS)) {
      Fe44();
      goto end;
    }
    // 000ef2: Bcc cond:True src:(e82)
    Fe82();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fef6()
  {
    _log_call(__func__);

    // 000ef6: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000efa: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000efe: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000f00: Bcc cond:CS src:(e06)
    if (G.sr.check_condition(Condition::CS)) {
      Fe06();
      goto end;
    }
    // 000f04: Bcc cond:True src:(e82)
    Fe82();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Ff08()
  {
    _log_call(__func__);

    // 000f08: MOVE.W dst:D2 src:(A5.L)+14
    G.d[2].w(G.io->w(G.a[5] + 0x14));
    // 000f0c: ADDI.W dst:D2 src:#3000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x3000));
    // 000f10: CMP.W dst:D0 src:D2
    CMP<W>(G.d[0].w(), G.d[2].w());
    // 000f12: Bcc cond:CC src:(f26)
    if (G.sr.check_condition(Condition::CC)) { goto Lf26; }
    // 000f14: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000f18: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000f1c: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000f1e: Bcc cond:CS src:(dc8)
    if (G.sr.check_condition(Condition::CS)) {
      Fdc8();
      goto end;
    }
    // 000f22: Bcc cond:True src:(e44)
    Fe44();
    goto end;

  Lf26:;
    // 000f26: MOVE.W dst:D2 src:(A5.L)+16
    G.d[2].w(G.io->w(G.a[5] + 0x16));
    // 000f2a: ADDI.W dst:D2 src:#4800
    G.d[2].w(ADD<W>(G.d[2].w(), 0x4800));
    // 000f2e: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 000f30: Bcc cond:CS src:(e06)
    if (G.sr.check_condition(Condition::CS)) {
      Fe06();
      goto end;
    }
    // 000f34: Bcc cond:True src:(e82)
    Fe82();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Ff38()
  {
    _log_call(__func__);

    // 000f38: BSR src:(5bf4)
    _m->clear_sprites();
    // 000f3c: BSR src:(6442)
    _m->clear_all_planes();
    // 000f40: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 000f44: MOVE.L dst:D1 src:#12292
    G.d[1].l(0x12292);
    // 000f4a: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 000f4e: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 000f52: LEA.L dst:A0 src:(205c)
    G.a[0] = 0x205c;
    // 000f58: BSR src:(1ed8)
    F1ed8();
    // 000f5c: LEA.L dst:A0 src:(2232)
    G.a[0] = 0x2232;
    // 000f62: MOVE.W dst:D0 src:#191e
    G.d[0].w(UCC(0x191e));
    // 000f66: BSR src:(1eda)
    _m->copy_something_to_vdp(G.a[0], G.d[0].w());

  Lf6a:;
    // 000f6a: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 000f6c: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 000f70: BTST.B dst:(ff0071) src:#7
    BTST<B>(G.io->b(0xff0071), 7);
    // 000f78: Bcc cond:EQ src:(fa8)
    if (G.sr.check_condition(Condition::EQ)) { goto Lfa8; }
    // 000f7a: MOVE.W dst:D0 src:(CONTROLLER_STATE2)
    G.d[0].w(UCC(G.io->w(CONTROLLER_STATE2)));
    // 000f80: BTST.B dst:(ff0073) src:#7
    BTST<B>(G.io->b(0xff0073), 7);
    // 000f88: Bcc cond:NE src:(fa8)
    if (G.sr.check_condition(Condition::NE)) { goto Lfa8; }
    // 000f8a: MOVE.L dst:(VDP_CTRL1) src:#181a0000
    G.io->l(VDP_CTRL1, 0x181a0000);
    // 000f94: MOVE.W dst:D0 src:(VDP_DATA1)
    G.d[0].w(UCC(G.io->w(VDP_DATA1)));
    // 000f9a: CMP.W dst:D0 src:#83df
    CMP<W>(G.d[0].w(), 0x83df);
    // 000f9e: Bcc cond:NE src:(fec)
    if (G.sr.check_condition(Condition::NE)) { goto Lfec; }
    // 000fa0: BSR src:(65a4)
    F65a4();
    // 000fa4: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 000fa6: RTS
    goto end;

  Lfa8:;
    // 000fa8: MOVE.W dst:D0 src:#83df
    G.d[0].w(0x83df);
    // 000fac: MOVE.W dst:D1 src:#83e1
    G.d[1].w(UCC(0x83e1));
    // 000fb0: BTST.B dst:(ff0071) src:#0
    BTST<B>(G.io->b(0xff0071), 0);
    // 000fb8: Bcc cond:NE src:(fc8)
    if (G.sr.check_condition(Condition::NE)) { goto Lfc8; }
    // 000fba: BTST.B dst:(ff0071) src:#1
    BTST<B>(G.io->b(0xff0071), 1);
    // 000fc2: Bcc cond:EQ src:(f6a)
    if (G.sr.check_condition(Condition::EQ)) { goto Lf6a; }
    // 000fc6: EXG.L dst:D0 src:D1
    tmp_L = G.d[1].l();
    G.d[1].l(G.d[0].l());
    G.d[0].l(tmp_L);

  Lfc8:;
    // 000fc8: MOVE.L dst:(VDP_CTRL1) src:#581a0000
    G.io->l(VDP_CTRL1, 0x581a0000);
    // 000fd2: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 000fd8: MOVE.L dst:(VDP_CTRL1) src:#591a0000
    G.io->l(VDP_CTRL1, 0x591a0000);
    // 000fe2: MOVE.W dst:(VDP_DATA1) src:D1
    G.io->w(VDP_DATA1, UCC(G.d[1].w()));
    // 000fe8: Bcc cond:True src:(f6a)
    goto Lf6a;

  Lfec:;
    // 000fec: BSR src:(6442)
    _m->clear_all_planes();
    // 000ff0: LEA.L dst:A0 src:(2232)
    G.a[0] = 0x2232;
    // 000ff6: MOVE.W dst:D0 src:#1220
    G.d[0].w(UCC(0x1220));
    // 000ffa: BSR src:(1eda)
    _m->copy_something_to_vdp(G.a[0], G.d[0].w());
    // 000ffe: LEA.L dst:A0 src:(1ff4)
    G.a[0] = 0x1ff4;
    // 001004: BSR src:(1ed8)
    F1ed8();
    // 001008: LEA.L dst:A0 src:(2006)
    G.a[0] = 0x2006;
    // 00100e: BSR src:(1ed8)
    F1ed8();
    // 001012: LEA.L dst:A0 src:(2016)
    G.a[0] = 0x2016;
    // 001018: BSR src:(1ed8)
    F1ed8();
    // 00101c: LEA.L dst:A0 src:(202e)
    G.a[0] = 0x202e;
    // 001022: BSR src:(1ed8)
    F1ed8();
    // 001026: LEA.L dst:A0 src:(203c)
    G.a[0] = 0x203c;
    // 00102c: BSR src:(1ed8)
    F1ed8();
    // 001030: MOVEQ.L dst:D7 src:#0
    G.d[7].l(0);
    // 001032: MOVEQ.L dst:D6 src:#0
    G.d[6].l(UCC(0));

  L1034:;
    // 001034: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 001036: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 00103a: TST.W src:(CONTROLLER_STATE1)
    TST<W>(G.io->w(CONTROLLER_STATE1));
    // 001040: Bcc cond:NE src:(1082)
    if (G.sr.check_condition(Condition::NE)) { goto L1082; }
    // 001042: ADDQ.W dst:D6 src:#1
    G.d[6].w(ADD<W>(G.d[6].w(), 1));
    // 001044: CMPI.W dst:(ff000a) src:#1
    CMP<W>(G.io->w(0xff000a), 1);
    // 00104c: Bcc cond:NE src:(1144)
    if (G.sr.check_condition(Condition::NE)) { goto L1144; }
    // 001050: CMP.W dst:D6 src:#e10
    CMP<W>(G.d[6].w(), 0xe10);
    // 001054: Bcc cond:CS src:(1144)
    if (G.sr.check_condition(Condition::CS)) { goto L1144; }
    // 001058: MOVE.W dst:(ff000a) src:#2
    G.io->w(0xff000a, UCC(2));
    // 001060: LEA.L dst:A0 src:(226c)
    G.a[0] = 0x226c;
    // 001066: MOVE.W dst:D0 src:#1430
    G.d[0].w(UCC(0x1430));
    // 00106a: BSR src:(1eda)
    _m->copy_something_to_vdp(G.a[0], G.d[0].w());
    // 00106e: BSR src:(65a4)
    F65a4();
    // 001072: MOVEQ.L dst:D0 src:#1c
    G.d[0].l(UCC(0x1c));
    // 001074: BSR src:(654c)
    F654c();
    // 001078: MOVEQ.L dst:D0 src:#20
    G.d[0].l(UCC(0x20));
    // 00107a: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 00107e: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 001080: RTS
    goto end;

  L1082:;
    // 001082: MOVEQ.L dst:D6 src:#0
    G.d[6].l(UCC(0));
    // 001084: BTST.B dst:(ff0071) src:#7
    BTST<B>(G.io->b(0xff0071), 7);
    // 00108c: Bcc cond:EQ src:(109a)
    if (G.sr.check_condition(Condition::EQ)) { goto L109a; }
    // 00108e: BTST.B dst:(ff0073) src:#7
    BTST<B>(G.io->b(0xff0073), 7);
    // 001096: Bcc cond:EQ src:(10fa)
    if (G.sr.check_condition(Condition::EQ)) { goto L10fa; }

  L109a:;
    // 00109a: BTST.B dst:(ff0071) src:#0
    BTST<B>(G.io->b(0xff0071), 0);
    // 0010a2: Bcc cond:EQ src:(10bc)
    if (G.sr.check_condition(Condition::EQ)) { goto L10bc; }
    // 0010a4: BTST.B dst:(ff0073) src:#0
    BTST<B>(G.io->b(0xff0073), 0);
    // 0010ac: Bcc cond:NE src:(10bc)
    if (G.sr.check_condition(Condition::NE)) { goto L10bc; }
    // 0010ae: SUBQ.W dst:D7 src:#1
    G.d[7].w(SUB<W>(G.d[7].w(), 1));
    // 0010b0: Bcc cond:CC src:(1144)
    if (G.sr.check_condition(Condition::CC)) { goto L1144; }
    // 0010b4: MOVE.W dst:D7 src:#4
    G.d[7].w(UCC(4));
    // 0010b8: Bcc cond:True src:(1144)
    goto L1144;

  L10bc:;
    // 0010bc: BTST.B dst:(ff0071) src:#1
    BTST<B>(G.io->b(0xff0071), 1);
    // 0010c4: Bcc cond:EQ src:(10dc)
    if (G.sr.check_condition(Condition::EQ)) { goto L10dc; }
    // 0010c6: BTST.B dst:(ff0073) src:#1
    BTST<B>(G.io->b(0xff0073), 1);
    // 0010ce: Bcc cond:NE src:(10dc)
    if (G.sr.check_condition(Condition::NE)) { goto L10dc; }
    // 0010d0: ADDQ.W dst:D7 src:#1
    G.d[7].w(ADD<W>(G.d[7].w(), 1));
    // 0010d2: CMP.W dst:D7 src:#4
    CMP<W>(G.d[7].w(), 4);
    // 0010d6: Bcc cond:LS src:(1144)
    if (G.sr.check_condition(Condition::LS)) { goto L1144; }
    // 0010d8: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 0010da: Bcc cond:True src:(1144)
    goto L1144;

  L10dc:;
    // 0010dc: CMP.W dst:D7 src:#4
    CMP<W>(G.d[7].w(), 4);
    // 0010e0: Bcc cond:CS src:(1102)
    if (G.sr.check_condition(Condition::CS)) { goto L1102; }
    // 0010e2: MOVE.W dst:D0 src:(CONTROLLER_STATE1)
    G.d[0].w(G.io->w(CONTROLLER_STATE1));
    // 0010e8: AND.W dst:D0 src:#70
    G.d[0].w(AND<W>(G.d[0].w(), 0x70));
    // 0010ec: Bcc cond:EQ src:(1102)
    if (G.sr.check_condition(Condition::EQ)) { goto L1102; }
    // 0010ee: MOVE.W dst:D0 src:(CONTROLLER_STATE2)
    G.d[0].w(G.io->w(CONTROLLER_STATE2));
    // 0010f4: AND.W dst:D0 src:#70
    G.d[0].w(AND<W>(G.d[0].w(), 0x70));
    // 0010f8: Bcc cond:NE src:(1102)
    if (G.sr.check_condition(Condition::NE)) { goto L1102; }

  L10fa:;
    // 0010fa: BSR src:(65a4)
    F65a4();
    // 0010fe: MOVEQ.L dst:D0 src:#ff
    G.d[0].l(UCC(0xff));
    // 001100: RTS
    goto end;

  L1102:;
    // 001102: LEA.L dst:A0 src:(ff000a)
    G.a[0] = 0xff000a;
    // 001108: MOVE.W dst:D0 src:D7
    G.d[0].w(G.d[7].w());
    // 00110a: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00110c: BTST.B dst:(ff0071) src:#2
    BTST<B>(G.io->b(0xff0071), 2);
    // 001114: Bcc cond:EQ src:(1128)
    if (G.sr.check_condition(Condition::EQ)) { goto L1128; }
    // 001116: BTST.B dst:(ff0073) src:#2
    BTST<B>(G.io->b(0xff0073), 2);
    // 00111e: Bcc cond:NE src:(1128)
    if (G.sr.check_condition(Condition::NE)) { goto L1128; }
    // 001120: SUBQ.W dst:(A0,D0.W)+0 src:#1
    G.io->w(G.a[0] + G.d[0].w(), SUB<W>(G.io->w(G.a[0] + G.d[0].w()), 1));
    // 001124: BSR src:(65a4)
    F65a4();

  L1128:;
    // 001128: BTST.B dst:(ff0071) src:#3
    BTST<B>(G.io->b(0xff0071), 3);
    // 001130: Bcc cond:EQ src:(1144)
    if (G.sr.check_condition(Condition::EQ)) { goto L1144; }
    // 001132: BTST.B dst:(ff0073) src:#3
    BTST<B>(G.io->b(0xff0073), 3);
    // 00113a: Bcc cond:NE src:(1144)
    if (G.sr.check_condition(Condition::NE)) { goto L1144; }
    // 00113c: ADDQ.W dst:(A0,D0.W)+0 src:#1
    G.io->w(G.a[0] + G.d[0].w(), ADD<W>(G.io->w(G.a[0] + G.d[0].w()), 1));
    // 001140: BSR src:(65a4)
    F65a4();

  L1144:;
    // 001144: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 001148: MOVE.W dst:D1 src:#1414
    G.d[1].w(0x1414);
    // 00114c: MOVEQ.L dst:D2 src:#0
    G.d[2].l(0);
    // 00114e: MOVEQ.L dst:D3 src:#8
    G.d[3].l(UCC(8));
    // 001150: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 001154: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 001156: MOVE.W dst:D0 src:D7
    G.d[0].w(UCC(G.d[7].w()));
    // 001158: LSL.W dst:D0 src:#8
    G.d[0].w(LSL<W>(G.d[0].w(), 8));
    // 00115a: ADD.W dst:D0 src:#1414
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1414));
    // 00115e: SWAP.L dst:D0
    G.d[0].l(SWAP(G.d[0].l()));
    // 001160: OR.L dst:D0 src:#40000000
    G.d[0].l(OR<L>(G.d[0].l(), 0x40000000));
    // 001166: MOVE.L dst:(VDP_CTRL1) src:D0
    G.io->l(VDP_CTRL1, G.d[0].l());
    // 00116c: MOVE.W dst:(VDP_DATA1) src:#83df
    G.io->w(VDP_DATA1, UCC(0x83df));
    // 001174: LEA.L dst:A0 src:(2242)
    G.a[0] = 0x2242;
    // 00117a: ANDI.W dst:(ff000a) src:#1
    G.io->w(0xff000a, AND<W>(G.io->w(0xff000a), 1));
    // 001182: Bcc cond:EQ src:(118a)
    if (G.sr.check_condition(Condition::EQ)) { goto L118a; }
    // 001184: LEA.L dst:A0 src:(224c)
    G.a[0] = 0x224c;

  L118a:;
    // 00118a: MOVE.W dst:D0 src:#1430
    G.d[0].w(UCC(0x1430));
    // 00118e: BSR src:(1eda)
    _m->copy_something_to_vdp(G.a[0], G.d[0].w());
    // 001192: ANDI.W dst:(ff000c) src:#3
    G.io->w(0xff000c, AND<W>(G.io->w(0xff000c), 3));
    // 00119a: MOVE.W dst:D0 src:(ff000c)
    G.d[0].w(G.io->w(0xff000c));
    // 0011a0: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 0011a2: LEA.L dst:A0 src:(1c2e)
    G.a[0] = 0x1c2e;
    // 0011a8: MOVE.W dst:D0 src:(A0,D0.W)+0
    G.d[0].w(G.io->w(G.a[0] + G.d[0].w()));
    // 0011ac: ADD.W dst:D0 src:#83b4
    G.d[0].w(ADD<W>(G.d[0].w(), 0x83b4));
    // 0011b0: MOVE.L dst:(VDP_CTRL1) src:#55320000
    G.io->l(VDP_CTRL1, 0x55320000);
    // 0011ba: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, UCC(G.d[0].w()));
    // 0011c0: CMPI.W dst:(ff000e) src:#1d
    CMP<W>(G.io->w(0xff000e), 0x1d);
    // 0011c8: Bcc cond:LS src:(11d0)
    if (G.sr.check_condition(Condition::LS)) { goto L11d0; }
    // 0011ca: CLR.W dst:(ff000e)
    G.io->w(0xff000e, UCC(0));

  L11d0:;
    // 0011d0: MOVE.W dst:D0 src:(ff000e)
    G.d[0].w(G.io->w(0xff000e));
    // 0011d6: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 0011d8: MOVE.W dst:D2 src:#83b4
    G.d[2].w(UCC(0x83b4));

  L11dc:;
    // 0011dc: SUB.W dst:D0 src:#a
    G.d[0].w(SUB<W>(G.d[0].w(), 10));
    // 0011e0: Bcc cond:CS src:(11e8)
    if (G.sr.check_condition(Condition::CS)) { goto L11e8; }
    // 0011e2: ADDQ.W dst:D2 src:#1
    G.d[2].w(ADD<W>(G.d[2].w(), 1));
    // 0011e4: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 0011e6: Bcc cond:True src:(11dc)
    goto L11dc;

  L11e8:;
    // 0011e8: MOVE.L dst:(VDP_CTRL1) src:#56300000
    G.io->l(VDP_CTRL1, 0x56300000);
    // 0011f2: MOVE.W dst:(VDP_DATA1) src:D2
    G.io->w(VDP_DATA1, G.d[2].w());
    // 0011f8: ADD.W dst:D1 src:#83b4
    G.d[1].w(ADD<W>(G.d[1].w(), 0x83b4));
    // 0011fc: MOVE.W dst:(VDP_DATA1) src:D1
    G.io->w(VDP_DATA1, UCC(G.d[1].w()));
    // 001202: CMP.W dst:D7 src:#2
    CMP<W>(G.d[7].w(), 2);
    // 001206: Bcc cond:EQ src:(120e)
    if (G.sr.check_condition(Condition::EQ)) { goto L120e; }
    // 001208: BSR src:(65a4)
    F65a4();
    // 00120c: Bcc cond:True src:(1260)
    goto L1260;

  L120e:;
    // 00120e: BTST.B dst:(ff0071) src:#6
    BTST<B>(G.io->b(0xff0071), 6);
    // 001216: Bcc cond:EQ src:(1224)
    if (G.sr.check_condition(Condition::EQ)) { goto L1224; }
    // 001218: BTST.B dst:(ff0073) src:#6
    BTST<B>(G.io->b(0xff0073), 6);
    // 001220: Bcc cond:NE src:(1224)
    if (G.sr.check_condition(Condition::NE)) { goto L1224; }
    // 001222: Bcc cond:True src:(1238)
    goto L1238;

  L1224:;
    // 001224: BTST.B dst:(ff0071) src:#4
    BTST<B>(G.io->b(0xff0071), 4);
    // 00122c: Bcc cond:EQ src:(1248)
    if (G.sr.check_condition(Condition::EQ)) { goto L1248; }
    // 00122e: BTST.B dst:(ff0073) src:#4
    BTST<B>(G.io->b(0xff0073), 4);
    // 001236: Bcc cond:NE src:(1248)
    if (G.sr.check_condition(Condition::NE)) { goto L1248; }

  L1238:;
    // 001238: BSR src:(65a4)
    F65a4();
    // 00123c: MOVE.W dst:D0 src:(ff000e)
    G.d[0].w(UCC(G.io->w(0xff000e)));
    // 001242: BSR src:(654c)
    F654c();
    // 001246: Bcc cond:True src:(1260)
    goto L1260;

  L1248:;
    // 001248: BTST.B dst:(ff0071) src:#5
    BTST<B>(G.io->b(0xff0071), 5);
    // 001250: Bcc cond:EQ src:(1260)
    if (G.sr.check_condition(Condition::EQ)) { goto L1260; }
    // 001252: BTST.B dst:(ff0073) src:#5
    BTST<B>(G.io->b(0xff0073), 5);
    // 00125a: Bcc cond:NE src:(1260)
    if (G.sr.check_condition(Condition::NE)) { goto L1260; }
    // 00125c: BSR src:(65a4)
    F65a4();

  L1260:;
    // 001260: LEA.L dst:A0 src:(2052)
    G.a[0] = 0x2052;
    // 001266: ANDI.W dst:(ff0010) src:#1
    G.io->w(0xff0010, AND<W>(G.io->w(0xff0010), 1));
    // 00126e: Bcc cond:EQ src:(1276)
    if (G.sr.check_condition(Condition::EQ)) { goto L1276; }
    // 001270: LEA.L dst:A0 src:(2048)
    G.a[0] = 0x2048;

  L1276:;
    // 001276: BSR src:(1ed8)
    F1ed8();
    // 00127a: Bcc cond:True src:(1034)
    goto L1034;

  end:
    _log_ret(__func__);
  }

  void F127e()
  {
    _log_call(__func__);

    // 00127e: TST.W src:(ff0004)
    TST<W>(G.io->w(0xff0004));
    // 001284: Bcc cond:EQ src:(1338)
    if (G.sr.check_condition(Condition::EQ)) { goto L1338; }
    // 001288: SUBQ.W dst:(ff0004) src:#1
    G.io->w(0xff0004, SUB<W>(G.io->w(0xff0004), 1));
    // 00128e: BTST.B dst:(ff0001) src:#1
    BTST<B>(G.io->b(0xff0001), 1);
    // 001296: Bcc cond:EQ src:(12b4)
    if (G.sr.check_condition(Condition::EQ)) { goto L12b4; }
    // 001298: CMPI.W dst:(SOME_STATE_CONTROL) src:#4
    CMP<W>(G.io->w(SOME_STATE_CONTROL), 4);
    // 0012a0: Bcc cond:EQ src:(1760)
    if (G.sr.check_condition(Condition::EQ)) { goto L1760; }
    // 0012a4: CMPI.W dst:(SOME_STATE_CONTROL) src:#2
    CMP<W>(G.io->w(SOME_STATE_CONTROL), 2);
    // 0012ac: Bcc cond:EQ src:(144c)
    if (G.sr.check_condition(Condition::EQ)) { goto L144c; }
    // 0012b0: Bcc cond:True src:(13be)
    goto L13be;

  L12b4:;
    // 0012b4: CMPI.W dst:(SOME_STATE_CONTROL) src:#1
    CMP<W>(G.io->w(SOME_STATE_CONTROL), 1);
    // 0012bc: Bcc cond:NE src:(12fa)
    if (G.sr.check_condition(Condition::NE)) { goto L12fa; }
    // 0012be: MOVE.W dst:D1 src:(ff0004)
    G.d[1].w(G.io->w(0xff0004));
    // 0012c4: AND.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 0012c8: Bcc cond:EQ src:(12cc)
    if (G.sr.check_condition(Condition::EQ)) { goto L12cc; }
    // 0012ca: RTS
    goto end;

  L12cc:;
    // 0012cc: MOVE.W dst:D1 src:(ff0004)
    G.d[1].w(UCC(G.io->w(0xff0004)));
    // 0012d2: AND.L dst:D1 src:#7c
    G.d[1].l(AND<L>(G.d[1].l(), 0x7c));
    // 0012d8: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 0012da: MOVE.W dst:D0 src:#b
    G.d[0].w(11);
    // 0012de: ADD.L dst:D1 src:#122d2
    G.d[1].l(ADD<L>(G.d[1].l(), 0x122d2));
    // 0012e4: MOVE.W dst:D2 src:#24
    G.d[2].w(UCC(0x24));
    // 0012e8: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 0012ec: MOVEQ.L dst:D0 src:#14
    G.d[0].l(UCC(0x14));
    // 0012ee: TST.W src:(ff0004)
    TST<W>(G.io->w(0xff0004));
    // 0012f4: Bcc cond:EQ src:(5d9a)
    if (G.sr.check_condition(Condition::EQ)) {
      _m->vblank(G.d[0].w());
      goto end;
    }
    // 0012f8: RTS
    goto end;

  L12fa:;
    // 0012fa: CMPI.W dst:(SOME_STATE_CONTROL) src:#2
    CMP<W>(G.io->w(SOME_STATE_CONTROL), 2);
    // 001302: Bcc cond:EQ src:(1306)
    if (G.sr.check_condition(Condition::EQ)) { goto L1306; }
    // 001304: RTS
    goto end;

  L1306:;
    // 001306: SUBQ.W dst:(HSCROLL_BG) src:#1
    G.io->w(HSCROLL_BG, SUB<W>(G.io->w(HSCROLL_BG), 1));
    // 00130c: BCHG.B dst:(ff0035) src:#0
    G.io->b(0xff0035, BCHG<B>(G.io->b(0xff0035), 0));
    // 001314: BTST.B dst:(ff0005) src:#5
    BTST<B>(G.io->b(0xff0005), 5);
    // 00131c: Bcc cond:EQ src:(1328)
    if (G.sr.check_condition(Condition::EQ)) { goto L1328; }
    // 00131e: LEA.L dst:A0 src:(1ef8)
    G.a[0] = 0x1ef8;
    // 001324: Bcc cond:True src:(1ed8)
    F1ed8();
    goto end;

  L1328:;
    // 001328: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00132c: MOVE.W dst:D1 src:#1796
    G.d[1].w(0x1796);
    // 001330: MOVEQ.L dst:D2 src:#11
    G.d[2].l(0x11);
    // 001332: MOVEQ.L dst:D3 src:#0
    G.d[3].l(UCC(0));
    // 001334: Bcc cond:True src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    goto end;

  L1338:;
    // 001338: TST.W src:(SOME_STATE_CONTROL)
    TST<W>(G.io->w(SOME_STATE_CONTROL));
    // 00133e: Bcc cond:NE src:(13b4)
    if (G.sr.check_condition(Condition::NE)) { goto L13b4; }
    // 001342: BSR src:(65a4)
    F65a4();
    // 001346: BSR src:(5e08)
    _m->clear_cram();
    // 00134a: BSR src:(6442)
    _m->clear_all_planes();
    // 00134e: BSR src:(5bf4)
    _m->clear_sprites();
    // 001352: BSR src:(5fec)
    F5fec();
    // 001356: ANDI.W dst:(RAM_BEGIN) src:#c
    G.io->w(RAM_BEGIN, AND<W>(G.io->w(RAM_BEGIN), 12));
    // 00135e: BSET.B dst:(ff0001) src:#7
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 7));
    // 001366: MOVE.W dst:D0 src:#30
    G.d[0].w(0x30);
    // 00136a: MOVE.L dst:D1 src:#3c200
    G.d[1].l(0x3c200);
    // 001370: MOVE.W dst:D2 src:#1b4
    G.d[2].w(UCC(0x1b4));
    // 001374: BSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 001378: MOVE.W dst:D0 src:#21b4
    G.d[0].w(0x21b4);
    // 00137c: MOVE.W dst:D1 src:#161c
    G.d[1].w(0x161c);
    // 001380: MOVEQ.L dst:D2 src:#b
    G.d[2].l(11);
    // 001382: MOVEQ.L dst:D3 src:#3
    G.d[3].l(UCC(3));
    // 001384: BSR src:(6414)
    F6414();
    // 001388: MOVE.W dst:D0 src:#a
    G.d[0].w(UCC(10));
    // 00138c: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 001390: MOVE.L dst:(ff009a) src:#122b2
    G.io->l(0xff009a, UCC(0x122b2));
    // 00139a: BSR src:(5f28)
    F5f28();
    // 00139e: MOVE.W dst:(SOME_STATE_CONTROL) src:#1
    G.io->w(SOME_STATE_CONTROL, 1);
    // 0013a6: MOVE.W dst:(ff0004) src:#50
    G.io->w(0xff0004, 0x50);
    // 0013ae: MOVEQ.L dst:D0 src:#14
    G.d[0].l(UCC(0x14));
    // 0013b0: Bcc cond:True src:(5d9a)
    _m->vblank(G.d[0].w());
    goto end;

  L13b4:;
    // 0013b4: CMPI.W dst:(SOME_STATE_CONTROL) src:#1
    CMP<W>(G.io->w(SOME_STATE_CONTROL), 1);
    // 0013bc: Bcc cond:NE src:(13fc)
    if (G.sr.check_condition(Condition::NE)) { goto L13fc; }

  L13be:;
    // 0013be: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 0013c0: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 0013c4: MOVE.W dst:(SOME_STATE_CONTROL) src:#2
    G.io->w(SOME_STATE_CONTROL, 2);
    // 0013cc: ANDI.W dst:(RAM_BEGIN) src:#c
    G.io->w(RAM_BEGIN, AND<W>(G.io->w(RAM_BEGIN), 12));
    // 0013d4: BSET.B dst:(ff0001) src:#7
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 7));
    // 0013dc: MOVE.W dst:(ff0004) src:#200
    G.io->w(0xff0004, UCC(0x200));
    // 0013e4: BSR src:(5e08)
    _m->clear_cram();
    // 0013e8: BSR src:(5bf4)
    _m->clear_sprites();
    // 0013ec: BSR src:(5fec)
    F5fec();
    // 0013f0: BSR src:(6442)
    _m->clear_all_planes();
    // 0013f4: BSR src:(6476)
    _m->clear_window_plane();
    // 0013f8: Bcc cond:True src:(17de)
    goto L17de;

  L13fc:;
    // 0013fc: CMPI.W dst:(SOME_STATE_CONTROL) src:#2
    CMP<W>(G.io->w(SOME_STATE_CONTROL), 2);
    // 001404: Bcc cond:NE src:(15b0)
    if (G.sr.check_condition(Condition::NE)) { goto L15b0; }
    // 001408: MOVE.L dst:-(USP) src:(ff0056)
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.io->l(0xff0056)));
    // 00140e: BSR src:(1482)
    F1482();
    // 001412: MOVE.L dst:(ff0056) src:(USP)+
    G.io->l(0xff0056, UCC(G.io->l(G.a[7])));
    G.a[7] += 4;
    // 001418: MOVE.W dst:(ff0038) src:#1
    G.io->w(0xff0038, 1);
    // 001420: ADDQ.W dst:(ff0008) src:#4
    G.io->w(0xff0008, ADD<W>(G.io->w(0xff0008), 4));
    // 001426: ANDI.W dst:(ff0008) src:#4
    G.io->w(0xff0008, AND<W>(G.io->w(0xff0008), 4));
    // 00142e: LEA.L dst:A0 src:(1c36)
    G.a[0] = 0x1c36;
    // 001434: MOVE.W dst:D0 src:(ff0008)
    G.d[0].w(G.io->w(0xff0008));
    // 00143a: MOVE.L dst:A0 src:(A0,D0.W)+0
    G.a[0] = G.io->l(G.a[0] + G.d[0].w());
    // 00143e: MOVE.L dst:(ff003c) src:(A0)+
    G.io->l(0xff003c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 001444: MOVE.L dst:(ff0050) src:A0
    G.io->l(0xff0050, UCC(G.a[0]));
    // 00144a: RTS
    goto end;

  L144c:;
    // 00144c: BCLR.B dst:(ff0001) src:#7
    G.io->b(0xff0001, BCLR<B>(G.io->b(0xff0001), 7));
    // 001454: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00145c: Bcc cond:CS src:(1466)
    if (G.sr.check_condition(Condition::CS)) { goto L1466; }
    // 00145e: MOVE.W dst:(ff000a) src:#1
    G.io->w(0xff000a, UCC(1));

  L1466:;
    // 001466: BSR src:(f38)
    Ff38();
    // 00146a: TST.W src:D0
    TST<W>(G.d[0].w());
    // 00146c: Bcc cond:NE src:(13be)
    if (G.sr.check_condition(Condition::NE)) { goto L13be; }
    // 001470: BSR src:(1482)
    F1482();
    // 001474: MOVE.W dst:D0 src:#1
    G.d[0].w(1);
    // 001478: MOVE.W dst:(ff004e) src:D0
    G.io->w(0xff004e, UCC(G.d[0].w()));
    // 00147e: Bcc cond:True src:(654c)
    F654c();
    goto end;

  L15b0:;
    // 0015b0: CMPI.W dst:(SOME_STATE_CONTROL) src:#3
    CMP<W>(G.io->w(SOME_STATE_CONTROL), 3);
    // 0015b8: Bcc cond:NE src:(1716)
    if (G.sr.check_condition(Condition::NE)) { goto L1716; }
    // 0015bc: BTST.B dst:(ff0001) src:#1
    BTST<B>(G.io->b(0xff0001), 1);
    // 0015c4: Bcc cond:EQ src:(15ce)
    if (G.sr.check_condition(Condition::EQ)) { goto L15ce; }
    // 0015c6: BSR src:(164a)
    F164a();
    // 0015ca: Bcc cond:True src:(13be)
    goto L13be;

  L15ce:;
    // 0015ce: BTST.B dst:(ff0001) src:#6
    BTST<B>(G.io->b(0xff0001), 6);
    // 0015d6: Bcc cond:NE src:(15e8)
    if (G.sr.check_condition(Condition::NE)) { goto L15e8; }
    // 0015d8: MOVE.W dst:D0 src:(RAM_BEGIN)
    G.d[0].w(G.io->w(RAM_BEGIN));
    // 0015de: AND.W dst:D0 src:#81
    G.d[0].w(AND<W>(G.d[0].w(), 0x81));
    // 0015e2: Bcc cond:EQ src:(1792)
    if (G.sr.check_condition(Condition::EQ)) { goto L1792; }
    // 0015e6: RTS
    goto end;

  L15e8:;
    // 0015e8: BSR src:(65a4)
    F65a4();
    // 0015ec: BTST.B dst:(ff0001) src:#7
    BTST<B>(G.io->b(0xff0001), 7);
    // 0015f4: Bcc cond:NE src:(164a)
    if (G.sr.check_condition(Condition::NE)) {
      F164a();
      goto end;
    }
    // 0015f6: TST.W src:(ff0066)
    TST<W>(G.io->w(0xff0066));
    // 0015fc: Bcc cond:NE src:(164a)
    if (G.sr.check_condition(Condition::NE)) {
      F164a();
      goto end;
    }
    // 0015fe: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 001600: BSR src:(654c)
    F654c();
    // 001604: MOVE.W dst:D0 src:#38
    G.d[0].w(0x38);
    // 001608: MOVE.L dst:D1 src:#5e900
    G.d[1].l(0x5e900);
    // 00160e: MOVE.W dst:D2 src:#6f0
    G.d[2].w(UCC(0x6f0));
    // 001612: BSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 001616: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 00161c: MOVE.W dst:(A6.L)+14 src:#3000
    G.io->w(G.a[6] + 0x14, 0x3000);
    // 001622: MOVE.W dst:(A6.L)+16 src:#3800
    G.io->w(G.a[6] + 0x16, UCC(0x3800));
    // 001628: LEA.L dst:A0 src:(1bec)
    G.a[0] = 0x1bec;
    // 00162e: BSR src:(5b70)
    F5b70();
    // 001632: MOVE.W dst:D7 src:#100
    G.d[7].w(UCC(0x100));

  L1636:;
    // 001636: BSR src:(3a40)
    F3a40();
    // 00163a: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 00163c: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 001640: ADDQ.W dst:(SOME_STATE_COUNTER) src:#1
    G.io->w(SOME_STATE_COUNTER, ADD<W>(G.io->w(SOME_STATE_COUNTER), 1));
    // 001646: DBcc.W cond:False dst:D7 src:(1636)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L1636; }

  L164a:;
    // 00164a: JMP src:(164a)
    F164a();
    goto end;

  L1716:;
    // 001716: MOVE.W dst:(ff0004) src:#46
    G.io->w(0xff0004, 0x46);
    // 00171e: MOVE.L dst:(VDP_CTRL1) src:#19a40000
    G.io->l(VDP_CTRL1, 0x19a40000);
    // 001728: MOVE.W dst:D0 src:(VDP_DATA1)
    G.d[0].w(UCC(G.io->w(VDP_DATA1)));
    // 00172e: CMP.W dst:D0 src:#83b4
    CMP<W>(G.d[0].w(), 0x83b4);
    // 001732: Bcc cond:EQ src:(1748)
    if (G.sr.check_condition(Condition::EQ)) { goto L1748; }
    // 001734: SUBQ.W dst:D0 src:#1
    G.d[0].w(SUB<W>(G.d[0].w(), 1));
    // 001736: MOVE.L dst:(VDP_CTRL1) src:#59a40000
    G.io->l(VDP_CTRL1, 0x59a40000);
    // 001740: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, UCC(G.d[0].w()));
    // 001746: RTS
    goto end;

  L1748:;
    // 001748: MOVE.W dst:D0 src:#ca
    G.d[0].w(UCC(0xca));
    // 00174c: BSR src:(654c)
    F654c();

  L1750:;
    // 001750: JMP src:(1750)
    F1750();
    goto end;

  L1760:;
    // 001760: ANDI.W dst:(RAM_BEGIN) src:#d
    G.io->w(RAM_BEGIN, AND<W>(G.io->w(RAM_BEGIN), 13));
    // 001768: BSR src:(65a4)
    F65a4();
    // 00176c: MOVEQ.L dst:D0 src:#1c
    G.d[0].l(UCC(0x1c));
    // 00176e: BSR src:(654c)
    F654c();
    // 001772: MOVEQ.L dst:D0 src:#20
    G.d[0].l(UCC(0x20));
    // 001774: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 001778: LEA.L dst:A0 src:(ff0050)
    G.a[0] = 0xff0050;

  L177e:;
    // 00177e: CLR.W dst:(A0)+
    G.io->w(G.a[0], UCC(0));
    G.a[0] += 2;
    // 001780: CMPA.L dst:A0 src:#ff2ea4
    CMP<L>(G.a[0], 0xff2ea4);
    // 001786: Bcc cond:CS src:(177e)
    if (G.sr.check_condition(Condition::CS)) { goto L177e; }
    // 001788: CLR.W dst:(ff003c)
    G.io->w(0xff003c, UCC(0));
    // 00178e: Bcc cond:True src:(14b4)
    F14b4();
    goto end;

  L1792:;
    // 001792: BTST.B dst:(ff0071) src:#7
    BTST<B>(G.io->b(0xff0071), 7);
    // 00179a: Bcc cond:NE src:(179e)
    if (G.sr.check_condition(Condition::NE)) { goto L179e; }

  L179c:;
    // 00179c: RTS
    goto end;

  L179e:;
    // 00179e: BTST.B dst:(ff0073) src:#7
    BTST<B>(G.io->b(0xff0073), 7);
    // 0017a6: Bcc cond:NE src:(179c)
    if (G.sr.check_condition(Condition::NE)) { goto L179c; }
    // 0017a8: MOVE.W dst:D0 src:(ff004e)
    G.d[0].w(G.io->w(0xff004e));
    // 0017ae: ADD.W dst:D0 src:#40
    G.d[0].w(ADD<W>(G.d[0].w(), 0x40));
    // 0017b2: BSR src:(654c)
    F654c();

  L17b6:;
    // 0017b6: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 0017b8: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 0017bc: BTST.B dst:(ff0071) src:#7
    BTST<B>(G.io->b(0xff0071), 7);
    // 0017c4: Bcc cond:EQ src:(17b6)
    if (G.sr.check_condition(Condition::EQ)) { goto L17b6; }
    // 0017c6: BTST.B dst:(ff0073) src:#7
    BTST<B>(G.io->b(0xff0073), 7);
    // 0017ce: Bcc cond:NE src:(17b6)
    if (G.sr.check_condition(Condition::NE)) { goto L17b6; }
    // 0017d0: MOVE.W dst:D0 src:(ff004e)
    G.d[0].w(G.io->w(0xff004e));
    // 0017d6: ADD.W dst:D0 src:#40
    G.d[0].w(ADD<W>(G.d[0].w(), 0x40));
    // 0017da: Bcc cond:True src:(654c)
    F654c();
    goto end;

  L17de:;
    // 0017de: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 0017e0: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 0017e4: LEA.L dst:A0 src:(1f20)
    G.a[0] = 0x1f20;
    // 0017ea: BSR src:(1ed8)
    F1ed8();
    // 0017ee: LEA.L dst:A0 src:(1f3c)
    G.a[0] = 0x1f3c;
    // 0017f4: BSR src:(1ed8)
    F1ed8();
    // 0017f8: LEA.L dst:A0 src:(1f5a)
    G.a[0] = 0x1f5a;
    // 0017fe: BSR src:(1ed8)
    F1ed8();
    // 001802: LEA.L dst:A0 src:(1f8a)
    G.a[0] = 0x1f8a;
    // 001808: BSR src:(1ed8)
    F1ed8();
    // 00180c: MOVE.W dst:D0 src:#d0
    G.d[0].w(0xd0);
    // 001810: MOVE.L dst:D1 src:#3a800
    G.d[1].l(0x3a800);
    // 001816: MOVE.W dst:D2 src:#1b4
    G.d[2].w(UCC(0x1b4));
    // 00181a: BSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 00181e: LEA.L dst:A0 src:(192c)
    G.a[0] = 0x192c;
    // 001824: MOVE.L dst:D0 src:#50880000
    G.d[0].l(0x50880000);
    // 00182a: MOVEQ.L dst:D1 src:#a
    G.d[1].l(UCC(10));

  L182c:;
    // 00182c: MOVE.L dst:(VDP_CTRL1) src:D0
    G.io->l(VDP_CTRL1, G.d[0].l());
    // 001832: MOVEQ.L dst:D2 src:#1f
    G.d[2].l(UCC(0x1f));

  L1834:;
    // 001834: MOVE.W dst:D3 src:(A0)+
    G.d[3].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 001836: CMP.W dst:D3 src:#83e2
    CMP<W>(G.d[3].w(), 0x83e2);
    // 00183a: Bcc cond:EQ src:(1844)
    if (G.sr.check_condition(Condition::EQ)) { goto L1844; }
    // 00183c: SUB.W dst:D3 src:#e40
    G.d[3].w(SUB<W>(G.d[3].w(), 0xe40));
    // 001840: ADD.W dst:D3 src:#21b4
    G.d[3].w(ADD<W>(G.d[3].w(), 0x21b4));

  L1844:;
    // 001844: MOVE.W dst:(VDP_DATA1) src:D3
    G.io->w(VDP_DATA1, UCC(G.d[3].w()));
    // 00184a: DBcc.W cond:False dst:D2 src:(1834)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L1834; }
    // 00184e: ADD.L dst:D0 src:#800000
    G.d[0].l(ADD<L>(G.d[0].l(), 0x800000));
    // 001854: DBcc.W cond:False dst:D1 src:(182c)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto L182c; }
    // 001858: MOVE.W dst:A0 src:#2000
    G.a[0].w(UCC(0x2000));
    // 00185c: LEA.L dst:A1 src:(4)
    G.a[1] = 4;

  L1862:;
    // 001862: LEA.L dst:A2 src:(18cc)
    G.a[2] = 0x18cc;
    // 001868: MOVE.W dst:D5 src:A0
    G.d[5].w(G.a[0].w());
    // 00186a: MOVEQ.L dst:D6 src:#7
    G.d[6].l(7);
    // 00186c: MOVEQ.L dst:D7 src:#5
    G.d[7].l(5);
    // 00186e: MOVE.W dst:A3 src:D6
    G.a[3].w(UCC(G.d[6].w()));

  L1870:;
    // 001870: MOVE.W dst:D0 src:(A2)+
    G.d[0].w(UCC(G.io->w(G.a[2])));
    G.a[2] += 2;
    // 001872: SUB.W dst:D0 src:#e40
    G.d[0].w(SUB<W>(G.d[0].w(), 0xe40));
    // 001876: ADD.W dst:D0 src:#41b4
    G.d[0].w(ADD<W>(G.d[0].w(), 0x41b4));
    // 00187a: MOVE.W dst:D1 src:D5
    G.d[1].w(G.d[5].w());
    // 00187c: MOVEQ.L dst:D2 src:#1
    G.d[2].l(1);
    // 00187e: MOVEQ.L dst:D3 src:#1
    G.d[3].l(UCC(1));
    // 001880: BSR src:(6414)
    F6414();
    // 001884: ADDQ.W dst:D5 src:#4
    G.d[5].w(ADD<W>(G.d[5].w(), 4));
    // 001886: DBcc.W cond:False dst:D6 src:(1870)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L1870; }
    // 00188a: ADD.W dst:D5 src:#e0
    G.d[5].w(ADD<W>(G.d[5].w(), 0xe0));
    // 00188e: MOVE.W dst:D6 src:A3
    G.d[6].w(UCC(G.a[3].w()));
    // 001890: DBcc.W cond:False dst:D7 src:(1870)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L1870; }
    // 001894: ADDA.W dst:A0 src:#20
    G.a[0] = ADD<L>(G.a[0], 0x20);
    // 001898: SUBQ.L dst:A1 src:#1
    G.a[1] = SUB<L>(G.a[1], 1);
    // 00189a: CMPA.L dst:A1 src:#0
    CMP<L>(G.a[1], 0);
    // 0018a0: Bcc cond:NE src:(1862)
    if (G.sr.check_condition(Condition::NE)) { goto L1862; }
    // 0018a2: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 0018a4: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 0018a8: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 0018ac: MOVE.L dst:D1 src:#12292
    G.d[1].l(0x12292);
    // 0018b2: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 0018b6: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 0018ba: MOVE.W dst:D0 src:#20
    G.d[0].w(0x20);
    // 0018be: MOVE.L dst:D1 src:#1230e
    G.d[1].l(0x1230e);
    // 0018c4: MOVE.W dst:D2 src:#20
    G.d[2].w(UCC(0x20));
    // 0018c8: Bcc cond:True src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1482()
  {
    _log_call(__func__);

    // 001482: LEA.L dst:A0 src:(ff0038)
    G.a[0] = 0xff0038;

  L1488:;
    // 001488: CLR.W dst:(A0)+
    G.io->w(G.a[0], UCC(0));
    G.a[0] += 2;
    // 00148a: CMPA.L dst:A0 src:#ff2ea4
    CMP<L>(G.a[0], 0xff2ea4);
    // 001490: Bcc cond:CS src:(1488)
    if (G.sr.check_condition(Condition::CS)) { goto L1488; }
    // 001492: MOVE.W dst:D0 src:(ff000a)
    G.d[0].w(UCC(G.io->w(0xff000a)));
    // 001498: MULU.W dst:D0 src:#a
    G.d[0].l(MULU(G.d[0].w(), 10));
    // 00149c: MOVE.W dst:(ff003a) src:#14
    G.io->w(0xff003a, 0x14);
    // 0014a4: SUB.W dst:(ff003a) src:D0
    G.io->w(0xff003a, SUB<W>(G.io->w(0xff003a), G.d[0].w()));
    // 0014aa: Bcc cond:NE src:(14b4)
    if (G.sr.check_condition(Condition::NE)) {
      F14b4();
      goto end;
    }
    // 0014ac: MOVE.W dst:(ff003a) src:#63
    G.io->w(0xff003a, UCC(0x63));

  L14b4:;
    // 0014b4: JMP src:(14b4)
    F14b4();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F14b4()
  {
    _log_call(__func__);

    // 0014b4: MOVE.L dst:(ff005a) src:#7000
    G.io->l(0xff005a, 0x7000);
    // 0014be: MOVE.W dst:D0 src:(ff000c)
    G.d[0].w(G.io->w(0xff000c));
    // 0014c4: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 0014c6: LEA.L dst:A0 src:(1c2e)
    G.a[0] = 0x1c2e;
    // 0014cc: MOVE.W dst:(ff0066) src:(A0,D0.W)+0
    G.io->w(0xff0066, G.io->w(G.a[0] + G.d[0].w()));
    // 0014d4: MOVE.W dst:D0 src:(ff000a)
    G.d[0].w(UCC(G.io->w(0xff000a)));
    // 0014da: NOT.W dst:D0
    G.d[0].w(NOT<W>(G.d[0].w()));
    // 0014dc: AND.W dst:D0 src:#1
    G.d[0].w(AND<W>(G.d[0].w(), 1));
    // 0014e0: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));
    // 0014e2: MOVE.W dst:(ff0068) src:D0
    G.io->w(0xff0068, UCC(G.d[0].w()));

  L14e8:;
    // 0014e8: JMP src:(14e8)
    F14e8();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F14e8()
  {
    _log_call(__func__);

    // 0014e8: ANDI.W dst:(RAM_BEGIN) src:#8d
    G.io->w(RAM_BEGIN, AND<W>(G.io->w(RAM_BEGIN), 0x8d));
    // 0014f0: MOVE.W dst:(SOME_STATE_CONTROL) src:#3
    G.io->w(SOME_STATE_CONTROL, 3);
    // 0014f8: CLR.W dst:(ff0004)
    G.io->w(0xff0004, UCC(0));
    // 0014fe: BSR src:(65a4)
    F65a4();
    // 001502: BSR src:(5e08)
    _m->clear_cram();
    // 001506: BSR src:(6442)
    _m->clear_all_planes();
    // 00150a: BSR src:(649c)
    _m->clear_vscroll();
    // 00150e: BSR src:(5bf4)
    _m->clear_sprites();
    // 001512: BSR src:(5fec)
    F5fec();
    // 001516: BSR src:(6096)
    F6096();
    // 00151a: MOVE.W dst:(VDP_CTRL1) src:#9100
    G.io->w(VDP_CTRL1, 0x9100);
    // 001522: MOVE.W dst:(VDP_CTRL1) src:#9204
    G.io->w(VDP_CTRL1, UCC(0x9204));
    // 00152a: BSET.B dst:(ff0001) src:#0
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 0));
    // 001532: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 001534: BSR src:(65fe)
    F65fe();
    // 001538: MOVEQ.L dst:D7 src:#b
    G.d[7].l(UCC(11));
    // 00153a: LEA.L dst:A6 src:(1550)
    G.a[6] = 0x1550;

  L1540:;
    // 001540: JMP src:(1540)
    F1540();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1540()
  {
    _log_call(__func__);

  L1540:;
    // 001540: MOVE.W dst:D0 src:(A6)+
    G.d[0].w(UCC(G.io->w(G.a[6])));
    G.a[6] += 2;
    // 001542: MOVE.W dst:D2 src:(A6)+
    G.d[2].w(UCC(G.io->w(G.a[6])));
    G.a[6] += 2;
    // 001544: MOVE.L dst:D1 src:(A6)+
    G.d[1].l(UCC(G.io->l(G.a[6])));
    G.a[6] += 4;
    // 001546: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 00154a: DBcc.W cond:False dst:D7 src:(1540)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L1540; }
    // 00154e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F164a()
  {
    _log_call(__func__);

    // 00164a: LEA.L dst:A0 src:(CONTROLLER_STATE1)
    G.a[0] = CONTROLLER_STATE1;

  L1650:;
    // 001650: JMP src:(1650)
    F1650();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1650()
  {
    _log_call(__func__);

  L1650:;
    // 001650: CLR.W dst:(A0)+
    G.io->w(G.a[0], UCC(0));
    G.a[0] += 2;
    // 001652: CMPA.L dst:A0 src:#ff2ea4
    CMP<L>(G.a[0], 0xff2ea4);
    // 001658: Bcc cond:CS src:(1650)
    if (G.sr.check_condition(Condition::CS)) { goto L1650; }
    // 00165a: BTST.B dst:(ff0001) src:#7
    BTST<B>(G.io->b(0xff0001), 7);
    // 001662: Bcc cond:NE src:(1750)
    if (G.sr.check_condition(Condition::NE)) {
      F1750();
      goto end;
    }
    // 001666: TST.W src:(ff0066)
    TST<W>(G.io->w(0xff0066));
    // 00166c: Bcc cond:NE src:(14e8)
    if (G.sr.check_condition(Condition::NE)) {
      F14e8();
      goto end;
    }
    // 001670: TST.W src:(ff003a)
    TST<W>(G.io->w(0xff003a));
    // 001676: Bcc cond:EQ src:(1750)
    if (G.sr.check_condition(Condition::EQ)) {
      F1750();
      goto end;
    }
    // 00167a: BSR src:(6442)
    _m->clear_all_planes();
    // 00167e: BSR src:(649c)
    _m->clear_vscroll();
    // 001682: BSR src:(5bf4)
    _m->clear_sprites();
    // 001686: LEA.L dst:A0 src:(1efa)
    G.a[0] = 0x1efa;
    // 00168c: MOVE.W dst:D0 src:#1614
    G.d[0].w(UCC(0x1614));
    // 001690: BSR src:(1eda)
    _m->copy_something_to_vdp(G.a[0], G.d[0].w());
    // 001694: LEA.L dst:A0 src:(1fd0)
    G.a[0] = 0x1fd0;
    // 00169a: BSR src:(1ed8)
    F1ed8();
    // 00169e: LEA.L dst:A0 src:(1fe4)
    G.a[0] = 0x1fe4;
    // 0016a4: BSR src:(1ed8)
    F1ed8();
    // 0016a8: MOVE.W dst:D0 src:(ff003a)
    G.d[0].w(G.io->w(0xff003a));
    // 0016ae: SUBQ.W dst:(ff003a) src:#1
    G.io->w(0xff003a, SUB<W>(G.io->w(0xff003a), 1));
    // 0016b4: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 0016b6: MOVE.W dst:D2 src:#83b4
    G.d[2].w(UCC(0x83b4));

  L16ba:;
    // 0016ba: SUB.W dst:D0 src:#a
    G.d[0].w(SUB<W>(G.d[0].w(), 10));
    // 0016be: Bcc cond:CS src:(16c6)
    if (G.sr.check_condition(Condition::CS)) { goto L16c6; }
    // 0016c0: ADDQ.W dst:D2 src:#1
    G.d[2].w(ADD<W>(G.d[2].w(), 1));
    // 0016c2: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 0016c4: Bcc cond:True src:(16ba)
    goto L16ba;

  L16c6:;
    // 0016c6: MOVE.L dst:(VDP_CTRL1) src:#5aaa0000
    G.io->l(VDP_CTRL1, 0x5aaa0000);
    // 0016d0: MOVE.W dst:(VDP_DATA1) src:D2
    G.io->w(VDP_DATA1, G.d[2].w());
    // 0016d6: ADD.W dst:D1 src:#83b4
    G.d[1].w(ADD<W>(G.d[1].w(), 0x83b4));
    // 0016da: MOVE.W dst:(VDP_DATA1) src:D1
    G.io->w(VDP_DATA1, G.d[1].w());
    // 0016e0: MOVE.L dst:(VDP_CTRL1) src:#59a40000
    G.io->l(VDP_CTRL1, 0x59a40000);
    // 0016ea: MOVE.W dst:(VDP_DATA1) src:#83bd
    G.io->w(VDP_DATA1, 0x83bd);
    // 0016f2: MOVE.W dst:(SOME_STATE_CONTROL) src:#4
    G.io->w(SOME_STATE_CONTROL, 4);
    // 0016fa: MOVE.W dst:(ff0004) src:#46
    G.io->w(0xff0004, 0x46);
    // 001702: MOVEQ.L dst:D0 src:#a
    G.d[0].l(UCC(10));
    // 001704: BSR src:(654c)
    F654c();
    // 001708: BSET.B dst:(ff0001) src:#7
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 7));
    // 001710: MOVEQ.L dst:D0 src:#20
    G.d[0].l(UCC(0x20));
    // 001712: Bcc cond:True src:(5d9a)
    _m->vblank(G.d[0].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1750()
  {
    _log_call(__func__);

    // 001750: MOVE.W dst:(SOME_STATE_CONTROL) src:#0
    G.io->w(SOME_STATE_CONTROL, 0);
    // 001758: CLR.W dst:(ff0004)
    G.io->w(0xff0004, UCC(0));
    // 00175e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1ed8()
  {
    _log_call(__func__);

    // 001ed8: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;

  L1eda:;
    // 001eda: JMP src:(1eda)
    _m->copy_something_to_vdp(G.a[0], G.d[0].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F22bc()
  {
    _log_call(__func__);

    // 0022bc: BSET.B dst:(ff2aa3) src:#0
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 0));
    // 0022c4: Bcc cond:NE src:(2576)
    if (G.sr.check_condition(Condition::NE)) { goto L2576; }
    // 0022c8: LEA.L dst:A6 src:(ff06c2)
    G.a[6] = 0xff06c2;
    // 0022ce: MOVEQ.L dst:D0 src:#4
    G.d[0].l(4);
    // 0022d0: MOVEQ.L dst:D1 src:#40
    G.d[1].l(UCC(0x40));
    // 0022d2: BSR src:(6810)
    F6810();
    // 0022d6: Bcc cond:CS src:(25b0)
    if (G.sr.check_condition(Condition::CS)) { goto L25b0; }
    // 0022da: MOVE.W dst:D0 src:(ff2aa0)
    G.d[0].w(G.io->w(0xff2aa0));
    // 0022e0: AND.W dst:D0 src:#78
    G.d[0].w(AND<W>(G.d[0].w(), 0x78));
    // 0022e4: Bcc cond:NE src:(23f2)
    if (G.sr.check_condition(Condition::NE)) { goto L23f2; }

  L22e8:;
    // 0022e8: MOVE.W dst:D0 src:(ff0174)
    G.d[0].w(UCC(G.io->w(0xff0174)));
    // 0022ee: Bcc cond:EQ src:(2328)
    if (G.sr.check_condition(Condition::EQ)) { goto L2328; }
    // 0022f0: AND.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 0022f4: Bcc cond:NE src:(2328)
    if (G.sr.check_condition(Condition::NE)) { goto L2328; }
    // 0022f6: BTST.B dst:(ff0847) src:#1
    BTST<B>(G.io->b(0xff0847), 1);
    // 0022fe: Bcc cond:NE src:(2328)
    if (G.sr.check_condition(Condition::NE)) { goto L2328; }
    // 002300: CMPI.W dst:(ff004a) src:#2
    CMP<W>(G.io->w(0xff004a), 2);
    // 002308: Bcc cond:CC src:(2328)
    if (G.sr.check_condition(Condition::CC)) { goto L2328; }
    // 00230a: CMPI.W dst:(ff0856) src:#1000
    CMP<W>(G.io->w(0xff0856), 0x1000);
    // 002312: Bcc cond:CS src:(231e)
    if (G.sr.check_condition(Condition::CS)) { goto L231e; }
    // 002314: CMPI.W dst:(ff0856) src:#9000
    CMP<W>(G.io->w(0xff0856), 0x9000);
    // 00231c: Bcc cond:CS src:(2328)
    if (G.sr.check_condition(Condition::CS)) { goto L2328; }

  L231e:;
    // 00231e: ADDQ.W dst:(ff004a) src:#1
    G.io->w(0xff004a, ADD<W>(G.io->w(0xff004a), 1));
    // 002324: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 002326: Bcc cond:True src:(2392)
    goto L2392;

  L2328:;
    // 002328: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00232a: LEA.L dst:A0 src:(229c)
    G.a[0] = 0x229c;
    // 002330: MOVE.W dst:D0 src:(A0,D0.W)+0
    G.d[0].w(UCC(G.io->w(G.a[0] + G.d[0].w())));
    // 002334: Bcc cond:EQ src:(234a)
    if (G.sr.check_condition(Condition::EQ)) { goto L234a; }
    // 002336: CMP.W dst:D0 src:#3
    CMP<W>(G.d[0].w(), 3);
    // 00233a: Bcc cond:CC src:(2356)
    if (G.sr.check_condition(Condition::CC)) { goto L2356; }
    // 00233c: CMPI.W dst:(ff0844) src:#5
    CMP<W>(G.io->w(0xff0844), 5);
    // 002344: Bcc cond:CC src:(2390)
    if (G.sr.check_condition(Condition::CC)) { goto L2390; }
    // 002346: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 002348: Bcc cond:True src:(2392)
    goto L2392;

  L234a:;
    // 00234a: CMPI.W dst:(ff0848) src:#28
    CMP<W>(G.io->w(0xff0848), 0x28);
    // 002352: Bcc cond:CS src:(2392)
    if (G.sr.check_condition(Condition::CS)) { goto L2392; }
    // 002354: Bcc cond:True src:(2390)
    goto L2390;

  L2356:;
    // 002356: Bcc cond:EQ src:(2392)
    if (G.sr.check_condition(Condition::EQ)) { goto L2392; }
    // 002358: CMP.W dst:D0 src:#5
    CMP<W>(G.d[0].w(), 5);
    // 00235c: Bcc cond:CC src:(236a)
    if (G.sr.check_condition(Condition::CC)) { goto L236a; }
    // 00235e: CMPI.W dst:(ff0068) src:#9
    CMP<W>(G.io->w(0xff0068), 9);
    // 002366: Bcc cond:CC src:(2390)
    if (G.sr.check_condition(Condition::CC)) { goto L2390; }
    // 002368: Bcc cond:True src:(2392)
    goto L2392;

  L236a:;
    // 00236a: Bcc cond:NE src:(2380)
    if (G.sr.check_condition(Condition::NE)) { goto L2380; }
    // 00236c: TST.B src:(ff0001)
    TST<B>(G.io->b(0xff0001));
    // 002372: Bcc cond:MI src:(2390)
    if (G.sr.check_condition(Condition::MI)) { goto L2390; }
    // 002374: BTST.B dst:(ff0842) src:#0
    BTST<B>(G.io->b(0xff0842), 0);
    // 00237c: Bcc cond:NE src:(2390)
    if (G.sr.check_condition(Condition::NE)) { goto L2390; }
    // 00237e: Bcc cond:True src:(2392)
    goto L2392;

  L2380:;
    // 002380: TST.B src:(ff0001)
    TST<B>(G.io->b(0xff0001));
    // 002386: Bcc cond:MI src:(2390)
    if (G.sr.check_condition(Condition::MI)) { goto L2390; }
    // 002388: TST.W src:(ff0802)
    TST<W>(G.io->w(0xff0802));
    // 00238e: Bcc cond:PL src:(2392)
    if (G.sr.check_condition(Condition::PL)) { goto L2392; }

  L2390:;
    // 002390: MOVEQ.L dst:D0 src:#3
    G.d[0].l(UCC(3));

  L2392:;
    // 002392: MOVE.W dst:(A6.L)+4 src:D0
    G.io->w(G.a[6] + 4, G.d[0].w());
    // 002396: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 002398: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 00239a: ADD.W dst:D0 src:#75b
    G.d[0].w(ADD<W>(G.d[0].w(), 0x75b));
    // 00239e: MOVE.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, G.d[0].w());
    // 0023a2: MOVE.W dst:(A6.L)+12 src:#504
    G.io->w(G.a[6] + 0x12, 0x504);
    // 0023a8: MOVE.L dst:(A6) src:#80000000
    G.io->l(G.a[6], 0x80000000);
    // 0023ae: MOVE.L dst:(A6.L)+14 src:(ff2a9e)
    G.io->l(G.a[6] + 0x14, G.io->l(0xff2a9e));
    // 0023b6: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 0023ba: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 0023be: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 0023c0: LEA.L dst:A0 src:(2280)
    G.a[0] = 0x2280;
    // 0023c6: MOVE.L dst:(A6.L)+6 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 6, G.io->l(G.a[0] + G.d[0].w()));
    // 0023cc: MOVE.L dst:(A6.L)+18 src:#6000600
    G.io->l(G.a[6] + 0x18, 0x6000600);
    // 0023d4: MOVE.L dst:(A6.L)+1c src:#6000600
    G.io->l(G.a[6] + 0x1c, 0x6000600);
    // 0023dc: MOVE.L dst:(A6.L)+20 src:#fc000400
    G.io->l(G.a[6] + 0x20, 0xfc000400);
    // 0023e4: MOVE.L dst:(ff2a9e) src:A6
    G.io->l(0xff2a9e, G.a[6]);
    // 0023ea: ADDQ.W dst:(ff0174) src:#1
    G.io->w(0xff0174, ADD<W>(G.io->w(0xff0174), 1));
    // 0023f0: RTS
    goto end;

  L23f2:;
    // 0023f2: CMPI.W dst:(ff0846) src:#1
    CMP<W>(G.io->w(0xff0846), 1);
    // 0023fa: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 0023fe: MOVE.L dst:D1 src:(ff2a9e)
    G.d[1].l(G.io->l(0xff2a9e));
    // 002404: AND.W dst:D1 src:#ff80
    G.d[1].w(AND<W>(G.d[1].w(), 0xff80));
    // 002408: MOVE.L dst:(A6.L)+14 src:D1
    G.io->l(G.a[6] + 0x14, UCC(G.d[1].l()));
    // 00240c: CMPI.W dst:D0 src:#8
    CMP<W>(G.d[0].w(), 8);
    // 002410: Bcc cond:NE src:(242c)
    if (G.sr.check_condition(Condition::NE)) { goto L242c; }
    // 002412: BSR src:(27ea)
    F27ea();
    // 002416: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 00241a: MOVE.L dst:(A6.L)+6 src:#27aa
    G.io->l(G.a[6] + 6, 0x27aa);
    // 002422: SUBI.W dst:(A6.L)+16 src:#600
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0x600));
    // 002428: Bcc cond:True src:(2532)
    goto L2532;

  L242c:;
    // 00242c: CMPI.W dst:D0 src:#10
    CMP<W>(G.d[0].w(), 0x10);
    // 002430: Bcc cond:NE src:(2452)
    if (G.sr.check_condition(Condition::NE)) { goto L2452; }
    // 002432: BSR src:(27ea)
    F27ea();
    // 002436: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 00243a: ADDI.W dst:(A6.L)+10 src:#1000
    G.io->w(G.a[6] + 0x10, ADD<W>(G.io->w(G.a[6] + 0x10), 0x1000));
    // 002440: MOVE.L dst:(A6.L)+6 src:#27aa
    G.io->l(G.a[6] + 6, 0x27aa);
    // 002448: ADDI.W dst:(A6.L)+16 src:#600
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0x600));
    // 00244e: Bcc cond:True src:(2532)
    goto L2532;

  L2452:;
    // 002452: CMPI.W dst:D0 src:#18
    CMP<W>(G.d[0].w(), 0x18);
    // 002456: Bcc cond:NE src:(2484)
    if (G.sr.check_condition(Condition::NE)) { goto L2484; }
    // 002458: MOVE.W dst:D2 src:(CONTROLLER_STATE1)
    G.d[2].w(G.io->w(CONTROLLER_STATE1));
    // 00245e: AND.W dst:D2 src:#f
    G.d[2].w(AND<W>(G.d[2].w(), 15));
    // 002462: CMP.W dst:D2 src:#8
    CMP<W>(G.d[2].w(), 8);
    // 002466: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 00246a: BSR src:(27ea)
    F27ea();
    // 00246e: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 002472: MOVE.L dst:(A6.L)+6 src:#27ba
    G.io->l(G.a[6] + 6, 0x27ba);
    // 00247a: SUBI.W dst:(A6.L)+16 src:#200
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0x200));
    // 002480: Bcc cond:True src:(2532)
    goto L2532;

  L2484:;
    // 002484: CMPI.W dst:D0 src:#20
    CMP<W>(G.d[0].w(), 0x20);
    // 002488: Bcc cond:NE src:(24aa)
    if (G.sr.check_condition(Condition::NE)) { goto L24aa; }
    // 00248a: BSR src:(27ea)
    F27ea();
    // 00248e: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 002492: ADDI.W dst:(A6.L)+10 src:#1000
    G.io->w(G.a[6] + 0x10, ADD<W>(G.io->w(G.a[6] + 0x10), 0x1000));
    // 002498: MOVE.L dst:(A6.L)+6 src:#27ba
    G.io->l(G.a[6] + 6, 0x27ba);
    // 0024a0: ADDI.W dst:(A6.L)+16 src:#600
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0x600));
    // 0024a6: Bcc cond:True src:(2532)
    goto L2532;

  L24aa:;
    // 0024aa: CMPI.W dst:D0 src:#28
    CMP<W>(G.d[0].w(), 0x28);
    // 0024ae: Bcc cond:NE src:(24ca)
    if (G.sr.check_condition(Condition::NE)) { goto L24ca; }
    // 0024b0: BSR src:(27ea)
    F27ea();
    // 0024b4: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 0024b8: MOVE.L dst:(A6.L)+6 src:#27ca
    G.io->l(G.a[6] + 6, 0x27ca);
    // 0024c0: ADDI.W dst:(A6.L)+14 src:#400
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x400));
    // 0024c6: Bcc cond:True src:(2532)
    goto L2532;

  L24ca:;
    // 0024ca: CMPI.W dst:D0 src:#30
    CMP<W>(G.d[0].w(), 0x30);
    // 0024ce: Bcc cond:NE src:(24f0)
    if (G.sr.check_condition(Condition::NE)) { goto L24f0; }
    // 0024d0: BSR src:(27ea)
    F27ea();
    // 0024d4: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 0024d8: ADDI.W dst:(A6.L)+10 src:#1000
    G.io->w(G.a[6] + 0x10, ADD<W>(G.io->w(G.a[6] + 0x10), 0x1000));
    // 0024de: MOVE.L dst:(A6.L)+6 src:#27ca
    G.io->l(G.a[6] + 6, 0x27ca);
    // 0024e6: SUBI.W dst:(A6.L)+16 src:#800
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0x800));
    // 0024ec: Bcc cond:True src:(2532)
    goto L2532;

  L24f0:;
    // 0024f0: CMPI.W dst:D0 src:#38
    CMP<W>(G.d[0].w(), 0x38);
    // 0024f4: Bcc cond:NE src:(2510)
    if (G.sr.check_condition(Condition::NE)) { goto L2510; }
    // 0024f6: BSR src:(27ea)
    F27ea();
    // 0024fa: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 0024fe: MOVE.L dst:(A6.L)+6 src:#27da
    G.io->l(G.a[6] + 6, 0x27da);
    // 002506: ADDI.W dst:(A6.L)+16 src:#800
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0x800));
    // 00250c: Bcc cond:True src:(2532)
    goto L2532;

  L2510:;
    // 002510: CMPI.W dst:D0 src:#40
    CMP<W>(G.d[0].w(), 0x40);
    // 002514: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 002516: BSR src:(27ea)
    F27ea();
    // 00251a: Bcc cond:NE src:(2558)
    if (G.sr.check_condition(Condition::NE)) { goto L2558; }
    // 00251e: ADDI.W dst:(A6.L)+10 src:#1000
    G.io->w(G.a[6] + 0x10, ADD<W>(G.io->w(G.a[6] + 0x10), 0x1000));
    // 002524: MOVE.L dst:(A6.L)+6 src:#27da
    G.io->l(G.a[6] + 6, 0x27da);
    // 00252c: SUBI.W dst:(A6.L)+16 src:#800
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0x800));

  L2532:;
    // 002532: ROR.W dst:D0 src:#3
    G.d[0].w(ROR<W>(G.d[0].w(), 3));
    // 002534: SUBQ.W dst:D0 src:#1
    G.d[0].w(SUB<W>(G.d[0].w(), 1));
    // 002536: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 00253a: MOVE.W dst:(A6.L)+4 src:D0
    G.io->w(G.a[6] + 4, G.d[0].w());
    // 00253e: MOVE.W dst:(A6) src:#4000
    G.io->w(G.a[6], 0x4000);
    // 002542: MOVE.W dst:(A6.L)+12 src:#504
    G.io->w(G.a[6] + 0x12, 0x504);
    // 002548: MOVE.L dst:(A6.L)+20 src:#fc000400
    G.io->l(G.a[6] + 0x20, 0xfc000400);
    // 002550: MOVE.L dst:(ff2a9e) src:A6
    G.io->l(0xff2a9e, UCC(G.a[6]));
    // 002556: RTS
    goto end;

  L2558:;
    // 002558: ANDI.W dst:(ff2aa0) src:#ff87
    G.io->w(0xff2aa0, AND<W>(G.io->w(0xff2aa0), 0xff87));
    // 002560: MOVE.W dst:D0 src:(ff2aa0)
    G.d[0].w(G.io->w(0xff2aa0));
    // 002566: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 00256a: CMP.W dst:D0 src:#7
    CMP<W>(G.d[0].w(), 7);
    // 00256e: Bcc cond:EQ src:(25b0)
    if (G.sr.check_condition(Condition::EQ)) { goto L25b0; }
    // 002572: Bcc cond:True src:(22e8)
    goto L22e8;

  L2576:;
    // 002576: MOVE.L dst:A6 src:(ff2a9e)
    G.a[6] = UCC(G.io->l(0xff2a9e));
    // 00257c: BSR src:(6858)
    F6858();
    // 002580: BSR src:(6864)
    _m->inc_something(G.a[6]);
    // 002584: MOVEM.W src:(A6.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x14));
    G.d[1].l(G.io->w(G.a[6] + 0x16));
    // 00258a: ADD.W dst:D0 src:#400
    G.d[0].w(ADD<W>(G.d[0].w(), 0x400));
    // 00258e: CMP.W dst:D0 src:#f800
    CMP<W>(G.d[0].w(), 0xf800);
    // 002592: Bcc cond:CC src:(259e)
    if (G.sr.check_condition(Condition::CC)) { goto L259e; }
    // 002594: ADD.W dst:D1 src:#2800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x2800));
    // 002598: CMP.W dst:D1 src:#b000
    CMP<W>(G.d[1].w(), 0xb000);
    // 00259c: Bcc cond:CS src:(25ba)
    if (G.sr.check_condition(Condition::CS)) { goto L25ba; }

  L259e:;
    // 00259e: BSR src:(5bba)
    _m->clear_sprite_on_a6_14();
    // 0025a2: CLR.W dst:(A6)
    G.io->w(G.a[6], UCC(0));
    // 0025a4: TST.W src:(A6.L)+4
    TST<W>(G.io->w(G.a[6] + 4));
    // 0025a8: Bcc cond:PL src:(25b0)
    if (G.sr.check_condition(Condition::PL)) { goto L25b0; }
    // 0025aa: MOVE.L dst:A0 src:(A6.L)+18
    G.a[0] = G.io->l(G.a[6] + 0x18);
    // 0025ae: CLR.W dst:(A0)
    G.io->w(G.a[0], UCC(0));

  L25b0:;
    // 0025b0: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(UCC(G.io->w(0xff2a9c)));
    // 0025b6: Bcc cond:True src:(663a)
    F663a();
    goto end;

  L25ba:;
    // 0025ba: TST.W src:(A6.L)+4
    TST<W>(G.io->w(G.a[6] + 4));
    // 0025be: Bcc cond:MI src:(2788)
    if (G.sr.check_condition(Condition::MI)) { goto L2788; }
    // 0025c2: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 0025ca: Bcc cond:NE src:(26c6)
    if (G.sr.check_condition(Condition::NE)) { goto L26c6; }
    // 0025ce: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0025d2: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 0025d6: Bcc cond:EQ src:(5984)
    if (G.sr.check_condition(Condition::EQ)) {
      _m->update_sprite_with_something(G.a[6]);
      goto end;
    }
    // 0025da: MOVE.W dst:D0 src:(A6.L)+4
    G.d[0].w(UCC(G.io->w(G.a[6] + 4)));
    // 0025de: DBcc.W cond:False dst:D0 src:(2604)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L2604; }
    // 0025e2: CMPI.W dst:(ff0848) src:#28
    CMP<W>(G.io->w(0xff0848), 0x28);
    // 0025ea: Bcc cond:CC src:(267a)
    if (G.sr.check_condition(Condition::CC)) { goto L267a; }
    // 0025ee: ADDQ.W dst:(ff0848) src:#6
    G.io->w(0xff0848, ADD<W>(G.io->w(0xff0848), 6));
    // 0025f4: MOVE.W dst:(ff084e) src:#20
    G.io->w(0xff084e, 0x20);
    // 0025fc: MOVEQ.L dst:D0 src:#d
    G.d[0].l(UCC(13));
    // 0025fe: BSR src:(654c)
    F654c();
    // 002602: Bcc cond:True src:(259e)
    goto L259e;

  L2604:;
    // 002604: DBcc.W cond:False dst:D0 src:(265e)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L265e; }
    // 002608: CMPI.W dst:(ff0844) src:#5
    CMP<W>(G.io->w(0xff0844), 5);
    // 002610: Bcc cond:CC src:(267a)
    if (G.sr.check_condition(Condition::CC)) { goto L267a; }
    // 002612: ADDQ.W dst:(ff0844) src:#1
    G.io->w(0xff0844, ADD<W>(G.io->w(0xff0844), 1));
    // 002618: MOVE.W dst:(ff084e) src:#20
    G.io->w(0xff084e, 0x20);
    // 002620: MOVEQ.L dst:D0 src:#e
    G.d[0].l(UCC(14));
    // 002622: BSR src:(654c)
    F654c();
    // 002626: MOVE.L dst:D1 src:#5c0e0
    G.d[1].l(UCC(0x5c0e0));
    // 00262c: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 002634: Bcc cond:CS src:(259e)
    if (G.sr.check_condition(Condition::CS)) { goto L259e; }
    // 002638: Bcc cond:EQ src:(2650)
    if (G.sr.check_condition(Condition::EQ)) { goto L2650; }
    // 00263a: ADD.L dst:D1 src:#d60
    G.d[1].l(ADD<L>(G.d[1].l(), 0xd60));
    // 002640: CMPI.W dst:(ff0844) src:#5
    CMP<W>(G.io->w(0xff0844), 5);
    // 002648: Bcc cond:CS src:(2650)
    if (G.sr.check_condition(Condition::CS)) { goto L2650; }
    // 00264a: ADD.L dst:D1 src:#d60
    G.d[1].l(ADD<L>(G.d[1].l(), 0xd60));

  L2650:;
    // 002650: MOVEQ.L dst:D0 src:#6b
    G.d[0].l(0x6b);
    // 002652: MOVE.W dst:D2 src:#6f0
    G.d[2].w(UCC(0x6f0));
    // 002656: BSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 00265a: Bcc cond:True src:(259e)
    goto L259e;

  L265e:;
    // 00265e: DBcc.W cond:False dst:D0 src:(2676)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L2676; }
    // 002662: ADDQ.W dst:(ff0066) src:#1
    G.io->w(0xff0066, ADD<W>(G.io->w(0xff0066), 1));
    // 002668: MOVEQ.L dst:D0 src:#b
    G.d[0].l(UCC(11));
    // 00266a: BSR src:(654c)
    F654c();
    // 00266e: BSR src:(6130)
    F6130();
    // 002672: Bcc cond:True src:(259e)
    goto L259e;

  L2676:;
    // 002676: DBcc.W cond:False dst:D0 src:(272c)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L272c; }

  L267a:;
    // 00267a: MOVE.W dst:D0 src:(ff0172)
    G.d[0].w(G.io->w(0xff0172));
    // 002680: ADDI.W dst:(ff0172) src:#a
    G.io->w(0xff0172, ADD<W>(G.io->w(0xff0172), 10));
    // 002688: CMP.W dst:D0 src:#50
    CMP<W>(G.d[0].w(), 0x50);
    // 00268c: Bcc cond:CS src:(2698)
    if (G.sr.check_condition(Condition::CS)) { goto L2698; }
    // 00268e: MOVE.W dst:D0 src:#46
    G.d[0].w(0x46);
    // 002692: MOVE.W dst:(ff0172) src:D0
    G.io->w(0xff0172, UCC(G.d[0].w()));

  L2698:;
    // 002698: LEA.L dst:A0 src:(26dc)
    G.a[0] = 0x26dc;
    // 00269c: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00269e: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 0026a0: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0026a2: MOVE.L dst:(A6.L)+10 src:(A0)+
    G.io->l(G.a[6] + 0x10, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 0026a6: MOVE.L dst:(A6.L)+20 src:(A0)
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[0])));
    // 0026aa: BSR src:(62d0)
    F62d0();
    // 0026ae: MOVEQ.L dst:D0 src:#d
    G.d[0].l(UCC(13));
    // 0026b0: BSR src:(654c)
    F654c();
    // 0026b4: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 0026bc: MOVE.W dst:(A6.L)+30 src:#30
    G.io->w(G.a[6] + 0x30, 0x30);
    // 0026c2: MOVE.B dst:(A6) src:#20
    G.io->b(G.a[6], UCC(0x20));

  L26c6:;
    // 0026c6: SUBQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), 1));
    // 0026ca: Bcc cond:EQ src:(259e)
    if (G.sr.check_condition(Condition::EQ)) { goto L259e; }
    // 0026ce: BTST.B dst:(A6.L)+31 src:#2
    BTST<B>(G.io->b(G.a[6] + 0x31), 2);
    // 0026d4: Bcc cond:NE src:(5bba)
    if (G.sr.check_condition(Condition::NE)) {
      _m->clear_sprite_on_a6_14();
      goto end;
    }
    // 0026d8: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L272c:;
    // 00272c: DBcc.W cond:False dst:D0 src:(2750)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L2750; }
    // 002730: CMPI.W dst:(ff0068) src:#9
    CMP<W>(G.io->w(0xff0068), 9);
    // 002738: Bcc cond:CC src:(267a)
    if (G.sr.check_condition(Condition::CC)) { goto L267a; }
    // 00273c: ADDQ.W dst:(ff0068) src:#1
    G.io->w(0xff0068, ADD<W>(G.io->w(0xff0068), 1));
    // 002742: BSR src:(6188)
    F6188();
    // 002746: MOVEQ.L dst:D0 src:#d
    G.d[0].l(UCC(13));
    // 002748: BSR src:(654c)
    F654c();
    // 00274c: Bcc cond:True src:(259e)
    goto L259e;

  L2750:;
    // 002750: DBcc.W cond:False dst:D0 src:(276a)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L276a; }
    // 002754: BSET.B dst:(ff0842) src:#0
    G.io->b(0xff0842, BSET<B>(G.io->b(0xff0842), 0));
    // 00275c: Bcc cond:NE src:(267a)
    if (G.sr.check_condition(Condition::NE)) { goto L267a; }
    // 002760: MOVEQ.L dst:D0 src:#d
    G.d[0].l(UCC(13));
    // 002762: BSR src:(654c)
    F654c();
    // 002766: Bcc cond:True src:(259e)
    goto L259e;

  L276a:;
    // 00276a: TST.W src:(ff0802)
    TST<W>(G.io->w(0xff0802));
    // 002770: Bcc cond:MI src:(267a)
    if (G.sr.check_condition(Condition::MI)) { goto L267a; }
    // 002774: MOVEQ.L dst:D0 src:#27
    G.d[0].l(0x27);
    // 002776: MOVE.L dst:D1 src:(A6.L)+14
    G.d[1].l(UCC(G.io->l(G.a[6] + 0x14)));
    // 00277a: BSR src:(6600)
    F6600();
    // 00277e: MOVEQ.L dst:D0 src:#d
    G.d[0].l(UCC(13));
    // 002780: BSR src:(654c)
    F654c();
    // 002784: Bcc cond:True src:(259e)
    goto L259e;

  L2788:;
    // 002788: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00278e: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 002790: AND.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 002794: Bcc cond:NE src:(5984)
    if (G.sr.check_condition(Condition::NE)) {
      _m->update_sprite_with_something(G.a[6]);
      goto end;
    }
    // 002798: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00279c: ROR.W dst:D0 src:#1
    G.d[0].w(ROR<W>(G.d[0].w(), 1));
    // 00279e: MOVE.L dst:A0 src:(A6.L)+6
    G.a[0] = G.io->l(G.a[6] + 6);
    // 0027a2: MOVE.W dst:D1 src:(A0,D0.W)+0
    G.d[1].w(UCC(G.io->w(G.a[0] + G.d[0].w())));
    // 0027a6: Bcc cond:True src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F27ea()
  {
    _log_call(__func__);

    // 0027ea: LEA.L dst:A0 src:(ff0176)
    G.a[0] = 0xff0176;
    // 0027f0: MOVEQ.L dst:D6 src:#3
    G.d[6].l(3);
    // 0027f2: MOVE.W dst:D7 src:#7ed
    G.d[7].w(UCC(0x7ed));

  L27f6:;
    // 0027f6: TST.W src:(A0)
    TST<W>(G.io->w(G.a[0]));
    // 0027f8: Bcc cond:EQ src:(2806)
    if (G.sr.check_condition(Condition::EQ)) { goto L2806; }
    // 0027fa: LEA.L dst:A0 src:(A0.L)+2
    G.a[0] += 2;
    // 0027fe: ADDQ.W dst:D7 src:#4
    G.d[7].w(ADD<W>(G.d[7].w(), 4));
    // 002800: DBcc.W cond:False dst:D6 src:(27f6)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L27f6; }
    // 002804: RTS
    goto end;

  L2806:;
    // 002806: ADDQ.W dst:(A0) src:#1
    G.io->w(G.a[0], ADD<W>(G.io->w(G.a[0]), 1));
    // 002808: MOVE.W dst:(A6.L)+10 src:D7
    G.io->w(G.a[6] + 0x10, G.d[7].w());
    // 00280c: MOVE.L dst:(A6.L)+18 src:A0
    G.io->l(G.a[6] + 0x18, G.a[0]);
    // 002810: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 002812: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F2848()
  {
    _log_call(__func__);

    // 002848: SUBQ.W dst:(ff0066) src:#1
    G.io->w(0xff0066, SUB<W>(G.io->w(0xff0066), 1));

  L284e:;
    // 00284e: JMP src:(284e)
    F284e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F284e()
  {
    _log_call(__func__);

    // 00284e: BSR src:(6130)
    F6130();
    // 002852: MOVE.L dst:(A6.L)+5c src:#7d
    G.io->l(G.a[6] + 0x5c, UCC(0x7d));
    // 00285a: BSET.B dst:(ff0001) src:#4
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 4));
    // 002862: MOVE.W dst:(A6) src:#8080
    G.io->w(G.a[6], 0x8080);
    // 002866: CLR.L dst:(A6.L)+2
    G.io->l(G.a[6] + 2, 0);
    // 00286a: CLR.L dst:(A6.L)+a
    G.io->l(G.a[6] + 10, 0);
    // 00286e: MOVE.L dst:(A6.L)+6 src:#100000
    G.io->l(G.a[6] + 6, 0x100000);
    // 002876: MOVE.L dst:(A6.L)+10 src:#3f20a09
    G.io->l(G.a[6] + 0x10, 0x3f20a09);
    // 00287e: MOVE.L dst:(A6.L)+14 src:#30003000
    G.io->l(G.a[6] + 0x14, 0x30003000);
    // 002886: MOVE.L dst:(A6.L)+18 src:#6000600
    G.io->l(G.a[6] + 0x18, 0x6000600);
    // 00288e: MOVE.L dst:(A6.L)+1c src:#3000300
    G.io->l(G.a[6] + 0x1c, 0x3000300);
    // 002896: MOVE.W dst:(A6.L)+20 src:#f600
    G.io->w(G.a[6] + 0x20, 0xf600);
    // 00289c: MOVE.W dst:(A6.L)+22 src:#600
    G.io->w(G.a[6] + 0x22, 0x600);
    // 0028a2: MOVE.W dst:D0 src:(A6.L)+e
    G.d[0].w(G.io->w(G.a[6] + 14));
    // 0028a6: MOVE.W dst:(A6.L)+60 src:D0
    G.io->w(G.a[6] + 0x60, G.d[0].w());
    // 0028aa: MOVE.W dst:(A6.L)+62 src:#3f2
    G.io->w(G.a[6] + 0x62, 0x3f2);
    // 0028b0: MOVE.W dst:(A6.L)+64 src:#a09
    G.io->w(G.a[6] + 0x64, 0xa09);
    // 0028b6: MOVE.W dst:(A6.L)+66 src:#f600
    G.io->w(G.a[6] + 0x66, 0xf600);
    // 0028bc: MOVE.W dst:(A6.L)+68 src:#600
    G.io->w(G.a[6] + 0x68, 0x600);
    // 0028c2: MOVE.L dst:(A6.L)+6a src:#40080
    G.io->l(G.a[6] + 0x6a, 0x40080);
    // 0028ca: MOVE.L dst:(A6.L)+30 src:#40080
    G.io->l(G.a[6] + 0x30, 0x40080);
    // 0028d2: ADDQ.W dst:D0 src:#8
    G.d[0].w(ADD<W>(G.d[0].w(), 8));
    // 0028d4: MOVE.W dst:(A6.L)+6e src:D0
    G.io->w(G.a[6] + 0x6e, G.d[0].w());
    // 0028d8: MOVE.W dst:(A6.L)+70 src:#3fb
    G.io->w(G.a[6] + 0x70, 0x3fb);
    // 0028de: MOVE.W dst:(A6.L)+72 src:#504
    G.io->w(G.a[6] + 0x72, 0x504);
    // 0028e4: MOVE.W dst:(A6.L)+74 src:#200
    G.io->w(G.a[6] + 0x74, 0x200);
    // 0028ea: MOVE.W dst:(A6.L)+76 src:#400
    G.io->w(G.a[6] + 0x76, 0x400);
    // 0028f0: MOVE.L dst:(A6.L)+78 src:#40000
    G.io->l(G.a[6] + 0x78, 0x40000);
    // 0028f8: MOVE.L dst:(A6.L)+34 src:#40000
    G.io->l(G.a[6] + 0x34, 0x40000);
    // 002900: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 002902: LEA.L dst:A2 src:(A6.L)+60
    G.a[2] = G.a[6] + 0x60;
    // 002906: Bcc cond:True src:(5ae2)
    F5ae2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F290a()
  {
    _log_call(__func__);

    goto L290a;

  L2814:;
    // 002814: BTST.B dst:(ff0039) src:#0
    BTST<B>(G.io->b(0xff0039), 0);
    // 00281c: Bcc cond:EQ src:(2fb8)
    if (G.sr.check_condition(Condition::EQ)) { goto L2fb8; }
    // 002820: BSET.B dst:(ff2a9f) src:#0
    G.io->b(0xff2a9f, BSET<B>(G.io->b(0xff2a9f), 0));
    // 002828: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(G.io->w(0xff003e));
    // 00282e: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 002832: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 002834: LEA.L dst:A0 src:(2f8c)
    G.a[0] = 0x2f8c;
    // 00283a: MOVE.W dst:D0 src:(A0,D0.W)+0
    G.d[0].w(G.io->w(G.a[0] + G.d[0].w()));
    // 00283e: MOVE.W dst:(ff004e) src:D0
    G.io->w(0xff004e, UCC(G.d[0].w()));
    // 002844: BSR src:(654c)
    F654c();

  L2848:;
    // 002848: JMP src:(2848)
    F2848();
    goto end;

  L290a:;
    // 00290a: LEA.L dst:A6 src:(ff0842)
    G.a[6] = 0xff0842;
    // 002910: BTST.B dst:(ff2a9f) src:#0
    BTST<B>(G.io->b(0xff2a9f), 0);
    // 002918: Bcc cond:EQ src:(2814)
    if (G.sr.check_condition(Condition::EQ)) { goto L2814; }
    // 00291c: TST.W src:(A6.L)+40
    TST<W>(G.io->w(G.a[6] + 0x40));
    // 002920: Bcc cond:NE src:(3010)
    if (G.sr.check_condition(Condition::NE)) { goto L3010; }
    // 002924: BTST.B dst:(ff0039) src:#0
    BTST<B>(G.io->b(0xff0039), 0);
    // 00292c: Bcc cond:EQ src:(2cd8)
    if (G.sr.check_condition(Condition::EQ)) {
      F2cd8();
      goto end;
    }
    // 002930: TST.B src:(A6.L)+1
    TST<B>(G.io->b(G.a[6] + 1));
    // 002934: Bcc cond:MI src:(2cd8)
    if (G.sr.check_condition(Condition::MI)) {
      F2cd8();
      goto end;
    }
    // 002938: TST.W src:(A6.L)+5e
    TST<W>(G.io->w(G.a[6] + 0x5e));
    // 00293c: Bcc cond:EQ src:(294c)
    if (G.sr.check_condition(Condition::EQ)) { goto L294c; }
    // 00293e: SUBQ.W dst:(A6.L)+5e src:#1
    G.io->w(G.a[6] + 0x5e, SUB<W>(G.io->w(G.a[6] + 0x5e), 1));
    // 002942: Bcc cond:NE src:(294c)
    if (G.sr.check_condition(Condition::NE)) { goto L294c; }
    // 002944: BCLR.B dst:(ff0001) src:#4
    G.io->b(0xff0001, BCLR<B>(G.io->b(0xff0001), 4));

  L294c:;
    // 00294c: TST.W src:(A6.L)+5c
    TST<W>(G.io->w(G.a[6] + 0x5c));
    // 002950: Bcc cond:EQ src:(2956)
    if (G.sr.check_condition(Condition::EQ)) { goto L2956; }
    // 002952: SUBQ.W dst:(A6.L)+5c src:#1
    G.io->w(G.a[6] + 0x5c, SUB<W>(G.io->w(G.a[6] + 0x5c), 1));

  L2956:;
    // 002956: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00295a: Bcc cond:EQ src:(2996)
    if (G.sr.check_condition(Condition::EQ)) { goto L2996; }
    // 00295c: BTST.B dst:(ff0001) src:#3
    BTST<B>(G.io->b(0xff0001), 3);
    // 002964: Bcc cond:NE src:(2996)
    if (G.sr.check_condition(Condition::NE)) { goto L2996; }
    // 002966: BCLR.B dst:(A6) src:#0
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 0));
    // 00296a: Bcc cond:NE src:(297e)
    if (G.sr.check_condition(Condition::NE)) { goto L297e; }
    // 00296c: BTST.B dst:(A6.L)+1 src:#5
    BTST<B>(G.io->b(G.a[6] + 1), 5);
    // 002972: Bcc cond:EQ src:(2ed4)
    if (G.sr.check_condition(Condition::EQ)) { goto L2ed4; }
    // 002976: BCLR.B dst:(A6.L)+1 src:#6
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 6));
    // 00297c: Bcc cond:True src:(2996)
    goto L2996;

  L297e:;
    // 00297e: MOVEQ.L dst:D0 src:#1
    G.d[0].l(1);
    // 002980: MOVE.L dst:D1 src:#122ac
    G.d[1].l(0x122ac);
    // 002986: MOVE.W dst:D2 src:#1a
    G.d[2].w(UCC(0x1a));
    // 00298a: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 00298e: MOVE.W dst:D0 src:#c
    G.d[0].w(UCC(12));
    // 002992: BSR src:(654c)
    F654c();

  L2996:;
    // 002996: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00299a: Bcc cond:NE src:(2ed4)
    if (G.sr.check_condition(Condition::NE)) { goto L2ed4; }
    // 00299e: BSR src:(6864)
    _m->inc_something(G.a[6]);
    // 0029a2: MOVE.W dst:D0 src:(CONTROLLER_STATE1)
    G.d[0].w(UCC(G.io->w(CONTROLLER_STATE1)));
    // 0029a8: CMPI.W dst:(A6.L)+14 src:#9500
    CMP<W>(G.io->w(G.a[6] + 0x14), 0x9500);
    // 0029ae: Bcc cond:CS src:(29b4)
    if (G.sr.check_condition(Condition::CS)) { goto L29b4; }
    // 0029b0: BCLR.L dst:D0 src:#3
    G.d[0].l(BCLR<L>(G.d[0].l(), 3));

  L29b4:;
    // 0029b4: CMPI.W dst:(A6.L)+14 src:#c00
    CMP<W>(G.io->w(G.a[6] + 0x14), 0xc00);
    // 0029ba: Bcc cond:CC src:(29c0)
    if (G.sr.check_condition(Condition::CC)) { goto L29c0; }
    // 0029bc: BCLR.L dst:D0 src:#2
    G.d[0].l(BCLR<L>(G.d[0].l(), 2));

  L29c0:;
    // 0029c0: CMPI.W dst:(A6.L)+16 src:#5900
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x5900);
    // 0029c6: Bcc cond:CS src:(29cc)
    if (G.sr.check_condition(Condition::CS)) { goto L29cc; }
    // 0029c8: BCLR.L dst:D0 src:#0
    G.d[0].l(BCLR<L>(G.d[0].l(), 0));

  L29cc:;
    // 0029cc: CMPI.W dst:(A6.L)+16 src:#700
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x700);
    // 0029d2: Bcc cond:CC src:(29d8)
    if (G.sr.check_condition(Condition::CC)) { goto L29d8; }
    // 0029d4: BCLR.L dst:D0 src:#1
    G.d[0].l(BCLR<L>(G.d[0].l(), 1));

  L29d8:;
    // 0029d8: AND.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 0029dc: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 0029de: LEA.L dst:A0 src:(2f98)
    G.a[0] = 0x2f98;
    // 0029e4: MOVE.W dst:(A6.L)+8 src:(A0,D0.W)+0
    G.io->w(G.a[6] + 8, UCC(G.io->w(G.a[0] + G.d[0].w())));
    // 0029ea: CMPI.W dst:(A6.L)+8 src:#40
    CMP<W>(G.io->w(G.a[6] + 8), 0x40);
    // 0029f0: Bcc cond:EQ src:(2a00)
    if (G.sr.check_condition(Condition::EQ)) { goto L2a00; }
    // 0029f2: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0029f6: MOVE.W dst:(A6.L)+26 src:D3
    G.io->w(G.a[6] + 0x26, G.d[3].w());
    // 0029fa: MOVE.W dst:(A6.L)+28 src:D2
    G.io->w(G.a[6] + 0x28, UCC(G.d[2].w()));
    // 0029fe: Bcc cond:True src:(2a04)
    goto L2a04;

  L2a00:;
    // 002a00: CLR.L dst:(A6.L)+26
    G.io->l(G.a[6] + 0x26, UCC(0));

  L2a04:;
    // 002a04: MOVE.W dst:D0 src:(CONTROLLER_STATE1)
    G.d[0].w(G.io->w(CONTROLLER_STATE1));
    // 002a0a: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 002a0c: AND.W dst:D1 src:#30
    G.d[1].w(AND<W>(G.d[1].w(), 0x30));
    // 002a10: CMP.W dst:D1 src:#30
    CMP<W>(G.d[1].w(), 0x30);
    // 002a14: Bcc cond:NE src:(2a20)
    if (G.sr.check_condition(Condition::NE)) { goto L2a20; }
    // 002a16: BTST.B dst:(A6) src:#2
    BTST<B>(G.io->b(G.a[6]), 2);
    // 002a1a: Bcc cond:NE src:(2a20)
    if (G.sr.check_condition(Condition::NE)) { goto L2a20; }
    // 002a1c: BCLR.L dst:D0 src:#4
    G.d[0].l(BCLR<L>(G.d[0].l(), 4));

  L2a20:;
    // 002a20: BTST.B dst:(A6) src:#5
    BTST<B>(G.io->b(G.a[6]), 5);
    // 002a24: Bcc cond:NE src:(2b16)
    if (G.sr.check_condition(Condition::NE)) { goto L2b16; }
    // 002a28: TST.W src:(ff0068)
    TST<W>(G.io->w(0xff0068));
    // 002a2e: Bcc cond:EQ src:(2a3e)
    if (G.sr.check_condition(Condition::EQ)) { goto L2a3e; }
    // 002a30: BTST.L dst:D0 src:#6
    BTST<L>(G.d[0].l(), 6);
    // 002a34: Bcc cond:NE src:(2ae4)
    if (G.sr.check_condition(Condition::NE)) { goto L2ae4; }
    // 002a38: BCLR.B dst:(A6.L)+1 src:#6
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 6));

  L2a3e:;
    // 002a3e: BTST.L dst:D0 src:#4
    BTST<L>(G.d[0].l(), 4);
    // 002a42: Bcc cond:NE src:(2a4a)
    if (G.sr.check_condition(Condition::NE)) { goto L2a4a; }
    // 002a44: BCLR.B dst:(A6) src:#3
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 3));
    // 002a48: Bcc cond:True src:(2a7c)
    goto L2a7c;

  L2a4a:;
    // 002a4a: BSET.B dst:(A6) src:#3
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 3));
    // 002a4e: Bcc cond:NE src:(2a56)
    if (G.sr.check_condition(Condition::NE)) { goto L2a56; }
    // 002a50: CLR.W dst:(A6.L)+5a
    G.io->w(G.a[6] + 0x5a, UCC(0));
    // 002a54: Bcc cond:True src:(2a74)
    goto L2a74;

  L2a56:;
    // 002a56: TST.B src:(ff0001)
    TST<B>(G.io->b(0xff0001));
    // 002a5c: Bcc cond:MI src:(2a66)
    if (G.sr.check_condition(Condition::MI)) { goto L2a66; }
    // 002a5e: TST.W src:(ff0010)
    TST<W>(G.io->w(0xff0010));
    // 002a64: Bcc cond:EQ src:(2a7c)
    if (G.sr.check_condition(Condition::EQ)) { goto L2a7c; }

  L2a66:;
    // 002a66: ADDQ.W dst:(A6.L)+5a src:#1
    G.io->w(G.a[6] + 0x5a, ADD<W>(G.io->w(G.a[6] + 0x5a), 1));
    // 002a6a: MOVE.W dst:D1 src:(A6.L)+5a
    G.d[1].w(G.io->w(G.a[6] + 0x5a));
    // 002a6e: AND.W dst:D1 src:#7
    G.d[1].w(AND<W>(G.d[1].w(), 7));
    // 002a72: Bcc cond:NE src:(2a7c)
    if (G.sr.check_condition(Condition::NE)) { goto L2a7c; }

  L2a74:;
    // 002a74: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(G.d[0].w()));
    // 002a76: BSR src:(6c58)
    F6c58();
    // 002a7a: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  L2a7c:;
    // 002a7c: BTST.L dst:D0 src:#5
    BTST<L>(G.d[0].l(), 5);
    // 002a80: Bcc cond:NE src:(2a8a)
    if (G.sr.check_condition(Condition::NE)) { goto L2a8a; }
    // 002a82: BCLR.B dst:(A6) src:#2
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 2));
    // 002a86: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L2a8a:;
    // 002a8a: BSET.B dst:(A6) src:#2
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 2));
    // 002a8e: Bcc cond:NE src:(2cd8)
    if (G.sr.check_condition(Condition::NE)) {
      F2cd8();
      goto end;
    }
    // 002a92: ADDQ.W dst:(A6.L)+4 src:#1
    G.io->w(G.a[6] + 4, ADD<W>(G.io->w(G.a[6] + 4), 1));
    // 002a96: ANDI.W dst:(A6.L)+4 src:#3
    G.io->w(G.a[6] + 4, AND<W>(G.io->w(G.a[6] + 4), 3));
    // 002a9c: MOVEQ.L dst:D0 src:#3
    G.d[0].l(3);
    // 002a9e: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 002aa0: MOVE.W dst:D1 src:(A6.L)+4
    G.d[1].w(UCC(G.io->w(G.a[6] + 4)));
    // 002aa4: MULU.W dst:D1 src:#6
    G.d[1].l(MULU(G.d[1].w(), 6));
    // 002aa8: ADDI.L dst:D1 src:#1283e
    G.d[1].l(ADD<L>(G.d[1].l(), 0x1283e));
    // 002aae: MOVE.W dst:D2 src:#2
    G.d[2].w(UCC(2));
    // 002ab2: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 002ab6: MOVE.W dst:D0 src:#90
    G.d[0].w(UCC(0x90));
    // 002aba: BSR src:(654c)
    F654c();
    // 002abe: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 002ac0: BSR src:(654c)
    F654c();
    // 002ac4: ANDI.W dst:(A6.L)+a src:#1f
    G.io->w(G.a[6] + 10, AND<W>(G.io->w(G.a[6] + 10), 0x1f));
    // 002aca: Bcc cond:NE src:(2adc)
    if (G.sr.check_condition(Condition::NE)) { goto L2adc; }
    // 002acc: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 002ace: MOVE.L dst:D1 src:#3d000000
    G.d[1].l(UCC(0x3d000000));
    // 002ad4: BSR src:(6600)
    F6600();
    // 002ad8: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L2adc:;
    // 002adc: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, UCC(0));
    // 002ae0: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L2ae4:;
    // 002ae4: BSET.B dst:(A6.L)+1 src:#6
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 6));
    // 002aea: Bcc cond:NE src:(2a3e)
    if (G.sr.check_condition(Condition::NE)) { goto L2a3e; }
    // 002aee: SUBQ.W dst:(ff0068) src:#1
    G.io->w(0xff0068, SUB<W>(G.io->w(0xff0068), 1));
    // 002af4: BSR src:(6188)
    F6188();
    // 002af8: MOVEQ.L dst:D0 src:#f
    G.d[0].l(UCC(15));
    // 002afa: BSR src:(654c)
    F654c();
    // 002afe: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 002b02: CLR.L dst:(A6.L)+56
    G.io->l(G.a[6] + 0x56, 0);
    // 002b06: MOVE.W dst:(A6.L)+12 src:#f10
    G.io->w(G.a[6] + 0x12, 0xf10);
    // 002b0c: MOVE.W dst:(A6.L)+22 src:#800
    G.io->w(G.a[6] + 0x22, UCC(0x800));
    // 002b12: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L2b16:;
    // 002b16: MOVE.W dst:D7 src:(A6.L)+58
    G.d[7].w(UCC(G.io->w(G.a[6] + 0x58)));
    // 002b1a: CMPI.W dst:(A6.L)+2 src:#2
    CMP<W>(G.io->w(G.a[6] + 2), 2);
    // 002b20: Bcc cond:CC src:(2bee)
    if (G.sr.check_condition(Condition::CC)) { goto L2bee; }
    // 002b24: CMPI.W dst:D7 src:#2
    CMP<W>(G.d[7].w(), 2);
    // 002b28: Bcc cond:CS src:(2cd8)
    if (G.sr.check_condition(Condition::CS)) {
      F2cd8();
      goto end;
    }
    // 002b2c: CMPI.W dst:D7 src:#12
    CMP<W>(G.d[7].w(), 0x12);
    // 002b30: Bcc cond:CC src:(2cd8)
    if (G.sr.check_condition(Condition::CC)) {
      F2cd8();
      goto end;
    }
    // 002b34: SUBQ.W dst:D7 src:#2
    G.d[7].w(SUB<W>(G.d[7].w(), 2));
    // 002b36: AND.W dst:D7 src:#1
    G.d[7].w(AND<W>(G.d[7].w(), 1));
    // 002b3a: Bcc cond:NE src:(2cd8)
    if (G.sr.check_condition(Condition::NE)) {
      F2cd8();
      goto end;
    }
    // 002b3e: MOVE.L dst:D6 src:(A6.L)+14
    G.d[6].l(G.io->l(G.a[6] + 0x14));
    // 002b42: ADD.L dst:D6 src:#a000600
    G.d[6].l(ADD<L>(G.d[6].l(), 0xa000600));
    // 002b48: LEA.L dst:A5 src:(ff08c2)
    G.a[5] = 0xff08c2;
    // 002b4e: ADDA.W dst:A5 src:(A6.L)+56
    G.a[5] = ADD<L>(G.a[5], G.io->w(G.a[6] + 0x56));
    // 002b52: MOVE.W dst:(A5.L)+c src:#4
    G.io->w(G.a[5] + 12, 4);
    // 002b58: MOVE.L dst:(A5.L)+1c src:#4001000
    G.io->l(G.a[5] + 0x1c, UCC(0x4001000));
    // 002b60: TST.W src:(A6.L)+56
    TST<W>(G.io->w(G.a[6] + 0x56));
    // 002b64: Bcc cond:NE src:(2b7e)
    if (G.sr.check_condition(Condition::NE)) { goto L2b7e; }
    // 002b66: BSR src:(6066)
    F6066();
    // 002b6a: MOVE.W dst:(A5) src:#8110
    G.io->w(G.a[5], 0x8110);
    // 002b6e: MOVE.W dst:(A5.L)+10 src:#6e7
    G.io->w(G.a[5] + 0x10, 0x6e7);
    // 002b74: MOVE.W dst:(A5.L)+12 src:#606
    G.io->w(G.a[5] + 0x12, UCC(0x606));
    // 002b7a: Bcc cond:True src:(2cbc)
    goto L2cbc;

  L2b7e:;
    // 002b7e: CMPI.W dst:(A6.L)+56 src:#40
    CMP<W>(G.io->w(G.a[6] + 0x56), 0x40);
    // 002b84: Bcc cond:NE src:(2b9e)
    if (G.sr.check_condition(Condition::NE)) { goto L2b9e; }
    // 002b86: BSR src:(607e)
    F607e();
    // 002b8a: MOVE.W dst:(A5) src:#8120
    G.io->w(G.a[5], 0x8120);
    // 002b8e: MOVE.W dst:(A5.L)+10 src:#6d5
    G.io->w(G.a[5] + 0x10, 0x6d5);
    // 002b94: MOVE.W dst:(A5.L)+12 src:#606
    G.io->w(G.a[5] + 0x12, UCC(0x606));
    // 002b9a: Bcc cond:True src:(2cbc)
    goto L2cbc;

  L2b9e:;
    // 002b9e: CMPI.W dst:(A6.L)+56 src:#1c0
    CMP<W>(G.io->w(G.a[6] + 0x56), 0x1c0);
    // 002ba4: Bcc cond:CC src:(2bba)
    if (G.sr.check_condition(Condition::CC)) { goto L2bba; }
    // 002ba6: MOVE.W dst:(A5) src:#8140
    G.io->w(G.a[5], 0x8140);
    // 002baa: MOVE.W dst:(A5.L)+10 src:#6d5
    G.io->w(G.a[5] + 0x10, 0x6d5);
    // 002bb0: MOVE.W dst:(A5.L)+12 src:#e0c
    G.io->w(G.a[5] + 0x12, UCC(0xe0c));
    // 002bb6: Bcc cond:True src:(2cbc)
    goto L2cbc;

  L2bba:;
    // 002bba: MOVE.W dst:(A5) src:#8140
    G.io->w(G.a[5], 0x8140);
    // 002bbe: MOVE.W dst:(A5.L)+10 src:#ee1
    G.io->w(G.a[5] + 0x10, 0xee1);
    // 002bc4: MOVE.W dst:(A5.L)+12 src:#e0c
    G.io->w(G.a[5] + 0x12, 0xe0c);
    // 002bca: MOVE.W dst:(A5.L)+40 src:#8310
    G.io->w(G.a[5] + 0x40, 0x8310);
    // 002bd0: MOVE.W dst:(A5.L)+42 src:#8
    G.io->w(G.a[5] + 0x42, 8);
    // 002bd6: MOVE.W dst:(A5.L)+50 src:#6ea
    G.io->w(G.a[5] + 0x50, 0x6ea);
    // 002bdc: MOVE.W dst:(A5.L)+52 src:#203
    G.io->w(G.a[5] + 0x52, 0x203);
    // 002be2: MOVE.L dst:(A5.L)+54 src:D6
    G.io->l(G.a[5] + 0x54, G.d[6].l());
    // 002be6: CLR.L dst:(A5.L)+60
    G.io->l(G.a[5] + 0x60, UCC(0));
    // 002bea: Bcc cond:True src:(2cbc)
    goto L2cbc;

  L2bee:;
    // 002bee: CMPI.W dst:D7 src:#2
    CMP<W>(G.d[7].w(), 2);
    // 002bf2: Bcc cond:NE src:(2bfc)
    if (G.sr.check_condition(Condition::NE)) { goto L2bfc; }
    // 002bf4: BSR src:(607e)
    F607e();
    // 002bf8: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L2bfc:;
    // 002bfc: CMPI.W dst:D7 src:#4
    CMP<W>(G.d[7].w(), 4);
    // 002c00: Bcc cond:CS src:(2cd8)
    if (G.sr.check_condition(Condition::CS)) {
      F2cd8();
      goto end;
    }
    // 002c04: CMPI.W dst:D7 src:#14
    CMP<W>(G.d[7].w(), 0x14);
    // 002c08: Bcc cond:CC src:(2cd8)
    if (G.sr.check_condition(Condition::CC)) {
      F2cd8();
      goto end;
    }
    // 002c0c: SUBQ.W dst:D7 src:#4
    G.d[7].w(SUB<W>(G.d[7].w(), 4));
    // 002c0e: AND.W dst:D7 src:#1
    G.d[7].w(AND<W>(G.d[7].w(), 1));
    // 002c12: Bcc cond:NE src:(2cd8)
    if (G.sr.check_condition(Condition::NE)) {
      F2cd8();
      goto end;
    }
    // 002c16: MOVE.L dst:D6 src:(A6.L)+14
    G.d[6].l(G.io->l(G.a[6] + 0x14));
    // 002c1a: ADD.L dst:D6 src:#a000800
    G.d[6].l(ADD<L>(G.d[6].l(), 0xa000800));
    // 002c20: LEA.L dst:A5 src:(ff08c2)
    G.a[5] = 0xff08c2;
    // 002c26: ADDA.W dst:A5 src:(A6.L)+56
    G.a[5] = ADD<L>(G.a[5], G.io->w(G.a[6] + 0x56));
    // 002c2a: MOVE.W dst:(A5.L)+c src:#8
    G.io->w(G.a[5] + 12, 8);
    // 002c30: MOVE.L dst:(A5.L)+1c src:#4001400
    G.io->l(G.a[5] + 0x1c, UCC(0x4001400));
    // 002c38: TST.W src:(A6.L)+56
    TST<W>(G.io->w(G.a[6] + 0x56));
    // 002c3c: Bcc cond:NE src:(2c54)
    if (G.sr.check_condition(Condition::NE)) { goto L2c54; }
    // 002c3e: BSR src:(6066)
    F6066();
    // 002c42: MOVE.W dst:(A5) src:#8190
    G.io->w(G.a[5], 0x8190);
    // 002c46: MOVE.W dst:(A5.L)+10 src:#6cd
    G.io->w(G.a[5] + 0x10, 0x6cd);
    // 002c4c: MOVE.W dst:(A5.L)+12 src:#708
    G.io->w(G.a[5] + 0x12, UCC(0x708));
    // 002c52: Bcc cond:True src:(2cbc)
    goto L2cbc;

  L2c54:;
    // 002c54: CMPI.W dst:(A6.L)+56 src:#40
    CMP<W>(G.io->w(G.a[6] + 0x56), 0x40);
    // 002c5a: Bcc cond:NE src:(2c72)
    if (G.sr.check_condition(Condition::NE)) { goto L2c72; }
    // 002c5c: BSR src:(607e)
    F607e();
    // 002c60: MOVE.W dst:(A5) src:#81a0
    G.io->w(G.a[5], 0x81a0);
    // 002c64: MOVE.W dst:(A5.L)+10 src:#6b5
    G.io->w(G.a[5] + 0x10, 0x6b5);
    // 002c6a: MOVE.W dst:(A5.L)+12 src:#708
    G.io->w(G.a[5] + 0x12, UCC(0x708));
    // 002c70: Bcc cond:True src:(2cbc)
    goto L2cbc;

  L2c72:;
    // 002c72: CMPI.W dst:(A6.L)+56 src:#1c0
    CMP<W>(G.io->w(G.a[6] + 0x56), 0x1c0);
    // 002c78: Bcc cond:CC src:(2c8c)
    if (G.sr.check_condition(Condition::CC)) { goto L2c8c; }
    // 002c7a: MOVE.W dst:(A5) src:#81c0
    G.io->w(G.a[5], 0x81c0);
    // 002c7e: MOVE.W dst:(A5.L)+10 src:#6b5
    G.io->w(G.a[5] + 0x10, 0x6b5);
    // 002c84: MOVE.W dst:(A5.L)+12 src:#f10
    G.io->w(G.a[5] + 0x12, UCC(0xf10));
    // 002c8a: Bcc cond:True src:(2cbc)
    goto L2cbc;

  L2c8c:;
    // 002c8c: MOVE.W dst:(A5) src:#81c0
    G.io->w(G.a[5], 0x81c0);
    // 002c90: MOVE.W dst:(A5.L)+10 src:#ec5
    G.io->w(G.a[5] + 0x10, 0xec5);
    // 002c96: MOVE.W dst:(A5.L)+12 src:#f10
    G.io->w(G.a[5] + 0x12, 0xf10);
    // 002c9c: MOVE.W dst:(A5.L)+40 src:#8390
    G.io->w(G.a[5] + 0x40, 0x8390);
    // 002ca2: MOVE.W dst:(A5.L)+42 src:#10
    G.io->w(G.a[5] + 0x42, 0x10);
    // 002ca8: MOVE.W dst:(A5.L)+50 src:#6d1
    G.io->w(G.a[5] + 0x50, 0x6d1);
    // 002cae: MOVE.W dst:(A5.L)+52 src:#304
    G.io->w(G.a[5] + 0x52, 0x304);
    // 002cb4: MOVE.L dst:(A5.L)+54 src:D6
    G.io->l(G.a[5] + 0x54, G.d[6].l());
    // 002cb8: CLR.L dst:(A5.L)+60
    G.io->l(G.a[5] + 0x60, UCC(0));

  L2cbc:;
    // 002cbc: MOVE.W dst:(A5.L)+2 src:#8
    G.io->w(G.a[5] + 2, 8);
    // 002cc2: MOVE.L dst:(A5.L)+14 src:D6
    G.io->l(G.a[5] + 0x14, G.d[6].l());
    // 002cc6: MOVE.L dst:(A5.L)+18 src:#10000000
    G.io->l(G.a[5] + 0x18, 0x10000000);
    // 002cce: CLR.L dst:(A5.L)+20
    G.io->l(G.a[5] + 0x20, 0);
    // 002cd2: ADDI.W dst:(A6.L)+56 src:#40
    G.io->w(G.a[6] + 0x56, ADD<W>(G.io->w(G.a[6] + 0x56), 0x40));

  L2cd8:;
    // 002cd8: JMP src:(2cd8)
    F2cd8();
    goto end;

  L2ed4:;
    // 002ed4: ADDQ.W dst:(A6.L)+c src:#1
    G.io->w(G.a[6] + 12, ADD<W>(G.io->w(G.a[6] + 12), 1));
    // 002ed8: BTST.B dst:(A6.L)+1 src:#4
    BTST<B>(G.io->b(G.a[6] + 1), 4);
    // 002ede: Bcc cond:NE src:(2f54)
    if (G.sr.check_condition(Condition::NE)) { goto L2f54; }
    // 002ee0: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 002ee4: Bcc cond:NE src:(2f1a)
    if (G.sr.check_condition(Condition::NE)) { goto L2f1a; }
    // 002ee6: BCLR.B dst:(A6) src:#7
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 7));
    // 002eea: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, UCC(0));
    // 002eee: BSET.B dst:(ff0001) src:#4
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 4));
    // 002ef6: MOVE.W dst:D0 src:(A6.L)+e
    G.d[0].w(G.io->w(G.a[6] + 14));
    // 002efa: ADDQ.W dst:D0 src:#8
    G.d[0].w(ADD<W>(G.d[0].w(), 8));
    // 002efc: BSR src:(5bbe)
    _m->clear_sprite_position(G.d[0].w());
    // 002f00: MOVE.L dst:(A6.L)+10 src:#3f20f10
    G.io->l(G.a[6] + 0x10, 0x3f20f10);
    // 002f08: MOVE.L dst:(A6.L)+20 src:#f8000800
    G.io->l(G.a[6] + 0x20, UCC(0xf8000800));
    // 002f10: BSR src:(65a4)
    F65a4();
    // 002f14: MOVEQ.L dst:D0 src:#18
    G.d[0].l(UCC(0x18));
    // 002f16: BSR src:(654c)
    F654c();

  L2f1a:;
    // 002f1a: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 002f1e: CMP.W dst:D0 src:#20
    CMP<W>(G.d[0].w(), 0x20);
    // 002f22: Bcc cond:CC src:(2f4a)
    if (G.sr.check_condition(Condition::CC)) { goto L2f4a; }
    // 002f24: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 002f26: AND.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 002f2a: Bcc cond:NE src:(5984)
    if (G.sr.check_condition(Condition::NE)) {
      _m->update_sprite_with_something(G.a[6]);
      goto end;
    }
    // 002f2e: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 002f32: LEA.L dst:A0 src:(2f6c)
    G.a[0] = 0x2f6c;
    // 002f38: MOVE.L dst:D1 src:(A0,D0.W)+0
    G.d[1].l(G.io->l(G.a[0] + G.d[0].w()));
    // 002f3c: MOVEQ.L dst:D0 src:#10
    G.d[0].l(0x10);
    // 002f3e: MOVE.W dst:D2 src:#3f2
    G.d[2].w(UCC(0x3f2));
    // 002f42: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 002f46: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L2f4a:;
    // 002f4a: BSET.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 4));
    // 002f50: Bcc cond:True src:(5bba)
    _m->clear_sprite_on_a6_14();
    goto end;

  L2f54:;
    // 002f54: CMPI.W dst:(A6.L)+c src:#a0
    CMP<W>(G.io->w(G.a[6] + 12), 0xa0);
    // 002f5a: Bcc cond:LS src:(2f6a)
    if (G.sr.check_condition(Condition::LS)) { goto L2f6a; }
    // 002f5c: BSET.B dst:(ff0001) src:#6
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 6));
    // 002f64: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 002f66: Bcc cond:True src:(663a)
    F663a();
    goto end;

  L2f6a:;
    // 002f6a: RTS
    goto end;

  L2fb8:;
    // 002fb8: BSET.B dst:(ff2a9f) src:#1
    G.io->b(0xff2a9f, BSET<B>(G.io->b(0xff2a9f), 1));
    // 002fc0: Bcc cond:NE src:(2fce)
    if (G.sr.check_condition(Condition::NE)) { goto L2fce; }
    // 002fc2: BSR src:(2848)
    F2848();
    // 002fc6: MOVE.L dst:(A6.L)+14 src:#5c004000
    G.io->l(G.a[6] + 0x14, UCC(0x5c004000));

  L2fce:;
    // 002fce: BTST.B dst:(ff2a9f) src:#2
    BTST<B>(G.io->b(0xff2a9f), 2);
    // 002fd6: Bcc cond:NE src:(2ff4)
    if (G.sr.check_condition(Condition::NE)) { goto L2ff4; }
    // 002fd8: SUBI.W dst:(A6.L)+14 src:#40
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x40));
    // 002fde: CMPI.W dst:(A6.L)+14 src:#3000
    CMP<W>(G.io->w(G.a[6] + 0x14), 0x3000);
    // 002fe4: Bcc cond:CC src:(2cd8)
    if (G.sr.check_condition(Condition::CC)) {
      F2cd8();
      goto end;
    }
    // 002fe8: BSET.B dst:(ff2a9f) src:#2
    G.io->b(0xff2a9f, BSET<B>(G.io->b(0xff2a9f), 2));
    // 002ff0: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L2ff4:;
    // 002ff4: SUBI.W dst:(A6.L)+16 src:#40
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0x40));
    // 002ffa: CMPI.W dst:(A6.L)+16 src:#3000
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x3000);
    // 003000: Bcc cond:CC src:(2cd8)
    if (G.sr.check_condition(Condition::CC)) {
      F2cd8();
      goto end;
    }
    // 003004: BSET.B dst:(ff2a9f) src:#0
    G.io->b(0xff2a9f, BSET<B>(G.io->b(0xff2a9f), 0));
    // 00300c: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L3010:;
    // 003010: BSET.B dst:(ff2a9f) src:#3
    G.io->b(0xff2a9f, BSET<B>(G.io->b(0xff2a9f), 3));
    // 003018: Bcc cond:NE src:(30bc)
    if (G.sr.check_condition(Condition::NE)) { goto L30bc; }
    // 00301c: MOVE.W dst:D0 src:(ff004e)
    G.d[0].w(G.io->w(0xff004e));
    // 003022: ADD.W dst:D0 src:#c0
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc0));
    // 003026: BSR src:(654c)
    F654c();
    // 00302a: MOVE.W dst:(A6.L)+42 src:#140
    G.io->w(G.a[6] + 0x42, 0x140);
    // 003030: MOVE.W dst:(A6.L)+44 src:#40
    G.io->w(G.a[6] + 0x44, UCC(0x40));
    // 003036: BSET.B dst:(A6.L)+1 src:#7
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 7));
    // 00303c: MOVEQ.L dst:D6 src:#2
    G.d[6].l(2);
    // 00303e: MOVEQ.L dst:D7 src:#1f
    G.d[7].l(UCC(0x1f));

  L3040:;
    // 003040: MOVE.W dst:D0 src:D6
    G.d[0].w(UCC(G.d[6].w()));
    // 003042: BSR src:(663a)
    F663a();
    // 003046: ADDQ.W dst:D6 src:#1
    G.d[6].w(ADD<W>(G.d[6].w(), 1));
    // 003048: DBcc.W cond:False dst:D7 src:(3040)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L3040; }
    // 00304c: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 003052: MOVEQ.L dst:D7 src:#f
    G.d[7].l(UCC(15));

  L3054:;
    // 003054: CLR.W dst:(A6)
    G.io->w(G.a[6], UCC(0));
    // 003056: BSR src:(5bba)
    _m->clear_sprite_on_a6_14();
    // 00305a: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 00305e: DBcc.W cond:False dst:D7 src:(3054)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L3054; }
    // 003062: LEA.L dst:A6 src:(ff0cc2)
    G.a[6] = 0xff0cc2;
    // 003068: MOVEQ.L dst:D7 src:#1f
    G.d[7].l(UCC(0x1f));

  L306a:;
    // 00306a: CLR.W dst:(A6)
    G.io->w(G.a[6], UCC(0));
    // 00306c: BSR src:(5b58)
    F5b58();
    // 003070: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 003074: LEA.L dst:A1 src:(ff254a)
    G.a[1] = 0xff254a;
    // 00307a: MOVEQ.L dst:D0 src:#7
    G.d[0].l(UCC(7));

  L307c:;
    // 00307c: MOVE.W dst:D1 src:(A0)
    G.d[1].w(UCC(G.io->w(G.a[0])));
    // 00307e: Bcc cond:EQ src:(308c)
    if (G.sr.check_condition(Condition::EQ)) { goto L308c; }
    // 003080: SUB.W dst:D1 src:#140
    G.d[1].w(SUB<W>(G.d[1].w(), 0x140));
    // 003084: LSR.W dst:D1 src:#2
    G.d[1].w(LSR<W>(G.d[1].w(), 2));
    // 003086: CLR.W dst:(A0)
    G.io->w(G.a[0], 0);
    // 003088: CLR.W dst:(A1,D1.W)+0
    G.io->w(G.a[1] + G.d[1].w(), UCC(0));

  L308c:;
    // 00308c: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 003090: DBcc.W cond:False dst:D0 src:(307c)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L307c; }
    // 003094: LEA.L dst:A6 src:(A6.L)+c0
    G.a[6] += 0xc0;
    // 003098: DBcc.W cond:False dst:D7 src:(306a)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L306a; }
    // 00309c: LEA.L dst:A6 src:(ff0182)
    G.a[6] = 0xff0182;
    // 0030a2: MOVEQ.L dst:D7 src:#9
    G.d[7].l(UCC(9));

  L30a4:;
    // 0030a4: CLR.W dst:(A6)
    G.io->w(G.a[6], UCC(0));
    // 0030a6: LEA.L dst:A6 src:(A6.L)+20
    G.a[6] += 0x20;
    // 0030aa: DBcc.W cond:False dst:D7 src:(30a4)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L30a4; }
    // 0030ae: LEA.L dst:A6 src:(ff0842)
    G.a[6] = 0xff0842;
    // 0030b4: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 0030b8: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L30bc:;
    // 0030bc: TST.W src:(A6.L)+44
    TST<W>(G.io->w(G.a[6] + 0x44));
    // 0030c0: Bcc cond:EQ src:(31c8)
    if (G.sr.check_condition(Condition::EQ)) { goto L31c8; }
    // 0030c4: CMPI.W dst:(ff003e) src:#5
    CMP<W>(G.io->w(0xff003e), 5);
    // 0030cc: Bcc cond:NE src:(30e6)
    if (G.sr.check_condition(Condition::NE)) { goto L30e6; }
    // 0030ce: CMPI.W dst:(A6.L)+14 src:#ac00
    CMP<W>(G.io->w(G.a[6] + 0x14), 0xac00);
    // 0030d4: Bcc cond:CC src:(30e6)
    if (G.sr.check_condition(Condition::CC)) { goto L30e6; }
    // 0030d6: ADDI.W dst:(A6.L)+14 src:#200
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x200));
    // 0030dc: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  L30e6:;
    // 0030e6: SUBQ.W dst:(A6.L)+44 src:#1
    G.io->w(G.a[6] + 0x44, SUB<W>(G.io->w(G.a[6] + 0x44), 1));
    // 0030ea: Bcc cond:NE src:(2cd8)
    if (G.sr.check_condition(Condition::NE)) {
      F2cd8();
      goto end;
    }
    // 0030ee: CLR.L dst:(ff00ea)
    G.io->l(0xff00ea, 0);
    // 0030f4: CLR.W dst:(ff00ee)
    G.io->w(0xff00ee, UCC(0));
    // 0030fa: BSR src:(5e08)
    _m->clear_cram();
    // 0030fe: BSR src:(649c)
    _m->clear_vscroll();
    // 003102: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 003106: MOVE.W dst:D1 src:#0
    G.d[1].w(0);
    // 00310a: MOVE.W dst:D2 src:#3f
    G.d[2].w(0x3f);
    // 00310e: MOVE.W dst:D3 src:#1f
    G.d[3].w(UCC(0x1f));
    // 003112: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 003116: MOVEQ.L dst:D0 src:#20
    G.d[0].l(UCC(0x20));
    // 003118: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 00311c: BSR src:(65a4)
    F65a4();
    // 003120: CMPI.W dst:(ff003e) src:#5
    CMP<W>(G.io->w(0xff003e), 5);
    // 003128: Bcc cond:CS src:(3130)
    if (G.sr.check_condition(Condition::CS)) { goto L3130; }
    // 00312a: JMP src:(10f5e)
    F10f5e();
    goto end;

  L3130:;
    // 003130: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 003134: MOVE.W dst:D1 src:#2000
    G.d[1].w(0x2000);
    // 003138: MOVE.W dst:D2 src:#3f
    G.d[2].w(0x3f);
    // 00313c: MOVE.W dst:D3 src:#1f
    G.d[3].w(UCC(0x1f));
    // 003140: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 003144: MOVE.W dst:(VSCROLL_FG) src:#10
    G.io->w(VSCROLL_FG, UCC(0x10));
    // 00314c: BSR src:(3dda)
    F3dda();
    // 003150: LEA.L dst:A6 src:(ff0842)
    G.a[6] = 0xff0842;
    // 003156: LEA.L dst:A0 src:(209e)
    G.a[0] = 0x209e;
    // 00315c: BSR src:(1ed8)
    F1ed8();
    // 003160: LEA.L dst:A0 src:(20c2)
    G.a[0] = 0x20c2;
    // 003166: BSR src:(1ed8)
    F1ed8();
    // 00316a: LEA.L dst:A0 src:(20fc)
    G.a[0] = 0x20fc;
    // 003170: BSR src:(1ed8)
    F1ed8();
    // 003174: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(G.io->w(0xff003e));
    // 00317a: ADD.W dst:D0 src:#83b5
    G.d[0].w(ADD<W>(G.d[0].w(), 0x83b5));
    // 00317e: MOVE.L dst:(VDP_CTRL1) src:#4b240000
    G.io->l(VDP_CTRL1, 0x4b240000);
    // 003188: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 00318e: MOVE.L dst:(ff009a) src:#123fe
    G.io->l(0xff009a, 0x123fe);
    // 003198: MOVE.L dst:(A6.L)+14 src:#30003800
    G.io->l(G.a[6] + 0x14, 0x30003800);
    // 0031a0: CLR.W dst:(A6.L)+4
    G.io->w(G.a[6] + 4, 0);
    // 0031a4: MOVEQ.L dst:D0 src:#3
    G.d[0].l(3);
    // 0031a6: MOVE.L dst:D1 src:#1283e
    G.d[1].l(0x1283e);
    // 0031ac: MOVE.W dst:D2 src:#2
    G.d[2].w(UCC(2));
    // 0031b0: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 0031b4: BSR src:(2cd8)
    F2cd8();
    // 0031b8: BSR src:(5f28)
    F5f28();
    // 0031bc: CLR.W dst:(ff003c)
    G.io->w(0xff003c, 0);
    // 0031c2: ADDQ.W dst:(ff003e) src:#1
    G.io->w(0xff003e, ADD<W>(G.io->w(0xff003e), 1));

  L31c8:;
    // 0031c8: BSR src:(3ce4)
    F3ce4();
    // 0031cc: SUBQ.W dst:(A6.L)+42 src:#1
    G.io->w(G.a[6] + 0x42, SUB<W>(G.io->w(G.a[6] + 0x42), 1));
    // 0031d0: Bcc cond:NE src:(2cd8)
    if (G.sr.check_condition(Condition::NE)) {
      F2cd8();
      goto end;
    }
    // 0031d4: CLR.L dst:(A6.L)+40
    G.io->l(G.a[6] + 0x40, 0);
    // 0031d8: CLR.L dst:(A6.L)+44
    G.io->l(G.a[6] + 0x44, 0);
    // 0031dc: MOVE.W dst:D0 src:(ff02d0)
    G.d[0].w(UCC(G.io->w(0xff02d0)));
    // 0031e2: BSR src:(5bbe)
    _m->clear_sprite_position(G.d[0].w());
    // 0031e6: ANDI.W dst:(ff2a9e) src:#ff87
    G.io->w(0xff2a9e, AND<W>(G.io->w(0xff2a9e), 0xff87));
    // 0031ee: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 0031f2: MOVE.W dst:D1 src:#0
    G.d[1].w(0);
    // 0031f6: MOVE.W dst:D2 src:#3f
    G.d[2].w(0x3f);
    // 0031fa: MOVE.W dst:D3 src:#1f
    G.d[3].w(UCC(0x1f));
    // 0031fe: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 003202: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 003204: BSR src:(65fe)
    F65fe();
    // 003208: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(G.io->w(0xff003e));
    // 00320e: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 003212: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 003214: LEA.L dst:A0 src:(2f8c)
    G.a[0] = 0x2f8c;
    // 00321a: MOVE.W dst:D0 src:(A0,D0.W)+0
    G.d[0].w(G.io->w(G.a[0] + G.d[0].w()));
    // 00321e: MOVE.W dst:(ff004e) src:D0
    G.io->w(0xff004e, UCC(G.d[0].w()));
    // 003224: BSR src:(654c)
    F654c();
    // 003228: Bcc cond:True src:(2cd8)
    F2cd8();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F2cd8()
  {
    _log_call(__func__);

    // 002cd8: BTST.B dst:(A6) src:#0
    BTST<B>(G.io->b(G.a[6]), 0);
    // 002cdc: Bcc cond:EQ src:(2d04)
    if (G.sr.check_condition(Condition::EQ)) { goto L2d04; }
    // 002cde: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 002ce4: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 002ce6: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 002cea: Bcc cond:NE src:(2d04)
    if (G.sr.check_condition(Condition::NE)) { goto L2d04; }
    // 002cec: AND.L dst:D1 src:#c
    G.d[1].l(AND<L>(G.d[1].l(), 12));
    // 002cf2: ROR.W dst:D1 src:#1
    G.d[1].w(ROR<W>(G.d[1].w(), 1));
    // 002cf4: ADD.L dst:D1 src:#12856
    G.d[1].l(ADD<L>(G.d[1].l(), 0x12856));
    // 002cfa: MOVE.W dst:D2 src:#1a
    G.d[2].w(0x1a);
    // 002cfe: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 002d00: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L2d04:;
    // 002d04: BTST.B dst:(A6) src:#5
    BTST<B>(G.io->b(G.a[6]), 5);
    // 002d08: Bcc cond:NE src:(2d7a)
    if (G.sr.check_condition(Condition::NE)) { goto L2d7a; }
    // 002d0a: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 002d10: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 002d12: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 002d16: Bcc cond:NE src:(2e84)
    if (G.sr.check_condition(Condition::NE)) { goto L2e84; }

  L2d1a:;
    // 002d1a: AND.L dst:D1 src:#38
    G.d[1].l(AND<L>(G.d[1].l(), 0x38));
    // 002d20: ROR.W dst:D1 src:#3
    G.d[1].w(ROR<W>(G.d[1].w(), 3));
    // 002d22: CMPI.W dst:(A6.L)+2 src:#2
    CMP<W>(G.io->w(G.a[6] + 2), 2);
    // 002d28: Bcc cond:CC src:(2d44)
    if (G.sr.check_condition(Condition::CC)) { goto L2d44; }
    // 002d2a: MULU.W dst:D1 src:#9
    G.d[1].l(MULU(G.d[1].w(), 9));
    // 002d2e: ADDQ.W dst:D1 src:#4
    G.d[1].w(ADD<W>(G.d[1].w(), 4));
    // 002d30: ASL.W dst:D1 src:#5
    G.d[1].w(ASL<W>(G.d[1].w(), 5));
    // 002d32: ADD.L dst:D1 src:#40000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x40000));
    // 002d38: MOVE.L dst:(A6.L)+6a src:D1
    G.io->l(G.a[6] + 0x6a, G.d[1].l());
    // 002d3c: MOVE.L dst:(A6.L)+30 src:D1
    G.io->l(G.a[6] + 0x30, UCC(G.d[1].l()));
    // 002d40: Bcc cond:True src:(2e84)
    goto L2e84;

  L2d44:;
    // 002d44: MULU.W dst:D1 src:#f
    G.d[1].l(MULU(G.d[1].w(), 15));
    // 002d48: ADDI.W dst:D1 src:#4c
    G.d[1].w(ADD<W>(G.d[1].w(), 0x4c));
    // 002d4c: ASL.W dst:D1 src:#5
    G.d[1].w(ASL<W>(G.d[1].w(), 5));
    // 002d4e: ADD.L dst:D1 src:#40000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x40000));
    // 002d54: MOVE.L dst:(A6.L)+6a src:D1
    G.io->l(G.a[6] + 0x6a, G.d[1].l());
    // 002d58: MOVE.L dst:(A6.L)+30 src:D1
    G.io->l(G.a[6] + 0x30, G.d[1].l());
    // 002d5c: MOVE.W dst:(A6.L)+72 src:#606
    G.io->w(G.a[6] + 0x72, 0x606);
    // 002d62: MOVE.W dst:(A6.L)+76 src:#600
    G.io->w(G.a[6] + 0x76, 0x600);
    // 002d68: ADD.L dst:D1 src:#120
    G.d[1].l(ADD<L>(G.d[1].l(), 0x120));
    // 002d6e: MOVE.L dst:(A6.L)+78 src:D1
    G.io->l(G.a[6] + 0x78, G.d[1].l());
    // 002d72: MOVE.L dst:(A6.L)+34 src:D1
    G.io->l(G.a[6] + 0x34, UCC(G.d[1].l()));
    // 002d76: Bcc cond:True src:(2e84)
    goto L2e84;

  L2d7a:;
    // 002d7a: MOVE.W dst:D0 src:(A6.L)+58
    G.d[0].w(G.io->w(G.a[6] + 0x58));
    // 002d7e: ADDQ.W dst:(A6.L)+58 src:#1
    G.io->w(G.a[6] + 0x58, ADD<W>(G.io->w(G.a[6] + 0x58), 1));
    // 002d82: CMPI.W dst:(A6.L)+2 src:#2
    CMP<W>(G.io->w(G.a[6] + 2), 2);
    // 002d88: Bcc cond:CC src:(2e12)
    if (G.sr.check_condition(Condition::CC)) { goto L2e12; }
    // 002d8c: TST.W src:D0
    TST<W>(G.d[0].w());
    // 002d8e: Bcc cond:NE src:(2d9a)
    if (G.sr.check_condition(Condition::NE)) { goto L2d9a; }

  L2d90:;
    // 002d90: MOVE.L dst:D1 src:#50300
    G.d[1].l(UCC(0x50300));
    // 002d96: Bcc cond:True src:(2e50)
    goto L2e50;

  L2d9a:;
    // 002d9a: CMPI.W dst:D0 src:#2
    CMP<W>(G.d[0].w(), 2);
    // 002d9e: Bcc cond:NE src:(2daa)
    if (G.sr.check_condition(Condition::NE)) { goto L2daa; }
    // 002da0: MOVE.L dst:D1 src:#50580
    G.d[1].l(UCC(0x50580));
    // 002da6: Bcc cond:True src:(2e50)
    goto L2e50;

  L2daa:;
    // 002daa: CMPI.W dst:D0 src:#12
    CMP<W>(G.d[0].w(), 0x12);
    // 002dae: Bcc cond:EQ src:(2d90)
    if (G.sr.check_condition(Condition::EQ)) { goto L2d90; }
    // 002db0: CMPI.W dst:D0 src:#14
    CMP<W>(G.d[0].w(), 0x14);
    // 002db4: Bcc cond:CS src:(2e84)
    if (G.sr.check_condition(Condition::CS)) { goto L2e84; }

  L2db8:;
    // 002db8: BCLR.B dst:(A6) src:#5
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 5));
    // 002dbc: MOVE.W dst:(A6.L)+64 src:#a09
    G.io->w(G.a[6] + 0x64, 0xa09);
    // 002dc2: MOVE.W dst:(A6.L)+68 src:#600
    G.io->w(G.a[6] + 0x68, 0x600);
    // 002dc8: MOVE.W dst:(A6.L)+70 src:#3fb
    G.io->w(G.a[6] + 0x70, UCC(0x3fb));
    // 002dce: CMPI.W dst:(A6.L)+2 src:#2
    CMP<W>(G.io->w(G.a[6] + 2), 2);
    // 002dd4: Bcc cond:CC src:(2dfc)
    if (G.sr.check_condition(Condition::CC)) { goto L2dfc; }
    // 002dd6: MOVE.W dst:(A6.L)+72 src:#504
    G.io->w(G.a[6] + 0x72, 0x504);
    // 002ddc: MOVE.W dst:(A6.L)+76 src:#400
    G.io->w(G.a[6] + 0x76, 0x400);
    // 002de2: MOVE.L dst:(A6.L)+78 src:#40000
    G.io->l(G.a[6] + 0x78, 0x40000);
    // 002dea: MOVE.L dst:(A6.L)+34 src:#40000
    G.io->l(G.a[6] + 0x34, 0x40000);
    // 002df2: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(UCC(G.io->w(SOME_STATE_COUNTER)));
    // 002df8: Bcc cond:True src:(2d1a)
    goto L2d1a;

  L2dfc:;
    // 002dfc: MOVE.W dst:(A6.L)+72 src:#606
    G.io->w(G.a[6] + 0x72, 0x606);
    // 002e02: MOVE.W dst:(A6.L)+76 src:#600
    G.io->w(G.a[6] + 0x76, 0x600);
    // 002e08: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(UCC(G.io->w(SOME_STATE_COUNTER)));
    // 002e0e: Bcc cond:True src:(2d1a)
    goto L2d1a;

  L2e12:;
    // 002e12: TST.W src:D0
    TST<W>(G.d[0].w());
    // 002e14: Bcc cond:NE src:(2e1e)
    if (G.sr.check_condition(Condition::NE)) { goto L2e1e; }

  L2e16:;
    // 002e16: MOVE.L dst:D1 src:#50800
    G.d[1].l(UCC(0x50800));
    // 002e1c: Bcc cond:True src:(2e50)
    goto L2e50;

  L2e1e:;
    // 002e1e: CMPI.W dst:D0 src:#2
    CMP<W>(G.d[0].w(), 2);
    // 002e22: Bcc cond:NE src:(2e2c)
    if (G.sr.check_condition(Condition::NE)) { goto L2e2c; }

  L2e24:;
    // 002e24: MOVE.L dst:D1 src:#50a80
    G.d[1].l(UCC(0x50a80));
    // 002e2a: Bcc cond:True src:(2e50)
    goto L2e50;

  L2e2c:;
    // 002e2c: CMPI.W dst:D0 src:#4
    CMP<W>(G.d[0].w(), 4);
    // 002e30: Bcc cond:NE src:(2e3a)
    if (G.sr.check_condition(Condition::NE)) { goto L2e3a; }
    // 002e32: MOVE.L dst:D1 src:#50d00
    G.d[1].l(UCC(0x50d00));
    // 002e38: Bcc cond:True src:(2e50)
    goto L2e50;

  L2e3a:;
    // 002e3a: CMPI.W dst:D0 src:#16
    CMP<W>(G.d[0].w(), 0x16);
    // 002e3e: Bcc cond:EQ src:(2e24)
    if (G.sr.check_condition(Condition::EQ)) { goto L2e24; }
    // 002e40: CMPI.W dst:D0 src:#18
    CMP<W>(G.d[0].w(), 0x18);
    // 002e44: Bcc cond:EQ src:(2e16)
    if (G.sr.check_condition(Condition::EQ)) { goto L2e16; }
    // 002e46: CMPI.W dst:D0 src:#1a
    CMP<W>(G.d[0].w(), 0x1a);
    // 002e4a: Bcc cond:CC src:(2db8)
    if (G.sr.check_condition(Condition::CC)) { goto L2db8; }
    // 002e4e: Bcc cond:True src:(2e84)
    goto L2e84;

  L2e50:;
    // 002e50: MOVE.W dst:(A6.L)+64 src:#b0c
    G.io->w(G.a[6] + 0x64, 0xb0c);
    // 002e56: MOVE.W dst:(A6.L)+68 src:#800
    G.io->w(G.a[6] + 0x68, 0x800);
    // 002e5c: MOVE.L dst:(A6.L)+6a src:D1
    G.io->l(G.a[6] + 0x6a, G.d[1].l());
    // 002e60: MOVE.L dst:(A6.L)+30 src:D1
    G.io->l(G.a[6] + 0x30, G.d[1].l());
    // 002e64: MOVE.W dst:(A6.L)+70 src:#3fe
    G.io->w(G.a[6] + 0x70, 0x3fe);
    // 002e6a: MOVE.W dst:(A6.L)+72 src:#708
    G.io->w(G.a[6] + 0x72, 0x708);
    // 002e70: MOVE.W dst:(A6.L)+76 src:#800
    G.io->w(G.a[6] + 0x76, 0x800);
    // 002e76: ADD.L dst:D1 src:#180
    G.d[1].l(ADD<L>(G.d[1].l(), 0x180));
    // 002e7c: MOVE.L dst:(A6.L)+78 src:D1
    G.io->l(G.a[6] + 0x78, G.d[1].l());
    // 002e80: MOVE.L dst:(A6.L)+34 src:D1
    G.io->l(G.a[6] + 0x34, UCC(G.d[1].l()));

  L2e84:;
    // 002e84: TST.W src:(A6.L)+c
    TST<W>(G.io->w(G.a[6] + 12));
    // 002e88: Bcc cond:EQ src:(2eca)
    if (G.sr.check_condition(Condition::EQ)) { goto L2eca; }
    // 002e8a: MOVE.W dst:D1 src:(A6.L)+62
    G.d[1].w(G.io->w(G.a[6] + 0x62));
    // 002e8e: AND.W dst:D1 src:#7ff
    G.d[1].w(AND<W>(G.d[1].w(), 0x7ff));
    // 002e92: MOVE.W dst:D2 src:(A6.L)+70
    G.d[2].w(G.io->w(G.a[6] + 0x70));
    // 002e96: AND.W dst:D2 src:#7ff
    G.d[2].w(AND<W>(G.d[2].w(), 0x7ff));
    // 002e9a: SUBQ.W dst:(A6.L)+c src:#1
    G.io->w(G.a[6] + 12, SUB<W>(G.io->w(G.a[6] + 12), 1));
    // 002e9e: Bcc cond:NE src:(2ea6)
    if (G.sr.check_condition(Condition::NE)) { goto L2ea6; }
    // 002ea0: BCLR.B dst:(A6.L)+1 src:#5
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 5));

  L2ea6:;
    // 002ea6: BTST.B dst:(A6.L)+d src:#1
    BTST<B>(G.io->b(G.a[6] + 13), 1);
    // 002eac: Bcc cond:EQ src:(2eb6)
    if (G.sr.check_condition(Condition::EQ)) { goto L2eb6; }
    // 002eae: ADDI.W dst:D1 src:#6000
    G.d[1].w(ADD<W>(G.d[1].w(), 0x6000));
    // 002eb2: ADDI.W dst:D2 src:#6000
    G.d[2].w(ADD<W>(G.d[2].w(), 0x6000));

  L2eb6:;
    // 002eb6: MOVE.W dst:(A6.L)+62 src:D1
    G.io->w(G.a[6] + 0x62, G.d[1].w());
    // 002eba: MOVE.L dst:(A6.L)+6a src:(A6.L)+30
    G.io->l(G.a[6] + 0x6a, G.io->l(G.a[6] + 0x30));
    // 002ec0: MOVE.W dst:(A6.L)+70 src:D2
    G.io->w(G.a[6] + 0x70, G.d[2].w());
    // 002ec4: MOVE.L dst:(A6.L)+78 src:(A6.L)+34
    G.io->l(G.a[6] + 0x78, UCC(G.io->l(G.a[6] + 0x34)));

  L2eca:;
    // 002eca: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 002ecc: LEA.L dst:A2 src:(A6.L)+60
    G.a[2] = G.a[6] + 0x60;
    // 002ed0: Bcc cond:True src:(5ae2)
    F5ae2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F322c()
  {
    _log_call(__func__);

    // 00322c: LEA.L dst:A5 src:(ff2aa2)
    G.a[5] = 0xff2aa2;
    // 003232: MOVE.W dst:D6 src:(ff003c)
    G.d[6].w(UCC(G.io->w(0xff003c)));
    // 003238: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 00323a: Bcc cond:NE src:(3492)
    if (G.sr.check_condition(Condition::NE)) { goto L3492; }
    // 00323e: BSET.B dst:(ff0001) src:#0
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 0));
    // 003246: MOVE.W dst:(A5) src:#1
    G.io->w(G.a[5], UCC(1));
    // 00324a: BSR src:(5e22)
    F5e22();
    // 00324e: CLR.W dst:(ff0078)
    G.io->w(0xff0078, 0);
    // 003254: CLR.W dst:(ff0074)
    G.io->w(0xff0074, 0);
    // 00325a: CLR.L dst:(ff0092)
    G.io->l(0xff0092, 0);
    // 003260: MOVE.W dst:D5 src:D6
    G.d[5].w(G.d[6].w());
    // 003262: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 003268: MULU.W dst:D0 src:#f
    G.d[0].l(MULU(G.d[0].w(), 15));
    // 00326c: ADD.W dst:D5 src:D0
    G.d[5].w(ADD<W>(G.d[5].w(), G.d[0].w()));
    // 00326e: LEA.L dst:A0 src:(3f6a)
    G.a[0] = 0x3f6a;
    // 003274: MOVEQ.L dst:D1 src:#3
    G.d[1].l(UCC(3));

  L3276:;
    // 003276: MOVE.W dst:D2 src:(A0)+
    G.d[2].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;

  L3278:;
    // 003278: CMP.W dst:D5 src:(A0)+
    CMP<W>(G.d[5].w(), G.io->w(G.a[0]));
    G.a[0] += 2;
    // 00327a: Bcc cond:EQ src:(328c)
    if (G.sr.check_condition(Condition::EQ)) { goto L328c; }
    // 00327c: CMPI.W dst:(A0) src:#ffff
    CMP<W>(G.io->w(G.a[0]), 0xffff);
    // 003280: Bcc cond:NE src:(3278)
    if (G.sr.check_condition(Condition::NE)) { goto L3278; }
    // 003282: ADDQ.L dst:A0 src:#2
    G.a[0] = ADD<L>(G.a[0], 2);
    // 003284: DBcc.W cond:False dst:D1 src:(3276)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto L3276; }
    // 003288: MOVE.W dst:D2 src:#fffe
    G.d[2].w(UCC(0xfffe));

  L328c:;
    // 00328c: ADD.W dst:D6 src:D2
    G.d[6].w(ADD<W>(G.d[6].w(), G.d[2].w()));
    // 00328e: MOVE.W dst:(ff003c) src:D6
    G.io->w(0xff003c, G.d[6].w());
    // 003294: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 00329a: MULU.W dst:D0 src:#f
    G.d[0].l(MULU(G.d[0].w(), 15));
    // 00329e: ADD.W dst:D6 src:D0
    G.d[6].w(ADD<W>(G.d[6].w(), G.d[0].w()));
    // 0032a0: BSR src:(3ae0)
    F3ae0();
    // 0032a4: MOVE.W dst:D0 src:(ff0040)
    G.d[0].w(UCC(G.io->w(0xff0040)));
    // 0032aa: MULS.W dst:D0 src:#4
    G.d[0].l(MULS(G.d[0].w(), 4));
    // 0032ae: ADDI.W dst:D0 src:#20
    G.d[0].w(ADD<W>(G.d[0].w(), 0x20));
    // 0032b2: MOVE.W dst:(ff006c) src:D0
    G.io->w(0xff006c, G.d[0].w());
    // 0032b8: MOVE.W dst:(ff008e) src:#0
    G.io->w(0xff008e, 0);
    // 0032c0: MOVE.W dst:(VSCROLL_FG) src:#10
    G.io->w(VSCROLL_FG, 0x10);
    // 0032c8: MOVE.W dst:(VSCROLL_BG) src:#18
    G.io->w(VSCROLL_BG, 0x18);
    // 0032d0: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 0032d2: MOVEQ.L dst:D2 src:#0
    G.d[2].l(0);
    // 0032d4: MOVE.W dst:D0 src:(ff003c)
    G.d[0].w(UCC(G.io->w(0xff003c)));
    // 0032da: LSL.W dst:D0 src:#6
    G.d[0].w(LSL<W>(G.d[0].w(), 6));
    // 0032dc: MOVE.W dst:(ff0098) src:D0
    G.io->w(0xff0098, G.d[0].w());
    // 0032e2: MOVE.W dst:D0 src:D6
    G.d[0].w(UCC(G.d[6].w()));
    // 0032e4: LSL.W dst:D0 src:#6
    G.d[0].w(LSL<W>(G.d[0].w(), 6));
    // 0032e6: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 0032e8: MOVE.W dst:D2 src:D0
    G.d[2].w(UCC(G.d[0].w()));
    // 0032ea: LSR.W dst:D2 src:#1
    G.d[2].w(LSR<W>(G.d[2].w(), 1));
    // 0032ec: MOVE.W dst:D1 src:(ff003e)
    G.d[1].w(UCC(G.io->w(0xff003e)));
    // 0032f2: Bcc cond:True src:(32fc)
    goto L32fc;

  L32f4:;
    // 0032f4: ADDI.W dst:D0 src:#1860
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1860));
    // 0032f8: ADDI.W dst:D2 src:#bc2
    G.d[2].w(ADD<W>(G.d[2].w(), 0xbc2));

  L32fc:;
    // 0032fc: DBcc.W cond:False dst:D1 src:(32f4)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto L32f4; }
    // 003300: LEA.L dst:A0 src:(70000)
    G.a[0] = 0x70000;
    // 003306: ADDA.L dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].l());
    // 003308: MOVE.L dst:(ff007a) src:A0
    G.io->l(0xff007a, UCC(G.a[0]));
    // 00330e: LEA.L dst:A0 src:(79d80)
    G.a[0] = 0x79d80;
    // 003314: ADDA.L dst:A0 src:D2
    G.a[0] = ADD<L>(G.a[0], G.d[2].l());
    // 003316: MOVE.L dst:(ff007e) src:A0
    G.io->l(0xff007e, G.a[0]);
    // 00331c: MOVE.W dst:(ff2a9e) src:#f50
    G.io->w(0xff2a9e, 0xf50);
    // 003324: MOVE.W dst:(ff2aa0) src:#2f50
    G.io->w(0xff2aa0, UCC(0x2f50));
    // 00332c: BSR src:(6366)
    F6366();
    // 003330: BSR src:(6130)
    F6130();
    // 003334: BSR src:(6188)
    F6188();
    // 003338: BSR src:(61b4)
    F61b4();
    // 00333c: BSR src:(6204)
    F6204();
    // 003340: LEA.L dst:A0 src:(3fde)
    G.a[0] = 0x3fde;
    // 003346: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 00334c: MULU.W dst:D0 src:#6
    G.d[0].l(MULU(G.d[0].w(), 6));
    // 003350: ADDA.L dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].l());
    // 003352: BSR src:(3a64)
    F3a64();
    // 003356: BCLR.B dst:(ff0001) src:#5
    G.io->b(0xff0001, BCLR<B>(G.io->b(0xff0001), 5));
    // 00335e: TST.W src:(ff0038)
    TST<W>(G.io->w(0xff0038));
    // 003364: Bcc cond:NE src:(338e)
    if (G.sr.check_condition(Condition::NE)) { goto L338e; }
    // 003366: BSET.B dst:(ff0001) src:#5
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 5));
    // 00336e: MOVE.W dst:D0 src:#b0
    G.d[0].w(0xb0);
    // 003372: MOVE.L dst:D1 src:#39200
    G.d[1].l(0x39200);
    // 003378: MOVE.W dst:D2 src:#406
    G.d[2].w(UCC(0x406));
    // 00337c: BSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 003380: CLR.W dst:(ff2a9e)
    G.io->w(0xff2a9e, UCC(0));
    // 003386: BSET.B dst:(ff0075) src:#0
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 0));

  L338e:;
    // 00338e: LEA.L dst:A0 src:(4004)
    G.a[0] = 0x4004;
    // 003394: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 00339a: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));
    // 00339c: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00339e: MOVE.L dst:A0 src:(A0)
    G.a[0] = G.io->l(G.a[0]);
    // 0033a0: MOVE.L dst:(ff009a) src:(A0.L)+2
    G.io->l(0xff009a, G.io->l(G.a[0] + 2));
    // 0033a8: ADDA.W dst:A0 src:#6
    G.a[0] = ADD<L>(G.a[0], 6);
    // 0033ac: MOVE.L dst:(ff0086) src:A0
    G.io->l(0xff0086, UCC(G.a[0]));
    // 0033b2: LEA.L dst:A0 src:(18000)
    G.a[0] = 0x18000;
    // 0033b8: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 0033be: MULU.W dst:D0 src:#3c
    G.d[0].l(MULU(G.d[0].w(), 0x3c));
    // 0033c2: MOVE.L dst:D0 src:(A0,D0.W)+0
    G.d[0].l(G.io->l(G.a[0] + G.d[0].w()));
    // 0033c6: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0033c8: MOVE.L dst:(ff0082) src:A0
    G.io->l(0xff0082, UCC(G.a[0]));
    // 0033ce: LEA.L dst:A0 src:(18168)
    G.a[0] = 0x18168;
    // 0033d4: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 0033da: MULU.W dst:D0 src:#3c
    G.d[0].l(MULU(G.d[0].w(), 0x3c));
    // 0033de: MOVE.L dst:D0 src:(A0,D0.W)+0
    G.d[0].l(UCC(G.io->l(G.a[0] + G.d[0].w())));
    // 0033e2: LEA.L dst:A0 src:(18000)
    G.a[0] = 0x18000;
    // 0033e8: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0033ea: MOVE.L dst:(ff008a) src:A0
    G.io->l(0xff008a, G.a[0]);
    // 0033f0: SUBI.W dst:(ff0098) src:#28
    G.io->w(0xff0098, SUB<W>(G.io->w(0xff0098), 0x28));
    // 0033f8: Bcc cond:CS src:(33fe)
    if (G.sr.check_condition(Condition::CS)) { goto L33fe; }
    // 0033fa: Bcc cond:True src:(3400)
    goto L3400;

  L33fe:;
    // 0033fe: RTS
    goto end;

  L3400:;
    // 003400: LEA.L dst:A0 src:(18000)
    G.a[0] = 0x18000;
    // 003406: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 00340c: MULU.W dst:D0 src:#3c
    G.d[0].l(MULU(G.d[0].w(), 0x3c));
    // 003410: MOVE.L dst:D0 src:(A0,D0.W)+0
    G.d[0].l(G.io->l(G.a[0] + G.d[0].w()));
    // 003414: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 003416: MOVE.W dst:D0 src:(ff0098)
    G.d[0].w(G.io->w(0xff0098));
    // 00341c: ADD.W dst:D0 src:#28
    G.d[0].w(ADD<W>(G.d[0].w(), 0x28));

  L3420:;
    // 003420: CMP.W dst:D0 src:(A0)
    CMP<W>(G.d[0].w(), G.io->w(G.a[0]));
    // 003422: Bcc cond:LS src:(3428)
    if (G.sr.check_condition(Condition::LS)) { goto L3428; }
    // 003424: ADDQ.L dst:A0 src:#8
    G.a[0] = ADD<L>(G.a[0], 8);
    // 003426: Bcc cond:True src:(3420)
    goto L3420;

  L3428:;
    // 003428: MOVE.L dst:(ff0082) src:A0
    G.io->l(0xff0082, UCC(G.a[0]));
    // 00342e: LEA.L dst:A0 src:(18168)
    G.a[0] = 0x18168;
    // 003434: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 00343a: MULU.W dst:D0 src:#3c
    G.d[0].l(MULU(G.d[0].w(), 0x3c));
    // 00343e: MOVE.L dst:D0 src:(A0,D0.W)+0
    G.d[0].l(UCC(G.io->l(G.a[0] + G.d[0].w())));
    // 003442: LEA.L dst:A0 src:(18000)
    G.a[0] = 0x18000;
    // 003448: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00344a: MOVE.W dst:D0 src:(ff0098)
    G.d[0].w(UCC(G.io->w(0xff0098)));

  L3450:;
    // 003450: CMP.W dst:D0 src:(A0)
    CMP<W>(G.d[0].w(), G.io->w(G.a[0]));
    // 003452: Bcc cond:LS src:(3458)
    if (G.sr.check_condition(Condition::LS)) { goto L3458; }
    // 003454: ADDQ.L dst:A0 src:#8
    G.a[0] = ADD<L>(G.a[0], 8);
    // 003456: Bcc cond:True src:(3450)
    goto L3450;

  L3458:;
    // 003458: MOVE.L dst:(ff008a) src:A0
    G.io->l(0xff008a, UCC(G.a[0]));
    // 00345e: LEA.L dst:A0 src:(4004)
    G.a[0] = 0x4004;
    // 003464: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 00346a: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));
    // 00346c: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00346e: MOVE.L dst:A0 src:(A0)
    G.a[0] = G.io->l(G.a[0]);
    // 003470: MOVE.W dst:D0 src:(ff0098)
    G.d[0].w(UCC(G.io->w(0xff0098)));

  L3476:;
    // 003476: CMP.W dst:D0 src:(A0)
    CMP<W>(G.d[0].w(), G.io->w(G.a[0]));
    // 003478: Bcc cond:CS src:(3480)
    if (G.sr.check_condition(Condition::CS)) { goto L3480; }
    // 00347a: ADDA.W dst:A0 src:#6
    G.a[0] = ADD<L>(G.a[0], 6);
    // 00347e: Bcc cond:True src:(3476)
    goto L3476;

  L3480:;
    // 003480: MOVE.L dst:(ff0086) src:A0
    G.io->l(0xff0086, G.a[0]);
    // 003486: MOVE.L dst:A1 src:(A0.L)-4
    G.a[1] = G.io->l(G.a[0] + 0xfffffffc);
    // 00348a: MOVE.L dst:(ff009a) src:A1
    G.io->l(0xff009a, UCC(G.a[1]));
    // 003490: RTS
    goto end;

  L3492:;
    // 003492: LEA.L dst:A4 src:(ff0078)
    G.a[4] = 0xff0078;
    // 003498: BTST.B dst:(A5.L)+1 src:#7
    BTST<B>(G.io->b(G.a[5] + 1), 7);
    // 00349e: Bcc cond:NE src:(353e)
    if (G.sr.check_condition(Condition::NE)) { goto L353e; }
    // 0034a2: BTST.B dst:(A5.L)+1 src:#6
    BTST<B>(G.io->b(G.a[5] + 1), 6);
    // 0034a8: Bcc cond:NE src:(3516)
    if (G.sr.check_condition(Condition::NE)) { goto L3516; }
    // 0034ac: BSR src:(36e8)
    F36e8();
    // 0034b0: BTST.B dst:(ff0075) src:#0
    BTST<B>(G.io->b(0xff0075), 0);
    // 0034b8: Bcc cond:NE src:(34c8)
    if (G.sr.check_condition(Condition::NE)) { goto L34c8; }
    // 0034ba: MOVE.W dst:(ff0090) src:#fc00
    G.io->w(0xff0090, 0xfc00);
    // 0034c2: SUBQ.W dst:(HSCROLL_FG) src:#8
    G.io->w(HSCROLL_FG, SUB<W>(G.io->w(HSCROLL_FG), 8));

  L34c8:;
    // 0034c8: SUBQ.W dst:(HSCROLL_BG) src:#8
    G.io->w(HSCROLL_BG, SUB<W>(G.io->w(HSCROLL_BG), 8));
    // 0034ce: ADDQ.W dst:(A4) src:#8
    G.io->w(G.a[4], ADD<W>(G.io->w(G.a[4]), 8));
    // 0034d0: CMPI.W dst:(A4) src:#140
    CMP<W>(G.io->w(G.a[4]), 0x140);
    // 0034d4: Bcc cond:EQ src:(34d8)
    if (G.sr.check_condition(Condition::EQ)) { goto L34d8; }
    // 0034d6: RTS
    goto end;

  L34d8:;
    // 0034d8: ORI.W dst:(A5) src:#40
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x40));
    // 0034dc: BTST.B dst:(ff0842) src:#7
    BTST<B>(G.io->b(0xff0842), 7);
    // 0034e4: Bcc cond:NE src:(34f6)
    if (G.sr.check_condition(Condition::NE)) { goto L34f6; }
    // 0034e6: MOVE.W dst:D0 src:#1
    G.d[0].w(UCC(1));
    // 0034ea: TST.W src:(ff0038)
    TST<W>(G.io->w(0xff0038));
    // 0034f0: Bcc cond:NE src:(65fe)
    if (G.sr.check_condition(Condition::NE)) {
      F65fe();
      goto end;
    }

  L34f4:;
    // 0034f4: RTS
    goto end;

  L34f6:;
    // 0034f6: CLR.W dst:(ff0090)
    G.io->w(0xff0090, 0);
    // 0034fc: CLR.B dst:(A5)
    G.io->b(G.a[5], UCC(0));
    // 0034fe: ORI.W dst:(A5) src:#80
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x80));
    // 003502: BCLR.B dst:(ff0001) src:#0
    G.io->b(0xff0001, BCLR<B>(G.io->b(0xff0001), 0));
    // 00350a: BCLR.B dst:(ff0843) src:#7
    G.io->b(0xff0843, BCLR<B>(G.io->b(0xff0843), 7));
    // 003512: Bcc cond:True src:(5f82)
    F5f82();
    goto end;

  L3516:;
    // 003516: ADDQ.B dst:(A5) src:#1
    G.io->b(G.a[5], ADD<B>(G.io->b(G.a[5]), 1));
    // 003518: CMPI.B dst:(A5) src:#2
    CMP<B>(G.io->b(G.a[5]), 2);
    // 00351c: Bcc cond:CS src:(34f4)
    if (G.sr.check_condition(Condition::CS)) { goto L34f4; }
    // 00351e: CLR.W dst:(ff0090)
    G.io->w(0xff0090, 0);
    // 003524: CLR.B dst:(A5)
    G.io->b(G.a[5], UCC(0));
    // 003526: ORI.W dst:(A5) src:#80
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 0x80));
    // 00352a: BCLR.B dst:(ff0001) src:#0
    G.io->b(0xff0001, BCLR<B>(G.io->b(0xff0001), 0));
    // 003532: BCLR.B dst:(ff0843) src:#7
    G.io->b(0xff0843, BCLR<B>(G.io->b(0xff0843), 7));
    // 00353a: Bcc cond:True src:(5f28)
    F5f28();
    goto end;

  L353e:;
    // 00353e: BSR src:(64fc)
    F64fc();
    // 003542: BSR src:(3a40)
    F3a40();
    // 003546: MOVE.W dst:(ff008e) src:#0
    G.io->w(0xff008e, 0);
    // 00354e: MOVE.W dst:D0 src:(ff0842)
    G.d[0].w(UCC(G.io->w(0xff0842)));
    // 003554: BTST.L dst:D0 src:#3
    BTST<L>(G.d[0].l(), 3);
    // 003558: Bcc cond:NE src:(3634)
    if (G.sr.check_condition(Condition::NE)) { goto L3634; }
    // 00355c: BTST.L dst:D0 src:#c
    BTST<L>(G.d[0].l(), 12);
    // 003560: Bcc cond:NE src:(3634)
    if (G.sr.check_condition(Condition::NE)) { goto L3634; }
    // 003564: TST.W src:(ff0038)
    TST<W>(G.io->w(0xff0038));
    // 00356a: Bcc cond:EQ src:(3634)
    if (G.sr.check_condition(Condition::EQ)) { goto L3634; }
    // 00356e: MOVE.W dst:D0 src:(CONTROLLER_STATE1)
    G.d[0].w(G.io->w(CONTROLLER_STATE1));
    // 003574: ANDI.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 003578: Bcc cond:EQ src:(3634)
    if (G.sr.check_condition(Condition::EQ)) { goto L3634; }
    // 00357c: BTST.B dst:(ff0075) src:#0
    BTST<B>(G.io->b(0xff0075), 0);
    // 003584: Bcc cond:NE src:(3600)
    if (G.sr.check_condition(Condition::NE)) { goto L3600; }
    // 003586: CMPI.W dst:D0 src:#1
    CMP<W>(G.d[0].w(), 1);
    // 00358a: Bcc cond:EQ src:(35a2)
    if (G.sr.check_condition(Condition::EQ)) { goto L35a2; }
    // 00358c: CMPI.W dst:(VSCROLL_FG) src:#20
    CMP<W>(G.io->w(VSCROLL_FG), 0x20);
    // 003594: Bcc cond:CC src:(3634)
    if (G.sr.check_condition(Condition::CC)) { goto L3634; }
    // 003598: MOVE.W dst:D2 src:#1
    G.d[2].w(1);
    // 00359c: MOVE.W dst:D3 src:#80
    G.d[3].w(UCC(0x80));
    // 0035a0: Bcc cond:True src:(35b4)
    goto L35b4;

  L35a2:;
    // 0035a2: TST.W src:(VSCROLL_FG)
    TST<W>(G.io->w(VSCROLL_FG));
    // 0035a8: Bcc cond:EQ src:(3634)
    if (G.sr.check_condition(Condition::EQ)) { goto L3634; }
    // 0035ac: MOVE.W dst:D2 src:#ffff
    G.d[2].w(0xffff);
    // 0035b0: MOVE.W dst:D3 src:#ff80
    G.d[3].w(UCC(0xff80));

  L35b4:;
    // 0035b4: ADD.W dst:(VSCROLL_FG) src:D2
    G.io->w(VSCROLL_FG, ADD<W>(G.io->w(VSCROLL_FG), G.d[2].w()));
    // 0035ba: BTST.B dst:(ff0074) src:#3
    BTST<B>(G.io->b(0xff0074), 3);
    // 0035c2: Bcc cond:NE src:(3634)
    if (G.sr.check_condition(Condition::NE)) { goto L3634; }
    // 0035c4: MOVE.W dst:(ff008e) src:D3
    G.io->w(0xff008e, UCC(G.d[3].w()));
    // 0035ca: BTST.B dst:(ff0074) src:#0
    BTST<B>(G.io->b(0xff0074), 0);
    // 0035d2: Bcc cond:NE src:(35e8)
    if (G.sr.check_condition(Condition::NE)) { goto L35e8; }
    // 0035d4: MOVE.W dst:D2 src:(VSCROLL_FG)
    G.d[2].w(UCC(G.io->w(VSCROLL_FG)));
    // 0035da: LSR.W dst:D2 src:#1
    G.d[2].w(LSR<W>(G.d[2].w(), 1));
    // 0035dc: ADDI.W dst:D2 src:#10
    G.d[2].w(ADD<W>(G.d[2].w(), 0x10));
    // 0035e0: MOVE.W dst:(VSCROLL_BG) src:D2
    G.io->w(VSCROLL_BG, UCC(G.d[2].w()));
    // 0035e6: Bcc cond:True src:(3634)
    goto L3634;

  L35e8:;
    // 0035e8: CMPI.W dst:D0 src:#1
    CMP<W>(G.d[0].w(), 1);
    // 0035ec: Bcc cond:EQ src:(35f4)
    if (G.sr.check_condition(Condition::EQ)) { goto L35f4; }
    // 0035ee: MOVE.W dst:D2 src:#1
    G.d[2].w(UCC(1));
    // 0035f2: Bcc cond:True src:(35f8)
    goto L35f8;

  L35f4:;
    // 0035f4: MOVE.W dst:D2 src:#ffff
    G.d[2].w(UCC(0xffff));

  L35f8:;
    // 0035f8: ADD.W dst:(VSCROLL_BG) src:D2
    G.io->w(VSCROLL_BG, ADD<W>(G.io->w(VSCROLL_BG), G.d[2].w()));
    // 0035fe: Bcc cond:True src:(3634)
    goto L3634;

  L3600:;
    // 003600: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 003608: Bcc cond:NE src:(3634)
    if (G.sr.check_condition(Condition::NE)) { goto L3634; }
    // 00360a: CMPI.W dst:D0 src:#1
    CMP<W>(G.d[0].w(), 1);
    // 00360e: Bcc cond:EQ src:(3620)
    if (G.sr.check_condition(Condition::EQ)) { goto L3620; }
    // 003610: CMPI.W dst:(VSCROLL_BG) src:#20
    CMP<W>(G.io->w(VSCROLL_BG), 0x20);
    // 003618: Bcc cond:CC src:(3634)
    if (G.sr.check_condition(Condition::CC)) { goto L3634; }
    // 00361a: MOVE.W dst:D2 src:#1
    G.d[2].w(UCC(1));
    // 00361e: Bcc cond:True src:(362e)
    goto L362e;

  L3620:;
    // 003620: CMPI.W dst:(VSCROLL_BG) src:#10
    CMP<W>(G.io->w(VSCROLL_BG), 0x10);
    // 003628: Bcc cond:CS src:(3634)
    if (G.sr.check_condition(Condition::CS)) { goto L3634; }
    // 00362a: MOVE.W dst:D2 src:#ffff
    G.d[2].w(UCC(0xffff));

  L362e:;
    // 00362e: ADD.W dst:(VSCROLL_BG) src:D2
    G.io->w(VSCROLL_BG, ADD<W>(G.io->w(VSCROLL_BG), G.d[2].w()));

  L3634:;
    // 003634: TST.W src:(ff0038)
    TST<W>(G.io->w(0xff0038));
    // 00363a: Bcc cond:NE src:(3640)
    if (G.sr.check_condition(Condition::NE)) { goto L3640; }
    // 00363c: BSR src:(3b40)
    F3b40();

  L3640:;
    // 003640: BTST.B dst:(ff0001) src:#5
    BTST<B>(G.io->b(0xff0001), 5);
    // 003648: Bcc cond:EQ src:(3652)
    if (G.sr.check_condition(Condition::EQ)) { goto L3652; }
    // 00364a: CLR.W dst:(ff0090)
    G.io->w(0xff0090, UCC(0));

  L3650:;
    // 003650: RTS
    goto end;

  L3652:;
    // 003652: BTST.B dst:(A5.L)+1 src:#1
    BTST<B>(G.io->b(G.a[5] + 1), 1);
    // 003658: Bcc cond:NE src:(393a)
    if (G.sr.check_condition(Condition::NE)) { goto L393a; }
    // 00365c: ORI.W dst:(A5) src:#2
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 2));
    // 003660: CLR.W dst:(ff0090)
    G.io->w(0xff0090, UCC(0));
    // 003666: BTST.B dst:(A5.L)+1 src:#2
    BTST<B>(G.io->b(G.a[5] + 1), 2);
    // 00366c: Bcc cond:NE src:(3650)
    if (G.sr.check_condition(Condition::NE)) { goto L3650; }
    // 00366e: MOVE.W dst:D0 src:(A4)
    G.d[0].w(G.io->w(G.a[4]));
    // 003670: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 003674: Bcc cond:EQ src:(3678)
    if (G.sr.check_condition(Condition::EQ)) { goto L3678; }
    // 003676: RTS
    goto end;

  L3678:;
    // 003678: BTST.B dst:(ff0075) src:#5
    BTST<B>(G.io->b(0xff0075), 5);
    // 003680: Bcc cond:NE src:(368c)
    if (G.sr.check_condition(Condition::NE)) { goto L368c; }
    // 003682: BCLR.B dst:(ff0075) src:#6
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 6));
    // 00368a: Bcc cond:True src:(3694)
    goto L3694;

  L368c:;
    // 00368c: BSET.B dst:(ff0075) src:#6
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 6));

  L3694:;
    // 003694: ANDI.W dst:(A4) src:#1ff
    G.io->w(G.a[4], AND<W>(G.io->w(G.a[4]), 0x1ff));
    // 003698: Bcc cond:NE src:(36e8)
    if (G.sr.check_condition(Condition::NE)) {
      F36e8();
      goto end;
    }
    // 00369c: BTST.B dst:(ff0075) src:#5
    BTST<B>(G.io->b(0xff0075), 5);
    // 0036a4: Bcc cond:NE src:(36cc)
    if (G.sr.check_condition(Condition::NE)) { goto L36cc; }
    // 0036a6: BCLR.B dst:(ff0075) src:#4
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 4));
    // 0036ae: ADDQ.W dst:(ff003c) src:#1
    G.io->w(0xff003c, ADD<W>(G.io->w(0xff003c), 1));
    // 0036b4: MOVE.W dst:D6 src:(ff003c)
    G.d[6].w(G.io->w(0xff003c));
    // 0036ba: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));
    // 0036c0: MULU.W dst:D0 src:#f
    G.d[0].l(MULU(G.d[0].w(), 15));
    // 0036c4: ADD.W dst:D6 src:D0
    G.d[6].w(ADD<W>(G.d[6].w(), G.d[0].w()));
    // 0036c6: BSR src:(3ae0)
    F3ae0();
    // 0036ca: Bcc cond:True src:(36e8)
    F36e8();
    goto end;

  L36cc:;
    // 0036cc: BSET.B dst:(ff0075) src:#4
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 4));
    // 0036d4: SUBI.L dst:(ff007a) src:#20
    G.io->l(0xff007a, SUB<L>(G.io->l(0xff007a), 0x20));
    // 0036de: SUBI.L dst:(ff007e) src:#10
    G.io->l(0xff007e, SUB<L>(G.io->l(0xff007e), 0x10));

  L36e8:;
    // 0036e8: JMP src:(36e8)
    F36e8();
    goto end;

  L393a:;
    // 00393a: BTST.B dst:(ff0075) src:#4
    BTST<B>(G.io->b(0xff0075), 4);
    // 003942: Bcc cond:EQ src:(3986)
    if (G.sr.check_condition(Condition::EQ)) { goto L3986; }
    // 003944: BTST.B dst:(ff0075) src:#6
    BTST<B>(G.io->b(0xff0075), 6);
    // 00394c: Bcc cond:EQ src:(3990)
    if (G.sr.check_condition(Condition::EQ)) { goto L3990; }
    // 00394e: MOVE.W dst:D0 src:(ff0078)
    G.d[0].w(G.io->w(0xff0078));
    // 003954: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 003958: Bcc cond:NE src:(39c2)
    if (G.sr.check_condition(Condition::NE)) { goto L39c2; }
    // 00395a: BTST.B dst:(ff0075) src:#0
    BTST<B>(G.io->b(0xff0075), 0);
    // 003962: Bcc cond:NE src:(3974)
    if (G.sr.check_condition(Condition::NE)) { goto L3974; }
    // 003964: MOVE.W dst:(ff0090) src:#f800
    G.io->w(0xff0090, 0xf800);
    // 00396c: SUBI.W dst:(HSCROLL_FG) src:#10
    G.io->w(HSCROLL_FG, SUB<W>(G.io->w(HSCROLL_FG), 0x10));

  L3974:;
    // 003974: ADDI.W dst:(A4) src:#10
    G.io->w(G.a[4], ADD<W>(G.io->w(G.a[4]), 0x10));
    // 003978: SUBQ.W dst:(HSCROLL_BG) src:#8
    G.io->w(HSCROLL_BG, SUB<W>(G.io->w(HSCROLL_BG), 8));
    // 00397e: ANDI.W dst:(A5) src:#80f1
    G.io->w(G.a[5], AND<W>(G.io->w(G.a[5]), 0x80f1));
    // 003982: Bcc cond:True src:(3a0a)
    goto L3a0a;

  L3986:;
    // 003986: BTST.B dst:(ff0075) src:#6
    BTST<B>(G.io->b(0xff0075), 6);
    // 00398e: Bcc cond:EQ src:(39c2)
    if (G.sr.check_condition(Condition::EQ)) { goto L39c2; }

  L3990:;
    // 003990: MOVE.W dst:D0 src:(ff0078)
    G.d[0].w(G.io->w(0xff0078));
    // 003996: ANDI.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 00399a: Bcc cond:NE src:(39c2)
    if (G.sr.check_condition(Condition::NE)) { goto L39c2; }
    // 00399c: BTST.B dst:(ff0075) src:#0
    BTST<B>(G.io->b(0xff0075), 0);
    // 0039a4: Bcc cond:NE src:(39b4)
    if (G.sr.check_condition(Condition::NE)) { goto L39b4; }
    // 0039a6: MOVE.W dst:(ff0090) src:#fc00
    G.io->w(0xff0090, 0xfc00);
    // 0039ae: SUBQ.W dst:(HSCROLL_FG) src:#8
    G.io->w(HSCROLL_FG, SUB<W>(G.io->w(HSCROLL_FG), 8));

  L39b4:;
    // 0039b4: ADDQ.W dst:(A4) src:#8
    G.io->w(G.a[4], ADD<W>(G.io->w(G.a[4]), 8));
    // 0039b6: SUBQ.W dst:(HSCROLL_BG) src:#4
    G.io->w(HSCROLL_BG, SUB<W>(G.io->w(HSCROLL_BG), 4));
    // 0039bc: ANDI.W dst:(A5) src:#80f1
    G.io->w(G.a[5], AND<W>(G.io->w(G.a[5]), 0x80f1));
    // 0039c0: Bcc cond:True src:(3a0a)
    goto L3a0a;

  L39c2:;
    // 0039c2: BTST.B dst:(ff0075) src:#0
    BTST<B>(G.io->b(0xff0075), 0);
    // 0039ca: Bcc cond:NE src:(39da)
    if (G.sr.check_condition(Condition::NE)) { goto L39da; }
    // 0039cc: MOVE.W dst:(ff0090) src:#ff80
    G.io->w(0xff0090, 0xff80);
    // 0039d4: SUBQ.W dst:(HSCROLL_FG) src:#1
    G.io->w(HSCROLL_FG, SUB<W>(G.io->w(HSCROLL_FG), 1));

  L39da:;
    // 0039da: BTST.B dst:(ff0074) src:#0
    BTST<B>(G.io->b(0xff0074), 0);
    // 0039e2: Bcc cond:EQ src:(39f2)
    if (G.sr.check_condition(Condition::EQ)) { goto L39f2; }
    // 0039e4: MOVE.W dst:D0 src:(A5)
    G.d[0].w(G.io->w(G.a[5]));
    // 0039e6: ANDI.W dst:D0 src:#4
    G.d[0].w(AND<W>(G.d[0].w(), 4));
    // 0039ea: Bcc cond:EQ src:(39f2)
    if (G.sr.check_condition(Condition::EQ)) { goto L39f2; }
    // 0039ec: SUBQ.W dst:(HSCROLL_BG) src:#1
    G.io->w(HSCROLL_BG, SUB<W>(G.io->w(HSCROLL_BG), 1));

  L39f2:;
    // 0039f2: ADDQ.W dst:(A4) src:#1
    G.io->w(G.a[4], ADD<W>(G.io->w(G.a[4]), 1));
    // 0039f4: MOVE.W dst:D0 src:(A5)
    G.d[0].w(G.io->w(G.a[5]));
    // 0039f6: ANDI.W dst:(A5) src:#80f1
    G.io->w(G.a[5], AND<W>(G.io->w(G.a[5]), 0x80f1));
    // 0039fa: ANDI.W dst:D0 src:#4
    G.d[0].w(AND<W>(G.d[0].w(), 4));
    // 0039fe: Bcc cond:NE src:(3a3e)
    if (G.sr.check_condition(Condition::NE)) { goto L3a3e; }
    // 003a00: SUBQ.W dst:(HSCROLL_BG) src:#1
    G.io->w(HSCROLL_BG, SUB<W>(G.io->w(HSCROLL_BG), 1));
    // 003a06: ORI.W dst:(A5) src:#4
    G.io->w(G.a[5], OR<W>(G.io->w(G.a[5]), 4));

  L3a0a:;
    // 003a0a: TST.W src:(ff003e)
    TST<W>(G.io->w(0xff003e));
    // 003a10: Bcc cond:NE src:(3a3e)
    if (G.sr.check_condition(Condition::NE)) { goto L3a3e; }
    // 003a12: TST.W src:(ff003c)
    TST<W>(G.io->w(0xff003c));
    // 003a18: Bcc cond:EQ src:(3a3e)
    if (G.sr.check_condition(Condition::EQ)) { goto L3a3e; }
    // 003a1a: LEA.L dst:A0 src:(40a2)
    G.a[0] = 0x40a2;
    // 003a20: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(UCC(G.io->w(SOME_STATE_COUNTER)));
    // 003a26: ANDI.L dst:D0 src:#e
    G.d[0].l(AND<L>(G.d[0].l(), 14));
    // 003a2c: LSL.W dst:D0 src:#1
    G.d[0].w(LSL<W>(G.d[0].w(), 1));
    // 003a2e: ADDA.L dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].l());
    // 003a30: MOVE.W dst:D2 src:#3e
    G.d[2].w(0x3e);
    // 003a34: MOVE.W dst:D0 src:#1
    G.d[0].w(1);
    // 003a38: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 003a3a: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L3a3e:;
    // 003a3e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F36e8()
  {
    _log_call(__func__);

    // 0036e8: BTST.B dst:(ff0075) src:#4
    BTST<B>(G.io->b(0xff0075), 4);
    // 0036f0: Bcc cond:NE src:(37f2)
    if (G.sr.check_condition(Condition::NE)) { goto L37f2; }
    // 0036f4: MOVE.L dst:A6 src:(ff0082)
    G.a[6] = UCC(G.io->l(0xff0082));
    // 0036fa: CMPI.W dst:(A6.L)+2 src:#ffff
    CMP<W>(G.io->w(G.a[6] + 2), 0xffff);
    // 003700: Bcc cond:EQ src:(370e)
    if (G.sr.check_condition(Condition::EQ)) { goto L370e; }
    // 003702: MOVEQ.L dst:D6 src:#28
    G.d[6].l(UCC(0x28));
    // 003704: BSR src:(372e)
    F372e();
    // 003708: MOVE.L dst:(ff0082) src:A6
    G.io->l(0xff0082, UCC(G.a[6]));

  L370e:;
    // 00370e: MOVE.L dst:A6 src:(ff008a)
    G.a[6] = UCC(G.io->l(0xff008a));
    // 003714: CMPI.W dst:(A6.L)+2 src:#ffff
    CMP<W>(G.io->w(G.a[6] + 2), 0xffff);
    // 00371a: Bcc cond:EQ src:(37a0)
    if (G.sr.check_condition(Condition::EQ)) { goto L37a0; }
    // 00371e: MOVEQ.L dst:D6 src:#0
    G.d[6].l(UCC(0));
    // 003720: BSR src:(372e)
    F372e();
    // 003724: MOVE.L dst:(ff008a) src:A6
    G.io->l(0xff008a, UCC(G.a[6]));
    // 00372a: Bcc cond:True src:(37a0)
    goto L37a0;

  L37a0:;
    // 0037a0: MOVE.L dst:A0 src:(ff0086)
    G.a[0] = UCC(G.io->l(0xff0086));
    // 0037a6: CMPI.W dst:(A0) src:#ffff
    CMP<W>(G.io->w(G.a[0]), 0xffff);
    // 0037aa: Bcc cond:EQ src:(37da)
    if (G.sr.check_condition(Condition::EQ)) { goto L37da; }
    // 0037ac: MOVE.W dst:D7 src:(A0)
    G.d[7].w(UCC(G.io->w(G.a[0])));
    // 0037ae: CMP.W dst:D7 src:(ff0098)
    CMP<W>(G.d[7].w(), G.io->w(0xff0098));
    // 0037b4: Bcc cond:NE src:(37da)
    if (G.sr.check_condition(Condition::NE)) { goto L37da; }
    // 0037b6: ADDQ.W dst:A0 src:#2
    G.a[0] = ADD<L>(G.a[0], 2);
    // 0037b8: MOVE.L dst:D1 src:(A0)+
    G.d[1].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 0037ba: MOVE.L dst:A1 src:D1
    G.a[1] = G.d[1].l();
    // 0037bc: MOVEQ.L dst:D0 src:#18
    G.d[0].l(0x18);
    // 0037be: MOVE.W dst:D2 src:#20
    G.d[2].w(0x20);
    // 0037c2: MOVE.L dst:(ff0086) src:A0
    G.io->l(0xff0086, UCC(G.a[0]));
    // 0037c8: BTST.B dst:(ff0001) src:#0
    BTST<B>(G.io->b(0xff0001), 0);
    // 0037d0: Bcc cond:NE src:(37d8)
    if (G.sr.check_condition(Condition::NE)) { goto L37d8; }
    // 0037d2: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 0037d6: Bcc cond:True src:(37a0)
    goto L37a0;

  L37d8:;
    // 0037d8: Bcc cond:True src:(37a0)
    goto L37a0;

  L37da:;
    // 0037da: ADDQ.W dst:(ff0098) src:#1
    G.io->w(0xff0098, ADD<W>(G.io->w(0xff0098), 1));
    // 0037e0: CMPI.W dst:(ff0098) src:#3c0
    CMP<W>(G.io->w(0xff0098), 0x3c0);
    // 0037e8: Bcc cond:NE src:(37f2)
    if (G.sr.check_condition(Condition::NE)) { goto L37f2; }
    // 0037ea: MOVE.W dst:(ff0882) src:#1
    G.io->w(0xff0882, UCC(1));

  L37f2:;
    // 0037f2: MOVE.W dst:D0 src:(A4)
    G.d[0].w(G.io->w(G.a[4]));
    // 0037f4: AND.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 0037f8: Bcc cond:EQ src:(37fc)
    if (G.sr.check_condition(Condition::EQ)) { goto L37fc; }
    // 0037fa: RTS
    goto end;

  L37fc:;
    // 0037fc: MOVE.L dst:A0 src:(ff007a)
    G.a[0] = G.io->l(0xff007a);
    // 003802: ADDQ.L dst:(ff007a) src:#1
    G.io->l(0xff007a, ADD<L>(G.io->l(0xff007a), 1));
    // 003808: BTST.B dst:(ff0075) src:#0
    BTST<B>(G.io->b(0xff0075), 0);
    // 003810: Bcc cond:NE src:(3816)
    if (G.sr.check_condition(Condition::NE)) { goto L3816; }
    // 003812: BSR src:(383e)
    F383e();

  L3816:;
    // 003816: BTST.B dst:(A5.L)+1 src:#7
    BTST<B>(G.io->b(G.a[5] + 1), 7);
    // 00381c: Bcc cond:EQ src:(3860)
    if (G.sr.check_condition(Condition::EQ)) { goto L3860; }
    // 003820: MOVE.W dst:D0 src:(A4)
    G.d[0].w(UCC(G.io->w(G.a[4])));
    // 003822: BTST.B dst:(ff0074) src:#0
    BTST<B>(G.io->b(0xff0074), 0);
    // 00382a: Bcc cond:NE src:(383c)
    if (G.sr.check_condition(Condition::NE)) { goto L383c; }
    // 00382c: BTST.B dst:(ff0074) src:#3
    BTST<B>(G.io->b(0xff0074), 3);
    // 003834: Bcc cond:NE src:(383c)
    if (G.sr.check_condition(Condition::NE)) { goto L383c; }
    // 003836: AND.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00383a: Bcc cond:EQ src:(3860)
    if (G.sr.check_condition(Condition::EQ)) { goto L3860; }

  L383c:;
    // 00383c: RTS
    goto end;

  L3860:;
    // 003860: MOVE.L dst:A0 src:(ff007e)
    G.a[0] = G.io->l(0xff007e);
    // 003866: ADDQ.L dst:(ff007e) src:#1
    G.io->l(0xff007e, ADD<L>(G.io->l(0xff007e), 1));
    // 00386c: MOVE.W dst:D5 src:#fa
    G.d[5].w(0xfa);
    // 003870: MOVE.W dst:D4 src:#41b4
    G.d[4].w(UCC(0x41b4));
    // 003874: LEA.L dst:A2 src:(ff2aa0)
    G.a[2] = 0xff2aa0;
    // 00387a: MOVE.W dst:D7 src:#c
    G.d[7].w(UCC(12));

  L387e:;
    // 00387e: JMP src:(387e)
    F387e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F372e()
  {
    _log_call(__func__);

  L372e:;
    // 00372e: MOVE.W dst:D7 src:(A6)
    G.d[7].w(G.io->w(G.a[6]));
    // 003730: SUB.W dst:D7 src:D6
    G.d[7].w(SUB<W>(G.d[7].w(), G.d[6].w()));
    // 003732: CMP.W dst:D7 src:(ff0098)
    CMP<W>(G.d[7].w(), G.io->w(0xff0098));
    // 003738: Bcc cond:NE src:(379e)
    if (G.sr.check_condition(Condition::NE)) { goto L379e; }
    // 00373a: ADDQ.L dst:A6 src:#2
    G.a[6] = ADD<L>(G.a[6], 2);
    // 00373c: MOVEM.W src:(A6)+ regs:D1,D2,D3
    G.d[1].l(G.io->w(G.a[6]));
    G.a[6] += 2;
    G.d[2].l(G.io->w(G.a[6]));
    G.a[6] += 2;
    G.d[3].l(G.io->w(G.a[6]));
    G.a[6] += 2;
    // 003740: TST.W src:(ff0038)
    TST<W>(G.io->w(0xff0038));
    // 003746: Bcc cond:EQ src:(372e)
    if (G.sr.check_condition(Condition::EQ)) { goto L372e; }
    // 00374a: ANDI.L dst:D1 src:#ffff
    G.d[1].l(AND<L>(G.d[1].l(), 0xffff));
    // 003750: ANDI.L dst:D2 src:#fff
    G.d[2].l(AND<L>(G.d[2].l(), 0xfff));
    // 003756: ANDI.L dst:D3 src:#fff
    G.d[3].l(AND<L>(G.d[3].l(), 0xfff));
    // 00375c: BTST.L dst:D1 src:#f
    BTST<L>(G.d[1].l(), 15);
    // 003760: Bcc cond:EQ src:(376e)
    if (G.sr.check_condition(Condition::EQ)) { goto L376e; }
    // 003762: TST.W src:(ff0040)
    TST<W>(G.io->w(0xff0040));
    // 003768: Bcc cond:EQ src:(372e)
    if (G.sr.check_condition(Condition::EQ)) { goto L372e; }
    // 00376a: ANDI.W dst:D1 src:#ff
    G.d[1].w(AND<W>(G.d[1].w(), 0xff));

  L376e:;
    // 00376e: ROR.L dst:D1 src:#8
    G.d[1].l(ROR<L>(G.d[1].l(), 8));
    // 003770: MOVEQ.L dst:D4 src:#c
    G.d[4].l(UCC(12));
    // 003772: ROL.L dst:D2 src:D4
    G.d[2].l(ROL<L>(G.d[2].l(), G.d[4].l()));
    // 003774: ADD.L dst:D1 src:D2
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[2].l()));
    // 003776: ADD.L dst:D1 src:D3
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[3].l()));
    // 003778: BTST.B dst:(ff0001) src:#0
    BTST<B>(G.io->b(0xff0001), 0);
    // 003780: Bcc cond:EQ src:(3796)
    if (G.sr.check_condition(Condition::EQ)) { goto L3796; }
    // 003782: LEA.L dst:A0 src:(18168)
    G.a[0] = 0x18168;
    // 003788: MOVE.L dst:D0 src:(A0)
    G.d[0].l(UCC(G.io->l(G.a[0])));
    // 00378a: LEA.L dst:A0 src:(18000)
    G.a[0] = 0x18000;
    // 003790: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 003792: CMPA.L dst:A6 src:A0
    CMP<L>(G.a[6], G.a[0]);
    // 003794: Bcc cond:CS src:(372e)
    if (G.sr.check_condition(Condition::CS)) { goto L372e; }

  L3796:;
    // 003796: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 003798: BSR src:(6600)
    F6600();
    // 00379c: Bcc cond:True src:(372e)
    goto L372e;

  L379e:;
    // 00379e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F383e()
  {
    _log_call(__func__);

    // 00383e: MOVE.W dst:D5 src:#1e0
    G.d[5].w(0x1e0);
    // 003842: MOVE.W dst:D4 src:#21b4
    G.d[4].w(UCC(0x21b4));
    // 003846: CMPI.W dst:(ff003e) src:#3
    CMP<W>(G.io->w(0xff003e), 3);
    // 00384e: Bcc cond:NE src:(3854)
    if (G.sr.check_condition(Condition::NE)) { goto L3854; }
    // 003850: ORI.W dst:D4 src:#8000
    G.d[4].w(OR<W>(G.d[4].w(), 0x8000));

  L3854:;
    // 003854: LEA.L dst:A2 src:(ff2a9e)
    G.a[2] = 0xff2a9e;
    // 00385a: MOVE.W dst:D7 src:#d
    G.d[7].w(UCC(13));
    // 00385e: Bcc cond:True src:(387e)
    F387e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F387e()
  {
    _log_call(__func__);

    // 00387e: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(G.io->w(0xff003e));
    // 003884: SUBQ.W dst:D0 src:#3
    G.d[0].w(SUB<W>(G.d[0].w(), 3));
    // 003886: Bcc cond:CS src:(389e)
    if (G.sr.check_condition(Condition::CS)) {
      F389e();
      goto end;
    }
    // 003888: Bcc cond:EQ src:(389a)
    if (G.sr.check_condition(Condition::EQ)) {
      F389a();
      goto end;
    }
    // 00388a: CMPI.W dst:D0 src:#2
    CMP<W>(G.d[0].w(), 2);
    // 00388e: Bcc cond:NE src:(389e)
    if (G.sr.check_condition(Condition::NE)) {
      F389e();
      goto end;
    }
    // 003890: ANDI.W dst:D4 src:#9fff
    G.d[4].w(AND<W>(G.d[4].w(), 0x9fff));
    // 003894: ORI.W dst:D4 src:#2000
    G.d[4].w(OR<W>(G.d[4].w(), 0x2000));
    // 003898: Bcc cond:True src:(389e)
    F389e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F389a()
  {
    _log_call(__func__);

    // 00389a: EORI.W dst:D4 src:#6000
    G.d[4].w(EOR<W>(G.d[4].w(), 0x6000));

  L389e:;
    // 00389e: JMP src:(389e)
    F389e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F389e()
  {
    _log_call(__func__);

    // 00389e: MOVE.W dst:D6 src:(A2)
    G.d[6].w(UCC(G.io->w(G.a[2])));

  L38a0:;
    // 0038a0: JMP src:(38a0)
    F38a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F38a0()
  {
    _log_call(__func__);

    // 0038a0: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 0038a2: MOVE.B dst:D0 src:(A0)
    G.d[0].b(G.io->b(G.a[0]));
    // 0038a4: ADDA.W dst:A0 src:D5
    G.a[0] = ADD<L>(G.a[0], G.d[5].w());
    // 0038a6: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 0038a8: AND.W dst:D0 src:#7f
    G.d[0].w(AND<W>(G.d[0].w(), 0x7f));
    // 0038ac: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));
    // 0038ae: LEA.L dst:A1 src:(391a)
    G.a[1] = 0x391a;
    // 0038b4: AND.W dst:D1 src:#80
    G.d[1].w(AND<W>(G.d[1].w(), 0x80));
    // 0038b8: Bcc cond:EQ src:(38c6)
    if (G.sr.check_condition(Condition::EQ)) {
      F38c6();
      goto end;
    }
    // 0038bc: MOVE.W dst:D1 src:(A5)
    G.d[1].w(G.io->w(G.a[5]));
    // 0038be: ANDI.W dst:D1 src:#30
    G.d[1].w(AND<W>(G.d[1].w(), 0x30));
    // 0038c2: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 0038c4: ADDA.W dst:A1 src:D1
    G.a[1] = ADD<L>(G.a[1], G.d[1].w());

  L38c6:;
    // 0038c6: JMP src:(38c6)
    F38c6();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F38c6()
  {
    _log_call(__func__);

    // 0038c6: ADD.W dst:D0 src:(A1)+
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[1])));
    G.a[1] += 2;
    // 0038c8: ADD.W dst:D0 src:D4
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[4].w()));
    // 0038ca: MOVE.W dst:D1 src:D6
    G.d[1].w(UCC(G.d[6].w()));
    // 0038cc: AND.L dst:D1 src:#3fff
    G.d[1].l(AND<L>(G.d[1].l(), 0x3fff));
    // 0038d2: SWAP.L dst:D1
    G.d[1].l(SWAP(G.d[1].l()));
    // 0038d4: OR.L dst:D1 src:#40000000
    G.d[1].l(OR<L>(G.d[1].l(), 0x40000000));
    // 0038da: MOVE.L dst:(VDP_CTRL1) src:D1
    G.io->l(VDP_CTRL1, G.d[1].l());
    // 0038e0: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 0038e6: ADD.W dst:D0 src:(A1)+
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[1])));
    G.a[1] += 2;
    // 0038e8: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 0038ee: ADD.W dst:D0 src:(A1)+
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[1])));
    G.a[1] += 2;
    // 0038f0: ADD.L dst:D1 src:#800000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x800000));
    // 0038f6: MOVE.L dst:(VDP_CTRL1) src:D1
    G.io->l(VDP_CTRL1, G.d[1].l());
    // 0038fc: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 003902: ADD.W dst:D0 src:(A1)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[1])));
    // 003904: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 00390a: SUBI.W dst:D6 src:#100
    G.d[6].w(SUB<W>(G.d[6].w(), 0x100));
    // 00390e: DBcc.W cond:False dst:D7 src:(38a0)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) {
      F38a0();
      goto end;
    }
    // 003912: ADDQ.W dst:(A2) src:#4
    G.io->w(G.a[2], ADD<W>(G.io->w(G.a[2]), 4));
    // 003914: ANDI.W dst:(A2) src:#2f7c
    G.io->w(G.a[2], AND<W>(G.io->w(G.a[2]), 0x2f7c));
    // 003918: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3a40()
  {
    _log_call(__func__);

    // 003a40: LEA.L dst:A0 src:(1281e)
    G.a[0] = 0x1281e;
    // 003a46: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(UCC(G.io->w(SOME_STATE_COUNTER)));
    // 003a4c: ANDI.L dst:D0 src:#f
    G.d[0].l(AND<L>(G.d[0].l(), 15));
    // 003a52: LSL.W dst:D0 src:#1
    G.d[0].w(LSL<W>(G.d[0].w(), 1));
    // 003a54: ADDA.L dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].l());
    // 003a56: MOVE.W dst:D2 src:#18
    G.d[2].w(0x18);
    // 003a5a: MOVE.W dst:D0 src:#1
    G.d[0].w(1);
    // 003a5e: MOVE.L dst:D1 src:A0
    G.d[1].l(UCC(G.a[0]));
    // 003a60: Bcc cond:True src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3a64()
  {
    _log_call(__func__);

    // 003a64: MOVE.L dst:A1 src:(A0)+
    G.a[1] = UCC(G.io->l(G.a[0]));
    G.a[0] += 4;
    // 003a66: MOVE.W dst:D0 src:(A0)
    G.d[0].w(UCC(G.io->w(G.a[0])));
    // 003a68: OR.W dst:(ff2aa2) src:D0
    G.io->w(0xff2aa2, OR<W>(G.io->w(0xff2aa2), G.d[0].w()));
    // 003a6e: MOVE.W dst:D0 src:#1ff
    G.d[0].w(0x1ff);
    // 003a72: MOVE.L dst:(VDP_CTRL1) src:#76800000
    G.io->l(VDP_CTRL1, UCC(0x76800000));

  L3a7c:;
    // 003a7c: MOVE.L dst:(VDP_DATA1) src:(A1)+
    G.io->l(VDP_DATA1, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003a82: MOVE.L dst:(VDP_DATA1) src:(A1)+
    G.io->l(VDP_DATA1, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003a88: MOVE.L dst:(VDP_DATA1) src:(A1)+
    G.io->l(VDP_DATA1, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003a8e: MOVE.L dst:(VDP_DATA1) src:(A1)+
    G.io->l(VDP_DATA1, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003a94: MOVE.L dst:(VDP_DATA1) src:(A1)+
    G.io->l(VDP_DATA1, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003a9a: MOVE.L dst:(VDP_DATA1) src:(A1)+
    G.io->l(VDP_DATA1, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003aa0: MOVE.L dst:(VDP_DATA1) src:(A1)+
    G.io->l(VDP_DATA1, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003aa6: MOVE.L dst:(VDP_DATA1) src:(A1)+
    G.io->l(VDP_DATA1, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003aac: DBcc.W cond:False dst:D0 src:(3a7c)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L3a7c; }
    // 003ab0: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3ac2()
  {
    _log_call(__func__);

  L3ac2:;
    // 003ac2: MOVE.W dst:A1 src:A0
    G.a[1].w(G.a[0].w());
    // 003ac4: MOVE.W dst:D5 src:D6
    G.d[5].w(UCC(G.d[6].w()));

  L3ac6:;
    // 003ac6: MOVE.W dst:D1 src:A1
    G.d[1].w(G.a[1].w());
    // 003ac8: MOVEQ.L dst:D2 src:#1
    G.d[2].l(1);
    // 003aca: MOVEQ.L dst:D3 src:#1
    G.d[3].l(UCC(1));
    // 003acc: BSR src:(6414)
    F6414();
    // 003ad0: ADDQ.W dst:A1 src:#4
    G.a[1] = ADD<L>(G.a[1], 4);
    // 003ad2: DBcc.W cond:False dst:D5 src:(3ac6)
    G.d[5].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[5].w())) { goto L3ac6; }
    // 003ad6: ADDA.W dst:A0 src:#100
    G.a[0] = ADD<L>(G.a[0], 0x100);
    // 003ada: DBcc.W cond:False dst:D7 src:(3ac2)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L3ac2; }
    // 003ade: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3ae0()
  {
    _log_call(__func__);

    // 003ae0: MOVE.W dst:D2 src:(ff0040)
    G.d[2].w(G.io->w(0xff0040));
    // 003ae6: ADD.W dst:D2 src:(ff000a)
    G.d[2].w(ADD<W>(G.d[2].w(), G.io->w(0xff000a)));
    // 003aec: MULU.W dst:D2 src:#6
    G.d[2].l(MULU(G.d[2].w(), 6));
    // 003af0: ADD.W dst:D2 src:(ff003e)
    G.d[2].w(ADD<W>(G.d[2].w(), G.io->w(0xff003e)));
    // 003af6: MOVE.W dst:D1 src:D2
    G.d[1].w(UCC(G.d[2].w()));
    // 003af8: LSR.W dst:D1 src:#3
    G.d[1].w(LSR<W>(G.d[1].w(), 3));
    // 003afa: MOVE.W dst:(ff006e) src:D1
    G.io->w(0xff006e, UCC(G.d[1].w()));
    // 003b00: BTST.B dst:(ff0001) src:#7
    BTST<B>(G.io->b(0xff0001), 7);
    // 003b08: Bcc cond:EQ src:(3b14)
    if (G.sr.check_condition(Condition::EQ)) { goto L3b14; }
    // 003b0a: MOVE.W dst:(ff006a) src:#12
    G.io->w(0xff006a, UCC(0x12));
    // 003b12: RTS
    goto end;

  L3b14:;
    // 003b14: CMPI.W dst:(ff006e) src:#18
    CMP<W>(G.io->w(0xff006e), 0x18);
    // 003b1c: Bcc cond:LS src:(3b26)
    if (G.sr.check_condition(Condition::LS)) { goto L3b26; }
    // 003b1e: MOVE.W dst:(ff006e) src:#18
    G.io->w(0xff006e, UCC(0x18));

  L3b26:;
    // 003b26: ADDI.W dst:D2 src:#e
    G.d[2].w(ADD<W>(G.d[2].w(), 14));
    // 003b2a: CMPI.W dst:D2 src:#28
    CMP<W>(G.d[2].w(), 0x28);
    // 003b2e: Bcc cond:LS src:(3b34)
    if (G.sr.check_condition(Condition::LS)) { goto L3b34; }
    // 003b30: MOVE.W dst:D2 src:#28
    G.d[2].w(UCC(0x28));

  L3b34:;
    // 003b34: MOVE.W dst:(ff006a) src:D2
    G.io->w(0xff006a, UCC(G.d[2].w()));
    // 003b3a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3b40()
  {
    _log_call(__func__);

    // 003b40: LEA.L dst:A2 src:(ff2a9e)
    G.a[2] = 0xff2a9e;
    // 003b46: MOVE.W dst:D4 src:(A2)
    G.d[4].w(G.io->w(G.a[2]));
    // 003b48: ADDQ.W dst:(A2) src:#1
    G.io->w(G.a[2], ADD<W>(G.io->w(G.a[2]), 1));
    // 003b4a: LEA.L dst:A3 src:(40c2)
    G.a[3] = 0x40c2;

  L3b50:;
    // 003b50: CMPI.W dst:(A3) src:#ffff
    CMP<W>(G.io->w(G.a[3]), 0xffff);
    // 003b54: Bcc cond:EQ src:(3bfa)
    if (G.sr.check_condition(Condition::EQ)) { goto L3bfa; }
    // 003b58: CMP.W dst:D4 src:(A3)
    CMP<W>(G.d[4].w(), G.io->w(G.a[3]));
    // 003b5a: Bcc cond:EQ src:(3b66)
    if (G.sr.check_condition(Condition::EQ)) { goto L3b66; }
    // 003b5c: Bcc cond:CS src:(3be0)
    if (G.sr.check_condition(Condition::CS)) { goto L3be0; }
    // 003b60: LEA.L dst:A3 src:(A3.L)+a
    G.a[3] += 10;
    // 003b64: Bcc cond:True src:(3b50)
    goto L3b50;

  L3b66:;
    // 003b66: MOVE.W dst:D1 src:(A3.L)+2
    G.d[1].w(UCC(G.io->w(G.a[3] + 2)));
    // 003b6a: BTST.L dst:D1 src:#7
    BTST<L>(G.d[1].l(), 7);
    // 003b6e: Bcc cond:EQ src:(3b78)
    if (G.sr.check_condition(Condition::EQ)) { goto L3b78; }
    // 003b70: MOVE.W dst:D0 src:#1
    G.d[0].w(UCC(1));
    // 003b74: BSR src:(65fe)
    F65fe();

  L3b78:;
    // 003b78: ANDI.W dst:D1 src:#ff00
    G.d[1].w(AND<W>(G.d[1].w(), 0xff00));
    // 003b7c: Bcc cond:EQ src:(3b9c)
    if (G.sr.check_condition(Condition::EQ)) { goto L3b9c; }
    // 003b7e: ANDI.W dst:D1 src:#f00
    G.d[1].w(AND<W>(G.d[1].w(), 0xf00));
    // 003b82: Bcc cond:EQ src:(3b94)
    if (G.sr.check_condition(Condition::EQ)) { goto L3b94; }
    // 003b84: LSR.W dst:D1 src:#8
    G.d[1].w(LSR<W>(G.d[1].w(), 8));
    // 003b86: BSR src:(3c5c)
    F3c5c();
    // 003b8a: MOVE.W dst:D0 src:(A3.L)+2
    G.d[0].w(G.io->w(G.a[3] + 2));
    // 003b8e: ANDI.W dst:D0 src:#8000
    G.d[0].w(AND<W>(G.d[0].w(), 0x8000));
    // 003b92: Bcc cond:EQ src:(3b9c)
    if (G.sr.check_condition(Condition::EQ)) { goto L3b9c; }

  L3b94:;
    // 003b94: BCHG.B dst:(ff0001) src:#5
    G.io->b(0xff0001, BCHG<B>(G.io->b(0xff0001), 5));

  L3b9c:;
    // 003b9c: CMPI.W dst:(A3.L)+6 src:#ff
    CMP<W>(G.io->w(G.a[3] + 6), 0xff);
    // 003ba2: Bcc cond:EQ src:(3be0)
    if (G.sr.check_condition(Condition::EQ)) { goto L3be0; }
    // 003ba4: LEA.L dst:A2 src:(4146)
    G.a[2] = 0x4146;
    // 003baa: ADDA.W dst:A2 src:(A3.L)+6
    G.a[2] = ADD<L>(G.a[2], G.io->w(G.a[3] + 6));
    // 003bae: MOVE.W dst:D4 src:(A3.L)+8
    G.d[4].w(UCC(G.io->w(G.a[3] + 8)));

  L3bb2:;
    // 003bb2: MOVE.W dst:D0 src:(A2)+
    G.d[0].w(UCC(G.io->w(G.a[2])));
    G.a[2] += 2;
    // 003bb4: MOVE.L dst:A0 src:#0
    G.a[0] = 0;
    // 003bba: MOVE.W dst:A0 src:(A2)+
    G.a[0].w(UCC(G.io->w(G.a[2])));
    G.a[2] += 2;
    // 003bbc: MOVE.W dst:D6 src:(A2)+
    G.d[6].w(UCC(G.io->w(G.a[2])));
    G.a[2] += 2;
    // 003bbe: MOVE.W dst:D7 src:#0
    G.d[7].w(UCC(0));
    // 003bc2: CMPI.W dst:(A3.L)+6 src:#24
    CMP<W>(G.io->w(G.a[3] + 6), 0x24);
    // 003bc8: Bcc cond:CC src:(3bdc)
    if (G.sr.check_condition(Condition::CC)) { goto L3bdc; }
    // 003bca: MOVE.W dst:-(USP) src:D4
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(G.d[4].w()));
    // 003bcc: BSR src:(3ac2)
    F3ac2();
    // 003bd0: MOVE.W dst:D4 src:(USP)+
    G.d[4].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 003bd2: DBcc.W cond:False dst:D4 src:(3bb2)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto L3bb2; }
    // 003bd6: LEA.L dst:A3 src:(A3.L)+a
    G.a[3] += 10;
    // 003bda: Bcc cond:True src:(3be0)
    goto L3be0;

  L3bdc:;
    // 003bdc: BSR src:(3eea)
    F3eea();

  L3be0:;
    // 003be0: BSR src:(3ce4)
    F3ce4();
    // 003be4: LEA.L dst:A3 src:(A3.L)-8
    G.a[3] += 0xfffffff8;
    // 003be8: MOVE.W dst:D0 src:(A3)
    G.d[0].w(G.io->w(G.a[3]));
    // 003bea: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 003bee: MOVE.W dst:D1 src:(A3.L)+2
    G.d[1].w(UCC(G.io->w(G.a[3] + 2)));
    // 003bf2: BSR src:(3e4a)
    F3e4a();
    // 003bf6: Bcc cond:True src:(3d46)
    goto L3d46;

  L3bfa:;
    // 003bfa: MOVE.W dst:D0 src:(A4)
    G.d[0].w(G.io->w(G.a[4]));
    // 003bfc: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 003c00: Bcc cond:NE src:(3c5a)
    if (G.sr.check_condition(Condition::NE)) {
      _m->noop();
      goto end;
    }
    // 003c02: BCLR.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 1));
    // 003c0a: MOVE.W dst:(ff008e) src:#0
    G.io->w(0xff008e, 0);
    // 003c12: CLR.L dst:(VSCROLL_FG)
    G.io->l(VSCROLL_FG, 0);
    // 003c18: MOVE.W dst:(VSCROLL_FG) src:#10
    G.io->w(VSCROLL_FG, 0x10);
    // 003c20: MOVE.W dst:(ff2a9e) src:#f50
    G.io->w(0xff2a9e, 0xf50);
    // 003c28: MOVE.W dst:(ff0038) src:#1
    G.io->w(0xff0038, UCC(1));
    // 003c30: BCLR.B dst:(ff0843) src:#7
    G.io->b(0xff0843, BCLR<B>(G.io->b(0xff0843), 7));
    // 003c38: BCLR.B dst:(ff0075) src:#0
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 0));
    // 003c40: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 003c46: BSR src:(5bba)
    _m->clear_sprite_on_a6_14();
    // 003c4a: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 003c4e: Bcc cond:True src:(5bba)
    _m->clear_sprite_on_a6_14();
    goto end;

  L3d46:;
    // 003d46: LEA.L dst:A6 src:(ff0302)
    G.a[6] = 0xff0302;
    // 003d4c: MOVE.W dst:D1 src:(ff0090)
    G.d[1].w(G.io->w(0xff0090));
    // 003d52: ADD.W dst:(A6.L)+14 src:D1
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[1].w()));
    // 003d56: MOVE.W dst:D2 src:(ff008e)
    G.d[2].w(G.io->w(0xff008e));
    // 003d5c: MOVE.W dst:D1 src:(A3)
    G.d[1].w(G.io->w(G.a[3]));
    // 003d5e: ANDI.W dst:D1 src:#30
    G.d[1].w(AND<W>(G.d[1].w(), 0x30));
    // 003d62: Bcc cond:EQ src:(3d74)
    if (G.sr.check_condition(Condition::EQ)) { goto L3d74; }
    // 003d64: MOVE.W dst:D0 src:#40
    G.d[0].w(UCC(0x40));
    // 003d68: CMPI.W dst:D1 src:#10
    CMP<W>(G.d[1].w(), 0x10);
    // 003d6c: Bcc cond:EQ src:(3d72)
    if (G.sr.check_condition(Condition::EQ)) { goto L3d72; }
    // 003d6e: MOVE.W dst:D0 src:#ffc0
    G.d[0].w(UCC(0xffc0));

  L3d72:;
    // 003d72: ADD.W dst:D2 src:D0
    G.d[2].w(ADD<W>(G.d[2].w(), G.d[0].w()));

  L3d74:;
    // 003d74: ADD.W dst:(A6.L)+16 src:D2
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[2].w()));
    // 003d78: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 003d7c: LEA.L dst:A6 src:(A6.L)-40
    G.a[6] += 0xffffffc0;
    // 003d80: MOVE.W dst:D1 src:(ff0090)
    G.d[1].w(G.io->w(0xff0090));
    // 003d86: MOVE.W dst:D2 src:(ff008e)
    G.d[2].w(G.io->w(0xff008e));
    // 003d8c: ADD.W dst:(A6.L)+14 src:D1
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[1].w()));
    // 003d90: ADD.W dst:(A6.L)+94 src:D1
    G.io->w(G.a[6] + 0x94, ADD<W>(G.io->w(G.a[6] + 0x94), G.d[1].w()));
    // 003d94: ADD.W dst:(A6.L)+16 src:D2
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[2].w()));
    // 003d98: ADD.W dst:(A6.L)+96 src:D2
    G.io->w(G.a[6] + 0x96, ADD<W>(G.io->w(G.a[6] + 0x96), G.d[2].w()));
    // 003d9c: MOVE.L dst:(ff008e) src:#0
    G.io->l(0xff008e, 0);
    // 003da6: MOVE.W dst:D0 src:(ff2a9e)
    G.d[0].w(G.io->w(0xff2a9e));
    // 003dac: MOVE.W dst:D1 src:(A3)
    G.d[1].w(G.io->w(G.a[3]));
    // 003dae: ANDI.W dst:D1 src:#c00
    G.d[1].w(AND<W>(G.d[1].w(), 0xc00));
    // 003db2: Bcc cond:EQ src:(3dcc)
    if (G.sr.check_condition(Condition::EQ)) { goto L3dcc; }
    // 003db4: ANDI.W dst:D0 src:#1
    G.d[0].w(AND<W>(G.d[0].w(), 1));
    // 003db8: Bcc cond:NE src:(3dcc)
    if (G.sr.check_condition(Condition::NE)) { goto L3dcc; }
    // 003dba: CMPI.W dst:D1 src:#800
    CMP<W>(G.d[1].w(), 0x800);
    // 003dbe: Bcc cond:NE src:(3dc8)
    if (G.sr.check_condition(Condition::NE)) { goto L3dc8; }
    // 003dc0: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 003dc4: LEA.L dst:A6 src:(A6.L)+80
    G.a[6] += 0x80;

  L3dc8:;
    // 003dc8: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L3dcc:;
    // 003dcc: BSR src:(5bba)
    _m->clear_sprite_on_a6_14();
    // 003dd0: LEA.L dst:A6 src:(A6.L)+80
    G.a[6] += 0x80;
    // 003dd4: Bcc cond:True src:(5bba)
    _m->clear_sprite_on_a6_14();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3c5c()
  {
    _log_call(__func__);

    // 003c5c: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 003c60: Bcc cond:EQ src:(3c5a)
    if (G.sr.check_condition(Condition::EQ)) {
      _m->noop();
      goto end;
    }
    // 003c62: SUBQ.W dst:D1 src:#1
    G.d[1].w(SUB<W>(G.d[1].w(), 1));
    // 003c64: LEA.L dst:A0 src:(3c70)
    G.a[0] = 0x3c70;
    // 003c6a: LSL.W dst:D1 src:#2
    G.d[1].w(LSL<W>(G.d[1].w(), 2));
    // 003c6c: JMP src:(A0,D1.W)+0
    JUMP_MAP(G.a[0] + G.d[1].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3c7c()
  {
    _log_call(__func__);

    // 003c7c: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 003c82: LEA.L dst:A1 src:(3d16)
    G.a[1] = 0x3d16;
    // 003c88: BSR src:(3d04)
    F3d04();
    // 003c8c: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 003c90: Bcc cond:True src:(3d04)
    F3d04();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3c94()
  {
    _log_call(__func__);

    // 003c94: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 003c9a: ANDI.W dst:(A6.L)+10 src:#e7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0xe7ff));
    // 003ca0: ADDI.W dst:(A6.L)+14 src:#2400
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x2400));
    // 003ca6: SUBI.W dst:(A6.L)+16 src:#a00
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0xa00));
    // 003cac: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3cae()
  {
    _log_call(__func__);

    // 003cae: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 003cb4: LEA.L dst:A1 src:(3d32)
    G.a[1] = 0x3d32;
    // 003cba: ADDI.W dst:(A6.L)+14 src:#600
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x600));
    // 003cc0: SUBI.W dst:(A6.L)+16 src:#e00
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0xe00));
    // 003cc6: BSR src:(3d08)
    F3d08();
    // 003cca: LEA.L dst:A6 src:(A6.L)+80
    G.a[6] += 0x80;
    // 003cce: MOVE.L dst:(A6.L)+14 src:(A6.L)-6c
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[6] + 0xffffff94));
    // 003cd4: SUBI.W dst:(A6.L)+14 src:#4000
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x4000));
    // 003cda: ADDI.W dst:(A6.L)+16 src:#e00
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0xe00));
    // 003ce0: Bcc cond:True src:(3d08)
    F3d08();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3ce4()
  {
    _log_call(__func__);

    // 003ce4: LEA.L dst:A0 src:(40a2)
    G.a[0] = 0x40a2;
    // 003cea: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 003cec: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 003cf2: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 003cf6: ADDA.L dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].l());
    // 003cf8: MOVE.L dst:D1 src:(A0)
    G.d[1].l(G.io->l(G.a[0]));
    // 003cfa: MOVE.W dst:D2 src:#3e
    G.d[2].w(0x3e);
    // 003cfe: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 003d00: Bcc cond:True src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3d04()
  {
    _log_call(__func__);

    // 003d04: MOVE.L dst:(A6.L)+14 src:(A1)+
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;

  L3d08:;
    // 003d08: JMP src:(3d08)
    F3d08();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3d08()
  {
    _log_call(__func__);

    // 003d08: MOVE.L dst:(A6.L)+10 src:(A1)+
    G.io->l(G.a[6] + 0x10, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003d0c: MOVE.W dst:D1 src:(A1)+
    G.d[1].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 003d0e: MOVE.L dst:(A6.L)+20 src:(A1)+
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 003d12: Bcc cond:True src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3dda()
  {
    _log_call(__func__);

    // 003dda: MOVE.W dst:D0 src:#b0
    G.d[0].w(0xb0);
    // 003dde: MOVE.L dst:D1 src:#39200
    G.d[1].l(0x39200);
    // 003de4: MOVE.W dst:D2 src:#1b4
    G.d[2].w(UCC(0x1b4));
    // 003de8: BSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 003dec: MOVE.W dst:D0 src:#21b4
    G.d[0].w(0x21b4);
    // 003df0: MOVE.L dst:A0 src:#40c
    G.a[0] = 0x40c;
    // 003df6: MOVEQ.L dst:D6 src:#d
    G.d[6].l(13);
    // 003df8: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 003dfa: BSR src:(3ac2)
    F3ac2();
    // 003dfe: MOVE.W dst:D0 src:#2224
    G.d[0].w(0x2224);
    // 003e02: MOVE.L dst:A0 src:#624
    G.a[0] = 0x624;
    // 003e08: MOVEQ.L dst:D6 src:#7
    G.d[6].l(7);
    // 003e0a: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 003e0c: BSR src:(3ac2)
    F3ac2();
    // 003e10: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 003e16: LEA.L dst:A1 src:(3e20)
    G.a[1] = 0x3e20;
    // 003e1c: Bcc cond:True src:(3d04)
    F3d04();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3e2e()
  {
    _log_call(__func__);

    // 003e2e: MOVE.L dst:(ff008e) src:#0
    G.io->l(0xff008e, UCC(0));
    // 003e38: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 003e3c: Bcc cond:NE src:(3e90)
    if (G.sr.check_condition(Condition::NE)) { goto L3e90; }
    // 003e3e: MOVEM.W src:(A6.L)+6 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 6));
    G.d[1].l(G.io->w(G.a[6] + 8));
    // 003e44: ANDI.W dst:D1 src:#3f
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f));
    // 003e48: Bcc cond:True src:(3e5a)
    F3e5a();
    goto end;

  L3e90:;
    // 003e90: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3e4a()
  {
    _log_call(__func__);

    // 003e4a: MOVE.L dst:(ff008e) src:#0
    G.io->l(0xff008e, UCC(0));
    // 003e54: CMPI.W dst:D0 src:#f
    CMP<W>(G.d[0].w(), 15);
    // 003e58: Bcc cond:EQ src:(3e90)
    if (G.sr.check_condition(Condition::EQ)) { goto L3e90; }

  L3e5a:;
    // 003e5a: JMP src:(3e5a)
    F3e5a();
    goto end;

  L3e90:;
    // 003e90: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3e5a()
  {
    _log_call(__func__);

    // 003e5a: MOVE.W dst:D2 src:(SOME_STATE_COUNTER)
    G.d[2].w(G.io->w(SOME_STATE_COUNTER));
    // 003e60: AND.W dst:D2 src:D0
    G.d[2].w(AND<W>(G.d[2].w(), G.d[0].w()));
    // 003e62: Bcc cond:NE src:(3e90)
    if (G.sr.check_condition(Condition::NE)) { goto L3e90; }
    // 003e64: LEA.L dst:A1 src:(3e92)
    G.a[1] = 0x3e92;
    // 003e6a: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 003e6c: MOVE.W dst:D2 src:(A1,D1.W)+0
    G.d[2].w(G.io->w(G.a[1] + G.d[1].w()));
    // 003e70: MOVE.W dst:D3 src:(A1,D1.W)+2
    G.d[3].w(G.io->w(G.a[1] + G.d[1].w() + 2));
    // 003e74: ADD.W dst:(HSCROLL_FG) src:D2
    G.io->w(HSCROLL_FG, ADD<W>(G.io->w(HSCROLL_FG), G.d[2].w()));
    // 003e7a: LSL.W dst:D2 src:#7
    G.d[2].w(LSL<W>(G.d[2].w(), 7));
    // 003e7c: MOVE.W dst:(ff0090) src:D2
    G.io->w(0xff0090, G.d[2].w());
    // 003e82: ADD.W dst:(VSCROLL_FG) src:D3
    G.io->w(VSCROLL_FG, ADD<W>(G.io->w(VSCROLL_FG), G.d[3].w()));
    // 003e88: LSL.W dst:D3 src:#7
    G.d[3].w(LSL<W>(G.d[3].w(), 7));
    // 003e8a: MOVE.W dst:(ff008e) src:D3
    G.io->w(0xff008e, UCC(G.d[3].w()));

  L3e90:;
    // 003e90: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3eb2()
  {
    _log_call(__func__);

    // 003eb2: MOVEM.W src:(A6.L)+6 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 6));
    G.d[1].l(G.io->w(G.a[6] + 8));
    // 003eb8: ANDI.W dst:D1 src:#3f
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f));
    // 003ebc: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 003ec0: Bcc cond:NE src:(3ee8)
    if (G.sr.check_condition(Condition::NE)) { goto L3ee8; }
    // 003ec2: MOVE.W dst:D2 src:(SOME_STATE_COUNTER)
    G.d[2].w(G.io->w(SOME_STATE_COUNTER));
    // 003ec8: AND.W dst:D2 src:D0
    G.d[2].w(AND<W>(G.d[2].w(), G.d[0].w()));
    // 003eca: Bcc cond:NE src:(3ee8)
    if (G.sr.check_condition(Condition::NE)) { goto L3ee8; }
    // 003ecc: LEA.L dst:A1 src:(3e92)
    G.a[1] = 0x3e92;
    // 003ed2: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 003ed4: MOVE.W dst:D2 src:(A1,D1.W)+0
    G.d[2].w(G.io->w(G.a[1] + G.d[1].w()));
    // 003ed8: MOVE.W dst:D3 src:(A1,D1.W)+2
    G.d[3].w(UCC(G.io->w(G.a[1] + G.d[1].w() + 2)));
    // 003edc: LSL.W dst:D2 src:#7
    G.d[2].w(LSL<W>(G.d[2].w(), 7));
    // 003ede: LSL.W dst:D3 src:#7
    G.d[3].w(LSL<W>(G.d[3].w(), 7));
    // 003ee0: ADD.W dst:(A6.L)+14 src:D2
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[2].w()));
    // 003ee4: ADD.W dst:(A6.L)+16 src:D3
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[3].w()));

  L3ee8:;
    // 003ee8: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F3eea()
  {
    _log_call(__func__);

  L3eea:;
    // 003eea: MOVE.W dst:A1 src:A0
    G.a[1].w(G.a[0].w());
    // 003eec: MOVE.W dst:D5 src:D6
    G.d[5].w(UCC(G.d[6].w()));

  L3eee:;
    // 003eee: MOVE.W dst:D1 src:A1
    G.d[1].w(G.a[1].w());
    // 003ef0: MOVEQ.L dst:D2 src:#1
    G.d[2].l(1);
    // 003ef2: MOVEQ.L dst:D3 src:#1
    G.d[3].l(UCC(1));
    // 003ef4: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 003ef8: ADDQ.W dst:A1 src:#4
    G.a[1] = ADD<L>(G.a[1], 4);
    // 003efa: DBcc.W cond:False dst:D5 src:(3eee)
    G.d[5].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[5].w())) { goto L3eee; }
    // 003efe: ADDA.W dst:A0 src:#100
    G.a[0] = ADD<L>(G.a[0], 0x100);
    // 003f02: DBcc.W cond:False dst:D7 src:(3eea)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L3eea; }
    // 003f06: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F4182()
  {
    _log_call(__func__);

    // 004182: LEA.L dst:A6 src:(ff0802)
    G.a[6] = 0xff0802;
    // 004188: BSET.B dst:(ff2aa3) src:#0
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 0));
    // 004190: Bcc cond:NE src:(41c8)
    if (G.sr.check_condition(Condition::NE)) { goto L41c8; }
    // 004192: CLR.L dst:(A6.L)+2
    G.io->l(G.a[6] + 2, 0);
    // 004196: CLR.L dst:(A6.L)+6
    G.io->l(G.a[6] + 6, 0);
    // 00419a: MOVE.W dst:(A6.L)+12 src:#504
    G.io->w(G.a[6] + 0x12, 0x504);
    // 0041a0: MOVE.L dst:(A6.L)+14 src:(ff2a9e)
    G.io->l(G.a[6] + 0x14, G.io->l(0xff2a9e));
    // 0041a8: MOVE.L dst:(A6.L)+18 src:#3000300
    G.io->l(G.a[6] + 0x18, 0x3000300);
    // 0041b0: MOVE.L dst:(A6.L)+1c src:#3000300
    G.io->l(G.a[6] + 0x1c, 0x3000300);
    // 0041b8: MOVE.L dst:(A6.L)+20 src:#fc000400
    G.io->l(G.a[6] + 0x20, 0xfc000400);
    // 0041c0: CLR.L dst:(A6.L)+24
    G.io->l(G.a[6] + 0x24, 0);
    // 0041c4: CLR.L dst:(A6.L)+28
    G.io->l(G.a[6] + 0x28, UCC(0));

  L41c8:;
    // 0041c8: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 0041cc: CMP.W dst:D0 src:(A6)
    CMP<W>(G.d[0].w(), G.io->w(G.a[6]));
    // 0041ce: Bcc cond:EQ src:(4238)
    if (G.sr.check_condition(Condition::EQ)) { goto L4238; }
    // 0041d0: BTST.B dst:(A6) src:#5
    BTST<B>(G.io->b(G.a[6]), 5);
    // 0041d4: Bcc cond:EQ src:(41f4)
    if (G.sr.check_condition(Condition::EQ)) { goto L41f4; }
    // 0041d6: BTST.B dst:(A6.L)+28 src:#5
    BTST<B>(G.io->b(G.a[6] + 0x28), 5);
    // 0041dc: Bcc cond:NE src:(41f4)
    if (G.sr.check_condition(Condition::NE)) { goto L41f4; }
    // 0041de: MOVE.W dst:(A6.L)+6 src:#20
    G.io->w(G.a[6] + 6, 0x20);
    // 0041e4: ADDI.W dst:(A6.L)+8 src:#20
    G.io->w(G.a[6] + 8, ADD<W>(G.io->w(G.a[6] + 8), 0x20));
    // 0041ea: MOVE.W dst:(A6.L)+2a src:#a
    G.io->w(G.a[6] + 0x2a, UCC(10));
    // 0041f0: Bcc cond:True src:(42ca)
    goto L42ca;

  L41f4:;
    // 0041f4: MOVE.W dst:D0 src:(A6)
    G.d[0].w(G.io->w(G.a[6]));
    // 0041f6: AND.W dst:D0 src:#4800
    G.d[0].w(AND<W>(G.d[0].w(), 0x4800));
    // 0041fa: MOVE.W dst:D1 src:(A6.L)+28
    G.d[1].w(G.io->w(G.a[6] + 0x28));
    // 0041fe: AND.W dst:D1 src:#4800
    G.d[1].w(AND<W>(G.d[1].w(), 0x4800));
    // 004202: CMP.W dst:D0 src:D1
    CMP<W>(G.d[0].w(), G.d[1].w());
    // 004204: Bcc cond:EQ src:(4222)
    if (G.sr.check_condition(Condition::EQ)) { goto L4222; }
    // 004206: ADDI.W dst:(A6.L)+8 src:#10
    G.io->w(G.a[6] + 8, ADD<W>(G.io->w(G.a[6] + 8), 0x10));
    // 00420c: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 004214: Bcc cond:EQ src:(42ca)
    if (G.sr.check_condition(Condition::EQ)) { goto L42ca; }
    // 004218: ADDI.W dst:(A6.L)+8 src:#20
    G.io->w(G.a[6] + 8, ADD<W>(G.io->w(G.a[6] + 8), 0x20));
    // 00421e: Bcc cond:True src:(42ca)
    goto L42ca;

  L4222:;
    // 004222: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 004226: Bcc cond:EQ src:(4238)
    if (G.sr.check_condition(Condition::EQ)) { goto L4238; }
    // 004228: MOVE.W dst:(A6.L)+6 src:#0
    G.io->w(G.a[6] + 6, 0);
    // 00422e: MOVE.W dst:(A6.L)+2a src:#8
    G.io->w(G.a[6] + 0x2a, UCC(8));
    // 004234: Bcc cond:True src:(42ca)
    goto L42ca;

  L4238:;
    // 004238: TST.W src:(A6.L)+2a
    TST<W>(G.io->w(G.a[6] + 0x2a));
    // 00423c: Bcc cond:EQ src:(4258)
    if (G.sr.check_condition(Condition::EQ)) { goto L4258; }
    // 00423e: SUBQ.W dst:(A6.L)+2a src:#1
    G.io->w(G.a[6] + 0x2a, SUB<W>(G.io->w(G.a[6] + 0x2a), 1));
    // 004242: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 004248: AND.W dst:D0 src:#7f
    G.d[0].w(AND<W>(G.d[0].w(), 0x7f));
    // 00424c: Bcc cond:NE src:(42ca)
    if (G.sr.check_condition(Condition::NE)) { goto L42ca; }
    // 00424e: ADDI.W dst:(A6.L)+8 src:#20
    G.io->w(G.a[6] + 8, ADD<W>(G.io->w(G.a[6] + 8), 0x20));
    // 004254: Bcc cond:True src:(42ca)
    goto L42ca;

  L4258:;
    // 004258: MOVE.W dst:(A6.L)+2a src:#1e
    G.io->w(G.a[6] + 0x2a, 0x1e);
    // 00425e: ADDQ.W dst:(A6.L)+4 src:#1
    G.io->w(G.a[6] + 4, ADD<W>(G.io->w(G.a[6] + 4), 1));
    // 004262: ANDI.W dst:(A6.L)+4 src:#f
    G.io->w(G.a[6] + 4, AND<W>(G.io->w(G.a[6] + 4), 15));
    // 004268: MOVE.W dst:D0 src:(A6.L)+4
    G.d[0].w(UCC(G.io->w(G.a[6] + 4)));
    // 00426c: LEA.L dst:A0 src:(437a)
    G.a[0] = 0x437a;
    // 004272: MOVE.B dst:(A6.L)+7 src:(A0,D0.W)+0
    G.io->b(G.a[6] + 7, UCC(G.io->b(G.a[0] + G.d[0].w())));
    // 004278: LEA.L dst:A0 src:(ff0cc2)
    G.a[0] = 0xff0cc2;
    // 00427e: MOVEQ.L dst:D0 src:#1f
    G.d[0].l(UCC(0x1f));

  L4280:;
    // 004280: MOVE.W dst:D1 src:(A0)
    G.d[1].w(G.io->w(G.a[0]));
    // 004282: AND.W dst:D1 src:#a0
    G.d[1].w(AND<W>(G.d[1].w(), 0xa0));
    // 004286: CMP.W dst:D1 src:#a0
    CMP<W>(G.d[1].w(), 0xa0);
    // 00428a: Bcc cond:EQ src:(4298)
    if (G.sr.check_condition(Condition::EQ)) { goto L4298; }
    // 00428c: MOVE.W dst:D1 src:(A0)
    G.d[1].w(G.io->w(G.a[0]));
    // 00428e: AND.W dst:D1 src:#f000
    G.d[1].w(AND<W>(G.d[1].w(), 0xf000));
    // 004292: CMP.W dst:D1 src:#8000
    CMP<W>(G.d[1].w(), 0x8000);
    // 004296: Bcc cond:EQ src:(42a6)
    if (G.sr.check_condition(Condition::EQ)) { goto L42a6; }

  L4298:;
    // 004298: LEA.L dst:A0 src:(A0.L)+c0
    G.a[0] += 0xc0;
    // 00429c: DBcc.W cond:False dst:D0 src:(4280)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L4280; }
    // 0042a0: SUBQ.W dst:(A6.L)+8 src:#8
    G.io->w(G.a[6] + 8, SUB<W>(G.io->w(G.a[6] + 8), 8));
    // 0042a4: Bcc cond:True src:(42ca)
    goto L42ca;

  L42a6:;
    // 0042a6: MOVEM.W src:(A0.L)+14 regs:D2,D3
    G.d[2].l(G.io->w(G.a[0] + 0x14));
    G.d[3].l(G.io->w(G.a[0] + 0x16));
    // 0042ac: BSR src:(6660)
    F6660();
    // 0042b0: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 0042b4: ADDQ.W dst:D1 src:#4
    G.d[1].w(ADD<W>(G.d[1].w(), 4));
    // 0042b6: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, G.d[1].w());
    // 0042ba: AND.W dst:D0 src:#18
    G.d[0].w(AND<W>(G.d[0].w(), 0x18));
    // 0042be: AND.W dst:D1 src:#18
    G.d[1].w(AND<W>(G.d[1].w(), 0x18));
    // 0042c2: CMP.W dst:D1 src:D0
    CMP<W>(G.d[1].w(), G.d[0].w());
    // 0042c4: Bcc cond:NE src:(42ca)
    if (G.sr.check_condition(Condition::NE)) { goto L42ca; }
    // 0042c6: SUBQ.W dst:(A6.L)+8 src:#8
    G.io->w(G.a[6] + 8, SUB<W>(G.io->w(G.a[6] + 8), 8));

  L42ca:;
    // 0042ca: MOVE.W dst:(A6.L)+28 src:(A6)
    G.io->w(G.a[6] + 0x28, G.io->w(G.a[6]));
    // 0042ce: MOVE.W dst:(A6) src:#8000
    G.io->w(G.a[6], 0x8000);
    // 0042d2: ANDI.W dst:(A6.L)+8 src:#38
    G.io->w(G.a[6] + 8, AND<W>(G.io->w(G.a[6] + 8), 0x38));
    // 0042d8: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0042dc: MOVE.W dst:D0 src:(ff008e)
    G.d[0].w(G.io->w(0xff008e));
    // 0042e2: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 0042e6: CMPI.W dst:(A6.L)+14 src:#400
    CMP<W>(G.io->w(G.a[6] + 0x14), 0x400);
    // 0042ec: Bcc cond:CC src:(42fc)
    if (G.sr.check_condition(Condition::CC)) { goto L42fc; }
    // 0042ee: MOVE.W dst:(A6.L)+14 src:#400
    G.io->w(G.a[6] + 0x14, 0x400);
    // 0042f4: MOVE.W dst:(A6.L)+8 src:#10
    G.io->w(G.a[6] + 8, UCC(0x10));
    // 0042fa: Bcc cond:True src:(4310)
    goto L4310;

  L42fc:;
    // 0042fc: CMPI.W dst:(A6.L)+14 src:#9c00
    CMP<W>(G.io->w(G.a[6] + 0x14), 0x9c00);
    // 004302: Bcc cond:LS src:(4310)
    if (G.sr.check_condition(Condition::LS)) { goto L4310; }
    // 004304: MOVE.W dst:(A6.L)+14 src:#9c00
    G.io->w(G.a[6] + 0x14, 0x9c00);
    // 00430a: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, UCC(0x30));

  L4310:;
    // 004310: CMPI.W dst:(A6.L)+16 src:#400
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x400);
    // 004316: Bcc cond:CC src:(4326)
    if (G.sr.check_condition(Condition::CC)) { goto L4326; }
    // 004318: MOVE.W dst:(A6.L)+16 src:#400
    G.io->w(G.a[6] + 0x16, 0x400);
    // 00431e: MOVE.W dst:(A6.L)+8 src:#0
    G.io->w(G.a[6] + 8, UCC(0));
    // 004324: Bcc cond:True src:(433a)
    goto L433a;

  L4326:;
    // 004326: CMPI.W dst:(A6.L)+16 src:#5c00
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x5c00);
    // 00432c: Bcc cond:LS src:(433a)
    if (G.sr.check_condition(Condition::LS)) { goto L433a; }
    // 00432e: MOVE.W dst:(A6.L)+16 src:#5c00
    G.io->w(G.a[6] + 0x16, 0x5c00);
    // 004334: MOVE.W dst:(A6.L)+8 src:#20
    G.io->w(G.a[6] + 8, UCC(0x20));

  L433a:;
    // 00433a: MOVEQ.L dst:D0 src:#7
    G.d[0].l(7);
    // 00433c: MOVE.W dst:D1 src:(A6.L)+6
    G.d[1].w(G.io->w(G.a[6] + 6));
    // 004340: SUB.W dst:D1 src:#8
    G.d[1].w(SUB<W>(G.d[1].w(), 8));
    // 004344: Bcc cond:LS src:(434a)
    if (G.sr.check_condition(Condition::LS)) { goto L434a; }
    // 004346: LSR.W dst:D1 src:#3
    G.d[1].w(LSR<W>(G.d[1].w(), 3));
    // 004348: LSR.W dst:D0 src:D1
    G.d[0].w(LSR<W>(G.d[0].w(), G.d[1].w()));

  L434a:;
    // 00434a: ADDQ.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, ADD<W>(G.io->w(G.a[6] + 0x24), 1));
    // 00434e: MOVE.W dst:D1 src:(A6.L)+24
    G.d[1].w(G.io->w(G.a[6] + 0x24));
    // 004352: AND.W dst:D0 src:D1
    G.d[0].w(AND<W>(G.d[0].w(), G.d[1].w()));
    // 004354: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, UCC(G.d[0].w()));
    // 004358: Bcc cond:NE src:(436a)
    if (G.sr.check_condition(Condition::NE)) { goto L436a; }
    // 00435a: ADDQ.W dst:(A6.L)+26 src:#4
    G.io->w(G.a[6] + 0x26, ADD<W>(G.io->w(G.a[6] + 0x26), 4));
    // 00435e: CMPI.W dst:(A6.L)+26 src:#14
    CMP<W>(G.io->w(G.a[6] + 0x26), 0x14);
    // 004364: Bcc cond:CS src:(436a)
    if (G.sr.check_condition(Condition::CS)) { goto L436a; }
    // 004366: CLR.W dst:(A6.L)+26
    G.io->w(G.a[6] + 0x26, UCC(0));

  L436a:;
    // 00436a: MOVE.W dst:(A6.L)+10 src:(A6.L)+26
    G.io->w(G.a[6] + 0x10, G.io->w(G.a[6] + 0x26));
    // 004370: ADDI.W dst:(A6.L)+10 src:#791
    G.io->w(G.a[6] + 0x10, ADD<W>(G.io->w(G.a[6] + 0x10), 0x791));
    // 004376: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F4718()
  {
    _log_call(__func__);

    // 004718: BSR src:(6858)
    F6858();
    // 00471c: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 004720: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 004724: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 004728: Bcc cond:MI src:(4776)
    if (G.sr.check_condition(Condition::MI)) {
      F4776();
      goto end;
    }
    // 00472c: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 004730: Bcc cond:EQ src:(4744)
    if (G.sr.check_condition(Condition::EQ)) { goto L4744; }
    // 004732: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 004736: Bcc cond:NE src:(4744)
    if (G.sr.check_condition(Condition::NE)) { goto L4744; }
    // 004738: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(UCC(G.io->w(G.a[6] + 8)));
    // 00473c: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 004740: Bcc cond:CS src:(4776)
    if (G.sr.check_condition(Condition::CS)) {
      F4776();
      goto end;
    }

  L4744:;
    // 004744: MOVE.W dst:D0 src:(A6.L)+6
    G.d[0].w(G.io->w(G.a[6] + 6));
    // 004748: ADD.W dst:D0 src:(A6.L)+14
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x14)));
    // 00474c: Bcc cond:EQ src:(50a0)
    if (G.sr.check_condition(Condition::EQ)) {
      F50a0();
      goto end;
    }
    // 004750: TST.W src:(A6.L)+10
    TST<W>(G.io->w(G.a[6] + 0x10));
    // 004754: Bcc cond:EQ src:(4774)
    if (G.sr.check_condition(Condition::EQ)) { goto L4774; }
    // 004758: CMPI.W dst:(A6.L)+4 src:#c
    CMP<W>(G.io->w(G.a[6] + 4), 12);
    // 00475e: Bcc cond:EQ src:(476c)
    if (G.sr.check_condition(Condition::EQ)) { goto L476c; }
    // 004760: TST.W src:(A6.L)+24
    TST<W>(G.io->w(G.a[6] + 0x24));
    // 004764: Bcc cond:EQ src:(4774)
    if (G.sr.check_condition(Condition::EQ)) { goto L4774; }
    // 004768: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L476c:;
    // 00476c: MOVE.W dst:D7 src:(A6.L)+24
    G.d[7].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 004770: Bcc cond:True src:(5ade)
    F5ade();
    goto end;

  L4774:;
    // 004774: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F4776()
  {
    _log_call(__func__);

    // 004776: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00477a: AND.W dst:D0 src:#7f
    G.d[0].w(AND<W>(G.d[0].w(), 0x7f));
    // 00477e: CMP.W dst:D0 src:#7
    CMP<W>(G.d[0].w(), 7);
    // 004782: Bcc cond:EQ src:(736a)
    if (G.sr.check_condition(Condition::EQ)) {
      F736a();
      goto end;
    }
    // 004786: MOVE.L dst:D1 src:(A6.L)+14
    G.d[1].l(G.io->l(G.a[6] + 0x14));
    // 00478a: AND.W dst:D1 src:#ff80
    G.d[1].w(AND<W>(G.d[1].w(), 0xff80));
    // 00478e: ADD.W dst:D1 src:D0
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[0].w()));
    // 004790: MOVEQ.L dst:D0 src:#22
    G.d[0].l(UCC(0x22));
    // 004792: BSR src:(6600)
    F6600();
    // 004796: Bcc cond:True src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F4d96()
  {
    _log_call(__func__);

    goto L4d96;

  L479a:;
    // 00479a: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(UCC(G.io->w(G.a[6] + 8)));
    // 00479e: BTST.L dst:D0 src:#d
    BTST<L>(G.d[0].l(), 13);
    // 0047a2: Bcc cond:EQ src:(47b0)
    if (G.sr.check_condition(Condition::EQ)) { goto L47b0; }
    // 0047a4: MOVE.W dst:D1 src:(ff0042)
    G.d[1].w(G.io->w(0xff0042));
    // 0047aa: AND.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 0047ae: Bcc cond:NE src:(47dc)
    if (G.sr.check_condition(Condition::NE)) { goto L47dc; }

  L47b0:;
    // 0047b0: LEA.L dst:A0 src:(ff008e)
    G.a[0] = 0xff008e;
    // 0047b6: MOVEM.W src:(A0)+ regs:D1,D2
    G.d[1].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    G.d[2].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    // 0047ba: ANDI.W dst:D0 src:#4000
    G.d[0].w(AND<W>(G.d[0].w(), 0x4000));
    // 0047be: Bcc cond:EQ src:(47c4)
    if (G.sr.check_condition(Condition::EQ)) { goto L47c4; }
    // 0047c0: ADD.W dst:D1 src:(A0)+
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0047c2: ADD.W dst:D2 src:(A0)
    G.d[2].w(ADD<W>(G.d[2].w(), G.io->w(G.a[0])));

  L47c4:;
    // 0047c4: ADD.W dst:(A6.L)+14 src:D2
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[2].w()));
    // 0047c8: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 0047cc: MOVE.W dst:D0 src:(A6.L)+6
    G.d[0].w(G.io->w(G.a[6] + 6));
    // 0047d0: ADD.W dst:D0 src:(A6.L)+14
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x14)));
    // 0047d4: CMP.W dst:D0 src:#f800
    CMP<W>(G.d[0].w(), 0xf800);
    // 0047d8: Bcc cond:CC src:(47dc)
    if (G.sr.check_condition(Condition::CC)) { goto L47dc; }
    // 0047da: RTS
    goto end;

  L47dc:;
    // 0047dc: CLR.W dst:(A6)
    G.io->w(G.a[6], 0);
    // 0047de: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(UCC(G.io->w(0xff2a9c)));
    // 0047e4: JMP src:(663a)
    F663a();
    goto end;

  L4d96:;
    // 004d96: BSET.B dst:(ff2aa3) src:#0
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 0));
    // 004d9e: Bcc cond:NE src:(505a)
    if (G.sr.check_condition(Condition::NE)) { goto L505a; }
    // 004da2: MOVE.L dst:D7 src:(ff2a9e)
    G.d[7].l(G.io->l(0xff2a9e));
    // 004da8: MOVE.L dst:D6 src:D7
    G.d[6].l(UCC(G.d[7].l()));
    // 004daa: AND.L dst:D7 src:#ff000000
    G.d[7].l(AND<L>(G.d[7].l(), 0xff000000));
    // 004db0: SWAP.L dst:D7
    G.d[7].l(SWAP(G.d[7].l()));
    // 004db2: LSR.W dst:D7 src:#6
    G.d[7].w(LSR<W>(G.d[7].w(), 6));
    // 004db4: Bcc cond:NE src:(4e32)
    if (G.sr.check_condition(Condition::NE)) { goto L4e32; }
    // 004db8: LEA.L dst:A6 src:(ff0182)
    G.a[6] = 0xff0182;
    // 004dbe: MOVEQ.L dst:D0 src:#9
    G.d[0].l(9);
    // 004dc0: MOVE.W dst:D1 src:#20
    G.d[1].w(UCC(0x20));
    // 004dc4: BSR src:(6810)
    F6810();
    // 004dc8: Bcc cond:CS src:(50ca)
    if (G.sr.check_condition(Condition::CS)) {
      F50ca();
      goto end;
    }
    // 004dcc: MOVE.L dst:(ff2a9e) src:A6
    G.io->l(0xff2a9e, G.a[6]);
    // 004dd2: CLR.W dst:(A6.L)+4
    G.io->w(G.a[6] + 4, 0);
    // 004dd6: MOVE.L dst:D7 src:D6
    G.d[7].l(G.d[6].l());
    // 004dd8: AND.W dst:D6 src:#fff
    G.d[6].w(AND<W>(G.d[6].w(), 0xfff));
    // 004ddc: AND.L dst:D7 src:#fff000
    G.d[7].l(AND<L>(G.d[7].l(), 0xfff000));
    // 004de2: ROL.L dst:D7 src:#6
    G.d[7].l(ROL<L>(G.d[7].l(), 6));
    // 004de4: SWAP.L dst:D7
    G.d[7].l(SWAP(G.d[7].l()));
    // 004de6: LEA.L dst:A0 src:(47ea)
    G.a[0] = 0x47ea;
    // 004dec: MOVE.L dst:(A6.L)+14 src:(A0,D7.W)+0
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[0] + G.d[7].w())));
    // 004df2: MULU.W dst:D6 src:#c
    G.d[6].l(MULU(G.d[6].w(), 12));
    // 004df6: LEA.L dst:A0 src:(4982)
    G.a[0] = 0x4982;
    // 004dfc: ADDA.W dst:A0 src:D6
    G.a[0] = ADD<L>(G.a[0], G.d[6].w());
    // 004dfe: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004e00: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 004e02: AND.W dst:D0 src:#f000
    G.d[0].w(AND<W>(G.d[0].w(), 0xf000));
    // 004e06: MOVE.W dst:(A6.L)+8 src:D0
    G.io->w(G.a[6] + 8, G.d[0].w());
    // 004e0a: AND.W dst:D1 src:#fff
    G.d[1].w(AND<W>(G.d[1].w(), 0xfff));
    // 004e0e: MOVE.W dst:(A6.L)+2 src:D1
    G.io->w(G.a[6] + 2, G.d[1].w());
    // 004e12: MOVE.W dst:(A6.L)+6 src:(A0)+
    G.io->w(G.a[6] + 6, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004e16: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 004e1a: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 004e1e: MOVE.W dst:(A6) src:#8000
    G.io->w(G.a[6], 0x8000);
    // 004e22: AND.W dst:D0 src:#c000
    G.d[0].w(AND<W>(G.d[0].w(), 0xc000));
    // 004e26: CMP.W dst:D0 src:#4000
    CMP<W>(G.d[0].w(), 0x4000);
    // 004e2a: Bcc cond:EQ src:(6836)
    if (G.sr.check_condition(Condition::EQ)) {
      F6836();
      goto end;
    }
    // 004e2e: Bcc cond:True src:(6820)
    F6820();
    goto end;

  L4e32:;
    // 004e32: LEA.L dst:A6 src:(ff0cc2)
    G.a[6] = 0xff0cc2;
    // 004e38: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 004e3e: SUB.W dst:D0 src:#2
    G.d[0].w(SUB<W>(G.d[0].w(), 2));
    // 004e42: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 004e46: MULU.W dst:D0 src:#c0
    G.d[0].l(MULU(G.d[0].w(), 0xc0));
    // 004e4a: ADDA.L dst:A6 src:D0
    G.a[6] = ADD<L>(G.a[6], G.d[0].l());
    // 004e4c: MOVE.L dst:(ff2a9e) src:A6
    G.io->l(0xff2a9e, G.a[6]);
    // 004e52: MOVE.W dst:(A6.L)+4 src:D7
    G.io->w(G.a[6] + 4, UCC(G.d[7].w()));
    // 004e56: CMP.W dst:D7 src:#10
    CMP<W>(G.d[7].w(), 0x10);
    // 004e5a: Bcc cond:CC src:(4fae)
    if (G.sr.check_condition(Condition::CC)) { goto L4fae; }
    // 004e5e: MOVE.L dst:D7 src:D6
    G.d[7].l(G.d[6].l());
    // 004e60: AND.W dst:D6 src:#fff
    G.d[6].w(AND<W>(G.d[6].w(), 0xfff));
    // 004e64: AND.L dst:D7 src:#fff000
    G.d[7].l(AND<L>(G.d[7].l(), 0xfff000));
    // 004e6a: ROL.L dst:D7 src:#6
    G.d[7].l(ROL<L>(G.d[7].l(), 6));
    // 004e6c: SWAP.L dst:D7
    G.d[7].l(SWAP(G.d[7].l()));
    // 004e6e: LEA.L dst:A0 src:(47ea)
    G.a[0] = 0x47ea;
    // 004e74: MOVE.L dst:(A6.L)+14 src:(A0,D7.W)+0
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[0] + G.d[7].w())));
    // 004e7a: BCLR.L dst:D6 src:#b
    G.d[6].l(BCLR<L>(G.d[6].l(), 11));
    // 004e7e: Bcc cond:EQ src:(4eb0)
    if (G.sr.check_condition(Condition::EQ)) { goto L4eb0; }

  L4e80:;
    // 004e80: MULU.W dst:D6 src:#a
    G.d[6].l(MULU(G.d[6].w(), 10));
    // 004e84: LEA.L dst:A0 src:(465c)
    G.a[0] = 0x465c;
    // 004e8a: ADDA.W dst:A0 src:D6
    G.a[0] = ADD<L>(G.a[0], G.d[6].w());
    // 004e8c: MOVE.L dst:(A6) src:#88a00000
    G.io->l(G.a[6], 0x88a00000);
    // 004e92: MOVE.W dst:(A6.L)+6 src:(A0)+
    G.io->w(G.a[6] + 6, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004e96: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, 0);
    // 004e9a: CLR.L dst:(A6.L)+10
    G.io->l(G.a[6] + 0x10, 0);
    // 004e9e: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 004ea2: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 004ea6: MOVE.W dst:(A6.L)+48 src:#7fff
    G.io->w(G.a[6] + 0x48, UCC(0x7fff));
    // 004eac: Bcc cond:True src:(4f6c)
    goto L4f6c;

  L4eb0:;
    // 004eb0: CMP.W dst:D6 src:#a
    CMP<W>(G.d[6].w(), 10);
    // 004eb4: Bcc cond:CS src:(4ec2)
    if (G.sr.check_condition(Condition::CS)) { goto L4ec2; }
    // 004eb6: CMP.W dst:D6 src:#f
    CMP<W>(G.d[6].w(), 15);
    // 004eba: Bcc cond:CC src:(4ec0)
    if (G.sr.check_condition(Condition::CC)) { goto L4ec0; }
    // 004ebc: SUBQ.W dst:D6 src:#1
    G.d[6].w(SUB<W>(G.d[6].w(), 1));
    // 004ebe: Bcc cond:True src:(4e80)
    goto L4e80;

  L4ec0:;
    // 004ec0: SUBQ.W dst:D6 src:#5
    G.d[6].w(SUB<W>(G.d[6].w(), 5));

  L4ec2:;
    // 004ec2: ASL.W dst:D6 src:#5
    G.d[6].w(ASL<W>(G.d[6].w(), 5));
    // 004ec4: LEA.L dst:A0 src:(438a)
    G.a[0] = 0x438a;
    // 004eca: ADDA.W dst:A0 src:D6
    G.a[0] = ADD<L>(G.a[0], G.d[6].w());
    // 004ecc: MOVEQ.L dst:D7 src:#0
    G.d[7].l(0);
    // 004ece: MOVE.W dst:(A6.L)+24 src:(A0)+
    G.io->w(G.a[6] + 0x24, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004ed2: Bcc cond:EQ src:(4ed6)
    if (G.sr.check_condition(Condition::EQ)) { goto L4ed6; }
    // 004ed4: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));

  L4ed6:;
    // 004ed6: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 004ed8: BSR src:(5a10)
    F5a10();
    // 004edc: MOVE from SR.W dst:D0 src:SR
    G.d[0].w(G.sr.to_int());
    // 004ede: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 004ee0: ROR.W dst:D0 src:#1
    G.d[0].w(ROR<W>(G.d[0].w(), 1));
    // 004ee2: Bcc cond:CS src:(50ca)
    if (G.sr.check_condition(Condition::CS)) {
      F50ca();
      goto end;
    }
    // 004ee6: MOVE.W dst:(A6.L)+4 src:(A0)+
    G.io->w(G.a[6] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004eea: MOVE.L dst:A1 src:(A0)+
    G.a[1] = UCC(G.io->l(G.a[0]));
    G.a[0] += 4;
    // 004eec: CMPI.W dst:(A6.L)+4 src:#c
    CMP<W>(G.io->w(G.a[6] + 4), 12);
    // 004ef2: Bcc cond:NE src:(4f0e)
    if (G.sr.check_condition(Condition::NE)) { goto L4f0e; }
    // 004ef4: LEA.L dst:A2 src:(A6.L)+52
    G.a[2] = G.a[6] + 0x52;

  L4ef8:;
    // 004ef8: MOVE.W dst:D0 src:(A1)+
    G.d[0].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 004efa: Bcc cond:MI src:(4f14)
    if (G.sr.check_condition(Condition::MI)) { goto L4f14; }
    // 004efc: ANDI.W dst:(A2) src:#7ff
    G.io->w(G.a[2], AND<W>(G.io->w(G.a[2]), 0x7ff));
    // 004f00: ADD.W dst:(A2)+ src:D0
    G.io->w(G.a[2], ADD<W>(G.io->w(G.a[2]), G.d[0].w()));
    G.a[2] += 2;
    // 004f02: MOVE.W dst:(A2)+ src:(A1)+
    G.io->w(G.a[2], UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    G.a[2] += 2;
    // 004f04: MOVE.L dst:(A2)+ src:(A1)+
    G.io->l(G.a[2], UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    G.a[2] += 4;
    // 004f06: MOVE.L dst:(A2) src:(A1)+
    G.io->l(G.a[2], UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 004f08: LEA.L dst:A2 src:(A2.L)+6
    G.a[2] += 6;
    // 004f0c: Bcc cond:True src:(4ef8)
    goto L4ef8;

  L4f0e:;
    // 004f0e: MOVE.L dst:D1 src:A1
    G.d[1].l(G.a[1]);
    // 004f10: MOVE.W dst:(A6.L)+24 src:D1
    G.io->w(G.a[6] + 0x24, UCC(G.d[1].w()));

  L4f14:;
    // 004f14: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004f16: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 004f18: AND.W dst:D1 src:#7ff
    G.d[1].w(AND<W>(G.d[1].w(), 0x7ff));
    // 004f1c: ADD.W dst:D1 src:#8000
    G.d[1].w(ADD<W>(G.d[1].w(), 0x8000));
    // 004f20: MOVE.W dst:(A6) src:D1
    G.io->w(G.a[6], G.d[1].w());
    // 004f22: AND.W dst:D0 src:#7f00
    G.d[0].w(AND<W>(G.d[0].w(), 0x7f00));
    // 004f26: ROR.W dst:D0 src:#8
    G.d[0].w(ROR<W>(G.d[0].w(), 8));
    // 004f28: MOVE.W dst:(A6.L)+26 src:D0
    G.io->w(G.a[6] + 0x26, G.d[0].w());
    // 004f2c: MOVE.W dst:(A6.L)+2 src:(A0)+
    G.io->w(G.a[6] + 2, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004f30: MOVE.W dst:(A6.L)+6 src:(A0)+
    G.io->w(G.a[6] + 6, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004f34: MOVE.W dst:(A6.L)+a src:(A0)+
    G.io->w(G.a[6] + 10, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004f38: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 004f3e: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004f40: ADD.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, ADD<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 004f44: MOVE.W dst:(A6.L)+12 src:(A0)+
    G.io->w(G.a[6] + 0x12, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 004f48: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 004f4c: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 004f50: MOVE.L dst:(A6.L)+20 src:(A0)+
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 004f54: MOVE.W dst:(A6.L)+48 src:#10
    G.io->w(G.a[6] + 0x48, UCC(0x10));
    // 004f5a: CMPI.W dst:(A6.L)+4 src:#c
    CMP<W>(G.io->w(G.a[6] + 4), 12);
    // 004f60: Bcc cond:CC src:(4f6c)
    if (G.sr.check_condition(Condition::CC)) { goto L4f6c; }
    // 004f62: MOVE.W dst:D1 src:(A6.L)+24
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 004f66: Bcc cond:EQ src:(4f6c)
    if (G.sr.check_condition(Condition::EQ)) { goto L4f6c; }
    // 004f68: BSR src:(5a9a)
    F5a9a();

  L4f6c:;
    // 004f6c: BSR src:(6820)
    F6820();
    // 004f70: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, UCC(0));
    // 004f74: BSR src:(4f86)
    F4f86();
    // 004f78: MOVE.W dst:(A6.L)+8 src:D0
    G.io->w(G.a[6] + 8, G.d[0].w());
    // 004f7c: MOVE.L dst:(A6.L)+40 src:#4718
    G.io->l(G.a[6] + 0x40, UCC(0x4718));
    // 004f84: RTS
    goto end;

  L4fae:;
    // 004fae: SUB.W dst:D7 src:#10
    G.d[7].w(SUB<W>(G.d[7].w(), 0x10));
    // 004fb2: LSL.W dst:D7 src:#3
    G.d[7].w(LSL<W>(G.d[7].w(), 3));
    // 004fb4: LEA.L dst:A5 src:(5204)
    G.a[5] = 0x5204;
    // 004fba: LEA.L dst:A5 src:(A5,D7.W)+0
    G.a[5] += G.d[7].w();
    // 004fbe: MOVE.W dst:D7 src:(A5)+
    G.d[7].w(UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 004fc0: MOVE.W dst:(A6) src:(A5)+
    G.io->w(G.a[6], UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 004fc2: BSR src:(5a10)
    F5a10();
    // 004fc6: Bcc cond:CS src:(50a0)
    if (G.sr.check_condition(Condition::CS)) {
      F50a0();
      goto end;
    }
    // 004fca: CLR.W dst:(A6.L)+2
    G.io->w(G.a[6] + 2, 0);
    // 004fce: MOVE.W dst:(A6.L)+6 src:(A5)+
    G.io->w(G.a[6] + 6, UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 004fd2: MOVE.W dst:(A6.L)+a src:(A5)+
    G.io->w(G.a[6] + 10, UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 004fd6: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 004fda: MOVE.W dst:(A6.L)+48 src:(A5)+
    G.io->w(G.a[6] + 0x48, UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 004fde: MOVE.W dst:(A6.L)+12 src:(A5)+
    G.io->w(G.a[6] + 0x12, UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 004fe2: MOVE.L dst:(A6.L)+18 src:(A5)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[5])));
    G.a[5] += 4;
    // 004fe6: MOVE.L dst:(A6.L)+1c src:(A5)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[5])));
    G.a[5] += 4;
    // 004fea: MOVE.L dst:(A6.L)+20 src:(A5)+
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[5])));
    G.a[5] += 4;
    // 004fee: MOVE.L dst:D7 src:D6
    G.d[7].l(UCC(G.d[6].l()));
    // 004ff0: AND.L dst:D6 src:#fff000
    G.d[6].l(AND<L>(G.d[6].l(), 0xfff000));
    // 004ff6: AND.W dst:D7 src:#fff
    G.d[7].w(AND<W>(G.d[7].w(), 0xfff));
    // 004ffa: ROL.L dst:D6 src:#4
    G.d[6].l(ROL<L>(G.d[6].l(), 4));
    // 004ffc: SWAP.L dst:D6
    G.d[6].l(SWAP(G.d[6].l()));
    // 004ffe: MOVEM.W dst:(A6.L)+26 regs:D6,D7
    G.io->w(G.a[6] + 0x26, G.d[6].w());
    G.io->w(G.a[6] + 0x28, G.d[7].w());
    // 005004: MOVE.L dst:A0 src:(A5)+
    G.a[0] = UCC(G.io->l(G.a[5]));
    G.a[5] += 4;
    // 005006: MOVE.L dst:(A6.L)+40 src:(A5)
    G.io->l(G.a[6] + 0x40, G.io->l(G.a[5]));
    // 00500a: CMPA.L dst:A0 src:#50a0
    CMP<L>(G.a[0], 0x50a0);
    // 005010: Bcc cond:EQ src:(5058)
    if (G.sr.check_condition(Condition::EQ)) { goto L5058; }
    // 005012: MOVE.W dst:D0 src:(A6.L)+4
    G.d[0].w(UCC(G.io->w(G.a[6] + 4)));
    // 005016: LEA.L dst:A1 src:(1289e)
    G.a[1] = 0x1289e;
    // 00501c: MOVE.L dst:A1 src:(A1,D0.W)+0
    G.a[1] = G.io->l(G.a[1] + G.d[0].w());
    // 005020: MOVE.L dst:D1 src:A1
    G.d[1].l(UCC(G.a[1]));
    // 005022: TST.W src:D1
    TST<W>(G.d[1].w());
    // 005024: Bcc cond:EQ src:(5058)
    if (G.sr.check_condition(Condition::EQ)) { goto L5058; }
    // 005026: MOVE.W dst:D1 src:(A1)+
    G.d[1].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 005028: LEA.L dst:A2 src:(ff00ea)
    G.a[2] = 0xff00ea;
    // 00502e: CMP.W dst:D0 src:(A2,D1.W)+0
    CMP<W>(G.d[0].w(), G.io->w(G.a[2] + G.d[1].w()));
    // 005032: Bcc cond:NE src:(5040)
    if (G.sr.check_condition(Condition::NE)) { goto L5040; }
    // 005034: CMPI.W dst:(A1) src:#8
    CMP<W>(G.io->w(G.a[1]), 8);
    // 005038: Bcc cond:LS src:(5058)
    if (G.sr.check_condition(Condition::LS)) { goto L5058; }
    // 00503a: CMP.W dst:D0 src:(A2,D1.W)+2
    CMP<W>(G.d[0].w(), G.io->w(G.a[2] + G.d[1].w() + 2));
    // 00503e: Bcc cond:EQ src:(5058)
    if (G.sr.check_condition(Condition::EQ)) { goto L5058; }

  L5040:;
    // 005040: MOVE.W dst:(A2,D1.W)+0 src:D0
    G.io->w(G.a[2] + G.d[1].w(), UCC(G.d[0].w()));
    // 005044: CMPI.W dst:(A1) src:#8
    CMP<W>(G.io->w(G.a[1]), 8);
    // 005048: Bcc cond:LS src:(504e)
    if (G.sr.check_condition(Condition::LS)) { goto L504e; }
    // 00504a: MOVE.W dst:(A2,D1.W)+2 src:D0
    G.io->w(G.a[2] + G.d[1].w() + 2, UCC(G.d[0].w()));

  L504e:;
    // 00504e: MOVE.W dst:D0 src:(A1)+
    G.d[0].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 005050: MOVE.W dst:D2 src:(A1)+
    G.d[2].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 005052: MOVE.L dst:D1 src:A1
    G.d[1].l(UCC(G.a[1]));
    // 005054: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L5058:;
    // 005058: JMP src:(A0)
    JUMP_MAP(G.a[0]);
    goto end;

  L505a:;
    // 00505a: MOVE.L dst:A6 src:(ff2a9e)
    G.a[6] = G.io->l(0xff2a9e);
    // 005060: MOVE.W dst:D0 src:(A6.L)+4
    G.d[0].w(UCC(G.io->w(G.a[6] + 4)));
    // 005064: Bcc cond:EQ src:(479a)
    if (G.sr.check_condition(Condition::EQ)) { goto L479a; }
    // 005068: BSR src:(6864)
    _m->inc_something(G.a[6]);
    // 00506c: MOVE.L dst:A0 src:(A6.L)+40
    G.a[0] = UCC(G.io->l(G.a[6] + 0x40));
    // 005070: BCLR.B dst:(A6.L)+1 src:#6
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 6));
    // 005076: BTST.B dst:(A6.L)+1 src:#2
    BTST<B>(G.io->b(G.a[6] + 1), 2);
    // 00507c: Bcc cond:NE src:(509e)
    if (G.sr.check_condition(Condition::NE)) { goto L509e; }
    // 00507e: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 005082: Bcc cond:EQ src:(509e)
    if (G.sr.check_condition(Condition::EQ)) { goto L509e; }
    // 005084: BTST.B dst:(A6.L)+1 src:#5
    BTST<B>(G.io->b(G.a[6] + 1), 5);
    // 00508a: Bcc cond:NE src:(509e)
    if (G.sr.check_condition(Condition::NE)) { goto L509e; }
    // 00508c: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 005090: Bcc cond:NE src:(509e)
    if (G.sr.check_condition(Condition::NE)) { goto L509e; }
    // 005092: MOVEQ.L dst:D0 src:#14
    G.d[0].l(UCC(0x14));
    // 005094: BSR src:(654c)
    F654c();
    // 005098: BSET.B dst:(A6.L)+1 src:#6
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 6));

  L509e:;
    // 00509e: JMP src:(A0)
    JUMP_MAP(G.a[0]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F4f86()
  {
    _log_call(__func__);

    // 004f86: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 004f8c: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 004f90: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 004f92: LEA.L dst:A0 src:(4f9e)
    G.a[0] = 0x4f9e;
    // 004f98: MOVE.W dst:D0 src:(A0,D0.W)+0
    G.d[0].w(UCC(G.io->w(G.a[0] + G.d[0].w())));
    // 004f9c: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F50a0()
  {
    _log_call(__func__);

    // 0050a0: CLR.W dst:(A6)
    G.io->w(G.a[6], UCC(0));
    // 0050a2: BSR src:(5b58)
    F5b58();
    // 0050a6: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 0050aa: LEA.L dst:A1 src:(ff254a)
    G.a[1] = 0xff254a;
    // 0050b0: MOVEQ.L dst:D0 src:#7
    G.d[0].l(UCC(7));

  L50b2:;
    // 0050b2: MOVE.W dst:D1 src:(A0)
    G.d[1].w(UCC(G.io->w(G.a[0])));
    // 0050b4: Bcc cond:EQ src:(50c2)
    if (G.sr.check_condition(Condition::EQ)) { goto L50c2; }
    // 0050b6: SUB.W dst:D1 src:#140
    G.d[1].w(SUB<W>(G.d[1].w(), 0x140));
    // 0050ba: LSR.W dst:D1 src:#2
    G.d[1].w(LSR<W>(G.d[1].w(), 2));
    // 0050bc: CLR.W dst:(A0)
    G.io->w(G.a[0], 0);
    // 0050be: CLR.W dst:(A1,D1.W)+0
    G.io->w(G.a[1] + G.d[1].w(), UCC(0));

  L50c2:;
    // 0050c2: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 0050c6: DBcc.W cond:False dst:D0 src:(50b2)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L50b2; }

  L50ca:;
    // 0050ca: JMP src:(50ca)
    F50ca();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F50ca()
  {
    _log_call(__func__);

    // 0050ca: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(UCC(G.io->w(0xff2a9c)));
    // 0050d0: Bcc cond:True src:(663a)
    F663a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F50d4()
  {
    _log_call(__func__);

    // 0050d4: LEA.L dst:A0 src:(ff254a)
    G.a[0] = 0xff254a;
    // 0050da: SUB.W dst:D0 src:#140
    G.d[0].w(SUB<W>(G.d[0].w(), 0x140));
    // 0050de: LSR.W dst:D0 src:#2
    G.d[0].w(LSR<W>(G.d[0].w(), 2));
    // 0050e0: CLR.W dst:(A0,D0.W)+0
    G.io->w(G.a[0] + G.d[0].w(), UCC(0));
    // 0050e4: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F50e6()
  {
    _log_call(__func__);

    // 0050e6: CLR.W dst:(A6.L)+2e
    G.io->w(G.a[6] + 0x2e, 0);
    // 0050ea: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 0050ee: AND.L dst:D0 src:#fff
    G.d[0].l(AND<L>(G.d[0].l(), 0xfff));
    // 0050f4: ASL.L dst:D0 src:#2
    G.d[0].l(ASL<L>(G.d[0].l(), 2));
    // 0050f6: LEA.L dst:A0 src:(182d0)
    G.a[0] = 0x182d0;
    // 0050fc: MOVE.L dst:A0 src:(A0,D0.L)+0
    G.a[0] = G.io->l(G.a[0] + G.d[0].l());
    // 005100: ADDA.L dst:A0 src:#18000
    G.a[0] = ADD<L>(G.a[0], 0x18000);
    // 005106: MOVE.W dst:(A6.L)+16 src:(A0)+
    G.io->w(G.a[6] + 0x16, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00510a: MOVE.W dst:(A6.L)+14 src:(A0)+
    G.io->w(G.a[6] + 0x14, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00510e: MOVE.L dst:(A6.L)+2a src:A0
    G.io->l(G.a[6] + 0x2a, UCC(G.a[0]));
    // 005112: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5114()
  {
    _log_call(__func__);

    // 005114: TST.W src:(A6.L)+2e
    TST<W>(G.io->w(G.a[6] + 0x2e));
    // 005118: Bcc cond:NE src:(5184)
    if (G.sr.check_condition(Condition::NE)) { goto L5184; }
    // 00511c: BTST.B dst:(A6) src:#2
    BTST<B>(G.io->b(G.a[6]), 2);
    // 005120: Bcc cond:NE src:(5188)
    if (G.sr.check_condition(Condition::NE)) { goto L5188; }

  L5124:;
    // 005124: JMP src:(5124)
    F5124();
    goto end;

  L5184:;
    // 005184: SUBQ.W dst:(A6.L)+2e src:#1
    G.io->w(G.a[6] + 0x2e, SUB<W>(G.io->w(G.a[6] + 0x2e), 1));

  L5188:;
    // 005188: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5124()
  {
    _log_call(__func__);

    // 005124: MOVE.L dst:A0 src:(A6.L)+2a
    G.a[0] = G.io->l(G.a[6] + 0x2a);
    // 005128: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00512a: MOVE.L dst:(A6.L)+2a src:A0
    G.io->l(G.a[6] + 0x2a, G.a[0]);
    // 00512e: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 005130: Bcc cond:EQ src:(517e)
    if (G.sr.check_condition(Condition::EQ)) { goto L517e; }
    // 005132: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 005134: AND.W dst:D1 src:#c000
    G.d[1].w(AND<W>(G.d[1].w(), 0xc000));
    // 005138: Bcc cond:NE src:(5154)
    if (G.sr.check_condition(Condition::NE)) { goto L5154; }
    // 00513a: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00513c: AND.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 005140: MOVE.W dst:(A6.L)+2e src:D0
    G.io->w(G.a[6] + 0x2e, G.d[0].w());
    // 005144: AND.W dst:D1 src:#3f00
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f00));
    // 005148: ROR.W dst:D1 src:#8
    G.d[1].w(ROR<W>(G.d[1].w(), 8));
    // 00514a: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, UCC(G.d[1].w()));
    // 00514e: BCLR.B dst:(A6) src:#3
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 3));
    // 005152: RTS
    goto end;

  L5154:;
    // 005154: CMP.W dst:D1 src:#4000
    CMP<W>(G.d[1].w(), 0x4000);
    // 005158: Bcc cond:NE src:(5168)
    if (G.sr.check_condition(Condition::NE)) { goto L5168; }
    // 00515a: BSET.B dst:(A6) src:#3
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 3));
    // 00515e: AND.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 005162: MOVE.W dst:(A6.L)+2e src:D0
    G.io->w(G.a[6] + 0x2e, UCC(G.d[0].w()));
    // 005166: RTS
    goto end;

  L5168:;
    // 005168: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00516a: AND.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 00516e: AND.W dst:D1 src:#f00
    G.d[1].w(AND<W>(G.d[1].w(), 0xf00));
    // 005172: ROR.W dst:D1 src:#6
    G.d[1].w(ROR<W>(G.d[1].w(), 6));
    // 005174: LEA.L dst:A0 src:(518a)
    G.a[0] = 0x518a;
    // 00517a: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 00517c: JMP src:(A0)
    JUMP_MAP(G.a[0]);
    goto end;

  L517e:;
    // 00517e: BSET.B dst:(A6) src:#2
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 2));
    // 005182: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F518e()
  {
    _log_call(__func__);

    // 00518e: Bcc cond:True src:(51ae)
    goto L51ae;

  L51ae:;
    // 0051ae: EORI.W dst:(A6) src:#200
    G.io->w(G.a[6], EOR<W>(G.io->w(G.a[6]), 0x200));
    // 0051b2: Bcc cond:True src:(5124)
    F5124();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5192()
  {
    _log_call(__func__);

    // 005192: Bcc cond:True src:(51b6)
    goto L51b6;

  L51b6:;
    // 0051b6: MOVE.W dst:(A6.L)+6 src:D0
    G.io->w(G.a[6] + 6, UCC(G.d[0].w()));
    // 0051ba: Bcc cond:True src:(5124)
    F5124();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F519e()
  {
    _log_call(__func__);

    // 00519e: Bcc cond:True src:(51e8)
    goto L51e8;

  L51e8:;
    // 0051e8: MOVE.L dst:A0 src:(A6.L)+2a
    G.a[0] = G.io->l(G.a[6] + 0x2a);
    // 0051ec: MOVE.L dst:A0 src:(A0)
    G.a[0] = G.io->l(G.a[0]);
    // 0051ee: ADDA.L dst:A0 src:#18000
    G.a[0] = ADD<L>(G.a[0], 0x18000);
    // 0051f4: MOVE.L dst:(A6.L)+2a src:A0
    G.io->l(G.a[6] + 0x2a, UCC(G.a[0]));
    // 0051f8: Bcc cond:True src:(5124)
    F5124();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F51a2()
  {
    _log_call(__func__);

    // 0051a2: Bcc cond:True src:(51fc)
    goto L51fc;

  L51fc:;
    // 0051fc: EORI.W dst:(A6) src:#100
    G.io->w(G.a[6], EOR<W>(G.io->w(G.a[6]), 0x100));
    // 005200: Bcc cond:True src:(5124)
    F5124();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F59e2()
  {
    _log_call(__func__);

    // 0059e2: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 0059e4: LEA.L dst:A0 src:(SPRITE_TABLE)
    G.a[0] = SPRITE_TABLE;
    // 0059ea: EXT.L dst:D0
    G.d[0].l(EXT<L>(G.d[0].w()));
    // 0059ec: ADDA.L dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].l());
    // 0059ee: LSR.W dst:D4 src:#7
    G.d[4].w(LSR<W>(G.d[4].w(), 7));
    // 0059f0: NEG.W dst:D4
    G.d[4].w(NEG<W>(G.d[4].w()));
    // 0059f2: ADD.W dst:D4 src:#ff60
    G.d[4].w(ADD<W>(G.d[4].w(), 0xff60));
    // 0059f6: MOVE.W dst:(A0)+ src:D4
    G.io->w(G.a[0], UCC(G.d[4].w()));
    G.a[0] += 2;
    // 0059f8: ANDI.W dst:(A0) src:#7f
    G.io->w(G.a[0], AND<W>(G.io->w(G.a[0]), 0x7f));
    // 0059fc: AND.W dst:D2 src:#f00
    G.d[2].w(AND<W>(G.d[2].w(), 0xf00));
    // 005a00: OR.W dst:(A0)+ src:D2
    G.io->w(G.a[0], OR<W>(G.io->w(G.a[0]), G.d[2].w()));
    G.a[0] += 2;
    // 005a02: MOVE.W dst:(A0)+ src:D1
    G.io->w(G.a[0], UCC(G.d[1].w()));
    G.a[0] += 2;
    // 005a04: LSR.W dst:D3 src:#7
    G.d[3].w(LSR<W>(G.d[3].w(), 7));
    // 005a06: ADD.W dst:D3 src:#80
    G.d[3].w(ADD<W>(G.d[3].w(), 0x80));
    // 005a0a: MOVE.W dst:(A0)+ src:D3
    G.io->w(G.a[0], UCC(G.d[3].w()));
    G.a[0] += 2;
    // 005a0c: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 005a0e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5a10()
  {
    _log_call(__func__);

    // 005a10: MOVE.W dst:D0 src:#27
    G.d[0].w(0x27);
    // 005a14: MOVE.W dst:D1 src:#140
    G.d[1].w(UCC(0x140));
    // 005a18: LEA.L dst:A0 src:(ff254a)
    G.a[0] = 0xff254a;
    // 005a1e: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 005a22: MOVEQ.L dst:D2 src:#2
    G.d[2].l(2);
    // 005a24: MOVEQ.L dst:D3 src:#8
    G.d[3].l(UCC(8));
    // 005a26: BCLR.B dst:(A6.L)+1 src:#6
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 6));
    // 005a2c: Bcc cond:EQ src:(5a3c)
    if (G.sr.check_condition(Condition::EQ)) { goto L5a3c; }
    // 005a2e: LEA.L dst:A0 src:(ff2598)
    G.a[0] = 0xff2598;
    // 005a34: MOVE.W dst:D1 src:#278
    G.d[1].w(UCC(0x278));
    // 005a38: NEG.L dst:D2
    G.d[2].l(NEG<L>(G.d[2].l()));
    // 005a3a: NEG.L dst:D3
    G.d[3].l(NEG<L>(G.d[3].l()));

  L5a3c:;
    // 005a3c: TST.W src:(A0)
    TST<W>(G.io->w(G.a[0]));
    // 005a3e: Bcc cond:NE src:(5a68)
    if (G.sr.check_condition(Condition::NE)) { goto L5a68; }
    // 005a40: MOVE.W dst:(A0) src:D1
    G.io->w(G.a[0], G.d[1].w());
    // 005a42: MOVE.W dst:(A1) src:D1
    G.io->w(G.a[1], G.d[1].w());
    // 005a44: MOVE.W dst:D4 src:D1
    G.d[4].w(G.d[1].w());
    // 005a46: SUB.W dst:D4 src:#140
    G.d[4].w(SUB<W>(G.d[4].w(), 0x140));
    // 005a4a: LSL.W dst:D4 src:#1
    G.d[4].w(LSL<W>(G.d[4].w(), 1));
    // 005a4c: ADD.W dst:D4 src:#406
    G.d[4].w(ADD<W>(G.d[4].w(), 0x406));
    // 005a50: MOVE.W dst:(A1.L)+2 src:D4
    G.io->w(G.a[1] + 2, G.d[4].w());
    // 005a54: CLR.L dst:(A1.L)+a
    G.io->l(G.a[1] + 10, UCC(0));
    // 005a58: LEA.L dst:A1 src:(A1.L)+e
    G.a[1] += 14;
    // 005a5c: DBcc.W cond:False dst:D7 src:(5a68)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L5a68; }
    // 005a60: MOVE.L dst:(A6.L)+e src:(A6.L)+50
    G.io->l(G.a[6] + 14, UCC(G.io->l(G.a[6] + 0x50)));
    // 005a66: RTS
    goto end;

  L5a68:;
    // 005a68: ADDA.L dst:A0 src:D2
    G.a[0] = ADD<L>(G.a[0], G.d[2].l());
    // 005a6a: ADD.W dst:D1 src:D3
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[3].w()));
    // 005a6c: DBcc.W cond:False dst:D0 src:(5a3c)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L5a3c; }
    // 005a70: MOVEQ.L dst:D1 src:#7
    G.d[1].l(UCC(7));
    // 005a72: LEA.L dst:A0 src:(ff254a)
    G.a[0] = 0xff254a;
    // 005a78: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;

  L5a7c:;
    // 005a7c: MOVE.W dst:D0 src:(A1)
    G.d[0].w(UCC(G.io->w(G.a[1])));
    // 005a7e: Bcc cond:EQ src:(5a94)
    if (G.sr.check_condition(Condition::EQ)) { goto L5a94; }
    // 005a80: SUB.W dst:D0 src:#140
    G.d[0].w(SUB<W>(G.d[0].w(), 0x140));
    // 005a84: LSR.W dst:D0 src:#2
    G.d[0].w(LSR<W>(G.d[0].w(), 2));
    // 005a86: CLR.W dst:(A0,D0.W)+0
    G.io->w(G.a[0] + G.d[0].w(), 0);
    // 005a8a: CLR.W dst:(A1)
    G.io->w(G.a[1], UCC(0));
    // 005a8c: LEA.L dst:A1 src:(A1.L)+e
    G.a[1] += 14;
    // 005a90: DBcc.W cond:False dst:D1 src:(5a7c)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto L5a7c; }

  L5a94:;
    // 005a94: MOVE to SR.W dst:SR src:#2701
    G.sr.set_from_int(0x2701);
    // 005a98: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5a9a()
  {
    _log_call(__func__);

    // 005a9a: MOVE.W dst:D0 src:(A6.L)+12
    G.d[0].w(G.io->w(G.a[6] + 0x12));
    // 005a9e: AND.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 005aa2: EXT.L dst:D1
    G.d[1].l(EXT<L>(G.d[1].w()));
    // 005aa4: LSL.L dst:D1 src:#5
    G.d[1].l(LSL<L>(G.d[1].l(), 5));
    // 005aa6: ADD.L dst:D1 src:#40000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x40000));
    // 005aac: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 005ab0: AND.W dst:D2 src:#7ff
    G.d[2].w(AND<W>(G.d[2].w(), 0x7ff));
    // 005ab4: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 005ab8: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5abc()
  {
    _log_call(__func__);

    // 005abc: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 005abe: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;

  L5ac2:;
    // 005ac2: JMP src:(5ac2)
    F5ac2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5ac2()
  {
    _log_call(__func__);

    // 005ac2: MOVE.L dst:A2 src:A1
    G.a[2] = G.a[1];
    // 005ac4: MOVE.W dst:D2 src:D7
    G.d[2].w(UCC(G.d[7].w()));

  L5ac6:;
    // 005ac6: ADDQ.L dst:A1 src:#2
    G.a[1] = ADD<L>(G.a[1], 2);
    // 005ac8: ANDI.W dst:(A1) src:#7ff
    G.io->w(G.a[1], AND<W>(G.io->w(G.a[1]), 0x7ff));
    // 005acc: MOVE.W dst:D1 src:(A0)+
    G.d[1].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 005ace: OR.W dst:(A1)+ src:D1
    G.io->w(G.a[1], OR<W>(G.io->w(G.a[1]), G.d[1].w()));
    G.a[1] += 2;
    // 005ad0: MOVE.W dst:(A1)+ src:(A0)+
    G.io->w(G.a[1], UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    G.a[1] += 2;
    // 005ad2: MOVE.L dst:(A1)+ src:(A0)+
    G.io->l(G.a[1], UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    G.a[1] += 4;
    // 005ad4: MOVE.L dst:(A1) src:(A0)+
    G.io->l(G.a[1], UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 005ad6: ADD.L dst:(A1)+ src:D0
    G.io->l(G.a[1], ADD<L>(G.io->l(G.a[1]), G.d[0].l()));
    G.a[1] += 4;
    // 005ad8: DBcc.W cond:False dst:D2 src:(5ac6)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L5ac6; }
    // 005adc: Bcc cond:True src:(5ae2)
    F5ae2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5ade()
  {
    _log_call(__func__);

    // 005ade: LEA.L dst:A2 src:(A6.L)+50
    G.a[2] = G.a[6] + 0x50;

  L5ae2:;
    // 005ae2: JMP src:(5ae2)
    F5ae2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5ae2()
  {
    _log_call(__func__);

    // 005ae2: MOVE.L dst:D1 src:(A2.L)+a
    G.d[1].l(UCC(G.io->l(G.a[2] + 10)));
    // 005ae6: Bcc cond:EQ src:(5b00)
    if (G.sr.check_condition(Condition::EQ)) {
      F5b00();
      goto end;
    }
    // 005ae8: CLR.L dst:(A2.L)+a
    G.io->l(G.a[2] + 10, 0);
    // 005aec: MOVE.W dst:D0 src:(A2.L)+4
    G.d[0].w(G.io->w(G.a[2] + 4));
    // 005af0: AND.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 005af4: MOVE.W dst:D2 src:(A2.L)+2
    G.d[2].w(G.io->w(G.a[2] + 2));
    // 005af8: AND.W dst:D2 src:#7ff
    G.d[2].w(AND<W>(G.d[2].w(), 0x7ff));
    // 005afc: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L5b00:;
    // 005b00: JMP src:(5b00)
    F5b00();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5b00()
  {
    _log_call(__func__);

    // 005b00: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 005b02: MOVE.W dst:D0 src:(A2)
    G.d[0].w(UCC(G.io->w(G.a[2])));
    // 005b04: LEA.L dst:A3 src:(SPRITE_TABLE)
    G.a[3] = SPRITE_TABLE;
    // 005b0a: ADDA.L dst:A3 src:D0
    G.a[3] = ADD<L>(G.a[3], G.d[0].l());
    // 005b0c: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 005b10: ADD.W dst:D0 src:(A2.L)+8
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[2] + 8)));
    // 005b14: LSR.W dst:D0 src:#7
    G.d[0].w(LSR<W>(G.d[0].w(), 7));
    // 005b16: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 005b18: ADD.W dst:D0 src:#ff60
    G.d[0].w(ADD<W>(G.d[0].w(), 0xff60));
    // 005b1c: MOVE.W dst:(A3)+ src:D0
    G.io->w(G.a[3], UCC(G.d[0].w()));
    G.a[3] += 2;
    // 005b1e: ANDI.W dst:(A3) src:#7f
    G.io->w(G.a[3], AND<W>(G.io->w(G.a[3]), 0x7f));
    // 005b22: MOVE.W dst:D0 src:(A2.L)+4
    G.d[0].w(G.io->w(G.a[2] + 4));
    // 005b26: AND.W dst:D0 src:#f00
    G.d[0].w(AND<W>(G.d[0].w(), 0xf00));
    // 005b2a: OR.W dst:(A3)+ src:D0
    G.io->w(G.a[3], OR<W>(G.io->w(G.a[3]), G.d[0].w()));
    G.a[3] += 2;
    // 005b2c: MOVE.W dst:D0 src:(A2.L)+2
    G.d[0].w(UCC(G.io->w(G.a[2] + 2)));
    // 005b30: BTST.B dst:(A6.L)+1 src:#6
    BTST<B>(G.io->b(G.a[6] + 1), 6);
    // 005b36: Bcc cond:EQ src:(5b3c)
    if (G.sr.check_condition(Condition::EQ)) {
      F5b3c();
      goto end;
    }
    // 005b38: AND.W dst:D0 src:#9fff
    G.d[0].w(AND<W>(G.d[0].w(), 0x9fff));

  L5b3c:;
    // 005b3c: JMP src:(5b3c)
    F5b3c();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5b3c()
  {
    _log_call(__func__);

    // 005b3c: MOVE.W dst:(A3)+ src:D0
    G.io->w(G.a[3], UCC(G.d[0].w()));
    G.a[3] += 2;
    // 005b3e: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 005b42: ADD.W dst:D0 src:(A2.L)+6
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[2] + 6)));
    // 005b46: LSR.W dst:D0 src:#7
    G.d[0].w(LSR<W>(G.d[0].w(), 7));
    // 005b48: ADD.W dst:D0 src:#80
    G.d[0].w(ADD<W>(G.d[0].w(), 0x80));
    // 005b4c: MOVE.W dst:(A3)+ src:D0
    G.io->w(G.a[3], UCC(G.d[0].w()));
    G.a[3] += 2;
    // 005b4e: LEA.L dst:A2 src:(A2.L)+e
    G.a[2] += 14;
    // 005b52: DBcc.W cond:False dst:D7 src:(5ae2)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) {
      F5ae2();
      goto end;
    }
    // 005b56: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5b58()
  {
    _log_call(__func__);

    // 005b58: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 005b5c: MOVEQ.L dst:D1 src:#7
    G.d[1].l(UCC(7));

  L5b5e:;
    // 005b5e: JMP src:(5b5e)
    F5b5e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5b5e()
  {
    _log_call(__func__);

  L5b5e:;
    // 005b5e: MOVE.W dst:D0 src:(A0)
    G.d[0].w(UCC(G.io->w(G.a[0])));
    // 005b60: Bcc cond:EQ src:(5b66)
    if (G.sr.check_condition(Condition::EQ)) { goto L5b66; }
    // 005b62: BSR src:(5bbe)
    _m->clear_sprite_position(G.d[0].w());

  L5b66:;
    // 005b66: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 005b6a: DBcc.W cond:False dst:D1 src:(5b5e)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto L5b5e; }
    // 005b6e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5b70()
  {
    _log_call(__func__);

    // 005b70: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 005b72: MOVE.W dst:D0 src:(A6.L)+e
    G.d[0].w(UCC(G.io->w(G.a[6] + 14)));
    // 005b76: LEA.L dst:A1 src:(SPRITE_TABLE)
    G.a[1] = SPRITE_TABLE;
    // 005b7c: ADDA.L dst:A1 src:D0
    G.a[1] = ADD<L>(G.a[1], G.d[0].l());

  L5b7e:;
    // 005b7e: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 005b82: ADD.W dst:D0 src:(A0.L)+6
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[0] + 6)));
    // 005b86: LSR.W dst:D0 src:#7
    G.d[0].w(LSR<W>(G.d[0].w(), 7));
    // 005b88: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 005b8a: ADD.W dst:D0 src:#ff60
    G.d[0].w(ADD<W>(G.d[0].w(), 0xff60));
    // 005b8e: MOVE.W dst:(A1)+ src:D0
    G.io->w(G.a[1], UCC(G.d[0].w()));
    G.a[1] += 2;
    // 005b90: ANDI.W dst:(A1) src:#7f
    G.io->w(G.a[1], AND<W>(G.io->w(G.a[1]), 0x7f));
    // 005b94: MOVE.W dst:D0 src:(A0.L)+2
    G.d[0].w(G.io->w(G.a[0] + 2));
    // 005b98: AND.W dst:D0 src:#f00
    G.d[0].w(AND<W>(G.d[0].w(), 0xf00));
    // 005b9c: OR.W dst:(A1)+ src:D0
    G.io->w(G.a[1], OR<W>(G.io->w(G.a[1]), G.d[0].w()));
    G.a[1] += 2;
    // 005b9e: MOVE.W dst:(A1)+ src:(A0)
    G.io->w(G.a[1], UCC(G.io->w(G.a[0])));
    G.a[1] += 2;
    // 005ba0: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 005ba4: ADD.W dst:D0 src:(A0.L)+4
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[0] + 4)));
    // 005ba8: LSR.W dst:D0 src:#7
    G.d[0].w(LSR<W>(G.d[0].w(), 7));
    // 005baa: ADD.W dst:D0 src:#80
    G.d[0].w(ADD<W>(G.d[0].w(), 0x80));
    // 005bae: MOVE.W dst:(A1)+ src:D0
    G.io->w(G.a[1], UCC(G.d[0].w()));
    G.a[1] += 2;
    // 005bb0: ADDQ.L dst:A0 src:#8
    G.a[0] = ADD<L>(G.a[0], 8);
    // 005bb2: CMPI.W dst:(A0) src:#ffff
    CMP<W>(G.io->w(G.a[0]), 0xffff);
    // 005bb6: Bcc cond:NE src:(5b7e)
    if (G.sr.check_condition(Condition::NE)) { goto L5b7e; }
    // 005bb8: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5bd6()
  {
    _log_call(__func__);

    // 005bd6: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 005bd8: LEA.L dst:A0 src:(SPRITE_TABLE)
    G.a[0] = SPRITE_TABLE;

  L5bde:;
    // 005bde: MOVE.W dst:(A0,D0.W)+0 src:#0
    G.io->w(G.a[0] + G.d[0].w(), 0);
    // 005be4: MOVE.W dst:(A0,D0.W)+6 src:#0
    G.io->w(G.a[0] + G.d[0].w() + 6, 0);
    // 005bea: ADDQ.W dst:D0 src:#8
    G.d[0].w(ADD<W>(G.d[0].w(), 8));
    // 005bec: DBcc.W cond:False dst:D1 src:(5bde)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto L5bde; }
    // 005bf0: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 005bf2: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5c88()
  {
    _log_call(__func__);

    // 005c88: MOVEM.L dst:-(USP)
    // regs:A6,A5,A4,A3,A2,A1,A0,D7,D6,D5,D4,D3,D2,D1,D0
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[6]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[5]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[4]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[3]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[2]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[1]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[0]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[7].l());
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[6].l());
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[5].l());
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[4].l());
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[3].l());
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[2].l());
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[1].l());
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[0].l());
    // 005c8c: BSR src:(5d6e)
    _m->disable_vblank_int();
    // 005c90: CMPI.W dst:(SOME_STATE_CONTROL) src:#ffff
    CMP<W>(G.io->w(SOME_STATE_CONTROL), 0xffff);
    // 005c98: Bcc cond:EQ src:(5d5c)
    if (G.sr.check_condition(Condition::EQ)) { goto L5d5c; }

  L5c9c:;
    // 005c9c: MOVE.W dst:D0 src:(VDP_CTRL1)
    G.d[0].w(G.io->w(VDP_CTRL1));
    // 005ca2: AND.W dst:D0 src:#8
    G.d[0].w(AND<W>(G.d[0].w(), 8));
    // 005ca6: Bcc cond:EQ src:(5c9c)
    if (G.sr.check_condition(Condition::EQ)) { goto L5c9c; }
    // 005ca8: BSR src:(64aa)
    _m->push_scroll_state();
    // 005cac: BSR src:(5c22)
    _m->flush_dma();
    // 005cb0: BSR src:(65bc)
    _m->z80_useless();
    // 005cb4: BSR src:(5db2)
    _m->wait_for_z80_bus();
    // 005cb8: MOVE.W dst:(CONTROLLER_STATE2) src:(CONTROLLER_STATE1)
    G.io->w(CONTROLLER_STATE2, G.io->w(CONTROLLER_STATE1));
    // 005cc2: MOVE.B dst:(CONTROLLER1_CTRL2) src:#40
    G.io->b(CONTROLLER1_CTRL2, 0x40);
    // 005cca: MOVE.B dst:(CONTROLLER1_DATA2) src:#40
    G.io->b(CONTROLLER1_DATA2, 0x40);
    // 005cd2: NOP
    // 005cd4: NOP
    // 005cd6: MOVE.B dst:D1 src:(CONTROLLER1_DATA2)
    G.d[1].b(UCC(G.io->b(CONTROLLER1_DATA2)));
    // 005cdc: NOT.W dst:D1
    G.d[1].w(NOT<W>(G.d[1].w()));
    // 005cde: AND.W dst:D1 src:#f
    G.d[1].w(AND<W>(G.d[1].w(), 15));
    // 005ce2: MOVE.W dst:(CONTROLLER_STATE1) src:D1
    G.io->w(CONTROLLER_STATE1, G.d[1].w());
    // 005ce8: MOVE.B dst:D1 src:(CONTROLLER1_DATA2)
    G.d[1].b(UCC(G.io->b(CONTROLLER1_DATA2)));
    // 005cee: NOT.W dst:D1
    G.d[1].w(NOT<W>(G.d[1].w()));
    // 005cf0: AND.W dst:D1 src:#30
    G.d[1].w(AND<W>(G.d[1].w(), 0x30));
    // 005cf4: LSL.W dst:D1 src:#1
    G.d[1].w(LSL<W>(G.d[1].w(), 1));
    // 005cf6: OR.W dst:(CONTROLLER_STATE1) src:D1
    G.io->w(CONTROLLER_STATE1, OR<W>(G.io->w(CONTROLLER_STATE1), G.d[1].w()));
    // 005cfc: MOVE.B dst:(CONTROLLER1_DATA2) src:#0
    G.io->b(CONTROLLER1_DATA2, 0);
    // 005d04: NOP
    // 005d06: NOP
    // 005d08: MOVE.B dst:D1 src:(CONTROLLER1_DATA2)
    G.d[1].b(UCC(G.io->b(CONTROLLER1_DATA2)));
    // 005d0e: NOT.W dst:D1
    G.d[1].w(NOT<W>(G.d[1].w()));
    // 005d10: AND.W dst:D1 src:#10
    G.d[1].w(AND<W>(G.d[1].w(), 0x10));
    // 005d14: OR.W dst:(CONTROLLER_STATE1) src:D1
    G.io->w(CONTROLLER_STATE1, OR<W>(G.io->w(CONTROLLER_STATE1), G.d[1].w()));
    // 005d1a: MOVE.B dst:D1 src:(CONTROLLER1_DATA2)
    G.d[1].b(UCC(G.io->b(CONTROLLER1_DATA2)));
    // 005d20: NOT.W dst:D1
    G.d[1].w(NOT<W>(G.d[1].w()));
    // 005d22: AND.W dst:D1 src:#20
    G.d[1].w(AND<W>(G.d[1].w(), 0x20));
    // 005d26: LSL.W dst:D1 src:#2
    G.d[1].w(LSL<W>(G.d[1].w(), 2));
    // 005d28: OR.W dst:(CONTROLLER_STATE1) src:D1
    G.io->w(CONTROLLER_STATE1, OR<W>(G.io->w(CONTROLLER_STATE1), G.d[1].w()));
    // 005d2e: MOVE.W dst:(Z80_BUS_REQUEST) src:#0
    G.io->w(Z80_BUS_REQUEST, UCC(0));
    // 005d36: BTST.B dst:(ff0001) src:#7
    BTST<B>(G.io->b(0xff0001), 7);
    // 005d3e: Bcc cond:EQ src:(5d5c)
    if (G.sr.check_condition(Condition::EQ)) { goto L5d5c; }
    // 005d40: BTST.B dst:(ff0071) src:#7
    BTST<B>(G.io->b(0xff0071), 7);
    // 005d48: Bcc cond:EQ src:(5d5c)
    if (G.sr.check_condition(Condition::EQ)) { goto L5d5c; }
    // 005d4a: BTST.B dst:(ff0073) src:#7
    BTST<B>(G.io->b(0xff0073), 7);
    // 005d52: Bcc cond:NE src:(5d5c)
    if (G.sr.check_condition(Condition::NE)) { goto L5d5c; }
    // 005d54: BSET.B dst:(ff0001) src:#1
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 1));

  L5d5c:;
    // 005d5c: MOVE.W dst:(VBLANK_FLAG) src:#1
    G.io->w(VBLANK_FLAG, UCC(1));
    // 005d64: MOVEM.L src:(USP)+
    // regs:D0,D1,D2,D3,D4,D5,D6,D7,A0,A1,A2,A3,A4,A5,A6
    G.d[0].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.d[1].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.d[2].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.d[3].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.d[4].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.d[5].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.d[6].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.d[7].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.a[0] = G.io->l(G.a[7]);
    G.a[7] += 4;
    G.a[1] = G.io->l(G.a[7]);
    G.a[7] += 4;
    G.a[2] = G.io->l(G.a[7]);
    G.a[7] += 4;
    G.a[3] = G.io->l(G.a[7]);
    G.a[7] += 4;
    G.a[4] = G.io->l(G.a[7]);
    G.a[7] += 4;
    G.a[5] = G.io->l(G.a[7]);
    G.a[7] += 4;
    G.a[6] = G.io->l(G.a[7]);
    G.a[7] += 4;
    // 005d68: MOVE.W dst:(USP) src:#2700
    G.io->w(G.a[7], UCC(0x2700));
    // 005d6c: RTE
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5e22()
  {
    _log_call(__func__);

    // 005e22: MOVEQ.L dst:D0 src:#17
    G.d[0].l(0x17);
    // 005e24: MOVE.L dst:(VDP_CTRL1) src:#c0200000
    G.io->l(VDP_CTRL1, UCC(0xc0200000));

  L5e2e:;
    // 005e2e: MOVE.W dst:(VDP_DATA1) src:#0
    G.io->w(VDP_DATA1, UCC(0));
    // 005e36: DBcc.W cond:False dst:D0 src:(5e2e)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L5e2e; }
    // 005e3a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5f28()
  {
    _log_call(__func__);

    // 005f28: LEA.L dst:A0 src:(ff009a)
    G.a[0] = 0xff009a;
    // 005f2e: MOVE.L dst:D6 src:(A0)
    G.d[6].l(G.io->l(G.a[0]));
    // 005f30: MOVEQ.L dst:D0 src:#27
    G.d[0].l(UCC(0x27));

  L5f32:;
    // 005f32: CLR.W dst:(A0)+
    G.io->w(G.a[0], UCC(0));
    G.a[0] += 2;
    // 005f34: DBcc.W cond:False dst:D0 src:(5f32)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L5f32; }
    // 005f38: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));

  L5f3a:;
    // 005f3a: LEA.L dst:A0 src:(12292)
    G.a[0] = 0x12292;
    // 005f40: LEA.L dst:A1 src:(ff009a)
    G.a[1] = 0xff009a;
    // 005f46: BSR src:(5fc0)
    _m->some_weird_transformation_16_times();
    // 005f4a: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 005f4e: MOVE.L dst:D1 src:#ff009a
    G.d[1].l(0xff009a);
    // 005f54: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 005f58: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 005f5c: MOVE.L dst:A0 src:D6
    G.a[0] = G.d[6].l();
    // 005f5e: MOVEQ.L dst:D0 src:#17
    G.d[0].l(UCC(0x17));
    // 005f60: BSR src:(5fc2)
    _m->some_weird_transformation(G.d[0].w());
    // 005f64: MOVE.W dst:D0 src:#18
    G.d[0].w(0x18);
    // 005f68: MOVE.L dst:D1 src:#ff00ba
    G.d[1].l(0xff00ba);
    // 005f6e: MOVE.W dst:D2 src:#20
    G.d[2].w(UCC(0x20));
    // 005f72: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 005f76: MOVEQ.L dst:D0 src:#4
    G.d[0].l(UCC(4));
    // 005f78: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 005f7c: DBcc.W cond:False dst:D7 src:(5f3a)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L5f3a; }
    // 005f80: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5f82()
  {
    _log_call(__func__);

    // 005f82: LEA.L dst:A0 src:(ff009a)
    G.a[0] = 0xff009a;
    // 005f88: MOVE.L dst:D6 src:(A0)
    G.d[6].l(G.io->l(G.a[0]));
    // 005f8a: MOVEQ.L dst:D0 src:#17
    G.d[0].l(UCC(0x17));

  L5f8c:;
    // 005f8c: CLR.W dst:(A0)+
    G.io->w(G.a[0], UCC(0));
    G.a[0] += 2;
    // 005f8e: DBcc.W cond:False dst:D0 src:(5f8c)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L5f8c; }
    // 005f92: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));

  L5f94:;
    // 005f94: MOVE.L dst:A0 src:D6
    G.a[0] = UCC(G.d[6].l());
    // 005f96: LEA.L dst:A1 src:(ff009a)
    G.a[1] = 0xff009a;
    // 005f9c: MOVEQ.L dst:D0 src:#17
    G.d[0].l(UCC(0x17));
    // 005f9e: BSR src:(5fc2)
    _m->some_weird_transformation(G.d[0].w());
    // 005fa2: MOVE.W dst:D0 src:#18
    G.d[0].w(0x18);
    // 005fa6: MOVE.L dst:D1 src:#ff009a
    G.d[1].l(0xff009a);
    // 005fac: MOVE.W dst:D2 src:#20
    G.d[2].w(UCC(0x20));
    // 005fb0: BSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 005fb4: MOVEQ.L dst:D0 src:#4
    G.d[0].l(UCC(4));
    // 005fb6: BSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 005fba: DBcc.W cond:False dst:D7 src:(5f94)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L5f94; }
    // 005fbe: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F5fec()
  {
    _log_call(__func__);

    // 005fec: MOVEQ.L dst:D0 src:#1
    G.d[0].l(1);
    // 005fee: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));
    // 005ff0: LEA.L dst:A2 src:(SPRITE_TABLE)
    G.a[2] = SPRITE_TABLE;
    // 005ff6: LEA.L dst:A0 src:(ff02c2)
    G.a[0] = 0xff02c2;
    // 005ffc: MOVEQ.L dst:D2 src:#40
    G.d[2].l(0x40);
    // 005ffe: MOVEQ.L dst:D3 src:#15
    G.d[3].l(UCC(0x15));
    // 006000: BSR src:(6030)
    F6030();
    // 006004: LEA.L dst:A0 src:(ff0842)
    G.a[0] = 0xff0842;
    // 00600a: MOVEQ.L dst:D3 src:#0
    G.d[3].l(UCC(0));
    // 00600c: BSR src:(6030)
    F6030();
    // 006010: MOVEQ.L dst:D3 src:#0
    G.d[3].l(UCC(0));
    // 006012: BSR src:(604e)
    F604e();
    // 006016: LEA.L dst:A0 src:(ff08c2)
    G.a[0] = 0xff08c2;
    // 00601c: MOVEQ.L dst:D2 src:#40
    G.d[2].l(0x40);
    // 00601e: MOVEQ.L dst:D3 src:#f
    G.d[3].l(UCC(15));
    // 006020: BSR src:(6030)
    F6030();
    // 006024: MOVEQ.L dst:D3 src:#27
    G.d[3].l(UCC(0x27));
    // 006026: BSR src:(604e)
    F604e();
    // 00602a: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 00602c: MOVEQ.L dst:D3 src:#0
    G.d[3].l(UCC(0));
    // 00602e: Bcc cond:True src:(604e)
    F604e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6030()
  {
    _log_call(__func__);

  L6030:;
    // 006030: MOVE.W dst:(A2)+ src:#0
    G.io->w(G.a[2], UCC(0));
    G.a[2] += 2;
    // 006034: MOVE.W dst:(A2)+ src:D0
    G.io->w(G.a[2], UCC(G.d[0].w()));
    G.a[2] += 2;
    // 006036: MOVE.W dst:(A2)+ src:#3e1
    G.io->w(G.a[2], UCC(0x3e1));
    G.a[2] += 2;
    // 00603a: MOVE.W dst:(A2)+ src:#0
    G.io->w(G.a[2], UCC(0));
    G.a[2] += 2;
    // 00603e: MOVE.W dst:(A0.L)+e src:D1
    G.io->w(G.a[0] + 14, G.d[1].w());
    // 006042: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));
    // 006044: ADDQ.W dst:D1 src:#8
    G.d[1].w(ADD<W>(G.d[1].w(), 8));
    // 006046: ADDA.L dst:A0 src:D2
    G.a[0] = ADD<L>(G.a[0], G.d[2].l());
    // 006048: DBcc.W cond:False dst:D3 src:(6030)
    G.d[3].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[3].w())) { goto L6030; }
    // 00604c: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F604e()
  {
    _log_call(__func__);

  L604e:;
    // 00604e: MOVE.W dst:(A2)+ src:#0
    G.io->w(G.a[2], UCC(0));
    G.a[2] += 2;
    // 006052: MOVE.W dst:(A2)+ src:D0
    G.io->w(G.a[2], UCC(G.d[0].w()));
    G.a[2] += 2;
    // 006054: MOVE.W dst:(A2)+ src:#3e1
    G.io->w(G.a[2], UCC(0x3e1));
    G.a[2] += 2;
    // 006058: MOVE.W dst:(A2)+ src:#0
    G.io->w(G.a[2], UCC(0));
    G.a[2] += 2;
    // 00605c: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));
    // 00605e: ADDQ.W dst:D1 src:#8
    G.d[1].w(ADD<W>(G.d[1].w(), 8));
    // 006060: DBcc.W cond:False dst:D3 src:(604e)
    G.d[3].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[3].w())) { goto L604e; }
    // 006064: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6066()
  {
    _log_call(__func__);

    // 006066: BCLR.B dst:(ff0842) src:#7
    G.io->b(0xff0842, BCLR<B>(G.io->b(0xff0842), 7));
    // 00606e: MOVEQ.L dst:D0 src:#18
    G.d[0].l(0x18);
    // 006070: MOVE.L dst:D1 src:#1234e
    G.d[1].l(0x1234e);
    // 006076: MOVE.W dst:D2 src:#20
    G.d[2].w(UCC(0x20));
    // 00607a: Bcc cond:True src:(5de4)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F607e()
  {
    _log_call(__func__);

    // 00607e: BSET.B dst:(ff0842) src:#7
    G.io->b(0xff0842, BSET<B>(G.io->b(0xff0842), 7));
    // 006086: MOVEQ.L dst:D0 src:#18
    G.d[0].l(0x18);
    // 006088: MOVE.L dst:D1 src:#ff0110
    G.d[1].l(0xff0110);
    // 00608e: MOVE.W dst:D2 src:#20
    G.d[2].w(UCC(0x20));
    // 006092: Bcc cond:True src:(5de4)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6096()
  {
    _log_call(__func__);

    // 006096: MOVE.L dst:(VDP_CTRL1) src:#50000000
    G.io->l(VDP_CTRL1, 0x50000000);
    // 0060a0: MOVE.W dst:(VDP_DATA1) src:#83db
    G.io->w(VDP_DATA1, 0x83db);
    // 0060a8: MOVEQ.L dst:D0 src:#25
    G.d[0].l(UCC(0x25));

  L60aa:;
    // 0060aa: MOVE.W dst:(VDP_DATA1) src:#83dc
    G.io->w(VDP_DATA1, UCC(0x83dc));
    // 0060b2: DBcc.W cond:False dst:D0 src:(60aa)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L60aa; }
    // 0060b6: MOVE.W dst:(VDP_DATA1) src:#83dd
    G.io->w(VDP_DATA1, 0x83dd);
    // 0060be: MOVE.L dst:(VDP_CTRL1) src:#50800000
    G.io->l(VDP_CTRL1, 0x50800000);
    // 0060c8: MOVE.W dst:(VDP_DATA1) src:#83de
    G.io->w(VDP_DATA1, 0x83de);
    // 0060d0: MOVE.L dst:(VDP_CTRL1) src:#50ce0000
    G.io->l(VDP_CTRL1, 0x50ce0000);
    // 0060da: MOVE.W dst:(VDP_DATA1) src:#8bde
    G.io->w(VDP_DATA1, 0x8bde);
    // 0060e2: MOVE.L dst:(VDP_CTRL1) src:#51000000
    G.io->l(VDP_CTRL1, 0x51000000);
    // 0060ec: MOVE.W dst:(VDP_DATA1) src:#93de
    G.io->w(VDP_DATA1, 0x93de);
    // 0060f4: MOVE.L dst:(VDP_CTRL1) src:#514e0000
    G.io->l(VDP_CTRL1, 0x514e0000);
    // 0060fe: MOVE.W dst:(VDP_DATA1) src:#9bde
    G.io->w(VDP_DATA1, 0x9bde);
    // 006106: MOVE.L dst:(VDP_CTRL1) src:#51800000
    G.io->l(VDP_CTRL1, 0x51800000);
    // 006110: MOVE.W dst:(VDP_DATA1) src:#93db
    G.io->w(VDP_DATA1, 0x93db);
    // 006118: MOVEQ.L dst:D0 src:#25
    G.d[0].l(UCC(0x25));

  L611a:;
    // 00611a: MOVE.W dst:(VDP_DATA1) src:#93dc
    G.io->w(VDP_DATA1, UCC(0x93dc));
    // 006122: DBcc.W cond:False dst:D0 src:(611a)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L611a; }
    // 006126: MOVE.W dst:(VDP_DATA1) src:#93dd
    G.io->w(VDP_DATA1, UCC(0x93dd));
    // 00612e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6130()
  {
    _log_call(__func__);

    // 006130: MOVE.L dst:(VDP_CTRL1) src:#51180000
    G.io->l(VDP_CTRL1, 0x51180000);
    // 00613a: MOVE.W dst:(VDP_DATA1) src:#83e4
    G.io->w(VDP_DATA1, 0x83e4);
    // 006142: MOVE.W dst:(VDP_DATA1) src:#83e5
    G.io->w(VDP_DATA1, 0x83e5);
    // 00614a: MOVE.W dst:(VDP_DATA1) src:#83ec
    G.io->w(VDP_DATA1, 0x83ec);
    // 006152: MOVE.W dst:D0 src:(ff0066)
    G.d[0].w(G.io->w(0xff0066));
    // 006158: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));
    // 00615a: CMPI.W dst:D0 src:#63
    CMP<W>(G.d[0].w(), 0x63);
    // 00615e: Bcc cond:LS src:(6164)
    if (G.sr.check_condition(Condition::LS)) { goto L6164; }
    // 006160: MOVE.W dst:D0 src:#63
    G.d[0].w(UCC(0x63));

  L6164:;
    // 006164: SUB.W dst:D0 src:#a
    G.d[0].w(SUB<W>(G.d[0].w(), 10));
    // 006168: Bcc cond:CS src:(616e)
    if (G.sr.check_condition(Condition::CS)) { goto L616e; }
    // 00616a: ADDQ.W dst:D1 src:#1
    G.d[1].w(ADD<W>(G.d[1].w(), 1));
    // 00616c: Bcc cond:True src:(6164)
    goto L6164;

  L616e:;
    // 00616e: ADD.W dst:D0 src:#a
    G.d[0].w(ADD<W>(G.d[0].w(), 10));
    // 006172: ADD.W dst:D1 src:#83b4
    G.d[1].w(ADD<W>(G.d[1].w(), 0x83b4));
    // 006176: MOVE.W dst:(VDP_DATA1) src:D1
    G.io->w(VDP_DATA1, G.d[1].w());
    // 00617c: ADD.W dst:D0 src:#83b4
    G.d[0].w(ADD<W>(G.d[0].w(), 0x83b4));
    // 006180: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, UCC(G.d[0].w()));
    // 006186: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6188()
  {
    _log_call(__func__);

    // 006188: MOVE.L dst:(VDP_CTRL1) src:#51240000
    G.io->l(VDP_CTRL1, 0x51240000);
    // 006192: MOVE.W dst:(VDP_DATA1) src:#83ed
    G.io->w(VDP_DATA1, 0x83ed);
    // 00619a: MOVE.W dst:(VDP_DATA1) src:#83ec
    G.io->w(VDP_DATA1, 0x83ec);
    // 0061a2: MOVE.W dst:D0 src:(ff0068)
    G.d[0].w(G.io->w(0xff0068));
    // 0061a8: ADD.W dst:D0 src:#83b4
    G.d[0].w(ADD<W>(G.d[0].w(), 0x83b4));
    // 0061ac: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, UCC(G.d[0].w()));
    // 0061b2: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F61b4()
  {
    _log_call(__func__);

    // 0061b4: LEA.L dst:A0 src:(2082)
    G.a[0] = 0x2082;
    // 0061ba: BSR src:(1ed8)
    F1ed8();
    // 0061be: MOVE.L dst:(VDP_CTRL1) src:#51360000
    G.io->l(VDP_CTRL1, 0x51360000);
    // 0061c8: MOVE.W dst:D0 src:(ff003e)
    G.d[0].w(UCC(G.io->w(0xff003e)));

  L61ce:;
    // 0061ce: SUBQ.W dst:D0 src:#6
    G.d[0].w(SUB<W>(G.d[0].w(), 6));
    // 0061d0: Bcc cond:CC src:(61ce)
    if (G.sr.check_condition(Condition::CC)) { goto L61ce; }
    // 0061d2: ADDQ.W dst:D0 src:#6
    G.d[0].w(ADD<W>(G.d[0].w(), 6));
    // 0061d4: ADD.W dst:D0 src:#83b5
    G.d[0].w(ADD<W>(G.d[0].w(), 0x83b5));
    // 0061d8: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, UCC(G.d[0].w()));
    // 0061de: LEA.L dst:A0 src:(2090)
    G.a[0] = 0x2090;
    // 0061e4: BSR src:(1ed8)
    F1ed8();
    // 0061e8: MOVE.L dst:(VDP_CTRL1) src:#50b60000
    G.io->l(VDP_CTRL1, 0x50b60000);
    // 0061f2: MOVE.W dst:D0 src:(ff0040)
    G.d[0].w(G.io->w(0xff0040));
    // 0061f8: ADD.W dst:D0 src:#83b5
    G.d[0].w(ADD<W>(G.d[0].w(), 0x83b5));
    // 0061fc: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, UCC(G.d[0].w()));
    // 006202: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6204()
  {
    _log_call(__func__);

    // 006204: MOVE.L dst:(VDP_CTRL1) src:#51140000
    G.io->l(VDP_CTRL1, 0x51140000);
    // 00620e: MOVE.W dst:(VDP_DATA1) src:#83b4
    G.io->w(VDP_DATA1, 0x83b4);
    // 006216: MOVE.L dst:(VDP_CTRL1) src:#514a0000
    G.io->l(VDP_CTRL1, 0x514a0000);
    // 006220: MOVE.W dst:(VDP_DATA1) src:#83b4
    G.io->w(VDP_DATA1, 0x83b4);
    // 006228: MOVE.L dst:(VDP_CTRL1) src:#508a0000
    G.io->l(VDP_CTRL1, 0x508a0000);
    // 006232: MOVE.W dst:(VDP_DATA1) src:#83f1
    G.io->w(VDP_DATA1, 0x83f1);
    // 00623a: MOVE.L dst:(VDP_CTRL1) src:#50940000
    G.io->l(VDP_CTRL1, 0x50940000);
    // 006244: MOVE.W dst:(VDP_DATA1) src:#8bf1
    G.io->w(VDP_DATA1, 0x8bf1);
    // 00624c: MOVE.L dst:(VDP_CTRL1) src:#50c00000
    G.io->l(VDP_CTRL1, 0x50c00000);
    // 006256: MOVE.W dst:(VDP_DATA1) src:#83f1
    G.io->w(VDP_DATA1, 0x83f1);
    // 00625e: MOVE.L dst:(VDP_CTRL1) src:#50ca0000
    G.io->l(VDP_CTRL1, 0x50ca0000);
    // 006268: MOVE.W dst:(VDP_DATA1) src:#8bf1
    G.io->w(VDP_DATA1, UCC(0x8bf1));
    // 006270: LEA.L dst:A0 src:(2078)
    G.a[0] = 0x2078;
    // 006276: BSR src:(1ed8)
    F1ed8();
    // 00627a: LEA.L dst:A0 src:(206e)
    G.a[0] = 0x206e;
    // 006280: BSR src:(1ed8)
    F1ed8();
    // 006284: LEA.L dst:A0 src:(2242)
    G.a[0] = 0x2242;
    // 00628a: MOVE.W dst:D0 src:#10c2
    G.d[0].w(UCC(0x10c2));
    // 00628e: TST.W src:(ff002e)
    TST<W>(G.io->w(0xff002e));
    // 006294: Bcc cond:EQ src:(629c)
    if (G.sr.check_condition(Condition::EQ)) { goto L629c; }
    // 006296: LEA.L dst:A0 src:(224c)
    G.a[0] = 0x224c;

  L629c:;
    // 00629c: BSR src:(1eda)
    _m->copy_something_to_vdp(G.a[0], G.d[0].w());
    // 0062a0: LEA.L dst:A0 src:(2242)
    G.a[0] = 0x2242;
    // 0062a6: MOVE.W dst:D0 src:#108c
    G.d[0].w(UCC(0x108c));
    // 0062aa: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 0062b0: Bcc cond:EQ src:(1eda)
    if (G.sr.check_condition(Condition::EQ)) {
      _m->copy_something_to_vdp(G.a[0], G.d[0].w());
      goto end;
    }
    // 0062b4: LEA.L dst:A0 src:(224c)
    G.a[0] = 0x224c;
    // 0062ba: CMPI.W dst:(ff000a) src:#1
    CMP<W>(G.io->w(0xff000a), 1);
    // 0062c2: Bcc cond:EQ src:(1eda)
    if (G.sr.check_condition(Condition::EQ)) {
      _m->copy_something_to_vdp(G.a[0], G.d[0].w());
      goto end;
    }
    // 0062c6: LEA.L dst:A0 src:(2256)
    G.a[0] = 0x2256;
    // 0062cc: Bcc cond:True src:(1eda)
    _m->copy_something_to_vdp(G.a[0], G.d[0].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F62d0()
  {
    _log_call(__func__);

    // 0062d0: BTST.B dst:(ff0001) src:#7
    BTST<B>(G.io->b(0xff0001), 7);
    // 0062d8: Bcc cond:EQ src:(62dc)
    if (G.sr.check_condition(Condition::EQ)) { goto L62dc; }
    // 0062da: RTS
    goto end;

  L62dc:;
    // 0062dc: MOVE.L dst:(ff005e) src:D0
    G.io->l(0xff005e, UCC(G.d[0].l()));
    // 0062e2: LEA.L dst:A0 src:(ff005a)
    G.a[0] = 0xff005a;
    // 0062e8: LEA.L dst:A1 src:(ff0062)
    G.a[1] = 0xff0062;
    // 0062ee: ANDI to SR.W dst:SR src:#ff00
    G.sr.set_from_int(ANDR<W>(G.sr.to_int(), 0xff00));
    // 0062f2: ABCD.B dst:-(A0) src:-(A1)
    G.a[1] -= 1;
    G.a[0] -= 1;
    G.io->b(G.a[0], ABCD(G.io->b(G.a[0]), G.io->b(G.a[1])));
    // 0062f4: ABCD.B dst:-(A0) src:-(A1)
    G.a[1] -= 1;
    G.a[0] -= 1;
    G.io->b(G.a[0], ABCD(G.io->b(G.a[0]), G.io->b(G.a[1])));
    // 0062f6: ABCD.B dst:-(A0) src:-(A1)
    G.a[1] -= 1;
    G.a[0] -= 1;
    G.io->b(G.a[0], ABCD(G.io->b(G.a[0]), G.io->b(G.a[1])));
    // 0062f8: ABCD.B dst:-(A0) src:-(A1)
    G.a[1] -= 1;
    G.a[0] -= 1;
    G.io->b(G.a[0], ABCD(G.io->b(G.a[0]), G.io->b(G.a[1])));
    // 0062fa: MOVE.L dst:D0 src:(A0)
    G.d[0].l(G.io->l(G.a[0]));
    // 0062fc: CMPI.L dst:D0 src:#10000000
    CMP<L>(G.d[0].l(), 0x10000000);
    // 006302: Bcc cond:LS src:(630a)
    if (G.sr.check_condition(Condition::LS)) { goto L630a; }
    // 006304: MOVE.L dst:(A0) src:#10000000
    G.io->l(G.a[0], UCC(0x10000000));

  L630a:;
    // 00630a: CMP.L dst:D0 src:(ff005a)
    CMP<L>(G.d[0].l(), G.io->l(0xff005a));
    // 006310: Bcc cond:CS src:(6344)
    if (G.sr.check_condition(Condition::CS)) { goto L6344; }
    // 006312: LEA.L dst:A0 src:(ff005e)
    G.a[0] = 0xff005e;
    // 006318: LEA.L dst:A1 src:(ff0066)
    G.a[1] = 0xff0066;
    // 00631e: MOVE.L dst:(ff0062) src:#20000
    G.io->l(0xff0062, UCC(0x20000));
    // 006328: ANDI to SR.W dst:SR src:#ff00
    G.sr.set_from_int(ANDR<W>(G.sr.to_int(), 0xff00));
    // 00632c: ABCD.B dst:-(A0) src:-(A1)
    G.a[1] -= 1;
    G.a[0] -= 1;
    G.io->b(G.a[0], ABCD(G.io->b(G.a[0]), G.io->b(G.a[1])));
    // 00632e: ABCD.B dst:-(A0) src:-(A1)
    G.a[1] -= 1;
    G.a[0] -= 1;
    G.io->b(G.a[0], ABCD(G.io->b(G.a[0]), G.io->b(G.a[1])));
    // 006330: ABCD.B dst:-(A0) src:-(A1)
    G.a[1] -= 1;
    G.a[0] -= 1;
    G.io->b(G.a[0], ABCD(G.io->b(G.a[0]), G.io->b(G.a[1])));
    // 006332: ABCD.B dst:-(A0) src:-(A1)
    G.a[1] -= 1;
    G.a[0] -= 1;
    G.io->b(G.a[0], ABCD(G.io->b(G.a[0]), G.io->b(G.a[1])));
    // 006334: ADDQ.W dst:(ff0066) src:#1
    G.io->w(0xff0066, ADD<W>(G.io->w(0xff0066), 1));
    // 00633a: BSR src:(6130)
    F6130();
    // 00633e: MOVEQ.L dst:D0 src:#b
    G.d[0].l(UCC(11));
    // 006340: BSR src:(654c)
    F654c();

  L6344:;
    // 006344: MOVE.L dst:D0 src:(ff0056)
    G.d[0].l(G.io->l(0xff0056));
    // 00634a: CMP.L dst:D0 src:(ff002a)
    CMP<L>(G.d[0].l(), G.io->l(0xff002a));
    // 006350: Bcc cond:CS src:(6366)
    if (G.sr.check_condition(Condition::CS)) {
      F6366();
      goto end;
    }
    // 006352: MOVE.L dst:(ff002a) src:D0
    G.io->l(0xff002a, G.d[0].l());
    // 006358: MOVE.W dst:(ff002e) src:(ff000a)
    G.io->w(0xff002e, UCC(G.io->w(0xff000a)));
    // 006362: BSR src:(6204)
    F6204();

  L6366:;
    // 006366: JMP src:(6366)
    F6366();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6366()
  {
    _log_call(__func__);

    // 006366: MOVE.W dst:D0 src:#83e2
    G.d[0].w(0x83e2);
    // 00636a: MOVE.W dst:D1 src:#113a
    G.d[1].w(0x113a);
    // 00636e: MOVE.W dst:D2 src:#7
    G.d[2].w(7);
    // 006372: MOVE.W dst:D3 src:#0
    G.d[3].w(UCC(0));
    // 006376: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 00637a: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 00637c: MOVEQ.L dst:D1 src:#7
    G.d[1].l(7);
    // 00637e: MOVE.L dst:D2 src:(ff002a)
    G.d[2].l(G.io->l(0xff002a));
    // 006384: MOVE.W dst:D3 src:#113a
    G.d[3].w(UCC(0x113a));
    // 006388: BSR src:(63ae)
    F63ae();
    // 00638c: MOVE.W dst:D0 src:#83e2
    G.d[0].w(0x83e2);
    // 006390: MOVE.W dst:D1 src:#1104
    G.d[1].w(0x1104);
    // 006394: MOVE.W dst:D2 src:#7
    G.d[2].w(7);
    // 006398: MOVE.W dst:D3 src:#0
    G.d[3].w(UCC(0));
    // 00639c: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 0063a0: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 0063a2: MOVEQ.L dst:D1 src:#7
    G.d[1].l(7);
    // 0063a4: MOVE.L dst:D2 src:(ff0056)
    G.d[2].l(G.io->l(0xff0056));
    // 0063aa: MOVE.W dst:D3 src:#1104
    G.d[3].w(UCC(0x1104));

  L63ae:;
    // 0063ae: JMP src:(63ae)
    F63ae();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F63ae()
  {
    _log_call(__func__);

  L63ae:;
    // 0063ae: ROL.L dst:D2 src:#4
    G.d[2].l(ROL<L>(G.d[2].l(), 4));
    // 0063b0: MOVE.W dst:D4 src:D2
    G.d[4].w(G.d[2].w());
    // 0063b2: AND.W dst:D4 src:#f
    G.d[4].w(AND<W>(G.d[4].w(), 15));
    // 0063b6: Bcc cond:EQ src:(63bc)
    if (G.sr.check_condition(Condition::EQ)) { goto L63bc; }
    // 0063b8: MOVEQ.L dst:D0 src:#ff
    G.d[0].l(UCC(0xff));
    // 0063ba: Bcc cond:True src:(63c0)
    goto L63c0;

  L63bc:;
    // 0063bc: TST.W src:D0
    TST<W>(G.d[0].w());
    // 0063be: Bcc cond:EQ src:(63e0)
    if (G.sr.check_condition(Condition::EQ)) { goto L63e0; }

  L63c0:;
    // 0063c0: ADD.W dst:D4 src:#83b4
    G.d[4].w(ADD<W>(G.d[4].w(), 0x83b4));
    // 0063c4: MOVE.W dst:D5 src:D3
    G.d[5].w(UCC(G.d[3].w()));
    // 0063c6: AND.L dst:D5 src:#3fff
    G.d[5].l(AND<L>(G.d[5].l(), 0x3fff));
    // 0063cc: SWAP.L dst:D5
    G.d[5].l(SWAP(G.d[5].l()));
    // 0063ce: OR.L dst:D5 src:#40000000
    G.d[5].l(OR<L>(G.d[5].l(), 0x40000000));
    // 0063d4: MOVE.L dst:(VDP_CTRL1) src:D5
    G.io->l(VDP_CTRL1, G.d[5].l());
    // 0063da: MOVE.W dst:(VDP_DATA1) src:D4
    G.io->w(VDP_DATA1, UCC(G.d[4].w()));

  L63e0:;
    // 0063e0: ADDQ.W dst:D3 src:#2
    G.d[3].w(ADD<W>(G.d[3].w(), 2));
    // 0063e2: DBcc.W cond:False dst:D1 src:(63ae)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto L63ae; }
    // 0063e6: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6414()
  {
    _log_call(__func__);

    // 006414: AND.L dst:D1 src:#3fff
    G.d[1].l(AND<L>(G.d[1].l(), 0x3fff));
    // 00641a: SWAP.L dst:D1
    G.d[1].l(SWAP(G.d[1].l()));
    // 00641c: OR.L dst:D1 src:#40000000
    G.d[1].l(OR<L>(G.d[1].l(), 0x40000000));

  L6422:;
    // 006422: MOVE.W dst:D4 src:D2
    G.d[4].w(G.d[2].w());
    // 006424: MOVE.L dst:(VDP_CTRL1) src:D1
    G.io->l(VDP_CTRL1, UCC(G.d[1].l()));

  L642a:;
    // 00642a: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 006430: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));
    // 006432: DBcc.W cond:False dst:D4 src:(642a)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto L642a; }
    // 006436: ADD.L dst:D1 src:#800000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x800000));
    // 00643c: DBcc.W cond:False dst:D3 src:(6422)
    G.d[3].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[3].w())) { goto L6422; }
    // 006440: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F64fc()
  {
    _log_call(__func__);

    // 0064fc: BTST.B dst:(ff0001) src:#7
    BTST<B>(G.io->b(0xff0001), 7);
    // 006504: Bcc cond:EQ src:(6540)
    if (G.sr.check_condition(Condition::EQ)) { goto L6540; }
    // 006506: CLR.W dst:(ff006e)
    G.io->w(0xff006e, 0);
    // 00650c: MOVE.L dst:A0 src:(ff0050)
    G.a[0] = G.io->l(0xff0050);
    // 006512: MOVE.B dst:(ff0071) src:(A0.L)-2
    G.io->b(0xff0071, G.io->b(G.a[0] + 0xfffffffe));
    // 00651a: SUBQ.W dst:(ff0054) src:#1
    G.io->w(0xff0054, SUB<W>(G.io->w(0xff0054), 1));
    // 006520: Bcc cond:CC src:(6540)
    if (G.sr.check_condition(Condition::CC)) { goto L6540; }
    // 006522: CMPI.W dst:(A0) src:#ffff
    CMP<W>(G.io->w(G.a[0]), 0xffff);
    // 006526: Bcc cond:EQ src:(6542)
    if (G.sr.check_condition(Condition::EQ)) { goto L6542; }
    // 006528: MOVE.B dst:(ff0071) src:(A0)+
    G.io->b(0xff0071, UCC(G.io->b(G.a[0])));
    G.a[0] += 1;
    // 00652e: CLR.W dst:(ff0054)
    G.io->w(0xff0054, 0);
    // 006534: MOVE.B dst:(ff0055) src:(A0)+
    G.io->b(0xff0055, UCC(G.io->b(G.a[0])));
    G.a[0] += 1;
    // 00653a: MOVE.L dst:(ff0050) src:A0
    G.io->l(0xff0050, UCC(G.a[0]));

  L6540:;
    // 006540: RTS
    goto end;

  L6542:;
    // 006542: BSET.B dst:(ff0001) src:#6
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 6));
    // 00654a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F654c()
  {
    _log_call(__func__);

    // 00654c: MOVEM.L dst:-(USP) regs:A0,D2,D1
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[0]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[2].l());
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[1].l());
    // 006550: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 006552: BTST.B dst:(ff0001) src:#7
    BTST<B>(G.io->b(0xff0001), 7);
    // 00655a: Bcc cond:EQ src:(6568)
    if (G.sr.check_condition(Condition::EQ)) { goto L6568; }
    // 00655c: CMPI.W dst:D0 src:#b
    CMP<W>(G.d[0].w(), 11);
    // 006560: Bcc cond:CS src:(659e)
    if (G.sr.check_condition(Condition::CS)) { goto L659e; }
    // 006562: CMPI.W dst:D0 src:#18
    CMP<W>(G.d[0].w(), 0x18);
    // 006566: Bcc cond:CC src:(659e)
    if (G.sr.check_condition(Condition::CC)) { goto L659e; }

  L6568:;
    // 006568: LEA.L dst:A0 src:(ff0012)
    G.a[0] = 0xff0012;
    // 00656e: MOVEQ.L dst:D2 src:#b
    G.d[2].l(UCC(11));
    // 006570: BTST.L dst:D1 src:#7
    BTST<L>(G.d[1].l(), 7);
    // 006574: Bcc cond:EQ src:(658a)
    if (G.sr.check_condition(Condition::EQ)) { goto L658a; }

  L6576:;
    // 006576: CMP.W dst:D0 src:(A0)+
    CMP<W>(G.d[0].w(), G.io->w(G.a[0]));
    G.a[0] += 2;
    // 006578: Bcc cond:NE src:(657e)
    if (G.sr.check_condition(Condition::NE)) { goto L657e; }
    // 00657a: CLR.W dst:(A0.L)-2
    G.io->w(G.a[0] + 0xfffffffe, UCC(0));

  L657e:;
    // 00657e: DBcc.W cond:False dst:D2 src:(6576)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L6576; }
    // 006582: LEA.L dst:A0 src:(ff0012)
    G.a[0] = 0xff0012;
    // 006588: MOVEQ.L dst:D2 src:#b
    G.d[2].l(UCC(11));

  L658a:;
    // 00658a: TST.W src:(A0)+
    TST<W>(G.io->w(G.a[0]));
    G.a[0] += 2;
    // 00658c: Bcc cond:EQ src:(659a)
    if (G.sr.check_condition(Condition::EQ)) { goto L659a; }
    // 00658e: CMP.W dst:D1 src:(A0.L)-2
    CMP<W>(G.d[1].w(), G.io->w(G.a[0] + 0xfffffffe));
    // 006592: Bcc cond:EQ src:(659e)
    if (G.sr.check_condition(Condition::EQ)) { goto L659e; }
    // 006594: DBcc.W cond:False dst:D2 src:(658a)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L658a; }
    // 006598: Bcc cond:True src:(659e)
    goto L659e;

  L659a:;
    // 00659a: MOVE.W dst:(A0.L)-2 src:D1
    G.io->w(G.a[0] + 0xfffffffe, UCC(G.d[1].w()));

  L659e:;
    // 00659e: MOVEM.L src:(USP)+ regs:D1,D2,A0
    G.d[1].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.d[2].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.a[0] = G.io->l(G.a[7]);
    G.a[7] += 4;
    // 0065a2: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F65a4()
  {
    _log_call(__func__);

    // 0065a4: MOVE.W dst:(ff0012) src:#fe
    G.io->w(0xff0012, UCC(0xfe));
    // 0065ac: LEA.L dst:A0 src:(ff0014)
    G.a[0] = 0xff0014;
    // 0065b2: MOVEQ.L dst:D0 src:#a
    G.d[0].l(UCC(10));

  L65b4:;
    // 0065b4: CLR.W dst:(A0)+
    G.io->w(G.a[0], UCC(0));
    G.a[0] += 2;
    // 0065b6: DBcc.W cond:False dst:D0 src:(65b4)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L65b4; }
    // 0065ba: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F65fe()
  {
    _log_call(__func__);

    // 0065fe: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));

  L6600:;
    // 006600: JMP src:(6600)
    F6600();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6600()
  {
    _log_call(__func__);

    // 006600: MOVE.W dst:D3 src:D0
    G.d[3].w(G.d[0].w());
    // 006602: ADD.W dst:D3 src:D3
    G.d[3].w(ADD<W>(G.d[3].w(), G.d[3].w()));
    // 006604: LEA.L dst:A0 src:(4f2)
    G.a[0] = 0x4f2;
    // 00660a: MOVE.W dst:D2 src:(A0,D3.W)+0
    G.d[2].w(UCC(G.io->w(G.a[0] + G.d[3].w())));
    // 00660e: LSL.W dst:D3 src:#2
    G.d[3].w(LSL<W>(G.d[3].w(), 2));
    // 006610: LEA.L dst:A0 src:(ff2aa4)
    G.a[0] = 0xff2aa4;
    // 006616: ADDA.W dst:A0 src:D3
    G.a[0] = ADD<L>(G.a[0], G.d[3].w());
    // 006618: MOVE.W dst:D3 src:D0
    G.d[3].w(UCC(G.d[0].w()));

  L661a:;
    // 00661a: BTST.B dst:(A0) src:#7
    BTST<B>(G.io->b(G.a[0]), 7);
    // 00661e: Bcc cond:EQ src:(662e)
    if (G.sr.check_condition(Condition::EQ)) { goto L662e; }
    // 006620: ADDQ.W dst:D3 src:#1
    G.d[3].w(ADD<W>(G.d[3].w(), 1));
    // 006622: ADDQ.W dst:A0 src:#8
    G.a[0] = ADD<L>(G.a[0], 8);
    // 006624: DBcc.W cond:False dst:D2 src:(661a)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L661a; }
    // 006628: ORI to SR.W dst:SR src:#1
    G.sr.set_from_int(ORR<W>(G.sr.to_int(), 1));
    // 00662c: RTS
    goto end;

  L662e:;
    // 00662e: ORI.W dst:D3 src:#8000
    G.d[3].w(OR<W>(G.d[3].w(), 0x8000));
    // 006632: MOVE.W dst:(A0)+ src:D3
    G.io->w(G.a[0], UCC(G.d[3].w()));
    G.a[0] += 2;
    // 006634: MOVE.L dst:(A0)+ src:D1
    G.io->l(G.a[0], UCC(G.d[1].l()));
    G.a[0] += 4;
    // 006636: CLR.W dst:(A0)
    G.io->w(G.a[0], UCC(0));
    // 006638: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F663a()
  {
    _log_call(__func__);

    // 00663a: ANDI.W dst:D0 src:#7fff
    G.d[0].w(AND<W>(G.d[0].w(), 0x7fff));
    // 00663e: LEA.L dst:A0 src:(SOME_OTHER_FUCKING_COUNTER)
    G.a[0] = SOME_OTHER_FUCKING_COUNTER;
    // 006644: CMP.W dst:D0 src:(A0)+
    CMP<W>(G.d[0].w(), G.io->w(G.a[0]));
    G.a[0] += 2;
    // 006646: Bcc cond:EQ src:(6654)
    if (G.sr.check_condition(Condition::EQ)) { goto L6654; }
    // 006648: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 00664a: LSL.W dst:D1 src:#3
    G.d[1].w(LSL<W>(G.d[1].w(), 3));
    // 00664c: LEA.L dst:A0 src:(ff2aa4)
    G.a[0] = 0xff2aa4;
    // 006652: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());

  L6654:;
    // 006654: CLR.W dst:(A0)
    G.io->w(G.a[0], UCC(0));
    // 006656: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6658()
  {
    _log_call(__func__);

    // 006658: MOVEM.W src:(ff0856) regs:D2,D3
    G.d[2].l(G.io->w(0xff0856));
    G.d[3].l(G.io->w(0xff0858));

  L6660:;
    // 006660: JMP src:(6660)
    F6660();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6660()
  {
    _log_call(__func__);

    // 006660: MOVEM.W src:(A6.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x14));
    G.d[1].l(G.io->w(G.a[6] + 0x16));

  L6666:;
    // 006666: JMP src:(6666)
    F6666();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6666()
  {
    _log_call(__func__);

    // 006666: MOVEQ.L dst:D4 src:#8
    G.d[4].l(8);
    // 006668: SUB.W dst:D0 src:D2
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[2].w()));
    // 00666a: Bcc cond:CC src:(6670)
    if (G.sr.check_condition(Condition::CC)) { goto L6670; }
    // 00666c: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 00666e: CLR.W dst:D4
    G.d[4].w(UCC(0));

  L6670:;
    // 006670: SUB.W dst:D1 src:D3
    G.d[1].w(SUB<W>(G.d[1].w(), G.d[3].w()));
    // 006672: Bcc cond:CC src:(6678)
    if (G.sr.check_condition(Condition::CC)) { goto L6678; }
    // 006674: NEG.W dst:D1
    G.d[1].w(NEG<W>(G.d[1].w()));
    // 006676: ADDQ.W dst:D4 src:#4
    G.d[4].w(ADD<W>(G.d[4].w(), 4));

  L6678:;
    // 006678: CMP.W dst:D1 src:D0
    CMP<W>(G.d[1].w(), G.d[0].w());
    // 00667a: Bcc cond:CC src:(6680)
    if (G.sr.check_condition(Condition::CC)) { goto L6680; }
    // 00667c: ADDQ.W dst:D4 src:#2
    G.d[4].w(ADD<W>(G.d[4].w(), 2));
    // 00667e: EXG.L dst:D0 src:D1
    tmp_L = G.d[1].l();
    G.d[1].l(G.d[0].l());
    G.d[0].l(tmp_L);

  L6680:;
    // 006680: AND.L dst:D0 src:#ffff
    G.d[0].l(AND<L>(G.d[0].l(), 0xffff));
    // 006686: TST.W src:D1
    TST<W>(G.d[1].w());
    // 006688: Bcc cond:EQ src:(66b0)
    if (G.sr.check_condition(Condition::EQ)) { goto L66b0; }
    // 00668a: ASL.L dst:D0 src:#3
    G.d[0].l(ASL<L>(G.d[0].l(), 3));
    // 00668c: DIVU.W dst:D0 src:D1
    G.d[0].l(DIVU(G.d[0].l(), G.d[1].w()));
    // 00668e: MOVE.L dst:D2 src:D0
    G.d[2].l(UCC(G.d[0].l()));
    // 006690: SWAP.L dst:D2
    G.d[2].l(SWAP(G.d[2].l()));
    // 006692: ASR.W dst:D1 src:#1
    G.d[1].w(ASR<W>(G.d[1].w(), 1));
    // 006694: CMP.W dst:D1 src:D2
    CMP<W>(G.d[1].w(), G.d[2].w());
    // 006696: Bcc cond:CC src:(669a)
    if (G.sr.check_condition(Condition::CC)) { goto L669a; }
    // 006698: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));

  L669a:;
    // 00669a: MOVE.W dst:D1 src:(D4.W)+66c2
    G.d[1].w(UCC(G.io->w(G.d[4].w() + 0x66c2)));
    // 00669e: JMP src:(D4.W)+66b2
    JUMP_MAP(G.d[4].w() + 0x66b2);
    goto end;

  L66b0:;
    // 0066b0: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F66a2()
  {
    _log_call(__func__);

    // 0066a2: SUB.W dst:D1 src:D0
    G.d[1].w(SUB<W>(G.d[1].w(), G.d[0].w()));
    // 0066a4: ANDI.W dst:D1 src:#3f
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f));
    // 0066a8: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F66aa()
  {
    _log_call(__func__);

    // 0066aa: ADD.W dst:D1 src:D0
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[0].w()));
    // 0066ac: ANDI.W dst:D1 src:#3f
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f));
    // 0066b0: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F66b2()
  {
    _log_call(__func__);

    // 0066b2: Bcc cond:True src:(66a2)
    F66a2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F66ba()
  {
    _log_call(__func__);

    // 0066ba: Bcc cond:True src:(66aa)
    F66aa();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F66e2()
  {
    _log_call(__func__);

    // 0066e2: MOVE.W dst:-(USP) src:D4
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(G.d[4].w()));
    // 0066e4: BSR src:(6658)
    F6658();
    // 0066e8: MOVE.W dst:D5 src:(A6.L)+8
    G.d[5].w(G.io->w(G.a[6] + 8));
    // 0066ec: MOVE.W dst:D4 src:(USP)+
    G.d[4].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 0066ee: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 0066f0: SUB.W dst:D1 src:D5
    G.d[1].w(SUB<W>(G.d[1].w(), G.d[5].w()));
    // 0066f2: ANDI.W dst:D1 src:#3f
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f));
    // 0066f6: SUBQ.W dst:D4 src:#1
    G.d[4].w(SUB<W>(G.d[4].w(), 1));
    // 0066f8: CMPI.W dst:D1 src:#1f
    CMP<W>(G.d[1].w(), 0x1f);
    // 0066fc: Bcc cond:CS src:(6710)
    if (G.sr.check_condition(Condition::CS)) { goto L6710; }

  L66fe:;
    // 0066fe: CMP.W dst:D5 src:D0
    CMP<W>(G.d[5].w(), G.d[0].w());
    // 006700: Bcc cond:EQ src:(670c)
    if (G.sr.check_condition(Condition::EQ)) { goto L670c; }
    // 006702: SUBQ.W dst:D5 src:#1
    G.d[5].w(SUB<W>(G.d[5].w(), 1));
    // 006704: ANDI.W dst:D5 src:#3f
    G.d[5].w(AND<W>(G.d[5].w(), 0x3f));
    // 006708: DBcc.W cond:False dst:D4 src:(66fe)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto L66fe; }

  L670c:;
    // 00670c: EXG.L dst:D1 src:D5
    tmp_L = G.d[5].l();
    G.d[5].l(G.d[1].l());
    G.d[1].l(tmp_L);
    // 00670e: RTS
    goto end;

  L6710:;
    // 006710: CMP.W dst:D5 src:D0
    CMP<W>(G.d[5].w(), G.d[0].w());
    // 006712: Bcc cond:EQ src:(671e)
    if (G.sr.check_condition(Condition::EQ)) { goto L671e; }
    // 006714: ADDQ.W dst:D5 src:#1
    G.d[5].w(ADD<W>(G.d[5].w(), 1));
    // 006716: ANDI.W dst:D5 src:#3f
    G.d[5].w(AND<W>(G.d[5].w(), 0x3f));
    // 00671a: DBcc.W cond:False dst:D4 src:(6710)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto L6710; }

  L671e:;
    // 00671e: EXG.L dst:D1 src:D5
    tmp_L = G.d[5].l();
    G.d[5].l(G.d[1].l());
    G.d[1].l(tmp_L);
    // 006720: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6730()
  {
    _log_call(__func__);

    // 006730: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 006734: SUB.W dst:D0 src:(ff0856)
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(0xff0856)));
    // 00673a: Bcc cond:CC src:(673e)
    if (G.sr.check_condition(Condition::CC)) { goto L673e; }
    // 00673c: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));

  L673e:;
    // 00673e: MOVE.W dst:D1 src:(A6.L)+16
    G.d[1].w(G.io->w(G.a[6] + 0x16));
    // 006742: SUB.W dst:D1 src:(ff0858)
    G.d[1].w(SUB<W>(G.d[1].w(), G.io->w(0xff0858)));
    // 006748: Bcc cond:CC src:(674c)
    if (G.sr.check_condition(Condition::CC)) { goto L674c; }
    // 00674a: NEG.W dst:D1
    G.d[1].w(NEG<W>(G.d[1].w()));

  L674c:;
    // 00674c: CMP.W dst:D1 src:D0
    CMP<W>(G.d[1].w(), G.d[0].w());
    // 00674e: Bcc cond:CS src:(6752)
    if (G.sr.check_condition(Condition::CS)) { goto L6752; }
    // 006750: EXG.L dst:D0 src:D1
    tmp_L = G.d[1].l();
    G.d[1].l(G.d[0].l());
    G.d[0].l(tmp_L);

  L6752:;
    // 006752: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 006754: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 006756: LSR.W dst:D0 src:#7
    G.d[0].w(LSR<W>(G.d[0].w(), 7));
    // 006758: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F675a()
  {
    _log_call(__func__);

    // 00675a: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00675e: ADD.W dst:D0 src:#c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc00));
    // 006762: CMP.W dst:D0 src:#b800
    CMP<W>(G.d[0].w(), 0xb800);
    // 006766: Bcc cond:CC src:(677a)
    if (G.sr.check_condition(Condition::CC)) { goto L677a; }
    // 006768: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 00676c: ADD.W dst:D0 src:(VSCROLL_FG)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(VSCROLL_FG)));
    // 006772: ADD.W dst:D0 src:#1c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1c00));
    // 006776: CMP.W dst:D0 src:#9800
    CMP<W>(G.d[0].w(), 0x9800);

  L677a:;
    // 00677a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6810()
  {
    _log_call(__func__);

  L6810:;
    // 006810: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 006812: Bcc cond:EQ src:(681e)
    if (G.sr.check_condition(Condition::EQ)) { goto L681e; }
    // 006814: ADDA.W dst:A6 src:D1
    G.a[6] = ADD<L>(G.a[6], G.d[1].w());
    // 006816: DBcc.W cond:False dst:D0 src:(6810)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L6810; }
    // 00681a: ORI to SR.W dst:SR src:#1
    G.sr.set_from_int(ORR<W>(G.sr.to_int(), 1));

  L681e:;
    // 00681e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6820()
  {
    _log_call(__func__);

    // 006820: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 006822: MOVE.W dst:D0 src:(VSCROLL_FG)
    G.d[0].w(G.io->w(VSCROLL_FG));
    // 006828: SUBI.W dst:D0 src:#20
    G.d[0].w(SUB<W>(G.d[0].w(), 0x20));
    // 00682c: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00682e: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 006832: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 006834: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6836()
  {
    _log_call(__func__);

    // 006836: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 006838: MOVE.W dst:D0 src:(VSCROLL_BG)
    G.d[0].w(G.io->w(VSCROLL_BG));
    // 00683e: SUBI.W dst:D0 src:#1f
    G.d[0].w(SUB<W>(G.d[0].w(), 0x1f));
    // 006842: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 006844: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 006848: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 00684a: MOVE.W dst:D0 src:(ff0096)
    G.d[0].w(UCC(G.io->w(0xff0096)));
    // 006850: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 006852: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 006856: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6858()
  {
    _log_call(__func__);

    // 006858: MOVE.W dst:D0 src:(ff0090)
    G.d[0].w(G.io->w(0xff0090));
    // 00685e: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 006862: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6870()
  {
    _log_call(__func__);

    // 006870: MOVE.W dst:D0 src:(ff0090)
    G.d[0].w(UCC(G.io->w(0xff0090)));
    // 006876: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 006878: BTST.L dst:D0 src:#e
    BTST<L>(G.d[0].l(), 14);
    // 00687c: Bcc cond:EQ src:(6882)
    if (G.sr.check_condition(Condition::EQ)) { goto L6882; }
    // 00687e: ORI.W dst:D0 src:#8000
    G.d[0].w(OR<W>(G.d[0].w(), 0x8000));

  L6882:;
    // 006882: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 006886: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6888()
  {
    _log_call(__func__);

    // 006888: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 00688e: MOVE.W dst:D7 src:#f
    G.d[7].w(UCC(15));

  L6892:;
    // 006892: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 006894: Bcc cond:EQ src:(6914)
    if (G.sr.check_condition(Condition::EQ)) { goto L6914; }
    // 006898: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 00689c: Bcc cond:NE src:(6914)
    if (G.sr.check_condition(Condition::NE)) { goto L6914; }
    // 0068a0: BCLR.B dst:(A6.L)+1 src:#0
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 0));
    // 0068a6: Bcc cond:NE src:(6914)
    if (G.sr.check_condition(Condition::NE)) { goto L6914; }
    // 0068aa: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 0068ae: Bcc cond:NE src:(6928)
    if (G.sr.check_condition(Condition::NE)) { goto L6928; }
    // 0068b2: BTST.B dst:(ff0842) src:#5
    BTST<B>(G.io->b(0xff0842), 5);
    // 0068ba: Bcc cond:NE src:(6920)
    if (G.sr.check_condition(Condition::NE)) { goto L6920; }
    // 0068be: MOVEM.W src:(A6.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x14));
    G.d[1].l(G.io->w(G.a[6] + 0x16));
    // 0068c4: ADD.W dst:D0 src:#400
    G.d[0].w(ADD<W>(G.d[0].w(), 0x400));
    // 0068c8: CMPI.W dst:D0 src:#a800
    CMP<W>(G.d[0].w(), 0xa800);
    // 0068cc: Bcc cond:CC src:(6920)
    if (G.sr.check_condition(Condition::CC)) { goto L6920; }
    // 0068d0: ADD.W dst:D1 src:#2800
    G.d[1].w(ADD<W>(G.d[1].w(), 0x2800));
    // 0068d4: CMP.W dst:D1 src:#b000
    CMP<W>(G.d[1].w(), 0xb000);
    // 0068d8: Bcc cond:CC src:(6920)
    if (G.sr.check_condition(Condition::CC)) { goto L6920; }
    // 0068dc: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0068e0: BSR src:(6864)
    _m->inc_something(G.a[6]);
    // 0068e4: BTST.B dst:(A6.L)+1 src:#2
    BTST<B>(G.io->b(G.a[6] + 1), 2);
    // 0068ea: Bcc cond:EQ src:(68f0)
    if (G.sr.check_condition(Condition::EQ)) { goto L68f0; }
    // 0068ec: BSR src:(6858)
    F6858();

  L68f0:;
    // 0068f0: MOVE.W dst:D0 src:(A6.L)+2
    G.d[0].w(UCC(G.io->w(G.a[6] + 2)));
    // 0068f4: Bcc cond:EQ src:(6910)
    if (G.sr.check_condition(Condition::EQ)) { goto L6910; }
    // 0068f6: MOVE.W dst:D0 src:(ff0092)
    G.d[0].w(G.io->w(0xff0092));
    // 0068fc: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 006900: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 006906: AND.W dst:D0 src:#1
    G.d[0].w(AND<W>(G.d[0].w(), 1));
    // 00690a: ROR.W dst:D0 src:#4
    G.d[0].w(ROR<W>(G.d[0].w(), 4));
    // 00690c: EOR.W dst:D0 src:(A6.L)+10
    G.d[0].w(EOR<W>(G.d[0].w(), G.io->w(G.a[6] + 0x10)));

  L6910:;
    // 006910: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);

  L6914:;
    // 006914: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 006918: DBcc.W cond:False dst:D7 src:(6892)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L6892; }
    // 00691c: Bcc cond:True src:(695a)
    goto L695a;

  L6920:;
    // 006920: CLR.W dst:(A6)
    G.io->w(G.a[6], UCC(0));
    // 006922: BSR src:(5bba)
    _m->clear_sprite_on_a6_14();
    // 006926: Bcc cond:True src:(6914)
    goto L6914;

  L6928:;
    // 006928: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 00692c: Bcc cond:NE src:(6952)
    if (G.sr.check_condition(Condition::NE)) { goto L6952; }
    // 00692e: BCLR.B dst:(A6) src:#7
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 7));
    // 006932: BSET.B dst:(A6) src:#6
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 6));
    // 006936: MOVE.W dst:(A6.L)+c src:#3
    G.io->w(G.a[6] + 12, 3);
    // 00693c: MOVE.W dst:(A6.L)+10 src:#6ae
    G.io->w(G.a[6] + 0x10, 0x6ae);
    // 006942: MOVE.W dst:(A6.L)+12 src:#1
    G.io->w(G.a[6] + 0x12, 1);
    // 006948: MOVE.L dst:(A6.L)+20 src:#fe000200
    G.io->l(G.a[6] + 0x20, UCC(0xfe000200));
    // 006950: Bcc cond:True src:(6910)
    goto L6910;

  L6952:;
    // 006952: SUBQ.W dst:(A6.L)+c src:#1
    G.io->w(G.a[6] + 12, SUB<W>(G.io->w(G.a[6] + 12), 1));
    // 006956: Bcc cond:EQ src:(6920)
    if (G.sr.check_condition(Condition::EQ)) { goto L6920; }
    // 006958: Bcc cond:True src:(6910)
    goto L6910;

  L695a:;
    // 00695a: LEA.L dst:A6 src:(ff08c2)
    G.a[6] = 0xff08c2;
    // 006960: MOVE.W dst:D7 src:#f
    G.d[7].w(UCC(15));

  L6964:;
    // 006964: TST.W src:(A6)
    TST<W>(G.io->w(G.a[6]));
    // 006966: Bcc cond:EQ src:(69b4)
    if (G.sr.check_condition(Condition::EQ)) { goto L69b4; }
    // 00696a: BCLR.B dst:(A6.L)+1 src:#0
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 0));
    // 006970: Bcc cond:NE src:(69b4)
    if (G.sr.check_condition(Condition::NE)) { goto L69b4; }
    // 006974: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 006978: ADD.W dst:D0 src:#1000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1000));
    // 00697c: CMPI.W dst:D0 src:#c000
    CMP<W>(G.d[0].w(), 0xc000);
    // 006980: Bcc cond:CC src:(69be)
    if (G.sr.check_condition(Condition::CC)) { goto L69be; }
    // 006982: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 006986: ADD.W dst:D0 src:#1000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1000));
    // 00698a: CMPI.W dst:D0 src:#8000
    CMP<W>(G.d[0].w(), 0x8000);
    // 00698e: Bcc cond:CC src:(69be)
    if (G.sr.check_condition(Condition::CC)) { goto L69be; }
    // 006990: BTST.B dst:(A6.L)+1 src:#3
    BTST<B>(G.io->b(G.a[6] + 1), 3);
    // 006996: Bcc cond:NE src:(6a02)
    if (G.sr.check_condition(Condition::NE)) { goto L6a02; }
    // 00699a: MOVE.W dst:D0 src:(A6)
    G.d[0].w(G.io->w(G.a[6]));
    // 00699c: AND.W dst:D0 src:#3f0
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f0));
    // 0069a0: Bcc cond:NE src:(6a8a)
    if (G.sr.check_condition(Condition::NE)) { goto L6a8a; }
    // 0069a4: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 0069a8: Bcc cond:NE src:(69c6)
    if (G.sr.check_condition(Condition::NE)) { goto L69c6; }

  L69ac:;
    // 0069ac: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  L69b0:;
    // 0069b0: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);

  L69b4:;
    // 0069b4: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 0069b8: DBcc.W cond:False dst:D7 src:(6964)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L6964; }
    // 0069bc: RTS
    goto end;

  L69be:;
    // 0069be: CLR.W dst:(A6)
    G.io->w(G.a[6], UCC(0));
    // 0069c0: BSR src:(5bba)
    _m->clear_sprite_on_a6_14();
    // 0069c4: Bcc cond:True src:(69b4)
    goto L69b4;

  L69c6:;
    // 0069c6: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 0069ca: Bcc cond:NE src:(69ec)
    if (G.sr.check_condition(Condition::NE)) { goto L69ec; }
    // 0069cc: BCLR.B dst:(A6) src:#7
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 7));
    // 0069d0: MOVE.W dst:(A6.L)+c src:#4
    G.io->w(G.a[6] + 12, 4);
    // 0069d6: MOVE.W dst:(A6.L)+10 src:#6a6
    G.io->w(G.a[6] + 0x10, 0x6a6);
    // 0069dc: MOVE.W dst:(A6.L)+12 src:#504
    G.io->w(G.a[6] + 0x12, 0x504);
    // 0069e2: MOVE.L dst:(A6.L)+20 src:#fc000400
    G.io->l(G.a[6] + 0x20, UCC(0xfc000400));
    // 0069ea: Bcc cond:True src:(69b0)
    goto L69b0;

  L69ec:;
    // 0069ec: SUBQ.W dst:(A6.L)+c src:#1
    G.io->w(G.a[6] + 12, SUB<W>(G.io->w(G.a[6] + 12), 1));
    // 0069f0: Bcc cond:EQ src:(69be)
    if (G.sr.check_condition(Condition::EQ)) { goto L69be; }
    // 0069f2: CMPI.W dst:(A6.L)+c src:#2
    CMP<W>(G.io->w(G.a[6] + 12), 2);
    // 0069f8: Bcc cond:NE src:(69b0)
    if (G.sr.check_condition(Condition::NE)) { goto L69b0; }
    // 0069fa: MOVE.W dst:(A6.L)+10 src:#6aa
    G.io->w(G.a[6] + 0x10, UCC(0x6aa));
    // 006a00: Bcc cond:True src:(69b0)
    goto L69b0;

  L6a02:;
    // 006a02: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 006a06: Bcc cond:NE src:(69ec)
    if (G.sr.check_condition(Condition::NE)) { goto L69ec; }
    // 006a08: BCLR.B dst:(A6.L)+1 src:#2
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 2));
    // 006a0e: Bcc cond:NE src:(6a1c)
    if (G.sr.check_condition(Condition::NE)) { goto L6a1c; }
    // 006a10: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 006a14: Bcc cond:EQ src:(6a70)
    if (G.sr.check_condition(Condition::EQ)) { goto L6a70; }
    // 006a16: BSET.B dst:(A6.L)+1 src:#2
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 2));

  L6a1c:;
    // 006a1c: MOVE.W dst:D0 src:(A6.L)+2
    G.d[0].w(UCC(G.io->w(G.a[6] + 2)));
    // 006a20: CMP.W dst:D0 src:#4
    CMP<W>(G.d[0].w(), 4);
    // 006a24: Bcc cond:CC src:(69c6)
    if (G.sr.check_condition(Condition::CC)) { goto L69c6; }
    // 006a26: ADDQ.W dst:(A6.L)+2 src:#1
    G.io->w(G.a[6] + 2, ADD<W>(G.io->w(G.a[6] + 2), 1));
    // 006a2a: ROR.W dst:D0 src:#1
    G.d[0].w(ROR<W>(G.d[0].w(), 1));
    // 006a2c: Bcc cond:CS src:(6a38)
    if (G.sr.check_condition(Condition::CS)) { goto L6a38; }
    // 006a2e: MOVE.W dst:(A6.L)+10 src:(A6.L)+26
    G.io->w(G.a[6] + 0x10, UCC(G.io->w(G.a[6] + 0x26)));
    // 006a34: Bcc cond:True src:(69b0)
    goto L69b0;

  L6a38:;
    // 006a38: ROR.W dst:D0 src:#1
    G.d[0].w(ROR<W>(G.d[0].w(), 1));
    // 006a3a: Bcc cond:CS src:(6a44)
    if (G.sr.check_condition(Condition::CS)) { goto L6a44; }
    // 006a3c: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 006a40: Bcc cond:True src:(69b4)
    goto L69b4;

  L6a44:;
    // 006a44: MOVE.L dst:(A6.L)+10 src:(A6.L)+28
    G.io->l(G.a[6] + 0x10, G.io->l(G.a[6] + 0x28));
    // 006a4a: MOVE.L dst:(A6.L)+20 src:(A6.L)+2c
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[6] + 0x2c)));
    // 006a50: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 006a54: MOVE.L dst:(A6.L)+10 src:(A6.L)+30
    G.io->l(G.a[6] + 0x10, G.io->l(G.a[6] + 0x30));
    // 006a5a: MOVE.W dst:(A6.L)+24 src:(A6.L)+30
    G.io->w(G.a[6] + 0x24, G.io->w(G.a[6] + 0x30));
    // 006a60: MOVE.W dst:(A6.L)+38 src:(A6.L)+3a
    G.io->w(G.a[6] + 0x38, G.io->w(G.a[6] + 0x3a));
    // 006a66: MOVE.L dst:(A6.L)+20 src:(A6.L)+34
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[6] + 0x34)));
    // 006a6c: Bcc cond:True src:(69b4)
    goto L69b4;

  L6a70:;
    // 006a70: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 006a74: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 006a7c: Bcc cond:EQ src:(6a82)
    if (G.sr.check_condition(Condition::EQ)) { goto L6a82; }
    // 006a7e: ADD.W dst:D0 src:(A6.L)+38
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x38)));

  L6a82:;
    // 006a82: MOVE.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, UCC(G.d[0].w()));
    // 006a86: Bcc cond:True src:(69ac)
    goto L69ac;

  L6a8a:;
    // 006a8a: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 006a8e: BCLR.B dst:(A6) src:#0
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 0));
    // 006a92: Bcc cond:NE src:(6aa8)
    if (G.sr.check_condition(Condition::NE)) { goto L6aa8; }
    // 006a94: BTST.B dst:(ff0842) src:#5
    BTST<B>(G.io->b(0xff0842), 5);
    // 006a9c: Bcc cond:EQ src:(6ac0)
    if (G.sr.check_condition(Condition::EQ)) { goto L6ac0; }
    // 006a9e: MOVE.W dst:D0 src:(ff0868)
    G.d[0].w(G.io->w(0xff0868));
    // 006aa4: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));

  L6aa8:;
    // 006aa8: MOVE.W dst:D0 src:(ff0858)
    G.d[0].w(G.io->w(0xff0858));
    // 006aae: ADD.W dst:D0 src:#600
    G.d[0].w(ADD<W>(G.d[0].w(), 0x600));
    // 006ab2: TST.B src:(A6.L)+1
    TST<B>(G.io->b(G.a[6] + 1));
    // 006ab6: Bcc cond:PL src:(6abc)
    if (G.sr.check_condition(Condition::PL)) { goto L6abc; }
    // 006ab8: ADD.W dst:D0 src:#200
    G.d[0].w(ADD<W>(G.d[0].w(), 0x200));

  L6abc:;
    // 006abc: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, UCC(G.d[0].w()));

  L6ac0:;
    // 006ac0: TST.W src:(A6.L)+2
    TST<W>(G.io->w(G.a[6] + 2));
    // 006ac4: Bcc cond:NE src:(6ad8)
    if (G.sr.check_condition(Condition::NE)) { goto L6ad8; }
    // 006ac6: BCLR.B dst:(A6) src:#1
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 1));
    // 006aca: Bcc cond:NE src:(69be)
    if (G.sr.check_condition(Condition::NE)) { goto L69be; }
    // 006ace: ADDI.W dst:(A6.L)+14 src:#800
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x800));
    // 006ad4: Bcc cond:True src:(69b0)
    goto L69b0;

  L6ad8:;
    // 006ad8: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 006adc: SUBQ.W dst:(A6.L)+2 src:#4
    G.io->w(G.a[6] + 2, SUB<W>(G.io->w(G.a[6] + 2), 4));
    // 006ae0: MOVE.W dst:D6 src:(A6)
    G.d[6].w(G.io->w(G.a[6]));
    // 006ae2: MOVE.W dst:D5 src:D6
    G.d[5].w(G.d[6].w());
    // 006ae4: AND.W dst:D5 src:#240
    G.d[5].w(AND<W>(G.d[5].w(), 0x240));
    // 006ae8: Bcc cond:NE src:(69b4)
    if (G.sr.check_condition(Condition::NE)) { goto L69b4; }
    // 006aec: MOVE.L dst:D5 src:#6e10e0c
    G.d[5].l(UCC(0x6e10e0c));
    // 006af2: TST.B src:D6
    TST<B>(G.d[6].b());
    // 006af4: Bcc cond:PL src:(6afc)
    if (G.sr.check_condition(Condition::PL)) { goto L6afc; }
    // 006af6: MOVE.L dst:D5 src:#6c50f10
    G.d[5].l(UCC(0x6c50f10));

  L6afc:;
    // 006afc: BTST.L dst:D6 src:#4
    BTST<L>(G.d[6].l(), 4);
    // 006b00: Bcc cond:EQ src:(6b0a)
    if (G.sr.check_condition(Condition::EQ)) { goto L6b0a; }
    // 006b02: MOVE.L dst:(A6.L)+10 src:D5
    G.io->l(G.a[6] + 0x10, UCC(G.d[5].l()));
    // 006b06: Bcc cond:True src:(69b4)
    goto L69b4;

  L6b0a:;
    // 006b0a: MOVE.W dst:(A6.L)+12 src:D5
    G.io->w(G.a[6] + 0x12, UCC(G.d[5].w()));
    // 006b0e: Bcc cond:True src:(69b4)
    goto L69b4;

  end:
    _log_ret(__func__);
  }

  void F6b12()
  {
    _log_call(__func__);

    // 006b12: ADD.W dst:D3 src:(A6.L)+14
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x14)));
    // 006b16: ADD.W dst:D4 src:(A6.L)+16
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[6] + 0x16)));
    // 006b1a: Bcc cond:True src:(6b22)
    F6b22();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6b1c()
  {
    _log_call(__func__);

    // 006b1c: MOVEM.W src:(A6.L)+14 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x14));
    G.d[4].l(G.io->w(G.a[6] + 0x16));

  L6b22:;
    // 006b22: JMP src:(6b22)
    F6b22();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6b22()
  {
    _log_call(__func__);

    // 006b22: BTST.B dst:(ff0001) src:#4
    BTST<B>(G.io->b(0xff0001), 4);
    // 006b2a: Bcc cond:NE src:(6bb6)
    if (G.sr.check_condition(Condition::NE)) { goto L6bb6; }
    // 006b2e: BCLR.L dst:D0 src:#f
    G.d[0].l(BCLR<L>(G.d[0].l(), 15));
    // 006b32: Bcc cond:NE src:(6b58)
    if (G.sr.check_condition(Condition::NE)) { goto L6b58; }
    // 006b34: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(G.d[0].w()));
    // 006b36: BSR src:(6730)
    F6730();
    // 006b3a: MOVE.W dst:D1 src:(ff006e)
    G.d[1].w(G.io->w(0xff006e));
    // 006b40: ADD.W dst:D1 src:(ff0844)
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(0xff0844)));
    // 006b46: ASL.W dst:D1 src:#2
    G.d[1].w(ASL<W>(G.d[1].w(), 2));
    // 006b48: SUB.W dst:D1 src:#60
    G.d[1].w(SUB<W>(G.d[1].w(), 0x60));
    // 006b4c: NEG.W dst:D1
    G.d[1].w(NEG<W>(G.d[1].w()));
    // 006b4e: CMP.W dst:D1 src:D0
    CMP<W>(G.d[1].w(), G.d[0].w());
    // 006b50: MOVE from SR.W dst:D1 src:SR
    G.d[1].w(G.sr.to_int());
    // 006b52: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 006b54: ROR.W dst:D1 src:#1
    G.d[1].w(ROR<W>(G.d[1].w(), 1));
    // 006b56: Bcc cond:CC src:(6bb6)
    if (G.sr.check_condition(Condition::CC)) { goto L6bb6; }

  L6b58:;
    // 006b58: BSR src:(6bb8)
    F6bb8();
    // 006b5c: Bcc cond:NE src:(6bb6)
    if (G.sr.check_condition(Condition::NE)) { goto L6bb6; }
    // 006b5e: MOVE.L dst:(A5) src:#80010000
    G.io->l(G.a[5], UCC(0x80010000));
    // 006b64: BCLR.L dst:D0 src:#e
    G.d[0].l(BCLR<L>(G.d[0].l(), 14));
    // 006b68: Bcc cond:EQ src:(6b6c)
    if (G.sr.check_condition(Condition::EQ)) { goto L6b6c; }
    // 006b6a: ADDQ.W dst:(A5) src:#2
    G.io->w(G.a[5], ADD<W>(G.io->w(G.a[5]), 2));

  L6b6c:;
    // 006b6c: BCLR.L dst:D0 src:#d
    G.d[0].l(BCLR<L>(G.d[0].l(), 13));
    // 006b70: Bcc cond:EQ src:(6b74)
    if (G.sr.check_condition(Condition::EQ)) { goto L6b74; }
    // 006b72: ADDQ.W dst:(A5) src:#4
    G.io->w(G.a[5], ADD<W>(G.io->w(G.a[5]), 4));

  L6b74:;
    // 006b74: MOVE.W dst:(A5.L)+8 src:D0
    G.io->w(G.a[5] + 8, UCC(G.d[0].w()));
    // 006b78: MOVEM.W dst:(A5.L)+14 regs:D3,D4
    G.io->w(G.a[5] + 0x14, G.d[3].w());
    G.io->w(G.a[5] + 0x16, G.d[4].w());
    // 006b7e: MOVE.W dst:(A5.L)+6 src:(ff006a)
    G.io->w(G.a[5] + 6, G.io->w(0xff006a));
    // 006b86: MOVE.W dst:(A5.L)+12 src:#504
    G.io->w(G.a[5] + 0x12, 0x504);
    // 006b8c: MOVE.L dst:(A5.L)+20 src:#fc000400
    G.io->l(G.a[5] + 0x20, 0xfc000400);
    // 006b94: MOVE.W dst:(A5.L)+10 src:#686
    G.io->w(G.a[5] + 0x10, UCC(0x686));
    // 006b9a: EXG.L dst:A5 src:A6
    tmp_L = G.a[6];
    G.a[6] = G.a[5];
    G.a[5] = tmp_L;
    // 006b9c: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 006ba0: EXG.L dst:A5 src:A6
    tmp_L = G.a[6];
    G.a[6] = G.a[5];
    G.a[5] = tmp_L;
    // 006ba2: MOVE.W dst:(A5.L)+12 src:#1
    G.io->w(G.a[5] + 0x12, 1);
    // 006ba8: MOVE.L dst:(A5.L)+20 src:#fe000200
    G.io->l(G.a[5] + 0x20, 0xfe000200);
    // 006bb0: MOVE.W dst:(A5.L)+10 src:#68a
    G.io->w(G.a[5] + 0x10, UCC(0x68a));

  L6bb6:;
    // 006bb6: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6bb8()
  {
    _log_call(__func__);

    // 006bb8: LEA.L dst:A5 src:(ff02c2)
    G.a[5] = 0xff02c2;
    // 006bbe: MOVE.W dst:D7 src:#f
    G.d[7].w(UCC(15));

  L6bc2:;
    // 006bc2: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 006bc4: Bcc cond:EQ src:(6bce)
    if (G.sr.check_condition(Condition::EQ)) { goto L6bce; }
    // 006bc6: LEA.L dst:A5 src:(A5.L)+40
    G.a[5] += 0x40;
    // 006bca: DBcc.W cond:False dst:D7 src:(6bc2)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L6bc2; }

  L6bce:;
    // 006bce: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6bd0()
  {
    _log_call(__func__);

    goto L6bd0;

  L6bb6:;
    // 006bb6: RTS
    goto end;

  L6bd0:;
    // 006bd0: BTST.B dst:(ff0001) src:#4
    BTST<B>(G.io->b(0xff0001), 4);
    // 006bd8: Bcc cond:NE src:(6bb6)
    if (G.sr.check_condition(Condition::NE)) { goto L6bb6; }
    // 006bda: ADD.W dst:D3 src:(A6.L)+14
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x14)));
    // 006bde: ADD.W dst:D4 src:(A6.L)+16
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[6] + 0x16)));
    // 006be2: BSR src:(6bb8)
    F6bb8();
    // 006be6: Bcc cond:NE src:(6bb6)
    if (G.sr.check_condition(Condition::NE)) { goto L6bb6; }
    // 006be8: MOVE.W dst:D7 src:D3
    G.d[7].w(G.d[3].w());
    // 006bea: ADD.W dst:D7 src:#400
    G.d[7].w(ADD<W>(G.d[7].w(), 0x400));
    // 006bee: CMPI.W dst:D7 src:#a800
    CMP<W>(G.d[7].w(), 0xa800);
    // 006bf2: Bcc cond:CC src:(6bb6)
    if (G.sr.check_condition(Condition::CC)) { goto L6bb6; }
    // 006bf4: MOVE.W dst:D7 src:D4
    G.d[7].w(G.d[4].w());
    // 006bf6: ADD.W dst:D7 src:#2800
    G.d[7].w(ADD<W>(G.d[7].w(), 0x2800));
    // 006bfa: CMP.W dst:D7 src:#b000
    CMP<W>(G.d[7].w(), 0xb000);
    // 006bfe: Bcc cond:CC src:(6bb6)
    if (G.sr.check_condition(Condition::CC)) { goto L6bb6; }
    // 006c00: BCLR.L dst:D0 src:#f
    G.d[0].l(BCLR<L>(G.d[0].l(), 15));
    // 006c04: Bcc cond:NE src:(6c10)
    if (G.sr.check_condition(Condition::NE)) { goto L6c10; }
    // 006c06: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 006c08: MOVEQ.L dst:D0 src:#15
    G.d[0].l(UCC(0x15));
    // 006c0a: BSR src:(654c)
    F654c();
    // 006c0e: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  L6c10:;
    // 006c10: MOVE.L dst:(A5) src:#80000001
    G.io->l(G.a[5], UCC(0x80000001));
    // 006c16: BCLR.L dst:D0 src:#e
    G.d[0].l(BCLR<L>(G.d[0].l(), 14));
    // 006c1a: Bcc cond:EQ src:(6c1e)
    if (G.sr.check_condition(Condition::EQ)) { goto L6c1e; }
    // 006c1c: ADDQ.W dst:(A5) src:#2
    G.io->w(G.a[5], ADD<W>(G.io->w(G.a[5]), 2));

  L6c1e:;
    // 006c1e: AND.W dst:D0 src:#30
    G.d[0].w(AND<W>(G.d[0].w(), 0x30));
    // 006c22: MOVE.W dst:(A5.L)+8 src:D0
    G.io->w(G.a[5] + 8, UCC(G.d[0].w()));
    // 006c26: MOVEM.W dst:(A5.L)+14 regs:D3,D4
    G.io->w(G.a[5] + 0x14, G.d[3].w());
    G.io->w(G.a[5] + 0x16, G.d[4].w());
    // 006c2c: MOVE.W dst:(A5.L)+6 src:(ff006c)
    G.io->w(G.a[5] + 6, G.io->w(0xff006c));
    // 006c34: MOVE.W dst:(A5.L)+10 src:#6af
    G.io->w(G.a[5] + 0x10, UCC(0x6af));
    // 006c3a: CMPI.W dst:(A5.L)+8 src:#30
    CMP<W>(G.io->w(G.a[5] + 8), 0x30);
    // 006c40: Bcc cond:NE src:(6c48)
    if (G.sr.check_condition(Condition::NE)) { goto L6c48; }
    // 006c42: MOVE.W dst:(A5.L)+10 src:#eaf
    G.io->w(G.a[5] + 0x10, UCC(0xeaf));

  L6c48:;
    // 006c48: MOVE.W dst:(A5.L)+12 src:#402
    G.io->w(G.a[5] + 0x12, 0x402);
    // 006c4e: MOVE.L dst:(A5.L)+20 src:#fc000200
    G.io->l(G.a[5] + 0x20, UCC(0xfc000200));
    // 006c56: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6c58()
  {
    _log_call(__func__);

    // 006c58: LEA.L dst:A5 src:(ff08c2)
    G.a[5] = 0xff08c2;
    // 006c5e: MOVE.W dst:D0 src:(A6.L)+2
    G.d[0].w(UCC(G.io->w(G.a[6] + 2)));
    // 006c62: CMPI.W dst:D0 src:#2
    CMP<W>(G.d[0].w(), 2);
    // 006c66: Bcc cond:CC src:(6de6)
    if (G.sr.check_condition(Condition::CC)) { goto L6de6; }
    // 006c6a: MOVEQ.L dst:D7 src:#3
    G.d[7].l(3);
    // 006c6c: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));

  L6c6e:;
    // 006c6e: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 006c70: Bcc cond:EQ src:(6c7c)
    if (G.sr.check_condition(Condition::EQ)) { goto L6c7c; }

  L6c72:;
    // 006c72: LEA.L dst:A5 src:(A5.L)+40
    G.a[5] += 0x40;
    // 006c76: DBcc.W cond:False dst:D7 src:(6c6e)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L6c6e; }
    // 006c7a: RTS
    goto end;

  L6c7c:;
    // 006c7c: CMPI.W dst:(A6.L)+4 src:#2
    CMP<W>(G.io->w(G.a[6] + 4), 2);
    // 006c82: Bcc cond:CS src:(6cf6)
    if (G.sr.check_condition(Condition::CS)) { goto L6cf6; }
    // 006c86: TST.W src:(A5.L)+100
    TST<W>(G.io->w(G.a[5] + 0x100));
    // 006c8a: Bcc cond:NE src:(6c72)
    if (G.sr.check_condition(Condition::NE)) { goto L6c72; }
    // 006c8e: CMPI.W dst:(A6.L)+4 src:#2
    CMP<W>(G.io->w(G.a[6] + 4), 2);
    // 006c94: Bcc cond:NE src:(6cb0)
    if (G.sr.check_condition(Condition::NE)) { goto L6cb0; }
    // 006c96: MOVE.W dst:(A5.L)+8 src:#0
    G.io->w(G.a[5] + 8, UCC(0));
    // 006c9c: BSR src:(6d14)
    F6d14();
    // 006ca0: LEA.L dst:A5 src:(A5.L)+100
    G.a[5] += 0x100;
    // 006ca4: MOVE.W dst:(A5.L)+8 src:#20
    G.io->w(G.a[5] + 8, UCC(0x20));
    // 006caa: BSR src:(6d14)
    F6d14();
    // 006cae: Bcc cond:True src:(6d08)
    goto L6d08;

  L6cb0:;
    // 006cb0: TST.W src:(A5.L)+200
    TST<W>(G.io->w(G.a[5] + 0x200));
    // 006cb4: Bcc cond:NE src:(6c72)
    if (G.sr.check_condition(Condition::NE)) { goto L6c72; }
    // 006cb8: TST.W src:(A5.L)+300
    TST<W>(G.io->w(G.a[5] + 0x300));
    // 006cbc: Bcc cond:NE src:(6c72)
    if (G.sr.check_condition(Condition::NE)) { goto L6c72; }
    // 006cc0: MOVE.W dst:(A5.L)+8 src:#8
    G.io->w(G.a[5] + 8, UCC(8));
    // 006cc6: BSR src:(6d14)
    F6d14();
    // 006cca: LEA.L dst:A5 src:(A5.L)+100
    G.a[5] += 0x100;
    // 006cce: MOVE.W dst:(A5.L)+8 src:#18
    G.io->w(G.a[5] + 8, UCC(0x18));
    // 006cd4: BSR src:(6d14)
    F6d14();
    // 006cd8: LEA.L dst:A5 src:(A5.L)+100
    G.a[5] += 0x100;
    // 006cdc: MOVE.W dst:(A5.L)+8 src:#28
    G.io->w(G.a[5] + 8, UCC(0x28));
    // 006ce2: BSR src:(6d14)
    F6d14();
    // 006ce6: LEA.L dst:A5 src:(A5.L)+100
    G.a[5] += 0x100;
    // 006cea: MOVE.W dst:(A5.L)+8 src:#38
    G.io->w(G.a[5] + 8, UCC(0x38));
    // 006cf0: BSR src:(6d14)
    F6d14();
    // 006cf4: Bcc cond:True src:(6d08)
    goto L6d08;

  L6cf6:;
    // 006cf6: MOVEQ.L dst:D2 src:#10
    G.d[2].l(UCC(0x10));
    // 006cf8: TST.W src:(A6.L)+4
    TST<W>(G.io->w(G.a[6] + 4));
    // 006cfc: Bcc cond:EQ src:(6d00)
    if (G.sr.check_condition(Condition::EQ)) { goto L6d00; }
    // 006cfe: MOVEQ.L dst:D2 src:#30
    G.d[2].l(UCC(0x30));

  L6d00:;
    // 006d00: MOVE.W dst:(A5.L)+8 src:D2
    G.io->w(G.a[5] + 8, UCC(G.d[2].w()));
    // 006d04: BSR src:(6d14)
    F6d14();

  L6d08:;
    // 006d08: ADDQ.W dst:(ff0170) src:#1
    G.io->w(0xff0170, ADD<W>(G.io->w(0xff0170), 1));
    // 006d0e: MOVEQ.L dst:D0 src:#16
    G.d[0].l(UCC(0x16));
    // 006d10: Bcc cond:True src:(654c)
    F654c();
    goto end;

  L6de6:;
    // 006de6: TST.W src:(A6.L)+5c
    TST<W>(G.io->w(G.a[6] + 0x5c));
    // 006dea: Bcc cond:NE src:(6e10)
    if (G.sr.check_condition(Condition::NE)) { goto L6e10; }
    // 006dec: CMPI.W dst:(A6.L)+4 src:#2
    CMP<W>(G.io->w(G.a[6] + 4), 2);
    // 006df2: Bcc cond:CC src:(6f10)
    if (G.sr.check_condition(Condition::CC)) { goto L6f10; }
    // 006df6: MOVEQ.L dst:D0 src:#3
    G.d[0].l(UCC(3));

  L6df8:;
    // 006df8: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 006dfa: Bcc cond:NE src:(6e08)
    if (G.sr.check_condition(Condition::NE)) { goto L6e08; }
    // 006dfc: TST.W src:(A5.L)+40
    TST<W>(G.io->w(G.a[5] + 0x40));
    // 006e00: Bcc cond:NE src:(6e08)
    if (G.sr.check_condition(Condition::NE)) { goto L6e08; }
    // 006e02: TST.W src:(A5.L)+80
    TST<W>(G.io->w(G.a[5] + 0x80));
    // 006e06: Bcc cond:EQ src:(6e12)
    if (G.sr.check_condition(Condition::EQ)) { goto L6e12; }

  L6e08:;
    // 006e08: LEA.L dst:A5 src:(A5.L)+100
    G.a[5] += 0x100;
    // 006e0c: DBcc.W cond:False dst:D0 src:(6df8)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L6df8; }

  L6e10:;
    // 006e10: RTS
    goto end;

  L6e12:;
    // 006e12: MOVE.W dst:(A6.L)+5c src:#4
    G.io->w(G.a[6] + 0x5c, 4);
    // 006e18: ADDQ.W dst:(ff0170) src:#1
    G.io->w(0xff0170, ADD<W>(G.io->w(0xff0170), 1));
    // 006e1e: MOVEQ.L dst:D0 src:#17
    G.d[0].l(UCC(0x17));
    // 006e20: BSR src:(654c)
    F654c();
    // 006e24: LEA.L dst:A0 src:(7026)
    G.a[0] = 0x7026;
    // 006e2a: MOVEQ.L dst:D1 src:#10
    G.d[1].l(0x10);
    // 006e2c: MOVE.L dst:D2 src:#7390731
    G.d[2].l(0x7390731);
    // 006e32: MOVE.L dst:D3 src:#f4000200
    G.d[3].l(0xf4000200);
    // 006e38: MOVE.L dst:D4 src:#73d0803
    G.d[4].l(0x73d0803);
    // 006e3e: MOVE.L dst:D5 src:#f4000200
    G.d[5].l(0xf4000200);
    // 006e44: MOVE.L dst:D6 src:#7400803
    G.d[6].l(UCC(0x7400803));
    // 006e4a: TST.W src:(A6.L)+4
    TST<W>(G.io->w(G.a[6] + 4));
    // 006e4e: Bcc cond:EQ src:(6e74)
    if (G.sr.check_condition(Condition::EQ)) { goto L6e74; }
    // 006e50: LEA.L dst:A0 src:(A0.L)+8
    G.a[0] += 8;
    // 006e54: MOVEQ.L dst:D1 src:#30
    G.d[1].l(0x30);
    // 006e56: ADD.L dst:D2 src:#8000800
    G.d[2].l(ADD<L>(G.d[2].l(), 0x8000800));
    // 006e5c: MOVE.L dst:D3 src:#fc000200
    G.d[3].l(0xfc000200);
    // 006e62: ADD.L dst:D4 src:#8000000
    G.d[4].l(ADD<L>(G.d[4].l(), 0x8000000));
    // 006e68: MOVE.L dst:D5 src:#fc000200
    G.d[5].l(0xfc000200);
    // 006e6e: ADD.L dst:D6 src:#8000000
    G.d[6].l(ADD<L>(G.d[6].l(), 0x8000000));

  L6e74:;
    // 006e74: MOVE.W dst:D7 src:(A6.L)+2
    G.d[7].w(UCC(G.io->w(G.a[6] + 2)));
    // 006e78: CMPI.W dst:D7 src:#4
    CMP<W>(G.d[7].w(), 4);
    // 006e7c: Bcc cond:CS src:(6e84)
    if (G.sr.check_condition(Condition::CS)) { goto L6e84; }
    // 006e7e: LEA.L dst:A0 src:(A0.L)+4
    G.a[0] += 4;
    // 006e82: SUBQ.W dst:D7 src:#1
    G.d[7].w(SUB<W>(G.d[7].w(), 1));

  L6e84:;
    // 006e84: MOVE.L dst:A0 src:(A0)
    G.a[0] = UCC(G.io->l(G.a[0]));

  L6e86:;
    // 006e86: MOVE.L dst:(A5) src:#80090000
    G.io->l(G.a[5], 0x80090000);
    // 006e8c: MOVE.W dst:(A5.L)+8 src:D1
    G.io->w(G.a[5] + 8, G.d[1].w());
    // 006e90: MOVE.W dst:(A5.L)+6 src:#40
    G.io->w(G.a[5] + 6, 0x40);
    // 006e96: MOVE.W dst:(A5.L)+c src:D7
    G.io->w(G.a[5] + 12, G.d[7].w());
    // 006e9a: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 006e9c: ADD.W dst:D0 src:(A6.L)+14
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x14)));
    // 006ea0: MOVE.W dst:(A5.L)+14 src:D0
    G.io->w(G.a[5] + 0x14, G.d[0].w());
    // 006ea4: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 006ea6: ADD.W dst:D0 src:(A6.L)+16
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16)));
    // 006eaa: MOVE.W dst:(A5.L)+16 src:D0
    G.io->w(G.a[5] + 0x16, G.d[0].w());
    // 006eae: MOVE.L dst:(A5.L)+18 src:#2000200
    G.io->l(G.a[5] + 0x18, 0x2000200);
    // 006eb6: MOVE.L dst:(A5.L)+1c src:#2000200
    G.io->l(G.a[5] + 0x1c, 0x2000200);
    // 006ebe: MOVE.W dst:(A5.L)+10 src:#7a5
    G.io->w(G.a[5] + 0x10, 0x7a5);
    // 006ec4: MOVE.W dst:(A5.L)+12 src:#402
    G.io->w(G.a[5] + 0x12, 0x402);
    // 006eca: MOVE.L dst:(A5.L)+20 src:#fc000200
    G.io->l(G.a[5] + 0x20, UCC(0xfc000200));
    // 006ed2: EXG.L dst:A5 src:A6
    tmp_L = G.a[6];
    G.a[6] = G.a[5];
    G.a[5] = tmp_L;
    // 006ed4: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 006ed8: EXG.L dst:A5 src:A6
    tmp_L = G.a[6];
    G.a[6] = G.a[5];
    G.a[5] = tmp_L;
    // 006eda: MOVE.W dst:(A5.L)+10 src:D2
    G.io->w(G.a[5] + 0x10, G.d[2].w());
    // 006ede: MOVE.W dst:(A5.L)+12 src:#c04
    G.io->w(G.a[5] + 0x12, 0xc04);
    // 006ee4: MOVE.L dst:(A5.L)+20 src:D3
    G.io->l(G.a[5] + 0x20, UCC(G.d[3].l()));
    // 006ee8: SWAP.L dst:D2
    G.d[2].l(SWAP(G.d[2].l()));
    // 006eea: MOVEM.L dst:(A5.L)+24 regs:D2,D4,D5,D6
    G.io->l(G.a[5] + 0x24, G.d[2].l());
    G.io->l(G.a[5] + 0x28, G.d[4].l());
    G.io->l(G.a[5] + 0x2c, G.d[5].l());
    G.io->l(G.a[5] + 0x30, G.d[6].l());
    // 006ef0: MOVE.L dst:(A5.L)+34 src:#fa000200
    G.io->l(G.a[5] + 0x34, 0xfa000200);
    // 006ef8: MOVE.L dst:(A5.L)+38 src:#40003
    G.io->l(G.a[5] + 0x38, UCC(0x40003));
    // 006f00: SWAP.L dst:D2
    G.d[2].l(SWAP(G.d[2].l()));
    // 006f02: LEA.L dst:A5 src:(A5.L)+40
    G.a[5] += 0x40;
    // 006f06: CMPI.W dst:(A0) src:#ffff
    CMP<W>(G.io->w(G.a[0]), 0xffff);
    // 006f0a: Bcc cond:NE src:(6e86)
    if (G.sr.check_condition(Condition::NE)) { goto L6e86; }
    // 006f0e: RTS
    goto end;

  L6f10:;
    // 006f10: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));

  L6f12:;
    // 006f12: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 006f14: Bcc cond:NE src:(6f40)
    if (G.sr.check_condition(Condition::NE)) { goto L6f40; }
    // 006f16: TST.W src:(A5.L)+40
    TST<W>(G.io->w(G.a[5] + 0x40));
    // 006f1a: Bcc cond:NE src:(6f40)
    if (G.sr.check_condition(Condition::NE)) { goto L6f40; }
    // 006f1c: TST.W src:(A5.L)+80
    TST<W>(G.io->w(G.a[5] + 0x80));
    // 006f20: Bcc cond:NE src:(6f40)
    if (G.sr.check_condition(Condition::NE)) { goto L6f40; }
    // 006f22: TST.W src:(A5.L)+c0
    TST<W>(G.io->w(G.a[5] + 0xc0));
    // 006f26: Bcc cond:NE src:(6f40)
    if (G.sr.check_condition(Condition::NE)) { goto L6f40; }
    // 006f28: TST.W src:(A5.L)+100
    TST<W>(G.io->w(G.a[5] + 0x100));
    // 006f2c: Bcc cond:NE src:(6f40)
    if (G.sr.check_condition(Condition::NE)) { goto L6f40; }
    // 006f2e: TST.W src:(A5.L)+140
    TST<W>(G.io->w(G.a[5] + 0x140));
    // 006f32: Bcc cond:NE src:(6f40)
    if (G.sr.check_condition(Condition::NE)) { goto L6f40; }
    // 006f34: TST.W src:(A5.L)+180
    TST<W>(G.io->w(G.a[5] + 0x180));
    // 006f38: Bcc cond:NE src:(6f40)
    if (G.sr.check_condition(Condition::NE)) { goto L6f40; }
    // 006f3a: TST.W src:(A5.L)+1c0
    TST<W>(G.io->w(G.a[5] + 0x1c0));
    // 006f3e: Bcc cond:EQ src:(6f4a)
    if (G.sr.check_condition(Condition::EQ)) { goto L6f4a; }

  L6f40:;
    // 006f40: LEA.L dst:A5 src:(A5.L)+200
    G.a[5] += 0x200;
    // 006f44: DBcc.W cond:False dst:D0 src:(6f12)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L6f12; }
    // 006f48: RTS
    goto end;

  L6f4a:;
    // 006f4a: ADDQ.W dst:(ff0170) src:#1
    G.io->w(0xff0170, ADD<W>(G.io->w(0xff0170), 1));
    // 006f50: MOVE.W dst:(A6.L)+5c src:#4
    G.io->w(G.a[6] + 0x5c, 4);
    // 006f56: MOVEQ.L dst:D0 src:#17
    G.d[0].l(UCC(0x17));
    // 006f58: BSR src:(654c)
    F654c();
    // 006f5c: LEA.L dst:A0 src:(7036)
    G.a[0] = 0x7036;
    // 006f62: MOVE.W dst:D1 src:#304
    G.d[1].w(0x304);
    // 006f66: MOVE.L dst:D2 src:#40003
    G.d[2].l(UCC(0x40003));
    // 006f6c: CMPI.W dst:(A6.L)+4 src:#2
    CMP<W>(G.io->w(G.a[6] + 4), 2);
    // 006f72: Bcc cond:EQ src:(6f82)
    if (G.sr.check_condition(Condition::EQ)) { goto L6f82; }
    // 006f74: LEA.L dst:A0 src:(A0.L)+8
    G.a[0] += 8;
    // 006f78: MOVE.W dst:D1 src:#f10
    G.d[1].w(0xf10);
    // 006f7c: MOVE.L dst:D2 src:#100004
    G.d[2].l(UCC(0x100004));

  L6f82:;
    // 006f82: MOVE.W dst:D7 src:(A6.L)+2
    G.d[7].w(UCC(G.io->w(G.a[6] + 2)));
    // 006f86: CMPI.W dst:D7 src:#4
    CMP<W>(G.d[7].w(), 4);
    // 006f8a: Bcc cond:CS src:(6f92)
    if (G.sr.check_condition(Condition::CS)) { goto L6f92; }
    // 006f8c: LEA.L dst:A0 src:(A0.L)+4
    G.a[0] += 4;
    // 006f90: SUBQ.W dst:D7 src:#1
    G.d[7].w(SUB<W>(G.d[7].w(), 1));

  L6f92:;
    // 006f92: MOVE.L dst:A0 src:(A0)
    G.a[0] = UCC(G.io->l(G.a[0]));

  L6f94:;
    // 006f94: MOVE.L dst:(A5) src:#80090000
    G.io->l(G.a[5], 0x80090000);
    // 006f9a: MOVE.W dst:(A5.L)+8 src:(A0)+
    G.io->w(G.a[5] + 8, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 006f9e: MOVE.W dst:(A5.L)+6 src:#40
    G.io->w(G.a[5] + 6, 0x40);
    // 006fa4: MOVE.W dst:(A5.L)+c src:D7
    G.io->w(G.a[5] + 12, G.d[7].w());
    // 006fa8: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 006faa: ADD.W dst:D0 src:(A6.L)+14
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x14)));
    // 006fae: MOVE.W dst:(A5.L)+14 src:D0
    G.io->w(G.a[5] + 0x14, G.d[0].w());
    // 006fb2: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 006fb4: ADD.W dst:D0 src:(A6.L)+16
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16)));
    // 006fb8: MOVE.W dst:(A5.L)+16 src:D0
    G.io->w(G.a[5] + 0x16, G.d[0].w());
    // 006fbc: MOVE.L dst:(A5.L)+18 src:#2000200
    G.io->l(G.a[5] + 0x18, 0x2000200);
    // 006fc4: MOVE.L dst:(A5.L)+1c src:#2000200
    G.io->l(G.a[5] + 0x1c, 0x2000200);
    // 006fcc: MOVE.W dst:(A5.L)+26 src:(A0)+
    G.io->w(G.a[5] + 0x26, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 006fd0: MOVE.L dst:(A5.L)+28 src:(A0)+
    G.io->l(G.a[5] + 0x28, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 006fd4: MOVE.L dst:(A5.L)+2c src:(A0)+
    G.io->l(G.a[5] + 0x2c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 006fd8: MOVE.L dst:(A5.L)+30 src:(A0)+
    G.io->l(G.a[5] + 0x30, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 006fdc: MOVE.L dst:(A5.L)+34 src:(A0)+
    G.io->l(G.a[5] + 0x34, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 006fe0: MOVE.L dst:(A5.L)+38 src:D2
    G.io->l(G.a[5] + 0x38, G.d[2].l());
    // 006fe4: MOVE.L dst:(A5.L)+10 src:(A0)+
    G.io->l(G.a[5] + 0x10, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 006fe8: MOVE.L dst:(A5.L)+20 src:#fc000400
    G.io->l(G.a[5] + 0x20, UCC(0xfc000400));
    // 006ff0: BTST.B dst:(A5.L)+9 src:#3
    BTST<B>(G.io->b(G.a[5] + 9), 3);
    // 006ff6: Bcc cond:NE src:(7000)
    if (G.sr.check_condition(Condition::NE)) { goto L7000; }
    // 006ff8: MOVE.L dst:(A5.L)+20 src:#fe000400
    G.io->l(G.a[5] + 0x20, UCC(0xfe000400));

  L7000:;
    // 007000: EXG.L dst:A5 src:A6
    tmp_L = G.a[6];
    G.a[6] = G.a[5];
    G.a[5] = tmp_L;
    // 007002: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 007006: EXG.L dst:A5 src:A6
    tmp_L = G.a[6];
    G.a[6] = G.a[5];
    G.a[5] = tmp_L;
    // 007008: MOVE.W dst:(A5.L)+10 src:(A0)
    G.io->w(G.a[5] + 0x10, G.io->w(G.a[0]));
    // 00700c: MOVE.W dst:(A5.L)+24 src:(A0)+
    G.io->w(G.a[5] + 0x24, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 007010: MOVE.W dst:(A5.L)+12 src:D1
    G.io->w(G.a[5] + 0x12, G.d[1].w());
    // 007014: MOVE.L dst:(A5.L)+20 src:(A0)+
    G.io->l(G.a[5] + 0x20, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 007018: LEA.L dst:A5 src:(A5.L)+40
    G.a[5] += 0x40;
    // 00701c: CMPI.W dst:(A0) src:#ffff
    CMP<W>(G.io->w(G.a[0]), 0xffff);
    // 007020: Bcc cond:NE src:(6f94)
    if (G.sr.check_condition(Condition::NE)) { goto L6f94; }
    // 007024: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F6d14()
  {
    _log_call(__func__);

    // 006d14: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 006d16: MOVE.W dst:(A5) src:#8001
    G.io->w(G.a[5], 0x8001);
    // 006d1a: MOVE.W dst:(A5.L)+6 src:#40
    G.io->w(G.a[5] + 6, 0x40);
    // 006d20: MOVE.W dst:(A5.L)+c src:D0
    G.io->w(G.a[5] + 12, G.d[0].w());
    // 006d24: MOVE.W dst:D0 src:(A5.L)+8
    G.d[0].w(G.io->w(G.a[5] + 8));
    // 006d28: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 006d2a: ROR.W dst:D1 src:#2
    G.d[1].w(ROR<W>(G.d[1].w(), 2));
    // 006d2c: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 006d2e: LEA.L dst:A4 src:(6d96)
    G.a[4] = 0x6d96;
    // 006d34: ADDA.W dst:A4 src:D0
    G.a[4] = ADD<L>(G.a[4], G.d[0].w());
    // 006d36: MOVEM.W src:(A4)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[4]));
    G.a[4] += 2;
    G.d[4].l(G.io->w(G.a[4]));
    G.a[4] += 2;
    // 006d3a: ADD.W dst:D3 src:(A6.L)+14
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x14)));
    // 006d3e: MOVE.W dst:(A5.L)+14 src:D3
    G.io->w(G.a[5] + 0x14, G.d[3].w());
    // 006d42: ADD.W dst:D4 src:(A6.L)+16
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[6] + 0x16)));
    // 006d46: MOVE.W dst:(A5.L)+16 src:D4
    G.io->w(G.a[5] + 0x16, G.d[4].w());
    // 006d4a: MOVE.W dst:(A5.L)+10 src:(A4)+
    G.io->w(G.a[5] + 0x10, UCC(G.io->w(G.a[4])));
    G.a[4] += 2;
    // 006d4e: MOVE.W dst:(A5.L)+12 src:#504
    G.io->w(G.a[5] + 0x12, 0x504);
    // 006d54: MOVE.L dst:(A5.L)+18 src:#2000200
    G.io->l(G.a[5] + 0x18, 0x2000200);
    // 006d5c: MOVE.L dst:(A5.L)+1c src:#2000200
    G.io->l(G.a[5] + 0x1c, 0x2000200);
    // 006d64: MOVE.L dst:(A5.L)+20 src:#fc000400
    G.io->l(G.a[5] + 0x20, UCC(0xfc000400));
    // 006d6c: EXG.L dst:A5 src:A6
    tmp_L = G.a[6];
    G.a[6] = G.a[5];
    G.a[5] = tmp_L;
    // 006d6e: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 006d72: EXG.L dst:A5 src:A6
    tmp_L = G.a[6];
    G.a[6] = G.a[5];
    G.a[5] = tmp_L;
    // 006d74: MOVE.W dst:(A5.L)+10 src:(A4)+
    G.io->w(G.a[5] + 0x10, UCC(G.io->w(G.a[4])));
    G.a[4] += 2;
    // 006d78: TST.W src:(A6.L)+2
    TST<W>(G.io->w(G.a[6] + 2));
    // 006d7c: Bcc cond:EQ src:(6d84)
    if (G.sr.check_condition(Condition::EQ)) { goto L6d84; }
    // 006d7e: MOVE.W dst:(A5.L)+10 src:(A4)+
    G.io->w(G.a[5] + 0x10, UCC(G.io->w(G.a[4])));
    G.a[4] += 2;
    // 006d82: Bcc cond:True src:(6d92)
    goto L6d92;

  L6d84:;
    // 006d84: MOVE.W dst:(A5.L)+12 src:#1
    G.io->w(G.a[5] + 0x12, 1);
    // 006d8a: MOVE.L dst:(A5.L)+20 src:#fe000200
    G.io->l(G.a[5] + 0x20, UCC(0xfe000200));

  L6d92:;
    // 006d92: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 006d94: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F736a()
  {
    _log_call(__func__);

    // 00736a: ADDQ.W dst:(A6.L)+c src:#1
    G.io->w(G.a[6] + 12, ADD<W>(G.io->w(G.a[6] + 12), 1));
    // 00736e: MOVE.W dst:D0 src:(A6)
    G.d[0].w(G.io->w(G.a[6]));
    // 007370: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 007374: CMP.W dst:D0 src:#1
    CMP<W>(G.d[0].w(), 1);
    // 007378: Bcc cond:EQ src:(73f4)
    if (G.sr.check_condition(Condition::EQ)) { goto L73f4; }
    // 00737c: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 007380: Bcc cond:NE src:(73b2)
    if (G.sr.check_condition(Condition::NE)) { goto L73b2; }
    // 007382: BSR src:(5b58)
    F5b58();
    // 007386: MOVEQ.L dst:D0 src:#91
    G.d[0].l(UCC(0x91));
    // 007388: BSR src:(654c)
    F654c();
    // 00738c: MOVEQ.L dst:D0 src:#11
    G.d[0].l(UCC(0x11));
    // 00738e: BSR src:(654c)
    F654c();
    // 007392: MOVE.W dst:D0 src:(A6.L)+a
    G.d[0].w(UCC(G.io->w(G.a[6] + 10)));
    // 007396: BSR src:(62d0)
    F62d0();
    // 00739a: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 0073a0: MOVE.W dst:(A6.L)+12 src:#f10
    G.io->w(G.a[6] + 0x12, 0xf10);
    // 0073a6: MOVE.L dst:(A6.L)+20 src:#f8000800
    G.io->l(G.a[6] + 0x20, 0xf8000800);
    // 0073ae: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, UCC(0));

  L73b2:;
    // 0073b2: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 0073b6: CMP.W dst:D0 src:#10
    CMP<W>(G.d[0].w(), 0x10);
    // 0073ba: Bcc cond:CC src:(73dc)
    if (G.sr.check_condition(Condition::CC)) { goto L73dc; }
    // 0073bc: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 0073be: AND.W dst:D1 src:#1
    G.d[1].w(AND<W>(G.d[1].w(), 1));
    // 0073c2: Bcc cond:NE src:(5984)
    if (G.sr.check_condition(Condition::NE)) {
      _m->update_sprite_with_something(G.a[6]);
      goto end;
    }
    // 0073c6: AND.W dst:D0 src:#e
    G.d[0].w(AND<W>(G.d[0].w(), 14));
    // 0073ca: LEA.L dst:A0 src:(7682)
    G.a[0] = 0x7682;
    // 0073d0: MULU.W dst:D0 src:#2
    G.d[0].l(MULU(G.d[0].w(), 2));
    // 0073d4: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0073d6: MOVE.L dst:D1 src:(A0)+
    G.d[1].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 0073d8: Bcc cond:True src:(5a9a)
    F5a9a();
    goto end;

  L73dc:;
    // 0073dc: BSR src:(5bba)
    _m->clear_sprite_on_a6_14();

  L73e0:;
    // 0073e0: BCLR.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 4));
    // 0073e6: Bcc cond:NE src:(73ee)
    if (G.sr.check_condition(Condition::NE)) { goto L73ee; }
    // 0073e8: CLR.W dst:(A6)
    G.io->w(G.a[6], UCC(0));
    // 0073ea: Bcc cond:True src:(50a0)
    F50a0();
    goto end;

  L73ee:;
    // 0073ee: ANDI.W dst:(A6) src:#afff
    G.io->w(G.a[6], AND<W>(G.io->w(G.a[6]), 0xafff));
    // 0073f2: RTS
    goto end;

  L73f4:;
    // 0073f4: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 0073f8: Bcc cond:NE src:(7416)
    if (G.sr.check_condition(Condition::NE)) { goto L7416; }
    // 0073fa: BSR src:(5b58)
    F5b58();
    // 0073fe: MOVEQ.L dst:D0 src:#92
    G.d[0].l(UCC(0x92));
    // 007400: BSR src:(654c)
    F654c();
    // 007404: MOVEQ.L dst:D0 src:#12
    G.d[0].l(UCC(0x12));
    // 007406: BSR src:(654c)
    F654c();
    // 00740a: MOVE.W dst:D0 src:(A6.L)+a
    G.d[0].w(UCC(G.io->w(G.a[6] + 10)));
    // 00740e: BSR src:(62d0)
    F62d0();
    // 007412: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, UCC(0));

  L7416:;
    // 007416: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00741a: CMP.W dst:D0 src:#20
    CMP<W>(G.d[0].w(), 0x20);
    // 00741e: Bcc cond:CC src:(7444)
    if (G.sr.check_condition(Condition::CC)) { goto L7444; }
    // 007420: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 007422: AND.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 007426: Bcc cond:NE src:(743e)
    if (G.sr.check_condition(Condition::NE)) { goto L743e; }
    // 007428: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00742c: MULU.W dst:D0 src:#c
    G.d[0].l(MULU(G.d[0].w(), 12));
    // 007430: LEA.L dst:A0 src:(744a)
    G.a[0] = 0x744a;
    // 007436: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 007438: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 00743a: Bcc cond:True src:(5abc)
    F5abc();
    goto end;

  L743e:;
    // 00743e: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 007440: Bcc cond:True src:(5ade)
    F5ade();
    goto end;

  L7444:;
    // 007444: BSR src:(5b58)
    F5b58();
    // 007448: Bcc cond:True src:(73e0)
    goto L73e0;

  end:
    _log_ret(__func__);
  }

  void F75ca()
  {
    _log_call(__func__);

    // 0075ca: ADDQ.W dst:(A5) src:#1
    G.io->w(G.a[5], ADD<W>(G.io->w(G.a[5]), 1));
    // 0075cc: BSET.B dst:(A5) src:#7
    G.io->b(G.a[5], BSET<B>(G.io->b(G.a[5]), 7));
    // 0075d0: Bcc cond:NE src:(75ee)
    if (G.sr.check_condition(Condition::NE)) { goto L75ee; }
    // 0075d2: CLR.B dst:(A5.L)+1
    G.io->b(G.a[5] + 1, 0);
    // 0075d6: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 0075dc: MOVE.W dst:(A1.L)+4 src:#f10
    G.io->w(G.a[1] + 4, 0xf10);
    // 0075e2: MOVEQ.L dst:D0 src:#91
    G.d[0].l(UCC(0x91));
    // 0075e4: BSR src:(654c)
    F654c();
    // 0075e8: MOVEQ.L dst:D0 src:#11
    G.d[0].l(UCC(0x11));
    // 0075ea: BSR src:(654c)
    F654c();

  L75ee:;
    // 0075ee: MOVE.W dst:D0 src:(A5)
    G.d[0].w(G.io->w(G.a[5]));
    // 0075f0: ANDI.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 0075f4: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 0075f6: CMP.W dst:D0 src:#10
    CMP<W>(G.d[0].w(), 0x10);
    // 0075fa: Bcc cond:CC src:(7612)
    if (G.sr.check_condition(Condition::CC)) { goto L7612; }
    // 0075fc: MOVE.L dst:A2 src:A1
    G.a[2] = G.a[1];
    // 0075fe: AND.W dst:D0 src:#e
    G.d[0].w(AND<W>(G.d[0].w(), 14));
    // 007602: LEA.L dst:A0 src:(76a2)
    G.a[0] = 0x76a2;
    // 007608: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00760a: MOVE.W dst:(A1.L)+2 src:(A0)+
    G.io->w(G.a[1] + 2, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00760e: Bcc cond:True src:(5ae2)
    F5ae2();
    goto end;

  L7612:;
    // 007612: MOVE.L dst:A0 src:A1
    G.a[0] = G.a[1];
    // 007614: MOVE.W dst:D1 src:D7
    G.d[1].w(UCC(G.d[7].w()));
    // 007616: BSR src:(5b5e)
    F5b5e();
    // 00761a: BCLR.B dst:(A5) src:#7
    G.io->b(G.a[5], BCLR<B>(G.io->b(G.a[5]), 7));
    // 00761e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7620()
  {
    _log_call(__func__);

    // 007620: ADDQ.W dst:(A5) src:#1
    G.io->w(G.a[5], ADD<W>(G.io->w(G.a[5]), 1));
    // 007622: BSET.B dst:(A5) src:#7
    G.io->b(G.a[5], BSET<B>(G.io->b(G.a[5]), 7));
    // 007626: Bcc cond:NE src:(7642)
    if (G.sr.check_condition(Condition::NE)) { goto L7642; }
    // 007628: CLR.B dst:(A5.L)+1
    G.io->b(G.a[5] + 1, UCC(0));
    // 00762c: BTST.B dst:(ff2a9d) src:#0
    BTST<B>(G.io->b(0xff2a9d), 0);
    // 007634: Bcc cond:NE src:(7642)
    if (G.sr.check_condition(Condition::NE)) { goto L7642; }
    // 007636: MOVEQ.L dst:D0 src:#93
    G.d[0].l(UCC(0x93));
    // 007638: BSR src:(654c)
    F654c();
    // 00763c: MOVEQ.L dst:D0 src:#13
    G.d[0].l(UCC(0x13));
    // 00763e: BSR src:(654c)
    F654c();

  L7642:;
    // 007642: MOVE.W dst:D0 src:(A5)
    G.d[0].w(G.io->w(G.a[5]));
    // 007644: ANDI.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 007648: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 00764a: CMP.W dst:D0 src:#20
    CMP<W>(G.d[0].w(), 0x20);
    // 00764e: Bcc cond:CC src:(7674)
    if (G.sr.check_condition(Condition::CC)) { goto L7674; }
    // 007650: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 007652: AND.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 007656: Bcc cond:NE src:(766e)
    if (G.sr.check_condition(Condition::NE)) { goto L766e; }
    // 007658: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00765c: MULU.W dst:D0 src:#c
    G.d[0].l(MULU(G.d[0].w(), 12));
    // 007660: LEA.L dst:A0 src:(744a)
    G.a[0] = 0x744a;
    // 007666: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 007668: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 00766a: Bcc cond:True src:(5ac2)
    F5ac2();
    goto end;

  L766e:;
    // 00766e: MOVE.L dst:A2 src:A1
    G.a[2] = UCC(G.a[1]);
    // 007670: Bcc cond:True src:(5ae2)
    F5ae2();
    goto end;

  L7674:;
    // 007674: MOVE.L dst:A0 src:A1
    G.a[0] = G.a[1];
    // 007676: MOVE.W dst:D1 src:D7
    G.d[1].w(UCC(G.d[7].w()));
    // 007678: BSR src:(5b5e)
    F5b5e();
    // 00767c: BCLR.B dst:(A5) src:#7
    G.io->b(G.a[5], BCLR<B>(G.io->b(G.a[5]), 7));
    // 007680: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F76b2()
  {
    _log_call(__func__);

    // 0076b2: ADDQ.W dst:(ff084c) src:#1
    G.io->w(0xff084c, ADD<W>(G.io->w(0xff084c), 1));
    // 0076b8: CMPI.W dst:(ff084c) src:#20
    CMP<W>(G.io->w(0xff084c), 0x20);
    // 0076c0: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 0076c4: BSR src:(5b58)
    F5b58();
    // 0076c8: MOVE.W dst:D0 src:(ff0846)
    G.d[0].w(UCC(G.io->w(0xff0846)));
    // 0076ce: BTST.B dst:(ff084d) src:#2
    BTST<B>(G.io->b(0xff084d), 2);
    // 0076d6: Bcc cond:NE src:(76e2)
    if (G.sr.check_condition(Condition::NE)) { goto L76e2; }
    // 0076d8: CMP.W dst:D0 src:#3
    CMP<W>(G.d[0].w(), 3);
    // 0076dc: Bcc cond:EQ src:(76e0)
    if (G.sr.check_condition(Condition::EQ)) { goto L76e0; }
    // 0076de: RTS
    goto end;

  L76e0:;
    // 0076e0: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));

  L76e2:;
    // 0076e2: LEA.L dst:A5 src:(7722)
    G.a[5] = 0x7722;
    // 0076e8: MULU.W dst:D0 src:#c
    G.d[0].l(MULU(G.d[0].w(), 12));
    // 0076ec: ADDA.L dst:A5 src:D0
    G.a[5] = ADD<L>(G.a[5], G.d[0].l());
    // 0076ee: MOVE.W dst:D0 src:(A6.L)+50
    G.d[0].w(G.io->w(G.a[6] + 0x50));
    // 0076f2: MOVE.W dst:D1 src:(A5)+
    G.d[1].w(UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 0076f4: MOVE.W dst:D2 src:#1
    G.d[2].w(UCC(1));
    // 0076f8: MOVEM.W src:(ff0856) regs:D3,D4
    G.d[3].l(G.io->w(0xff0856));
    G.d[4].l(G.io->w(0xff0858));
    // 007700: ADD.W dst:D3 src:(A5)+
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[5])));
    G.a[5] += 2;
    // 007702: ADD.W dst:D4 src:(A5)+
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[5])));
    G.a[5] += 2;
    // 007704: BSR src:(59e2)
    F59e2();
    // 007708: MOVE.W dst:D0 src:(A6.L)+5e
    G.d[0].w(G.io->w(G.a[6] + 0x5e));
    // 00770c: MOVE.W dst:D1 src:(A5)+
    G.d[1].w(UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 00770e: MOVE.W dst:D2 src:#1
    G.d[2].w(UCC(1));
    // 007712: MOVEM.W src:(ff0856) regs:D3,D4
    G.d[3].l(G.io->w(0xff0856));
    G.d[4].l(G.io->w(0xff0858));
    // 00771a: ADD.W dst:D3 src:(A5)+
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[5])));
    G.a[5] += 2;
    // 00771c: ADD.W dst:D4 src:(A5)+
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[5])));
    G.a[5] += 2;
    // 00771e: Bcc cond:True src:(59e2)
    F59e2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F775e()
  {
    _log_call(__func__);

    // 00775e: LEA.L dst:A0 src:(7958)
    G.a[0] = 0x7958;
    // 007764: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00776a: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00776c: MOVE.W dst:(A6.L)+24 src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x24, G.io->w(G.a[0] + G.d[0].w()));
    // 007772: MOVE.W dst:(A6.L)+14 src:#ac00
    G.io->w(G.a[6] + 0x14, 0xac00);
    // 007778: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00777c: AND.W dst:D0 src:#1ff
    G.d[0].w(AND<W>(G.d[0].w(), 0x1ff));
    // 007780: ROL.W dst:D0 src:#7
    G.d[0].w(ROL<W>(G.d[0].w(), 7));
    // 007782: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, G.d[0].w());
    // 007786: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 00778a: CMPI.W dst:D0 src:#c
    CMP<W>(G.d[0].w(), 12);
    // 00778e: Bcc cond:NE src:(7796)
    if (G.sr.check_condition(Condition::NE)) { goto L7796; }
    // 007790: BSR src:(6836)
    F6836();
    // 007794: Bcc cond:True src:(779a)
    goto L779a;

  L7796:;
    // 007796: BSR src:(6820)
    F6820();

  L779a:;
    // 00779a: LEA.L dst:A0 src:(b29a)
    G.a[0] = 0xb29a;
    // 0077a0: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 0077a4: MULU.W dst:D0 src:#12
    G.d[0].l(MULU(G.d[0].w(), 0x12));
    // 0077a8: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0077aa: MOVE.W dst:D1 src:(A0)+
    G.d[1].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0077ac: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, G.d[1].w());
    // 0077b0: MOVE.W dst:(A6.L)+36 src:D1
    G.io->w(G.a[6] + 0x36, G.d[1].w());
    // 0077b4: MOVE.L dst:(A6.L)+2a src:(A0)+
    G.io->l(G.a[6] + 0x2a, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 0077b8: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 0077bc: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 0077c2: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0077c4: OR.W dst:(A1.L)+2 src:D0
    G.io->w(G.a[1] + 2, OR<W>(G.io->w(G.a[1] + 2), G.d[0].w()));
    // 0077c8: MOVE.W dst:(A1.L)+4 src:(A0)+
    G.io->w(G.a[1] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0077cc: MOVE.L dst:(A1.L)+a src:(A0)+
    G.io->l(G.a[1] + 10, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 0077d0: MOVE.L dst:(A1.L)+6 src:(A0)
    G.io->l(G.a[1] + 6, G.io->l(G.a[0]));
    // 0077d4: MOVE.W dst:(A6.L)+3a src:#0
    G.io->w(G.a[6] + 0x3a, 0);
    // 0077da: MOVE.L dst:(A6.L)+3c src:#0
    G.io->l(G.a[6] + 0x3c, 0);
    // 0077e2: CLR.W dst:(A6.L)+4e
    G.io->w(G.a[6] + 0x4e, UCC(0));
    // 0077e6: TST.W src:(A6.L)+54
    TST<W>(G.io->w(G.a[6] + 0x54));
    // 0077ea: Bcc cond:EQ src:(780e)
    if (G.sr.check_condition(Condition::EQ)) { goto L780e; }
    // 0077ec: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 0077ee: BSR src:(5ade)
    F5ade();
    // 0077f2: MOVE.W dst:D0 src:(A6.L)+36
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x36)));
    // 0077f6: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 0077fa: LEA.L dst:A0 src:(a89a)
    G.a[0] = 0xa89a;
    // 007800: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 007802: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 007804: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 007808: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 00780a: Bcc cond:True src:(5ac2)
    F5ac2();
    goto end;

  L780e:;
    // 00780e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7810()
  {
    _log_call(__func__);

    // 007810: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 007814: CMPI.W dst:D0 src:#c
    CMP<W>(G.d[0].w(), 12);
    // 007818: Bcc cond:NE src:(782e)
    if (G.sr.check_condition(Condition::NE)) { goto L782e; }
    // 00781a: MOVE.W dst:D0 src:(ff0094)
    G.d[0].w(G.io->w(0xff0094));
    // 007820: MOVE.W dst:D1 src:(ff0092)
    G.d[1].w(G.io->w(0xff0092));
    // 007826: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00782a: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));

  L782e:;
    // 00782e: BSR src:(6858)
    F6858();
    // 007832: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 007836: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00783a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00783e: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 007842: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 007846: Bcc cond:EQ src:(7854)
    if (G.sr.check_condition(Condition::EQ)) { goto L7854; }
    // 007848: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00784c: CMP.W dst:D0 src:(A6.L)+24
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x24));
    // 007850: Bcc cond:CC src:(736a)
    if (G.sr.check_condition(Condition::CC)) {
      F736a();
      goto end;
    }

  L7854:;
    // 007854: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 007858: ADDI.W dst:D0 src:#c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc00));
    // 00785c: CMPI.W dst:D0 src:#f400
    CMP<W>(G.d[0].w(), 0xf400);
    // 007860: Bcc cond:HI src:(50a0)
    if (G.sr.check_condition(Condition::HI)) {
      F50a0();
      goto end;
    }
    // 007864: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 007868: ADDQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, ADD<W>(G.io->w(G.a[6] + 0x3e), 1));
    // 00786c: MOVEQ.L dst:D0 src:#12
    G.d[0].l(0x12);
    // 00786e: SUB.W dst:D0 src:(ff006e)
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 007874: CMP.W dst:D0 src:(A6.L)+3c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3c));
    // 007878: Bcc cond:CC src:(78e0)
    if (G.sr.check_condition(Condition::CC)) { goto L78e0; }
    // 00787c: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, 0);
    // 007882: MOVEQ.L dst:D4 src:#4
    G.d[4].l(UCC(4));
    // 007884: BSR src:(66e2)
    F66e2();
    // 007888: ANDI.W dst:D1 src:#fffc
    G.d[1].w(AND<W>(G.d[1].w(), 0xfffc));
    // 00788c: MOVE.W dst:D2 src:D1
    G.d[2].w(G.d[1].w());
    // 00788e: MOVE.W dst:D3 src:(A6.L)+2a
    G.d[3].w(G.io->w(G.a[6] + 0x2a));
    // 007892: SUB.W dst:D3 src:(A6.L)+2c
    G.d[3].w(SUB<W>(G.d[3].w(), G.io->w(G.a[6] + 0x2c)));
    // 007896: ANDI.W dst:D3 src:#3f
    G.d[3].w(AND<W>(G.d[3].w(), 0x3f));
    // 00789a: SUB.W dst:D2 src:D3
    G.d[2].w(SUB<W>(G.d[2].w(), G.d[3].w()));
    // 00789c: ANDI.W dst:D2 src:#3f
    G.d[2].w(AND<W>(G.d[2].w(), 0x3f));
    // 0078a0: CMP.W dst:D2 src:(A6.L)+2c
    CMP<W>(G.d[2].w(), G.io->w(G.a[6] + 0x2c));
    // 0078a4: Bcc cond:HI src:(78e0)
    if (G.sr.check_condition(Condition::HI)) { goto L78e0; }
    // 0078a6: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, G.d[1].w());
    // 0078aa: ADDQ.W dst:D1 src:#2
    G.d[1].w(ADD<W>(G.d[1].w(), 2));
    // 0078ac: ANDI.W dst:D1 src:#3c
    G.d[1].w(AND<W>(G.d[1].w(), 0x3c));
    // 0078b0: MOVE.W dst:(A6.L)+36 src:D1
    G.io->w(G.a[6] + 0x36, G.d[1].w());
    // 0078b4: MOVE.W dst:D0 src:(A6.L)+36
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x36)));
    // 0078b8: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 0078bc: LEA.L dst:A0 src:(a89a)
    G.a[0] = 0xa89a;
    // 0078c2: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0078c4: MOVE.L dst:D0 src:(A0.L)+8
    G.d[0].l(G.io->l(G.a[0] + 8));
    // 0078c8: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 0078cc: Bcc cond:EQ src:(78e0)
    if (G.sr.check_condition(Condition::EQ)) { goto L78e0; }
    // 0078ce: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 0078d2: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 0078d4: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 0078d8: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 0078da: BSR src:(5ac2)
    F5ac2();
    // 0078de: Bcc cond:True src:(78ea)
    goto L78ea;

  L78e0:;
    // 0078e0: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 0078e2: LEA.L dst:A2 src:(A6.L)+5e
    G.a[2] = G.a[6] + 0x5e;
    // 0078e6: BSR src:(5ae2)
    F5ae2();

  L78ea:;
    // 0078ea: TST.W src:(A6.L)+54
    TST<W>(G.io->w(G.a[6] + 0x54));
    // 0078ee: Bcc cond:EQ src:(78f6)
    if (G.sr.check_condition(Condition::EQ)) { goto L78f6; }
    // 0078f0: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 0078f2: BSR src:(5ade)
    F5ade();

  L78f6:;
    // 0078f6: MOVEQ.L dst:D0 src:#22
    G.d[0].l(UCC(0x22));
    // 0078f8: BTST.B dst:(A6.L)+26 src:#2
    BTST<B>(G.io->b(G.a[6] + 0x26), 2);
    // 0078fe: Bcc cond:EQ src:(7902)
    if (G.sr.check_condition(Condition::EQ)) { goto L7902; }
    // 007900: MOVEQ.L dst:D0 src:#30
    G.d[0].l(UCC(0x30));

  L7902:;
    // 007902: SUB.W dst:D0 src:(ff006e)
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 007908: LSL.W dst:D0 src:#1
    G.d[0].w(LSL<W>(G.d[0].w(), 1));
    // 00790a: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 00790e: Bcc cond:CC src:(7956)
    if (G.sr.check_condition(Condition::CC)) { goto L7956; }
    // 007910: BTST.B dst:(A6.L)+26 src:#3
    BTST<B>(G.io->b(G.a[6] + 0x26), 3);
    // 007916: Bcc cond:NE src:(7922)
    if (G.sr.check_condition(Condition::NE)) { goto L7922; }
    // 007918: BSR src:(6658)
    F6658();
    // 00791c: CMP.W dst:D1 src:(A6.L)+8
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 8));
    // 007920: Bcc cond:NE src:(7956)
    if (G.sr.check_condition(Condition::NE)) { goto L7956; }

  L7922:;
    // 007922: MOVE.W dst:(A6.L)+3e src:#0
    G.io->w(G.a[6] + 0x3e, UCC(0));
    // 007928: LEA.L dst:A0 src:(7964)
    G.a[0] = 0x7964;
    // 00792e: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 007932: ADDA.W dst:A0 src:(A6.L)+36
    G.a[0] = ADD<L>(G.a[0], G.io->w(G.a[6] + 0x36));
    // 007936: MOVE.W dst:D3 src:(A0)+
    G.d[3].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 007938: MOVE.W dst:D4 src:(A0)
    G.d[4].w(UCC(G.io->w(G.a[0])));
    // 00793a: BTST.B dst:(A6.L)+26 src:#1
    BTST<B>(G.io->b(G.a[6] + 0x26), 1);
    // 007940: Bcc cond:EQ src:(7946)
    if (G.sr.check_condition(Condition::EQ)) { goto L7946; }
    // 007942: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));

  L7946:;
    // 007946: BTST.B dst:(A6.L)+26 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x26), 0);
    // 00794c: Bcc cond:EQ src:(7952)
    if (G.sr.check_condition(Condition::EQ)) { goto L7952; }
    // 00794e: ADD.W dst:D0 src:#2000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x2000));

  L7952:;
    // 007952: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  L7956:;
    // 007956: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F79a4()
  {
    _log_call(__func__);

    // 0079a4: LEA.L dst:A0 src:(7b58)
    G.a[0] = 0x7b58;
    // 0079aa: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 0079b0: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 0079b2: MOVE.W dst:(A6.L)+24 src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x24, G.io->w(G.a[0] + G.d[0].w()));
    // 0079b8: MOVE.W dst:(A6.L)+14 src:#ac00
    G.io->w(G.a[6] + 0x14, 0xac00);
    // 0079be: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 0079c2: AND.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 0079c6: ROL.W dst:D0 src:#7
    G.d[0].w(ROL<W>(G.d[0].w(), 7));
    // 0079c8: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, UCC(G.d[0].w()));
    // 0079cc: BSR src:(6820)
    F6820();
    // 0079d0: LEA.L dst:A0 src:(b29a)
    G.a[0] = 0xb29a;
    // 0079d6: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 0079da: MULU.W dst:D0 src:#12
    G.d[0].l(MULU(G.d[0].w(), 0x12));
    // 0079de: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0079e0: MOVE.W dst:D1 src:(A0)+
    G.d[1].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0079e2: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, G.d[1].w());
    // 0079e6: MOVE.W dst:(A6.L)+36 src:D1
    G.io->w(G.a[6] + 0x36, G.d[1].w());
    // 0079ea: MOVE.L dst:(A6.L)+2a src:(A0)+
    G.io->l(G.a[6] + 0x2a, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 0079ee: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 0079f2: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 0079f8: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0079fa: OR.W dst:(A1.L)+2 src:D0
    G.io->w(G.a[1] + 2, OR<W>(G.io->w(G.a[1] + 2), G.d[0].w()));
    // 0079fe: MOVE.W dst:(A1.L)+4 src:(A0)+
    G.io->w(G.a[1] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 007a02: MOVE.L dst:(A1.L)+a src:(A0)+
    G.io->l(G.a[1] + 10, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 007a06: MOVE.L dst:(A1.L)+6 src:(A0)
    G.io->l(G.a[1] + 6, G.io->l(G.a[0]));
    // 007a0a: MOVE.W dst:(A6.L)+3a src:#0
    G.io->w(G.a[6] + 0x3a, 0);
    // 007a10: MOVE.L dst:(A6.L)+3c src:#0
    G.io->l(G.a[6] + 0x3c, 0);
    // 007a18: MOVE.W dst:D1 src:(A6.L)+36
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x36)));
    // 007a1c: MULU.W dst:D1 src:#3
    G.d[1].l(MULU(G.d[1].w(), 3));
    // 007a20: LEA.L dst:A0 src:(a95a)
    G.a[0] = 0xa95a;
    // 007a26: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 007a28: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 007a2a: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 007a2e: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007a30: Bcc cond:True src:(5ac2)
    F5ac2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7a34()
  {
    _log_call(__func__);

    // 007a34: BSR src:(6858)
    F6858();
    // 007a38: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 007a3c: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 007a40: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 007a44: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 007a48: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 007a4c: Bcc cond:EQ src:(7a5a)
    if (G.sr.check_condition(Condition::EQ)) { goto L7a5a; }
    // 007a4e: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 007a52: CMP.W dst:D0 src:(A6.L)+24
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x24));
    // 007a56: Bcc cond:CC src:(736a)
    if (G.sr.check_condition(Condition::CC)) {
      F736a();
      goto end;
    }

  L7a5a:;
    // 007a5a: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 007a5e: ADDI.W dst:D0 src:#800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x800));
    // 007a62: CMPI.W dst:D0 src:#b800
    CMP<W>(G.d[0].w(), 0xb800);
    // 007a66: Bcc cond:HI src:(50a0)
    if (G.sr.check_condition(Condition::HI)) {
      F50a0();
      goto end;
    }
    // 007a6a: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 007a6e: ADDQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, ADD<W>(G.io->w(G.a[6] + 0x3e), 1));
    // 007a72: MOVEQ.L dst:D0 src:#12
    G.d[0].l(0x12);
    // 007a74: SUB.W dst:D0 src:(ff006e)
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 007a7a: CMP.W dst:D0 src:(A6.L)+3c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3c));
    // 007a7e: Bcc cond:CC src:(7ae0)
    if (G.sr.check_condition(Condition::CC)) { goto L7ae0; }
    // 007a80: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, 0);
    // 007a86: MOVEQ.L dst:D4 src:#4
    G.d[4].l(UCC(4));
    // 007a88: BSR src:(66e2)
    F66e2();
    // 007a8c: ANDI.W dst:D1 src:#fffc
    G.d[1].w(AND<W>(G.d[1].w(), 0xfffc));
    // 007a90: MOVE.W dst:D2 src:D1
    G.d[2].w(G.d[1].w());
    // 007a92: MOVE.W dst:D3 src:(A6.L)+2a
    G.d[3].w(G.io->w(G.a[6] + 0x2a));
    // 007a96: SUB.W dst:D3 src:(A6.L)+2c
    G.d[3].w(SUB<W>(G.d[3].w(), G.io->w(G.a[6] + 0x2c)));
    // 007a9a: ANDI.W dst:D3 src:#3f
    G.d[3].w(AND<W>(G.d[3].w(), 0x3f));
    // 007a9e: SUB.W dst:D2 src:D3
    G.d[2].w(SUB<W>(G.d[2].w(), G.d[3].w()));
    // 007aa0: ANDI.W dst:D2 src:#3f
    G.d[2].w(AND<W>(G.d[2].w(), 0x3f));
    // 007aa4: CMP.W dst:D2 src:(A6.L)+2c
    CMP<W>(G.d[2].w(), G.io->w(G.a[6] + 0x2c));
    // 007aa8: Bcc cond:HI src:(7ae0)
    if (G.sr.check_condition(Condition::HI)) { goto L7ae0; }
    // 007aaa: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, G.d[1].w());
    // 007aae: ADDQ.W dst:D1 src:#2
    G.d[1].w(ADD<W>(G.d[1].w(), 2));
    // 007ab0: ANDI.W dst:D1 src:#3c
    G.d[1].w(AND<W>(G.d[1].w(), 0x3c));
    // 007ab4: MOVE.W dst:(A6.L)+36 src:D1
    G.io->w(G.a[6] + 0x36, UCC(G.d[1].w()));
    // 007ab8: MULU.W dst:D1 src:#3
    G.d[1].l(MULU(G.d[1].w(), 3));
    // 007abc: LEA.L dst:A0 src:(a95a)
    G.a[0] = 0xa95a;
    // 007ac2: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 007ac4: MOVE.L dst:D0 src:(A0.L)+8
    G.d[0].l(G.io->l(G.a[0] + 8));
    // 007ac8: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 007acc: Bcc cond:EQ src:(7ae0)
    if (G.sr.check_condition(Condition::EQ)) { goto L7ae0; }
    // 007ace: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 007ad2: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 007ad4: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 007ad8: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007ada: BSR src:(5ac2)
    F5ac2();
    // 007ade: Bcc cond:True src:(7aea)
    goto L7aea;

  L7ae0:;
    // 007ae0: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007ae2: LEA.L dst:A2 src:(A6.L)+5e
    G.a[2] = G.a[6] + 0x5e;
    // 007ae6: BSR src:(5ae2)
    F5ae2();

  L7aea:;
    // 007aea: TST.W src:(A6.L)+54
    TST<W>(G.io->w(G.a[6] + 0x54));
    // 007aee: Bcc cond:EQ src:(7af6)
    if (G.sr.check_condition(Condition::EQ)) { goto L7af6; }
    // 007af0: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007af2: BSR src:(5ade)
    F5ade();

  L7af6:;
    // 007af6: MOVEQ.L dst:D0 src:#38
    G.d[0].l(UCC(0x38));
    // 007af8: BTST.B dst:(A6.L)+26 src:#2
    BTST<B>(G.io->b(G.a[6] + 0x26), 2);
    // 007afe: Bcc cond:EQ src:(7b02)
    if (G.sr.check_condition(Condition::EQ)) { goto L7b02; }
    // 007b00: MOVEQ.L dst:D0 src:#3f
    G.d[0].l(UCC(0x3f));

  L7b02:;
    // 007b02: SUB.W dst:D0 src:(ff006e)
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 007b08: LSL.W dst:D0 src:#1
    G.d[0].w(LSL<W>(G.d[0].w(), 1));
    // 007b0a: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 007b0e: Bcc cond:CC src:(7b56)
    if (G.sr.check_condition(Condition::CC)) { goto L7b56; }
    // 007b10: BTST.B dst:(A6.L)+26 src:#3
    BTST<B>(G.io->b(G.a[6] + 0x26), 3);
    // 007b16: Bcc cond:NE src:(7b22)
    if (G.sr.check_condition(Condition::NE)) { goto L7b22; }
    // 007b18: BSR src:(6658)
    F6658();
    // 007b1c: CMP.W dst:D1 src:(A6.L)+8
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 8));
    // 007b20: Bcc cond:NE src:(7b56)
    if (G.sr.check_condition(Condition::NE)) { goto L7b56; }

  L7b22:;
    // 007b22: MOVE.W dst:(A6.L)+3e src:#0
    G.io->w(G.a[6] + 0x3e, UCC(0));
    // 007b28: LEA.L dst:A0 src:(7b64)
    G.a[0] = 0x7b64;
    // 007b2e: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 007b32: ADDA.W dst:A0 src:(A6.L)+36
    G.a[0] = ADD<L>(G.a[0], G.io->w(G.a[6] + 0x36));
    // 007b36: MOVE.W dst:D3 src:(A0)+
    G.d[3].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 007b38: MOVE.W dst:D4 src:(A0)
    G.d[4].w(UCC(G.io->w(G.a[0])));
    // 007b3a: BTST.B dst:(A6.L)+26 src:#1
    BTST<B>(G.io->b(G.a[6] + 0x26), 1);
    // 007b40: Bcc cond:EQ src:(7b46)
    if (G.sr.check_condition(Condition::EQ)) { goto L7b46; }
    // 007b42: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));

  L7b46:;
    // 007b46: BTST.B dst:(A6.L)+26 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x26), 0);
    // 007b4c: Bcc cond:EQ src:(7b52)
    if (G.sr.check_condition(Condition::EQ)) { goto L7b52; }
    // 007b4e: ADD.W dst:D0 src:#2000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x2000));

  L7b52:;
    // 007b52: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  L7b56:;
    // 007b56: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7ba4()
  {
    _log_call(__func__);

    // 007ba4: BSR src:(4f86)
    F4f86();
    // 007ba8: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 007bb0: Bcc cond:CS src:(7bb4)
    if (G.sr.check_condition(Condition::CS)) { goto L7bb4; }
    // 007bb2: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));

  L7bb4:;
    // 007bb4: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, UCC(G.d[0].w()));
    // 007bb8: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 007bbe: ROL.W dst:D0 src:#7
    G.d[0].w(ROL<W>(G.d[0].w(), 7));
    // 007bc0: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, UCC(G.d[0].w()));
    // 007bc4: ROL.W dst:D1 src:#7
    G.d[1].w(ROL<W>(G.d[1].w(), 7));
    // 007bc6: MOVE.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, G.d[1].w());
    // 007bca: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, 0x30);
    // 007bd0: MOVE.W dst:(A6.L)+36 src:#30
    G.io->w(G.a[6] + 0x36, 0x30);
    // 007bd6: MOVE.L dst:(A6.L)+2a src:#3f
    G.io->l(G.a[6] + 0x2a, 0x3f);
    // 007bde: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 007be4: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 007be8: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 007bea: MOVE.W dst:(A6.L)+3e src:D0
    G.io->w(G.a[6] + 0x3e, G.d[0].w());
    // 007bee: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(UCC(G.io->w(G.a[6] + 8)));
    // 007bf2: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 007bf6: LEA.L dst:A0 src:(a89a)
    G.a[0] = 0xa89a;
    // 007bfc: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 007bfe: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007c00: Bcc cond:True src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7c04()
  {
    _log_call(__func__);

    // 007c04: BSR src:(6858)
    F6858();
    // 007c08: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 007c0c: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 007c10: CMPI.W dst:(ff0042) src:#1
    CMP<W>(G.io->w(0xff0042), 1);
    // 007c18: Bcc cond:EQ src:(50a0)
    if (G.sr.check_condition(Condition::EQ)) {
      F50a0();
      goto end;
    }
    // 007c1c: CMPI.W dst:(ff0042) src:#2
    CMP<W>(G.io->w(0xff0042), 2);
    // 007c24: Bcc cond:EQ src:(7cfe)
    if (G.sr.check_condition(Condition::EQ)) { goto L7cfe; }
    // 007c28: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 007c2c: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 007c30: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 007c34: Bcc cond:EQ src:(7c42)
    if (G.sr.check_condition(Condition::EQ)) { goto L7c42; }
    // 007c36: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 007c3a: CMP.W dst:D0 src:(A6.L)+24
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x24));
    // 007c3e: Bcc cond:CC src:(736a)
    if (G.sr.check_condition(Condition::CC)) {
      F736a();
      goto end;
    }

  L7c42:;
    // 007c42: ADDQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, ADD<W>(G.io->w(G.a[6] + 0x3e), 1));
    // 007c46: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 007c4c: AND.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 007c50: Bcc cond:NE src:(7cbe)
    if (G.sr.check_condition(Condition::NE)) { goto L7cbe; }
    // 007c52: MOVEQ.L dst:D4 src:#4
    G.d[4].l(UCC(4));
    // 007c54: BSR src:(66e2)
    F66e2();
    // 007c58: MOVE.W dst:D2 src:D1
    G.d[2].w(G.d[1].w());
    // 007c5a: MOVE.W dst:D3 src:(A6.L)+2a
    G.d[3].w(G.io->w(G.a[6] + 0x2a));
    // 007c5e: SUB.W dst:D3 src:(A6.L)+2c
    G.d[3].w(SUB<W>(G.d[3].w(), G.io->w(G.a[6] + 0x2c)));
    // 007c62: ANDI.W dst:D3 src:#3f
    G.d[3].w(AND<W>(G.d[3].w(), 0x3f));
    // 007c66: MOVE.W dst:D4 src:(A6.L)+2a
    G.d[4].w(G.io->w(G.a[6] + 0x2a));
    // 007c6a: ADDQ.W dst:D4 src:#1
    G.d[4].w(ADD<W>(G.d[4].w(), 1));
    // 007c6c: SUB.W dst:D3 src:D4
    G.d[3].w(SUB<W>(G.d[3].w(), G.d[4].w()));
    // 007c6e: SUB.W dst:D2 src:D4
    G.d[2].w(SUB<W>(G.d[2].w(), G.d[4].w()));
    // 007c70: CMP.W dst:D3 src:D2
    CMP<W>(G.d[3].w(), G.d[2].w());
    // 007c72: Bcc cond:HI src:(7cbe)
    if (G.sr.check_condition(Condition::HI)) { goto L7cbe; }
    // 007c74: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, G.d[1].w());
    // 007c78: ADDQ.W dst:D1 src:#2
    G.d[1].w(ADD<W>(G.d[1].w(), 2));
    // 007c7a: ANDI.W dst:D1 src:#3c
    G.d[1].w(AND<W>(G.d[1].w(), 0x3c));
    // 007c7e: MOVE.W dst:(A6.L)+36 src:D1
    G.io->w(G.a[6] + 0x36, G.d[1].w());
    // 007c82: MOVE.W dst:D0 src:D1
    G.d[0].w(UCC(G.d[1].w()));
    // 007c84: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 007c88: LEA.L dst:A0 src:(a89a)
    G.a[0] = 0xa89a;
    // 007c8e: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 007c90: MOVE.L dst:D0 src:(A0.L)+8
    G.d[0].l(G.io->l(G.a[0] + 8));
    // 007c94: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 007c98: Bcc cond:EQ src:(7cbe)
    if (G.sr.check_condition(Condition::EQ)) { goto L7cbe; }
    // 007c9a: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 007c9e: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 007ca4: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 007ca8: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 007caa: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 007cae: MOVE.W dst:(A6.L)+12 src:(A0)+
    G.io->w(G.a[6] + 0x12, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 007cb2: MOVE.L dst:(A6.L)+20 src:(A0)+
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 007cb6: MOVE.L dst:D1 src:(A0)
    G.d[1].l(G.io->l(G.a[0]));
    // 007cb8: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 007cba: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L7cbe:;
    // 007cbe: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 007cc2: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 007cc8: ADD.W dst:D0 src:(ff006e)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 007cce: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 007cd0: SUB.W dst:D0 src:#a0
    G.d[0].w(SUB<W>(G.d[0].w(), 0xa0));
    // 007cd4: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 007cd6: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 007cda: Bcc cond:CC src:(7cfc)
    if (G.sr.check_condition(Condition::CC)) { goto L7cfc; }
    // 007cdc: MOVE.W dst:(A6.L)+3e src:#0
    G.io->w(G.a[6] + 0x3e, UCC(0));
    // 007ce2: LEA.L dst:A0 src:(7964)
    G.a[0] = 0x7964;
    // 007ce8: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 007cec: ADD.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 007cf0: ADDA.W dst:A0 src:(A6.L)+36
    G.a[0] = ADD<L>(G.a[0], G.io->w(G.a[6] + 0x36));
    // 007cf4: MOVE.W dst:D3 src:(A0)+
    G.d[3].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 007cf6: MOVE.W dst:D4 src:(A0)
    G.d[4].w(UCC(G.io->w(G.a[0])));
    // 007cf8: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  L7cfc:;
    // 007cfc: RTS
    goto end;

  L7cfe:;
    // 007cfe: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, UCC(0));
    // 007d02: Bcc cond:True src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7d06()
  {
    _log_call(__func__);

    // 007d06: MOVE.W dst:(A6.L)+30 src:#1d4c
    G.io->w(G.a[6] + 0x30, UCC(0x1d4c));
    // 007d0c: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 007d12: ROL.W dst:D0 src:#7
    G.d[0].w(ROL<W>(G.d[0].w(), 7));
    // 007d14: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, UCC(G.d[0].w()));
    // 007d18: ROL.W dst:D1 src:#7
    G.d[1].w(ROL<W>(G.d[1].w(), 7));
    // 007d1a: MOVE.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, UCC(G.d[1].w()));
    // 007d1e: LEA.L dst:A0 src:(ac92)
    G.a[0] = 0xac92;
    // 007d24: MOVE.L dst:D1 src:(A0)
    G.d[1].l(G.io->l(G.a[0]));
    // 007d26: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 007d2c: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 007d30: ORI.W dst:(A6.L)+10 src:#2000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x2000));
    // 007d36: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 007d38: Bcc cond:True src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7d3c()
  {
    _log_call(__func__);

    // 007d3c: CMPI.W dst:(ff0042) src:#1
    CMP<W>(G.io->w(0xff0042), 1);
    // 007d44: Bcc cond:EQ src:(50a0)
    if (G.sr.check_condition(Condition::EQ)) {
      F50a0();
      goto end;
    }
    // 007d48: CMPI.W dst:(ff0042) src:#2
    CMP<W>(G.io->w(0xff0042), 2);
    // 007d50: Bcc cond:EQ src:(50a0)
    if (G.sr.check_condition(Condition::EQ)) {
      F50a0();
      goto end;
    }
    // 007d54: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 007d58: BSR src:(6858)
    F6858();
    // 007d5c: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 007d64: Bcc cond:NE src:(7d84)
    if (G.sr.check_condition(Condition::NE)) { goto L7d84; }
    // 007d66: SUBQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), 1));
    // 007d6a: CMPI.W dst:(A6.L)+30 src:#ea6
    CMP<W>(G.io->w(G.a[6] + 0x30), 0xea6);
    // 007d70: Bcc cond:NE src:(5984)
    if (G.sr.check_condition(Condition::NE)) {
      _m->update_sprite_with_something(G.a[6]);
      goto end;
    }
    // 007d74: CLR.W dst:(A6.L)+34
    G.io->w(G.a[6] + 0x34, UCC(0));
    // 007d78: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 007d80: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L7d84:;
    // 007d84: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 007d8c: Bcc cond:NE src:(7e38)
    if (G.sr.check_condition(Condition::NE)) { goto L7e38; }
    // 007d90: SUBQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), 1));
    // 007d94: Bcc cond:EQ src:(7e28)
    if (G.sr.check_condition(Condition::EQ)) { goto L7e28; }
    // 007d98: ADDQ.W dst:(A6.L)+34 src:#1
    G.io->w(G.a[6] + 0x34, ADD<W>(G.io->w(G.a[6] + 0x34), 1));
    // 007d9c: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(G.io->w(G.a[6] + 0x34));
    // 007da0: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 007da4: MOVE.W dst:D6 src:D0
    G.d[6].w(UCC(G.d[0].w()));
    // 007da6: CMP.W dst:D0 src:#20
    CMP<W>(G.d[0].w(), 0x20);
    // 007daa: Bcc cond:CS src:(7db0)
    if (G.sr.check_condition(Condition::CS)) { goto L7db0; }
    // 007dac: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L7db0:;
    // 007db0: BTST.L dst:D0 src:#0
    BTST<L>(G.d[0].l(), 0);
    // 007db4: Bcc cond:NE src:(7df2)
    if (G.sr.check_condition(Condition::NE)) { goto L7df2; }
    // 007db6: MOVE.W dst:D7 src:#2000
    G.d[7].w(0x2000);
    // 007dba: SUBI.W dst:D0 src:#10
    G.d[0].w(SUB<W>(G.d[0].w(), 0x10));
    // 007dbe: Bcc cond:CC src:(7dcc)
    if (G.sr.check_condition(Condition::CC)) { goto L7dcc; }
    // 007dc0: BTST.L dst:D0 src:#1
    BTST<L>(G.d[0].l(), 1);
    // 007dc4: Bcc cond:EQ src:(7de6)
    if (G.sr.check_condition(Condition::EQ)) { goto L7de6; }
    // 007dc6: MOVE.W dst:D7 src:#0
    G.d[7].w(UCC(0));
    // 007dca: Bcc cond:True src:(7de6)
    goto L7de6;

  L7dcc:;
    // 007dcc: LSL.W dst:D0 src:#1
    G.d[0].w(LSL<W>(G.d[0].w(), 1));
    // 007dce: LEA.L dst:A0 src:(ac92)
    G.a[0] = 0xac92;
    // 007dd4: MOVE.L dst:D1 src:(A0,D0.W)+0
    G.d[1].l(G.io->l(G.a[0] + G.d[0].w()));
    // 007dd8: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 007ddc: ANDI.W dst:D2 src:#7ff
    G.d[2].w(AND<W>(G.d[2].w(), 0x7ff));
    // 007de0: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 007de2: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L7de6:;
    // 007de6: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 007dec: OR.W dst:(A6.L)+10 src:D7
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[7].w()));
    // 007df0: Bcc cond:True src:(7df6)
    goto L7df6;

  L7df2:;
    // 007df2: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);

  L7df6:;
    // 007df6: CMP.W dst:D6 src:#18
    CMP<W>(G.d[6].w(), 0x18);
    // 007dfa: Bcc cond:NE src:(7e24)
    if (G.sr.check_condition(Condition::NE)) { goto L7e24; }
    // 007dfe: BSR src:(6658)
    F6658();
    // 007e02: ADD.W dst:D1 src:#fff8
    G.d[1].w(ADD<W>(G.d[1].w(), 0xfff8));
    // 007e06: MOVE.W dst:(A6.L)+32 src:D1
    G.io->w(G.a[6] + 0x32, G.d[1].w());
    // 007e0a: MOVEQ.L dst:D6 src:#4
    G.d[6].l(UCC(4));

  L7e0c:;
    // 007e0c: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 007e10: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 007e14: ADD.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 007e18: BSR src:(6b1c)
    F6b1c();
    // 007e1c: ADDQ.W dst:(A6.L)+32 src:#4
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 4));
    // 007e20: DBcc.W cond:False dst:D6 src:(7e0c)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L7e0c; }

  L7e24:;
    // 007e24: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L7e28:;
    // 007e28: BSET.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 2));
    // 007e30: CLR.W dst:(A6.L)+34
    G.io->w(G.a[6] + 0x34, UCC(0));
    // 007e34: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L7e38:;
    // 007e38: ADDQ.W dst:(A6.L)+34 src:#1
    G.io->w(G.a[6] + 0x34, ADD<W>(G.io->w(G.a[6] + 0x34), 1));
    // 007e3c: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(G.io->w(G.a[6] + 0x34));
    // 007e40: AND.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 007e44: MOVE.W dst:D6 src:D0
    G.d[6].w(UCC(G.d[0].w()));
    // 007e46: Bcc cond:True src:(7db0)
    goto L7db0;

  end:
    _log_ret(__func__);
  }

  void F7e4a()
  {
    _log_call(__func__);

    // 007e4a: BSR src:(4f86)
    F4f86();
    // 007e4e: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 007e56: Bcc cond:CS src:(7e5a)
    if (G.sr.check_condition(Condition::CS)) { goto L7e5a; }
    // 007e58: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));

  L7e5a:;
    // 007e5a: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 007e5e: MOVE.L dst:(A6.L)+14 src:#aa003800
    G.io->l(G.a[6] + 0x14, 0xaa003800);
    // 007e66: MOVE.W dst:(A6.L)+8 src:#c
    G.io->w(G.a[6] + 8, 12);
    // 007e6c: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 007e72: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 007e76: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 007e78: SUB.W dst:(A6.L)+8 src:D0
    G.io->w(G.a[6] + 8, SUB<W>(G.io->w(G.a[6] + 8), G.d[0].w()));
    // 007e7c: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 007e80: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 007e86: ORI.W dst:(A0.L)+2 src:#2000
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), 0x2000));
    // 007e8c: MOVE.W dst:(A0.L)+4 src:#f10
    G.io->w(G.a[0] + 4, 0xf10);
    // 007e92: MOVE.L dst:(A0.L)+6 src:#f6000000
    G.io->l(G.a[0] + 6, 0xf6000000);
    // 007e9a: MOVE.L dst:(A0.L)+a src:#48bc0
    G.io->l(G.a[0] + 10, UCC(0x48bc0));
    // 007ea2: BSR src:(6820)
    F6820();
    // 007ea6: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007ea8: BSR src:(5ade)
    F5ade();
    // 007eac: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(UCC(G.io->w(G.a[6] + 8)));
    // 007eb0: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 007eb4: LEA.L dst:A0 src:(a89a)
    G.a[0] = 0xa89a;
    // 007eba: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 007ebc: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 007ec0: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 007ec2: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007ec4: Bcc cond:True src:(5ac2)
    F5ac2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7ec8()
  {
    _log_call(__func__);

    // 007ec8: BSR src:(6858)
    F6858();
    // 007ecc: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 007ed0: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 007ed4: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 007ed8: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 007edc: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 007ee0: Bcc cond:EQ src:(7eee)
    if (G.sr.check_condition(Condition::EQ)) { goto L7eee; }
    // 007ee2: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 007ee6: CMP.W dst:D0 src:(A6.L)+24
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x24));
    // 007eea: Bcc cond:CC src:(736a)
    if (G.sr.check_condition(Condition::CC)) {
      F736a();
      goto end;
    }

  L7eee:;
    // 007eee: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 007ef2: ADDI.W dst:D0 src:#c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc00));
    // 007ef6: CMPI.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 007efa: Bcc cond:HI src:(50a0)
    if (G.sr.check_condition(Condition::HI)) {
      F50a0();
      goto end;
    }
    // 007efe: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 007f04: AND.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 007f08: Bcc cond:NE src:(7f3e)
    if (G.sr.check_condition(Condition::NE)) { goto L7f3e; }
    // 007f0a: BTST.B dst:(A6) src:#0
    BTST<B>(G.io->b(G.a[6]), 0);
    // 007f0e: Bcc cond:NE src:(7f28)
    if (G.sr.check_condition(Condition::NE)) { goto L7f28; }
    // 007f10: SUBQ.W dst:(A6.L)+8 src:#4
    G.io->w(G.a[6] + 8, SUB<W>(G.io->w(G.a[6] + 8), 4));
    // 007f14: ANDI.W dst:(A6.L)+8 src:#3c
    G.io->w(G.a[6] + 8, AND<W>(G.io->w(G.a[6] + 8), 0x3c));
    // 007f1a: CMPI.W dst:(A6.L)+8 src:#34
    CMP<W>(G.io->w(G.a[6] + 8), 0x34);
    // 007f20: Bcc cond:NE src:(7f3e)
    if (G.sr.check_condition(Condition::NE)) { goto L7f3e; }
    // 007f22: EORI.W dst:(A6) src:#100
    G.io->w(G.a[6], EOR<W>(G.io->w(G.a[6]), 0x100));
    // 007f26: Bcc cond:True src:(7f3e)
    goto L7f3e;

  L7f28:;
    // 007f28: ADDQ.W dst:(A6.L)+8 src:#4
    G.io->w(G.a[6] + 8, ADD<W>(G.io->w(G.a[6] + 8), 4));
    // 007f2c: ANDI.W dst:(A6.L)+8 src:#3c
    G.io->w(G.a[6] + 8, AND<W>(G.io->w(G.a[6] + 8), 0x3c));
    // 007f32: CMPI.W dst:(A6.L)+8 src:#c
    CMP<W>(G.io->w(G.a[6] + 8), 12);
    // 007f38: Bcc cond:NE src:(7f3e)
    if (G.sr.check_condition(Condition::NE)) { goto L7f3e; }
    // 007f3a: EORI.W dst:(A6) src:#100
    G.io->w(G.a[6], EOR<W>(G.io->w(G.a[6]), 0x100));

  L7f3e:;
    // 007f3e: CMP.W dst:D0 src:#8
    CMP<W>(G.d[0].w(), 8);
    // 007f42: Bcc cond:NE src:(7f5e)
    if (G.sr.check_condition(Condition::NE)) { goto L7f5e; }
    // 007f44: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 007f48: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 007f4c: LEA.L dst:A0 src:(7964)
    G.a[0] = 0x7964;
    // 007f52: ADDA.W dst:A0 src:(A6.L)+8
    G.a[0] = ADD<L>(G.a[0], G.io->w(G.a[6] + 8));
    // 007f56: MOVE.W dst:D3 src:(A0)+
    G.d[3].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 007f58: MOVE.W dst:D4 src:(A0)
    G.d[4].w(UCC(G.io->w(G.a[0])));
    // 007f5a: BSR src:(6b12)
    F6b12();

  L7f5e:;
    // 007f5e: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(UCC(G.io->w(G.a[6] + 8)));
    // 007f62: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 007f66: LEA.L dst:A0 src:(a89a)
    G.a[0] = 0xa89a;
    // 007f6c: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 007f6e: MOVE.L dst:D0 src:(A0.L)+8
    G.d[0].l(G.io->l(G.a[0] + 8));
    // 007f72: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 007f76: Bcc cond:EQ src:(7f8a)
    if (G.sr.check_condition(Condition::EQ)) { goto L7f8a; }
    // 007f78: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 007f7c: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 007f7e: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 007f82: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007f84: BSR src:(5ac2)
    F5ac2();
    // 007f88: Bcc cond:True src:(7f94)
    goto L7f94;

  L7f8a:;
    // 007f8a: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007f8c: LEA.L dst:A2 src:(A6.L)+5e
    G.a[2] = G.a[6] + 0x5e;
    // 007f90: BSR src:(5ae2)
    F5ae2();

  L7f94:;
    // 007f94: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 007f96: Bcc cond:True src:(5ade)
    F5ade();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F7f9a()
  {
    _log_call(__func__);

    // 007f9a: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 007fa0: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 007fa6: BSR src:(4f86)
    F4f86();
    // 007faa: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 007fb2: Bcc cond:CS src:(7fb6)
    if (G.sr.check_condition(Condition::CS)) { goto L7fb6; }
    // 007fb4: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));

  L7fb6:;
    // 007fb6: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 007fba: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 007fbe: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));
    // 007fc0: LEA.L dst:A0 src:(813e)
    G.a[0] = 0x813e;
    // 007fc6: MOVE.L dst:(A6.L)+32 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x32, G.io->l(G.a[0] + G.d[0].w()));
    // 007fcc: MOVE.W dst:(A6.L)+3a src:#0
    G.io->w(G.a[6] + 0x3a, 0);
    // 007fd2: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 007fd8: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 007fdc: ASL.W dst:D0 src:#6
    G.d[0].w(ASL<W>(G.d[0].w(), 6));
    // 007fde: MOVE.W dst:(A6.L)+3c src:D0
    G.io->w(G.a[6] + 0x3c, G.d[0].w());
    // 007fe2: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 007fe8: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 007fea: MOVE.W dst:D1 src:(ff006e)
    G.d[1].w(UCC(G.io->w(0xff006e)));
    // 007ff0: ASL.W dst:D1 src:#2
    G.d[1].w(ASL<W>(G.d[1].w(), 2));
    // 007ff2: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 007ff4: SUB.W dst:D0 src:#f0
    G.d[0].w(SUB<W>(G.d[0].w(), 0xf0));
    // 007ff8: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 007ffa: MOVE.W dst:(A6.L)+3e src:D0
    G.io->w(G.a[6] + 0x3e, UCC(G.d[0].w()));
    // 007ffe: LEA.L dst:A0 src:(ad02)
    G.a[0] = 0xad02;
    // 008004: MOVE.L dst:D1 src:(A0)
    G.d[1].l(G.io->l(G.a[0]));
    // 008006: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00800c: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 008010: ORI.W dst:(A6.L)+10 src:#4000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x4000));
    // 008016: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 008018: Bcc cond:True src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F801c()
  {
    _log_call(__func__);

    // 00801c: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 008024: Bcc cond:NE src:(50a0)
    if (G.sr.check_condition(Condition::NE)) {
      F50a0();
      goto end;
    }
    // 008028: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 008030: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 008034: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 008038: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00803c: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 008042: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 008048: MOVEM.W src:(A6.L)+32 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x32));
    G.d[1].l(G.io->w(G.a[6] + 0x34));
    // 00804e: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 008052: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 008056: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00805a: Bcc cond:MI src:(8134)
    if (G.sr.check_condition(Condition::MI)) { goto L8134; }
    // 00805e: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 008062: Bcc cond:EQ src:(8070)
    if (G.sr.check_condition(Condition::EQ)) { goto L8070; }
    // 008064: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 008068: CMP.W dst:D0 src:(A6.L)+24
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x24));
    // 00806c: Bcc cond:CC src:(8134)
    if (G.sr.check_condition(Condition::CC)) { goto L8134; }

  L8070:;
    // 008070: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 008074: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 008078: MOVE.W dst:D1 src:(A6.L)+3e
    G.d[1].w(G.io->w(G.a[6] + 0x3e));
    // 00807c: MOVE.W dst:D2 src:(ff0044)
    G.d[2].w(G.io->w(0xff0044));
    // 008082: AND.W dst:D2 src:#3
    G.d[2].w(AND<W>(G.d[2].w(), 3));
    // 008086: ASL.W dst:D2 src:#5
    G.d[2].w(ASL<W>(G.d[2].w(), 5));
    // 008088: SUB.W dst:D1 src:D2
    G.d[1].w(SUB<W>(G.d[1].w(), G.d[2].w()));
    // 00808a: CMP.W dst:D0 src:D1
    CMP<W>(G.d[0].w(), G.d[1].w());
    // 00808c: Bcc cond:CS src:(8092)
    if (G.sr.check_condition(Condition::CS)) { goto L8092; }
    // 00808e: CLR.W dst:(A6.L)+3c
    G.io->w(G.a[6] + 0x3c, UCC(0));

  L8092:;
    // 008092: MOVE.W dst:D6 src:D0
    G.d[6].w(G.d[0].w());
    // 008094: AND.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 008098: CMP.W dst:D0 src:#20
    CMP<W>(G.d[0].w(), 0x20);
    // 00809c: Bcc cond:CS src:(80a2)
    if (G.sr.check_condition(Condition::CS)) { goto L80a2; }
    // 00809e: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L80a2:;
    // 0080a2: BTST.L dst:D0 src:#0
    BTST<L>(G.d[0].l(), 0);
    // 0080a6: Bcc cond:NE src:(80e4)
    if (G.sr.check_condition(Condition::NE)) { goto L80e4; }
    // 0080a8: MOVE.W dst:D7 src:#4000
    G.d[7].w(0x4000);
    // 0080ac: SUBI.W dst:D0 src:#10
    G.d[0].w(SUB<W>(G.d[0].w(), 0x10));
    // 0080b0: Bcc cond:CC src:(80be)
    if (G.sr.check_condition(Condition::CC)) { goto L80be; }
    // 0080b2: BTST.L dst:D0 src:#1
    BTST<L>(G.d[0].l(), 1);
    // 0080b6: Bcc cond:EQ src:(80d8)
    if (G.sr.check_condition(Condition::EQ)) { goto L80d8; }
    // 0080b8: MOVE.W dst:D7 src:#0
    G.d[7].w(UCC(0));
    // 0080bc: Bcc cond:True src:(80d8)
    goto L80d8;

  L80be:;
    // 0080be: LSL.W dst:D0 src:#1
    G.d[0].w(LSL<W>(G.d[0].w(), 1));
    // 0080c0: LEA.L dst:A0 src:(ad02)
    G.a[0] = 0xad02;
    // 0080c6: MOVE.L dst:D1 src:(A0,D0.W)+0
    G.d[1].l(G.io->l(G.a[0] + G.d[0].w()));
    // 0080ca: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 0080ce: ANDI.W dst:D2 src:#7ff
    G.d[2].w(AND<W>(G.d[2].w(), 0x7ff));
    // 0080d2: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 0080d4: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L80d8:;
    // 0080d8: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 0080de: OR.W dst:(A6.L)+10 src:D7
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[7].w()));
    // 0080e2: Bcc cond:True src:(80e8)
    goto L80e8;

  L80e4:;
    // 0080e4: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);

  L80e8:;
    // 0080e8: MOVE.W dst:D1 src:D6
    G.d[1].w(G.d[6].w());
    // 0080ea: AND.W dst:D1 src:#1f
    G.d[1].w(AND<W>(G.d[1].w(), 0x1f));
    // 0080ee: CMP.W dst:D1 src:#18
    CMP<W>(G.d[1].w(), 0x18);
    // 0080f2: Bcc cond:NE src:(8130)
    if (G.sr.check_condition(Condition::NE)) { goto L8130; }
    // 0080f6: BSR src:(6658)
    F6658();
    // 0080fa: MOVE.W dst:(A6.L)+36 src:D1
    G.io->w(G.a[6] + 0x36, G.d[1].w());
    // 0080fe: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 008100: ADD.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 008104: BSR src:(6b1c)
    F6b1c();
    // 008108: MOVE.W dst:D0 src:(A6.L)+36
    G.d[0].w(G.io->w(G.a[6] + 0x36));
    // 00810c: ADD.W dst:D0 src:#4
    G.d[0].w(ADD<W>(G.d[0].w(), 4));
    // 008110: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 008114: ADD.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 008118: BSR src:(6b1c)
    F6b1c();
    // 00811c: MOVE.W dst:D0 src:(A6.L)+36
    G.d[0].w(G.io->w(G.a[6] + 0x36));
    // 008120: ADD.W dst:D0 src:#fffc
    G.d[0].w(ADD<W>(G.d[0].w(), 0xfffc));
    // 008124: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 008128: ADD.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 00812c: BSR src:(6b1c)
    F6b1c();

  L8130:;
    // 008130: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L8134:;
    // 008134: ADDQ.W dst:(ff0044) src:#1
    G.io->w(0xff0044, ADD<W>(G.io->w(0xff0044), 1));
    // 00813a: Bcc cond:True src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F814a()
  {
    _log_call(__func__);

    // 00814a: BSR src:(50e6)
    F50e6();
    // 00814e: BSR src:(6820)
    F6820();
    // 008152: LEA.L dst:A0 src:(A6.L)+6c
    G.a[0] = G.a[6] + 0x6c;
    // 008156: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 00815c: ORI.W dst:(A0.L)+2 src:#0
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), 0));
    // 008162: MOVE.W dst:(A0.L)+4 src:#1
    G.io->w(G.a[0] + 4, 1);
    // 008168: MOVE.L dst:(A0.L)+a src:#5b740
    G.io->l(G.a[0] + 10, 0x5b740);
    // 008170: ANDI.W dst:(A0.L)+10 src:#7ff
    G.io->w(G.a[0] + 0x10, AND<W>(G.io->w(G.a[0] + 0x10), 0x7ff));
    // 008176: ORI.W dst:(A0.L)+10 src:#0
    G.io->w(G.a[0] + 0x10, OR<W>(G.io->w(G.a[0] + 0x10), 0));
    // 00817c: MOVE.W dst:(A0.L)+12 src:#1
    G.io->w(G.a[0] + 0x12, 1);
    // 008182: MOVE.L dst:(A0.L)+18 src:#5b740
    G.io->l(G.a[0] + 0x18, 0x5b740);
    // 00818a: CLR.L dst:(A6.L)+44
    G.io->l(G.a[6] + 0x44, 0);
    // 00818e: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 008194: CMP.W dst:D0 src:#2
    CMP<W>(G.d[0].w(), 2);
    // 008198: Bcc cond:CS src:(819c)
    if (G.sr.check_condition(Condition::CS)) { goto L819c; }
    // 00819a: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));

  L819c:;
    // 00819c: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));
    // 00819e: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 0081a4: Bcc cond:EQ src:(81a8)
    if (G.sr.check_condition(Condition::EQ)) { goto L81a8; }
    // 0081a6: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));

  L81a8:;
    // 0081a8: CMPI.W dst:(ff003e) src:#3
    CMP<W>(G.io->w(0xff003e), 3);
    // 0081b0: Bcc cond:CS src:(81b4)
    if (G.sr.check_condition(Condition::CS)) { goto L81b4; }
    // 0081b2: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));

  L81b4:;
    // 0081b4: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 0081b8: MOVE.W dst:D0 src:(ff006e)
    G.d[0].w(UCC(G.io->w(0xff006e)));
    // 0081be: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 0081c0: ADD.W dst:D0 src:(ff0844)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff0844)));
    // 0081c6: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 0081c8: MOVE.W dst:(A6.L)+30 src:#88
    G.io->w(G.a[6] + 0x30, 0x88);
    // 0081ce: SUB.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), G.d[0].w()));
    // 0081d2: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, 0);
    // 0081d6: MOVE.W dst:(A6.L)+38 src:#30
    G.io->w(G.a[6] + 0x38, UCC(0x30));
    // 0081dc: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F81de()
  {
    _log_call(__func__);

    // 0081de: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 0081e2: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 0081e6: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 0081ea: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 0081ee: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 0081f2: Bcc cond:EQ src:(8200)
    if (G.sr.check_condition(Condition::EQ)) { goto L8200; }
    // 0081f4: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 0081f8: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 0081fc: Bcc cond:CS src:(736a)
    if (G.sr.check_condition(Condition::CS)) {
      F736a();
      goto end;
    }

  L8200:;
    // 008200: BSR src:(675a)
    F675a();
    // 008204: Bcc cond:CS src:(820a)
    if (G.sr.check_condition(Condition::CS)) { goto L820a; }
    // 008206: Bcc cond:True src:(50a0)
    F50a0();
    goto end;

  L820a:;
    // 00820a: BSR src:(5114)
    F5114();
    // 00820e: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 008212: Bcc cond:NE src:(8218)
    if (G.sr.check_condition(Condition::NE)) { goto L8218; }
    // 008214: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  L8218:;
    // 008218: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00821e: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 008222: Bcc cond:NE src:(8242)
    if (G.sr.check_condition(Condition::NE)) { goto L8242; }
    // 008224: MOVE.W dst:-(USP) src:(A6.L)+8
    G.a[7] -= 2;
    G.io->w(G.a[7], G.io->w(G.a[6] + 8));
    // 008228: MOVE.W dst:(A6.L)+8 src:(A6.L)+38
    G.io->w(G.a[6] + 8, G.io->w(G.a[6] + 0x38));
    // 00822e: MOVEQ.L dst:D4 src:#4
    G.d[4].l(UCC(4));
    // 008230: BSR src:(66e2)
    F66e2();
    // 008234: ADDQ.W dst:D1 src:#2
    G.d[1].w(ADD<W>(G.d[1].w(), 2));
    // 008236: AND.W dst:D1 src:#3c
    G.d[1].w(AND<W>(G.d[1].w(), 0x3c));
    // 00823a: MOVE.W dst:(A6.L)+38 src:D1
    G.io->w(G.a[6] + 0x38, G.d[1].w());
    // 00823e: MOVE.W dst:(A6.L)+8 src:(USP)+
    G.io->w(G.a[6] + 8, UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  L8242:;
    // 008242: MOVE.W dst:D0 src:(A6.L)+38
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x38)));
    // 008246: MULU.W dst:D0 src:#6
    G.d[0].l(MULU(G.d[0].w(), 6));
    // 00824a: LEA.L dst:A0 src:(aa1a)
    G.a[0] = 0xaa1a;
    // 008250: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 008252: MOVE.L dst:D0 src:(A0.L)+8
    G.d[0].l(G.io->l(G.a[0] + 8));
    // 008256: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 00825a: Bcc cond:EQ src:(8268)
    if (G.sr.check_condition(Condition::EQ)) { goto L8268; }
    // 00825c: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 008260: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 008262: BSR src:(5abc)
    F5abc();
    // 008266: Bcc cond:True src:(826e)
    goto L826e;

  L8268:;
    // 008268: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00826a: BSR src:(5ade)
    F5ade();

  L826e:;
    // 00826e: LEA.L dst:A1 src:(A6.L)+6c
    G.a[1] = G.a[6] + 0x6c;
    // 008272: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 008274: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 00827c: Bcc cond:NE src:(8288)
    if (G.sr.check_condition(Condition::NE)) { goto L8288; }
    // 00827e: MOVE.L dst:A0 src:A1
    G.a[0] = G.a[1];
    // 008280: MOVE.W dst:D1 src:D7
    G.d[1].w(UCC(G.d[7].w()));
    // 008282: BSR src:(5b5e)
    F5b5e();
    // 008286: Bcc cond:True src:(82a4)
    goto L82a4;

  L8288:;
    // 008288: LEA.L dst:A0 src:(8320)
    G.a[0] = 0x8320;
    // 00828e: MOVE.W dst:D4 src:(A6.L)+38
    G.d[4].w(G.io->w(G.a[6] + 0x38));
    // 008292: ADDA.W dst:A0 src:D4
    G.a[0] = ADD<L>(G.a[0], G.d[4].w());
    // 008294: MOVE.L dst:(A1.L)+6 src:(A0)
    G.io->l(G.a[1] + 6, G.io->l(G.a[0]));
    // 008298: MOVE.L dst:(A1.L)+14 src:(A0.L)+40
    G.io->l(G.a[1] + 0x14, G.io->l(G.a[0] + 0x40));
    // 00829e: MOVE.L dst:A2 src:A1
    G.a[2] = UCC(G.a[1]);
    // 0082a0: BSR src:(5ae2)
    F5ae2();

  L82a4:;
    // 0082a4: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 0082a8: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 0082ac: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 0082b0: Bcc cond:CC src:(82de)
    if (G.sr.check_condition(Condition::CC)) { goto L82de; }
    // 0082b2: BSR src:(6658)
    F6658();
    // 0082b6: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 0082b8: ADDQ.W dst:D1 src:#2
    G.d[1].w(ADD<W>(G.d[1].w(), 2));
    // 0082ba: AND.W dst:D1 src:#3c
    G.d[1].w(AND<W>(G.d[1].w(), 0x3c));
    // 0082be: CMP.W dst:D1 src:(A6.L)+38
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x38));
    // 0082c2: Bcc cond:NE src:(82de)
    if (G.sr.check_condition(Condition::NE)) { goto L82de; }
    // 0082c4: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, 0);
    // 0082c8: MOVE.W dst:D1 src:(A6.L)+38
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x38)));
    // 0082cc: LEA.L dst:A0 src:(82e0)
    G.a[0] = 0x82e0;
    // 0082d2: MOVE.W dst:D3 src:(A0,D1.W)+0
    G.d[3].w(G.io->w(G.a[0] + G.d[1].w()));
    // 0082d6: MOVE.W dst:D4 src:(A0,D1.W)+2
    G.d[4].w(UCC(G.io->w(G.a[0] + G.d[1].w() + 2)));
    // 0082da: BSR src:(6b12)
    F6b12();

  L82de:;
    // 0082de: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F83a0()
  {
    _log_call(__func__);

    // 0083a0: BSR src:(50e6)
    F50e6();
    // 0083a4: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 0083a6: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 0083aa: LEA.L dst:A1 src:(abb2)
    G.a[1] = 0xabb2;
    // 0083b0: CMPI.W dst:(ff003e) src:#5
    CMP<W>(G.io->w(0xff003e), 5);
    // 0083b8: Bcc cond:NE src:(83c6)
    if (G.sr.check_condition(Condition::NE)) { goto L83c6; }
    // 0083ba: LEA.L dst:A1 src:(abea)
    G.a[1] = 0xabea;
    // 0083c0: SUBI.W dst:(A6.L)+1a src:#800
    G.io->w(G.a[6] + 0x1a, SUB<W>(G.io->w(G.a[6] + 0x1a), 0x800));

  L83c6:;
    // 0083c6: MOVE.W dst:D1 src:(A1)+
    G.d[1].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 0083c8: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 0083ce: OR.W dst:(A0.L)+2 src:D1
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[1].w()));
    // 0083d2: MOVE.W dst:(A0.L)+4 src:(A1)+
    G.io->w(G.a[0] + 4, UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 0083d6: MOVE.L dst:(A0.L)+6 src:(A1)+
    G.io->l(G.a[0] + 6, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 0083da: MOVE.L dst:(A0.L)+a src:(A1)+
    G.io->l(G.a[0] + 10, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 0083de: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 0083e2: DBcc.W cond:False dst:D0 src:(83c6)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L83c6; }
    // 0083e6: ADDI.W dst:(A6.L)+14 src:#800
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x800));
    // 0083ec: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 0083f0: Bcc cond:EQ src:(83fc)
    if (G.sr.check_condition(Condition::EQ)) { goto L83fc; }
    // 0083f2: MOVE.W dst:(A6.L)+6 src:#1
    G.io->w(G.a[6] + 6, UCC(1));
    // 0083f8: BSR src:(6820)
    F6820();

  L83fc:;
    // 0083fc: BSR src:(4f86)
    F4f86();
    // 008400: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 008408: Bcc cond:CS src:(840c)
    if (G.sr.check_condition(Condition::CS)) { goto L840c; }
    // 00840a: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));

  L840c:;
    // 00840c: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 008410: MOVE.W dst:D0 src:(ff006e)
    G.d[0].w(G.io->w(0xff006e));
    // 008416: ADD.W dst:D0 src:(ff0844)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff0844)));
    // 00841c: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00841e: MOVE.W dst:(A6.L)+30 src:#a8
    G.io->w(G.a[6] + 0x30, 0xa8);
    // 008424: SUB.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), G.d[0].w()));
    // 008428: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F842a()
  {
    _log_call(__func__);

    // 00842a: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00842e: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 008432: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 008436: Bcc cond:MI src:(8542)
    if (G.sr.check_condition(Condition::MI)) { goto L8542; }
    // 00843a: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00843e: Bcc cond:EQ src:(8452)
    if (G.sr.check_condition(Condition::EQ)) { goto L8452; }
    // 008440: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 008444: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 008448: Bcc cond:CS src:(8542)
    if (G.sr.check_condition(Condition::CS)) { goto L8542; }
    // 00844c: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 00844e: BSR src:(62d0)
    F62d0();

  L8452:;
    // 008452: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 008456: ADD.W dst:D0 src:#1000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1000));
    // 00845a: CMP.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 00845e: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 008462: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 008466: ADD.W dst:D0 src:#c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc00));
    // 00846a: CMP.W dst:D0 src:#8400
    CMP<W>(G.d[0].w(), 0x8400);
    // 00846e: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 008472: BSR src:(5114)
    F5114();
    // 008476: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 00847a: Bcc cond:NE src:(8480)
    if (G.sr.check_condition(Condition::NE)) { goto L8480; }
    // 00847c: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  L8480:;
    // 008480: CMPI.W dst:(ff003e) src:#5
    CMP<W>(G.io->w(0xff003e), 5);
    // 008488: Bcc cond:EQ src:(84a8)
    if (G.sr.check_condition(Condition::EQ)) { goto L84a8; }
    // 00848a: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 008490: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 008492: ANDI.W dst:D2 src:#3
    G.d[2].w(AND<W>(G.d[2].w(), 3));
    // 008496: Bcc cond:NE src:(84a8)
    if (G.sr.check_condition(Condition::NE)) { goto L84a8; }
    // 008498: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00849c: LEA.L dst:A0 src:(abca)
    G.a[0] = 0xabca;
    // 0084a2: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0084a4: MOVE.L dst:(A6.L)+5a src:(A0)
    G.io->l(G.a[6] + 0x5a, UCC(G.io->l(G.a[0])));

  L84a8:;
    // 0084a8: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 0084aa: BSR src:(5ade)
    F5ade();
    // 0084ae: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 0084b2: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 0084b6: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 0084ba: Bcc cond:CC src:(8540)
    if (G.sr.check_condition(Condition::CC)) { goto L8540; }
    // 0084be: EORI.W dst:(ff2aa2) src:#20
    G.io->w(0xff2aa2, EOR<W>(G.io->w(0xff2aa2), 0x20));
    // 0084c6: MOVE.W dst:D0 src:(ff2aa2)
    G.d[0].w(G.io->w(0xff2aa2));
    // 0084cc: AND.W dst:D0 src:#20
    G.d[0].w(AND<W>(G.d[0].w(), 0x20));
    // 0084d0: MOVE.W dst:(A6.L)+32 src:D0
    G.io->w(G.a[6] + 0x32, UCC(G.d[0].w()));
    // 0084d4: CMPI.W dst:(A6.L)+14 src:#9800
    CMP<W>(G.io->w(G.a[6] + 0x14), 0x9800);
    // 0084da: Bcc cond:CC src:(8540)
    if (G.sr.check_condition(Condition::CC)) { goto L8540; }
    // 0084de: BSR src:(6658)
    F6658();
    // 0084e2: MOVE.W dst:D0 src:D1
    G.d[0].w(UCC(G.d[1].w()));
    // 0084e4: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 0084e6: MOVE.W dst:D3 src:#0
    G.d[3].w(0);
    // 0084ea: MOVE.W dst:D4 src:#400
    G.d[4].w(0x400);
    // 0084ee: ADDQ.W dst:D0 src:#6
    G.d[0].w(ADD<W>(G.d[0].w(), 6));
    // 0084f0: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 0084f4: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 0084f8: BSR src:(6b12)
    F6b12();
    // 0084fc: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 0084fe: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 008500: MOVE.W dst:D3 src:#fc00
    G.d[3].w(0xfc00);
    // 008504: MOVE.W dst:D4 src:#0
    G.d[4].w(0);
    // 008508: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 00850c: BSR src:(6b12)
    F6b12();
    // 008510: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 008512: MOVE.W dst:D3 src:#0
    G.d[3].w(0);
    // 008516: MOVE.W dst:D4 src:#fc00
    G.d[4].w(0xfc00);
    // 00851a: SUBQ.W dst:D0 src:#6
    G.d[0].w(SUB<W>(G.d[0].w(), 6));
    // 00851c: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 008520: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 008524: BSR src:(6b12)
    F6b12();
    // 008528: CMPI.W dst:(ff003e) src:#5
    CMP<W>(G.io->w(0xff003e), 5);
    // 008530: Bcc cond:NE src:(8540)
    if (G.sr.check_condition(Condition::NE)) { goto L8540; }
    // 008532: MOVEQ.L dst:D0 src:#30
    G.d[0].l(0x30);
    // 008534: MOVE.W dst:D3 src:#f000
    G.d[3].w(0xf000);
    // 008538: MOVE.W dst:D4 src:#fa00
    G.d[4].w(UCC(0xfa00));
    // 00853c: BSR src:(6bd0)
    F6bd0();

  L8540:;
    // 008540: RTS
    goto end;

  L8542:;
    // 008542: MOVE.L dst:D1 src:(A6.L)+14
    G.d[1].l(G.io->l(G.a[6] + 0x14));
    // 008546: AND.W dst:D1 src:#ff80
    G.d[1].w(AND<W>(G.d[1].w(), 0xff80));
    // 00854a: ADD.W dst:D1 src:#3
    G.d[1].w(ADD<W>(G.d[1].w(), 3));
    // 00854e: MOVEQ.L dst:D0 src:#22
    G.d[0].l(UCC(0x22));
    // 008550: BSR src:(6600)
    F6600();
    // 008554: Bcc cond:True src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8558()
  {
    _log_call(__func__);

    // 008558: BSR src:(50e6)
    F50e6();
    // 00855c: BSR src:(6820)
    F6820();
    // 008560: CLR.L dst:(A6.L)+44
    G.io->l(G.a[6] + 0x44, 0);
    // 008564: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00856a: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 00856c: MOVE.W dst:D1 src:(ff006e)
    G.d[1].w(UCC(G.io->w(0xff006e)));
    // 008572: ASL.W dst:D1 src:#2
    G.d[1].w(ASL<W>(G.d[1].w(), 2));
    // 008574: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 008576: MOVE.W dst:(A6.L)+30 src:#90
    G.io->w(G.a[6] + 0x30, 0x90);
    // 00857c: SUB.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), G.d[0].w()));
    // 008580: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 008586: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 00858a: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 00858c: MOVE.W dst:(A6.L)+32 src:D0
    G.io->w(G.a[6] + 0x32, UCC(G.d[0].w()));
    // 008590: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8592()
  {
    _log_call(__func__);

    // 008592: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 008596: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00859a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00859e: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 0085a2: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 0085a6: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 0085aa: BSR src:(675a)
    F675a();
    // 0085ae: Bcc cond:CS src:(85b4)
    if (G.sr.check_condition(Condition::CS)) { goto L85b4; }
    // 0085b0: Bcc cond:True src:(50a0)
    F50a0();
    goto end;

  L85b4:;
    // 0085b4: BSR src:(5114)
    F5114();
    // 0085b8: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0085bc: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 0085c0: AND.W dst:D0 src:#3c
    G.d[0].w(AND<W>(G.d[0].w(), 0x3c));
    // 0085c4: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 0085c6: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 0085c8: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 0085ca: LEA.L dst:A0 src:(ac02)
    G.a[0] = 0xac02;
    // 0085d0: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0085d2: MOVE.L dst:D0 src:(A0.L)+2
    G.d[0].l(G.io->l(G.a[0] + 2));
    // 0085d6: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 0085da: Bcc cond:EQ src:(85fa)
    if (G.sr.check_condition(Condition::EQ)) { goto L85fa; }
    // 0085dc: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 0085e0: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 0085e6: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 0085ea: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0085ec: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 0085f0: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 0085f4: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 0085f6: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L85fa:;
    // 0085fa: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 0085fe: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 008602: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 008606: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 00860a: Bcc cond:CC src:(861a)
    if (G.sr.check_condition(Condition::CC)) { goto L861a; }
    // 00860c: BSR src:(6658)
    F6658();
    // 008610: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 008612: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 008616: Bcc cond:True src:(6b1c)
    F6b1c();
    goto end;

  L861a:;
    // 00861a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F861c()
  {
    _log_call(__func__);

    // 00861c: BSR src:(6820)
    F6820();
    // 008620: LEA.L dst:A0 src:(869c)
    G.a[0] = 0x869c;
    // 008626: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00862a: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00862c: MOVE.W dst:(A6.L)+8 src:(A0,D0.W)+0
    G.io->w(G.a[6] + 8, UCC(G.io->w(G.a[0] + G.d[0].w())));
    // 008632: BTST.B dst:(A6.L)+27 src:#1
    BTST<B>(G.io->b(G.a[6] + 0x27), 1);
    // 008638: Bcc cond:NE src:(865a)
    if (G.sr.check_condition(Condition::NE)) { goto L865a; }
    // 00863a: MOVE.W dst:(A6.L)+14 src:#a800
    G.io->w(G.a[6] + 0x14, UCC(0xa800));
    // 008640: BTST.B dst:(A6.L)+27 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x27), 0);
    // 008646: Bcc cond:EQ src:(864e)
    if (G.sr.check_condition(Condition::EQ)) { goto L864e; }
    // 008648: MOVE.W dst:(A6.L)+14 src:#f800
    G.io->w(G.a[6] + 0x14, UCC(0xf800));

  L864e:;
    // 00864e: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 008652: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 008654: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, UCC(G.d[0].w()));
    // 008658: Bcc cond:True src:(8678)
    goto L8678;

  L865a:;
    // 00865a: MOVE.W dst:(A6.L)+16 src:#7800
    G.io->w(G.a[6] + 0x16, UCC(0x7800));
    // 008660: BTST.B dst:(A6.L)+27 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x27), 0);
    // 008666: Bcc cond:EQ src:(866e)
    if (G.sr.check_condition(Condition::EQ)) { goto L866e; }
    // 008668: MOVE.W dst:(A6.L)+16 src:#f800
    G.io->w(G.a[6] + 0x16, UCC(0xf800));

  L866e:;
    // 00866e: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 008672: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 008674: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, UCC(G.d[0].w()));

  L8678:;
    // 008678: MOVE.W dst:D0 src:(ff006e)
    G.d[0].w(G.io->w(0xff006e));
    // 00867e: ADD.W dst:D0 src:(ff0844)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff0844)));
    // 008684: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 008686: MOVE.W dst:D1 src:(ff006e)
    G.d[1].w(UCC(G.io->w(0xff006e)));
    // 00868c: ASL.W dst:D1 src:#1
    G.d[1].w(ASL<W>(G.d[1].w(), 1));
    // 00868e: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 008690: MOVE.W dst:(A6.L)+30 src:#a8
    G.io->w(G.a[6] + 0x30, 0xa8);
    // 008696: SUB.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), G.d[0].w()));
    // 00869a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F86a4()
  {
    _log_call(__func__);

    // 0086a4: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 0086a8: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 0086ac: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 0086b0: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 0086b4: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 0086b8: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 0086bc: BSR src:(675a)
    F675a();
    // 0086c0: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 0086c4: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0086c8: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 0086ce: AND.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 0086d2: Bcc cond:NE src:(86e0)
    if (G.sr.check_condition(Condition::NE)) { goto L86e0; }
    // 0086d4: MOVE.W dst:D4 src:#1
    G.d[4].w(UCC(1));
    // 0086d8: BSR src:(66e2)
    F66e2();
    // 0086dc: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, UCC(G.d[1].w()));

  L86e0:;
    // 0086e0: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 0086e6: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 0086e8: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 0086ec: Bcc cond:NE src:(8720)
    if (G.sr.check_condition(Condition::NE)) { goto L8720; }
    // 0086ee: AND.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 0086f2: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 0086f6: LEA.L dst:A0 src:(ac62)
    G.a[0] = 0xac62;
    // 0086fc: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0086fe: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 008700: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 008706: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 00870a: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00870e: MOVE.W dst:(A6.L)+12 src:(A0)+
    G.io->w(G.a[6] + 0x12, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 008712: MOVE.L dst:(A6.L)+20 src:(A0)+
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 008716: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 00871a: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00871c: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L8720:;
    // 008720: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 008724: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 008728: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00872c: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 008730: Bcc cond:CC src:(8740)
    if (G.sr.check_condition(Condition::CC)) { goto L8740; }
    // 008732: BSR src:(6658)
    F6658();
    // 008736: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 008738: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 00873c: BSR src:(6b1c)
    F6b1c();

  L8740:;
    // 008740: LEA.L dst:A5 src:(ff0182)
    G.a[5] = 0xff0182;
    // 008746: MOVEQ.L dst:D7 src:#9
    G.d[7].l(UCC(9));

  L8748:;
    // 008748: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 00874a: Bcc cond:EQ src:(8788)
    if (G.sr.check_condition(Condition::EQ)) { goto L8788; }
    // 00874c: MOVEM.W src:(A5.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[5] + 0x14));
    G.d[1].l(G.io->w(G.a[5] + 0x16));
    // 008752: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 008754: ADD.W dst:D0 src:(A5.L)+18
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[5] + 0x18)));
    // 008758: CMP.W dst:D0 src:(A6.L)+14
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x14));
    // 00875c: Bcc cond:CS src:(8788)
    if (G.sr.check_condition(Condition::CS)) { goto L8788; }
    // 00875e: SUB.W dst:D2 src:(A5.L)+1a
    G.d[2].w(SUB<W>(G.d[2].w(), G.io->w(G.a[5] + 0x1a)));
    // 008762: CMP.W dst:D2 src:(A6.L)+14
    CMP<W>(G.d[2].w(), G.io->w(G.a[6] + 0x14));
    // 008766: Bcc cond:CC src:(8788)
    if (G.sr.check_condition(Condition::CC)) { goto L8788; }
    // 008768: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00876a: ADD.W dst:D0 src:(A5.L)+1c
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[5] + 0x1c)));
    // 00876e: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 008772: Bcc cond:CS src:(8788)
    if (G.sr.check_condition(Condition::CS)) { goto L8788; }
    // 008774: SUB.W dst:D1 src:(A6.L)+1e
    G.d[1].w(SUB<W>(G.d[1].w(), G.io->w(G.a[6] + 0x1e)));
    // 008778: CMP.W dst:D1 src:(A6.L)+16
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x16));
    // 00877c: Bcc cond:CC src:(8788)
    if (G.sr.check_condition(Condition::CC)) { goto L8788; }
    // 00877e: BSET.B dst:(A6) src:#6
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 6));
    // 008782: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, UCC(0));
    // 008786: RTS
    goto end;

  L8788:;
    // 008788: LEA.L dst:A5 src:(A5.L)+20
    G.a[5] += 0x20;
    // 00878c: DBcc.W cond:False dst:D7 src:(8748)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L8748; }
    // 008790: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8792()
  {
    _log_call(__func__);

    // 008792: BSR src:(50e6)
    F50e6();
    // 008796: BSR src:(6820)
    F6820();
    // 00879a: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 00879c: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 0087a0: LEA.L dst:A1 src:(ae26)
    G.a[1] = 0xae26;

  L87a6:;
    // 0087a6: MOVE.W dst:D1 src:(A1)+
    G.d[1].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 0087a8: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 0087ae: OR.W dst:(A0.L)+2 src:D1
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[1].w()));
    // 0087b2: MOVE.W dst:(A0.L)+4 src:(A1)+
    G.io->w(G.a[0] + 4, UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 0087b6: MOVE.L dst:(A0.L)+6 src:(A1)+
    G.io->l(G.a[0] + 6, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 0087ba: MOVE.L dst:(A0.L)+a src:(A1)+
    G.io->l(G.a[0] + 10, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 0087be: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 0087c2: DBcc.W cond:False dst:D0 src:(87a6)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L87a6; }
    // 0087c6: MOVE.W dst:(A6.L)+30 src:#20
    G.io->w(G.a[6] + 0x30, 0x20);
    // 0087cc: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 0087d0: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F87d2()
  {
    _log_call(__func__);

    // 0087d2: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 0087d6: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 0087da: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 0087de: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 0087e2: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 0087e6: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 0087ea: BSR src:(675a)
    F675a();
    // 0087ee: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 0087f2: BSR src:(5114)
    F5114();
    // 0087f6: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0087fa: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 008802: Bcc cond:NE src:(880e)
    if (G.sr.check_condition(Condition::NE)) { goto L880e; }
    // 008804: MOVE.W dst:D7 src:#2
    G.d[7].w(UCC(2));
    // 008808: BSR src:(5ade)
    F5ade();
    // 00880c: Bcc cond:True src:(8820)
    goto L8820;

  L880e:;
    // 00880e: MOVE.W dst:D7 src:#0
    G.d[7].w(UCC(0));
    // 008812: BSR src:(5ade)
    F5ade();
    // 008816: LEA.L dst:A0 src:(A6.L)+5e
    G.a[0] = G.a[6] + 0x5e;
    // 00881a: MOVEQ.L dst:D1 src:#1
    G.d[1].l(UCC(1));
    // 00881c: BSR src:(5b5e)
    F5b5e();

  L8820:;
    // 008820: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 008826: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00882a: ASL.W dst:D0 src:#5
    G.d[0].w(ASL<W>(G.d[0].w(), 5));
    // 00882c: ADD.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(SOME_STATE_COUNTER)));
    // 008832: AND.W dst:D0 src:#37
    G.d[0].w(AND<W>(G.d[0].w(), 0x37));
    // 008836: Bcc cond:NE src:(884a)
    if (G.sr.check_condition(Condition::NE)) { goto L884a; }

  L8838:;
    // 008838: MOVEQ.L dst:D0 src:#30
    G.d[0].l(0x30);
    // 00883a: MOVE.W dst:D3 src:#f700
    G.d[3].w(0xf700);
    // 00883e: MOVE.W dst:D4 src:#600
    G.d[4].w(UCC(0x600));
    // 008842: BSR src:(6bd0)
    F6bd0();
    // 008846: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));

  L884a:;
    // 00884a: TST.W src:(ff0040)
    TST<W>(G.io->w(0xff0040));
    // 008850: Bcc cond:EQ src:(8858)
    if (G.sr.check_condition(Condition::EQ)) { goto L8858; }
    // 008852: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 008856: Bcc cond:EQ src:(8838)
    if (G.sr.check_condition(Condition::EQ)) { goto L8838; }

  L8858:;
    // 008858: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F885a()
  {
    _log_call(__func__);

    // 00885a: MOVEQ.L dst:D0 src:#3
    G.d[0].l(UCC(3));
    // 00885c: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 008860: LEA.L dst:A1 src:(acd2)
    G.a[1] = 0xacd2;

  L8866:;
    // 008866: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 00886c: MOVE.W dst:D1 src:(A1)+
    G.d[1].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00886e: OR.W dst:(A0.L)+2 src:D1
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[1].w()));
    // 008872: MOVE.W dst:(A0.L)+4 src:(A1)+
    G.io->w(G.a[0] + 4, UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 008876: MOVE.L dst:(A0.L)+6 src:(A1)+
    G.io->l(G.a[0] + 6, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 00887a: MOVE.L dst:(A0.L)+a src:(A1)+
    G.io->l(G.a[0] + 10, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 00887e: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 008882: DBcc.W cond:False dst:D0 src:(8866)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L8866; }
    // 008886: BSR src:(4f86)
    F4f86();
    // 00888a: LSL.W dst:D0 src:#1
    G.d[0].w(LSL<W>(G.d[0].w(), 1));
    // 00888c: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 008894: Bcc cond:CS src:(8898)
    if (G.sr.check_condition(Condition::CS)) { goto L8898; }
    // 008896: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));

  L8898:;
    // 008898: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 00889c: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 0088a2: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 0088a6: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 0088a8: MOVE.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, UCC(G.d[0].w()));
    // 0088ac: BSR src:(50e6)
    F50e6();
    // 0088b0: BSR src:(6820)
    F6820();
    // 0088b4: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 0088b6: MOVE.L dst:D1 src:#3601d
    G.d[1].l(UCC(0x3601d));
    // 0088bc: BSR src:(6600)
    F6600();
    // 0088c0: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 0088c2: MOVE.L dst:D1 src:#3701d
    G.d[1].l(UCC(0x3701d));
    // 0088c8: Bcc cond:True src:(6600)
    F6600();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F88cc()
  {
    _log_call(__func__);

    // 0088cc: BSR src:(5114)
    F5114();
    // 0088d0: BSR src:(6858)
    F6858();
    // 0088d4: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 0088dc: Bcc cond:NE src:(894a)
    if (G.sr.check_condition(Condition::NE)) { goto L894a; }
    // 0088e0: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 0088e4: Bcc cond:NE src:(8ace)
    if (G.sr.check_condition(Condition::NE)) { goto L8ace; }
    // 0088e8: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 0088ec: Bcc cond:MI src:(8aa4)
    if (G.sr.check_condition(Condition::MI)) { goto L8aa4; }
    // 0088f0: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 0088f4: Bcc cond:EQ src:(8902)
    if (G.sr.check_condition(Condition::EQ)) { goto L8902; }
    // 0088f6: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 0088fa: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 0088fe: Bcc cond:CS src:(8aa4)
    if (G.sr.check_condition(Condition::CS)) { goto L8aa4; }

  L8902:;
    // 008902: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 008906: Bcc cond:NE src:(890c)
    if (G.sr.check_condition(Condition::NE)) { goto L890c; }
    // 008908: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  L890c:;
    // 00890c: BTST.B dst:(ff2aa3) src:#3
    BTST<B>(G.io->b(0xff2aa3), 3);
    // 008914: Bcc cond:NE src:(8940)
    if (G.sr.check_condition(Condition::NE)) { goto L8940; }
    // 008916: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00891a: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 008920: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 008922: ADD.W dst:D0 src:(ff006e)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 008928: SUB.W dst:D0 src:#50
    G.d[0].w(SUB<W>(G.d[0].w(), 0x50));
    // 00892c: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 00892e: CMP.W dst:D0 src:(A6.L)+30
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x30));
    // 008932: Bcc cond:CC src:(8940)
    if (G.sr.check_condition(Condition::CC)) { goto L8940; }
    // 008934: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, UCC(0));
    // 008938: BSET.B dst:(ff2aa3) src:#3
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 3));

  L8940:;
    // 008940: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 008942: LEA.L dst:A2 src:(A6.L)+6c
    G.a[2] = G.a[6] + 0x6c;
    // 008946: BSR src:(5ae2)
    F5ae2();

  L894a:;
    // 00894a: BTST.B dst:(ff2aa3) src:#3
    BTST<B>(G.io->b(0xff2aa3), 3);
    // 008952: Bcc cond:EQ src:(89b6)
    if (G.sr.check_condition(Condition::EQ)) { goto L89b6; }
    // 008954: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 00895c: Bcc cond:NE src:(89b6)
    if (G.sr.check_condition(Condition::NE)) { goto L89b6; }
    // 00895e: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 008962: CMPI.W dst:(A6.L)+32 src:#8
    CMP<W>(G.io->w(G.a[6] + 0x32), 8);
    // 008968: Bcc cond:NE src:(8982)
    if (G.sr.check_condition(Condition::NE)) { goto L8982; }
    // 00896a: MOVE.W dst:D4 src:#b00
    G.d[4].w(0xb00);
    // 00896e: MOVE.W dst:D0 src:(VSCROLL_FG)
    G.d[0].w(G.io->w(VSCROLL_FG));
    // 008974: SUBI.W dst:D0 src:#20
    G.d[0].w(SUB<W>(G.d[0].w(), 0x20));
    // 008978: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 00897a: ADD.W dst:D4 src:D0
    G.d[4].w(ADD<W>(G.d[4].w(), G.d[0].w()));
    // 00897c: BSR src:(8a7e)
    F8a7e();
    // 008980: Bcc cond:True src:(899a)
    goto L899a;

  L8982:;
    // 008982: CMPI.W dst:(A6.L)+32 src:#11
    CMP<W>(G.io->w(G.a[6] + 0x32), 0x11);
    // 008988: Bcc cond:NE src:(899a)
    if (G.sr.check_condition(Condition::NE)) { goto L899a; }
    // 00898a: BCLR.B dst:(ff2aa3) src:#3
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 3));
    // 008992: EORI.W dst:(ff2aa2) src:#4
    G.io->w(0xff2aa2, EOR<W>(G.io->w(0xff2aa2), 4));

  L899a:;
    // 00899a: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 00899e: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 0089a0: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 0089a4: Bcc cond:NE src:(89b6)
    if (G.sr.check_condition(Condition::NE)) { goto L89b6; }
    // 0089a6: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 0089aa: LEA.L dst:A0 src:(acb2)
    G.a[0] = 0xacb2;
    // 0089b0: MOVE.L dst:(A6.L)+5a src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x5a, UCC(G.io->l(G.a[0] + G.d[0].w())));

  L89b6:;
    // 0089b6: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 0089ba: SUBI.W dst:D0 src:#1000
    G.d[0].w(SUB<W>(G.d[0].w(), 0x1000));
    // 0089be: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 0089c0: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 0089c6: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 0089ca: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 0089cc: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 0089ce: MOVE.W dst:(A6.L)+58 src:D0
    G.io->w(G.a[6] + 0x58, G.d[0].w());
    // 0089d2: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 0089d4: BSR src:(5ade)
    F5ade();
    // 0089d8: BTST.B dst:(ff2aa3) src:#3
    BTST<B>(G.io->b(0xff2aa3), 3);
    // 0089e0: Bcc cond:EQ src:(8a44)
    if (G.sr.check_condition(Condition::EQ)) { goto L8a44; }
    // 0089e2: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 0089ea: Bcc cond:EQ src:(8a44)
    if (G.sr.check_condition(Condition::EQ)) { goto L8a44; }
    // 0089ec: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 0089f0: CMPI.W dst:(A6.L)+32 src:#8
    CMP<W>(G.io->w(G.a[6] + 0x32), 8);
    // 0089f6: Bcc cond:NE src:(8a10)
    if (G.sr.check_condition(Condition::NE)) { goto L8a10; }
    // 0089f8: MOVE.W dst:D4 src:#6500
    G.d[4].w(0x6500);
    // 0089fc: MOVE.W dst:D0 src:(VSCROLL_FG)
    G.d[0].w(G.io->w(VSCROLL_FG));
    // 008a02: SUBI.W dst:D0 src:#20
    G.d[0].w(SUB<W>(G.d[0].w(), 0x20));
    // 008a06: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 008a08: ADD.W dst:D4 src:D0
    G.d[4].w(ADD<W>(G.d[4].w(), G.d[0].w()));
    // 008a0a: BSR src:(8a7e)
    F8a7e();
    // 008a0e: Bcc cond:True src:(8a28)
    goto L8a28;

  L8a10:;
    // 008a10: CMPI.W dst:(A6.L)+32 src:#11
    CMP<W>(G.io->w(G.a[6] + 0x32), 0x11);
    // 008a16: Bcc cond:NE src:(8a28)
    if (G.sr.check_condition(Condition::NE)) { goto L8a28; }
    // 008a18: BCLR.B dst:(ff2aa3) src:#3
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 3));
    // 008a20: EORI.W dst:(ff2aa2) src:#4
    G.io->w(0xff2aa2, EOR<W>(G.io->w(0xff2aa2), 4));

  L8a28:;
    // 008a28: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 008a2c: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 008a2e: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 008a32: Bcc cond:NE src:(8a44)
    if (G.sr.check_condition(Condition::NE)) { goto L8a44; }
    // 008a34: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 008a38: LEA.L dst:A0 src:(acb2)
    G.a[0] = 0xacb2;
    // 008a3e: MOVE.L dst:(A6.L)+68 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x68, UCC(G.io->l(G.a[0] + G.d[0].w())));

  L8a44:;
    // 008a44: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 008a48: SUBI.W dst:D0 src:#7000
    G.d[0].w(SUB<W>(G.d[0].w(), 0x7000));
    // 008a4c: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 008a4e: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 008a54: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 008a58: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 008a5a: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 008a5c: MOVE.W dst:(A6.L)+66 src:D0
    G.io->w(G.a[6] + 0x66, G.d[0].w());
    // 008a60: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 008a62: LEA.L dst:A2 src:(A6.L)+5e
    G.a[2] = G.a[6] + 0x5e;
    // 008a66: BSR src:(5ae2)
    F5ae2();
    // 008a6a: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 008a6e: ADD.W dst:D0 src:#800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x800));
    // 008a72: CMP.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 008a76: Bcc cond:CS src:(8a7c)
    if (G.sr.check_condition(Condition::CS)) { goto L8a7c; }
    // 008a78: Bcc cond:True src:(50a0)
    F50a0();
    goto end;

  L8a7c:;
    // 008a7c: RTS
    goto end;

  L8aa4:;
    // 008aa4: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 008aa8: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 008aac: CLR.L dst:(A6.L)+3c
    G.io->l(G.a[6] + 0x3c, 0);
    // 008ab0: MOVEQ.L dst:D0 src:#22
    G.d[0].l(0x22);
    // 008ab2: MOVE.L dst:D1 src:(A6.L)+14
    G.d[1].l(G.io->l(G.a[6] + 0x14));
    // 008ab6: AND.W dst:D1 src:#ff80
    G.d[1].w(AND<W>(G.d[1].w(), 0xff80));
    // 008aba: ADDQ.W dst:D1 src:#3
    G.d[1].w(ADD<W>(G.d[1].w(), 3));
    // 008abc: BSR src:(6600)
    F6600();
    // 008ac0: MOVE.W dst:D0 src:(A6.L)+a
    G.d[0].w(UCC(G.io->w(G.a[6] + 10)));
    // 008ac4: JSR src:(62d0)
    F62d0();
    // 008aca: Bcc cond:True src:(894a)
    goto L894a;

  L8ace:;
    // 008ace: LEA.L dst:A5 src:(A6.L)+3c
    G.a[5] = G.a[6] + 0x3c;
    // 008ad2: LEA.L dst:A1 src:(A6.L)+6c
    G.a[1] = G.a[6] + 0x6c;
    // 008ad6: CMPI.W dst:(A6.L)+38 src:#22
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x22);
    // 008adc: Bcc cond:CC src:(8b06)
    if (G.sr.check_condition(Condition::CC)) { goto L8b06; }
    // 008ade: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 008ae2: Bcc cond:NE src:(8b02)
    if (G.sr.check_condition(Condition::NE)) { goto L8b02; }
    // 008ae4: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 008ae6: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 008aec: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 008af2: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 008af6: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 008afc: MOVE.L dst:(A6.L)+72 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x72, UCC(G.io->l(G.a[0] + G.d[0].w())));

  L8b02:;
    // 008b02: BSR src:(75ca)
    F75ca();

  L8b06:;
    // 008b06: CMPI.W dst:(A6.L)+38 src:#2a
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x2a);
    // 008b0c: Bcc cond:CC src:(8b4e)
    if (G.sr.check_condition(Condition::CC)) { goto L8b4e; }
    // 008b0e: CMPI.W dst:(A6.L)+38 src:#8
    CMP<W>(G.io->w(G.a[6] + 0x38), 8);
    // 008b14: Bcc cond:CS src:(8b46)
    if (G.sr.check_condition(Condition::CS)) { goto L8b46; }
    // 008b16: LEA.L dst:A5 src:(A6.L)+3e
    G.a[5] = G.a[6] + 0x3e;
    // 008b1a: LEA.L dst:A1 src:(A6.L)+7a
    G.a[1] = G.a[6] + 0x7a;
    // 008b1e: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 008b22: Bcc cond:NE src:(8b42)
    if (G.sr.check_condition(Condition::NE)) { goto L8b42; }
    // 008b24: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 008b26: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 008b2c: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 008b32: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 008b36: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 008b3c: MOVE.L dst:(A6.L)+80 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x80, UCC(G.io->l(G.a[0] + G.d[0].w())));

  L8b42:;
    // 008b42: BSR src:(75ca)
    F75ca();

  L8b46:;
    // 008b46: ADDQ.W dst:(A6.L)+38 src:#1
    G.io->w(G.a[6] + 0x38, ADD<W>(G.io->w(G.a[6] + 0x38), 1));
    // 008b4a: Bcc cond:True src:(894a)
    goto L894a;

  L8b4e:;
    // 008b4e: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 008b56: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 008b5a: Bcc cond:True src:(894a)
    goto L894a;

  end:
    _log_ret(__func__);
  }

  void F8a7e()
  {
    _log_call(__func__);

    // 008a7e: MOVE.W dst:D3 src:(A6.L)+14
    G.d[3].w(UCC(G.io->w(G.a[6] + 0x14)));
    // 008a82: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 008a86: MOVE.W dst:D0 src:D3
    G.d[0].w(G.d[3].w());
    // 008a88: MOVE.W dst:D1 src:D4
    G.d[1].w(UCC(G.d[4].w()));
    // 008a8a: MOVEM.W src:(ff0856) regs:D2,D3
    G.d[2].l(G.io->w(0xff0856));
    G.d[3].l(G.io->w(0xff0858));
    // 008a92: BSR src:(6666)
    F6666();
    // 008a96: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 008a98: ADD.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 008a9c: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 008aa0: Bcc cond:True src:(6b22)
    F6b22();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8b5e()
  {
    _log_call(__func__);

    // 008b5e: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));
    // 008b62: BSR src:(4f86)
    F4f86();
    // 008b66: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 008b6e: Bcc cond:CS src:(8b72)
    if (G.sr.check_condition(Condition::CS)) { goto L8b72; }
    // 008b70: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));

  L8b72:;
    // 008b72: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, UCC(G.d[0].w()));
    // 008b76: BSR src:(50e6)
    F50e6();
    // 008b7a: BSR src:(6820)
    F6820();
    // 008b7e: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 008b82: Bcc cond:NE src:(8b9e)
    if (G.sr.check_condition(Condition::NE)) { goto L8b9e; }
    // 008b84: MOVE.L dst:(A6.L)+32 src:#ad22
    G.io->l(G.a[6] + 0x32, 0xad22);
    // 008b8c: MOVE.L dst:(A6.L)+18 src:#a000600
    G.io->l(G.a[6] + 0x18, 0xa000600);
    // 008b94: MOVE.L dst:(A6.L)+1c src:#5000a00
    G.io->l(G.a[6] + 0x1c, UCC(0x5000a00));
    // 008b9c: RTS
    goto end;

  L8b9e:;
    // 008b9e: MOVE.L dst:(A6.L)+32 src:#ad52
    G.io->l(G.a[6] + 0x32, 0xad52);
    // 008ba6: MOVE.L dst:(A6.L)+18 src:#6000a00
    G.io->l(G.a[6] + 0x18, 0x6000a00);
    // 008bae: MOVE.L dst:(A6.L)+1c src:#a000500
    G.io->l(G.a[6] + 0x1c, UCC(0xa000500));
    // 008bb6: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8bb8()
  {
    _log_call(__func__);

    // 008bb8: BSR src:(5114)
    F5114();
    // 008bbc: BSR src:(6858)
    F6858();
    // 008bc0: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 008bc4: Bcc cond:EQ src:(8bcc)
    if (G.sr.check_condition(Condition::EQ)) { goto L8bcc; }

  L8bc6:;
    // 008bc6: JMP src:(8bc6)
    F8bc6();
    goto end;

  L8bcc:;
    // 008bcc: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 008bd0: Bcc cond:MI src:(8bc6)
    if (G.sr.check_condition(Condition::MI)) {
      F8bc6();
      goto end;
    }
    // 008bd2: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 008bd6: Bcc cond:EQ src:(8be8)
    if (G.sr.check_condition(Condition::EQ)) { goto L8be8; }
    // 008bd8: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 008bdc: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 008be0: Bcc cond:CS src:(8bc6)
    if (G.sr.check_condition(Condition::CS)) {
      F8bc6();
      goto end;
    }
    // 008be2: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 008be4: BSR src:(62d0)
    F62d0();

  L8be8:;
    // 008be8: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 008bec: ADD.W dst:D0 src:#d00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xd00));
    // 008bf0: CMP.W dst:D0 src:#bc00
    CMP<W>(G.d[0].w(), 0xbc00);
    // 008bf4: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 008bf8: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 008bfc: Bcc cond:NE src:(8c3c)
    if (G.sr.check_condition(Condition::NE)) { goto L8c3c; }
    // 008bfe: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 008c02: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 008c06: BTST.B dst:(A6) src:#0
    BTST<B>(G.io->b(G.a[6]), 0);
    // 008c0a: Bcc cond:NE src:(8c1e)
    if (G.sr.check_condition(Condition::NE)) { goto L8c1e; }
    // 008c0c: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 008c0e: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 008c14: ANDI.W dst:D0 src:#4
    G.d[0].w(AND<W>(G.d[0].w(), 4));
    // 008c18: MULU.W dst:D0 src:#6
    G.d[0].l(MULU(G.d[0].w(), 6));
    // 008c1c: Bcc cond:True src:(8c20)
    goto L8c20;

  L8c1e:;
    // 008c1e: MOVEQ.L dst:D0 src:#18
    G.d[0].l(UCC(0x18));

  L8c20:;
    // 008c20: MOVE.L dst:A0 src:(A6.L)+32
    G.a[0] = G.io->l(G.a[6] + 0x32);
    // 008c24: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 008c26: MOVE.L dst:D0 src:(A0.L)+8
    G.d[0].l(G.io->l(G.a[0] + 8));
    // 008c2a: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 008c2e: Bcc cond:EQ src:(8c3c)
    if (G.sr.check_condition(Condition::EQ)) { goto L8c3c; }
    // 008c30: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 008c34: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 008c36: BSR src:(5abc)
    F5abc();
    // 008c3a: Bcc cond:True src:(8c42)
    goto L8c42;

  L8c3c:;
    // 008c3c: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 008c3e: BSR src:(5ade)
    F5ade();

  L8c42:;
    // 008c42: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 008c46: MOVEQ.L dst:D0 src:#11
    G.d[0].l(UCC(0x11));
    // 008c48: BTST.B dst:(A6) src:#2
    BTST<B>(G.io->b(G.a[6]), 2);
    // 008c4c: Bcc cond:EQ src:(8c50)
    if (G.sr.check_condition(Condition::EQ)) { goto L8c50; }
    // 008c4e: MOVEQ.L dst:D0 src:#60
    G.d[0].l(UCC(0x60));

  L8c50:;
    // 008c50: CMP.W dst:D0 src:(A6.L)+30
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x30));
    // 008c54: Bcc cond:CC src:(8cd4)
    if (G.sr.check_condition(Condition::CC)) { goto L8cd4; }
    // 008c58: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 008c5c: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 008c60: Bcc cond:NE src:(8c96)
    if (G.sr.check_condition(Condition::NE)) { goto L8c96; }
    // 008c64: MOVE.W dst:D0 src:#8000
    G.d[0].w(0x8000);
    // 008c68: MOVE.W dst:D3 src:#380
    G.d[3].w(0x380);
    // 008c6c: MOVE.W dst:D4 src:#380
    G.d[4].w(UCC(0x380));
    // 008c70: MOVEM.W dst:(A6.L)+38 regs:D3,D4
    G.io->w(G.a[6] + 0x38, G.d[3].w());
    G.io->w(G.a[6] + 0x3a, G.d[4].w());
    // 008c76: BSR src:(6b12)
    F6b12();
    // 008c7a: MOVE.W dst:D0 src:#800a
    G.d[0].w(UCC(0x800a));
    // 008c7e: MOVEM.W src:(A6.L)+38 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x38));
    G.d[4].l(G.io->w(G.a[6] + 0x3a));
    // 008c84: BSR src:(6b12)
    F6b12();
    // 008c88: MOVE.W dst:D0 src:#8036
    G.d[0].w(UCC(0x8036));
    // 008c8c: MOVEM.W src:(A6.L)+38 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x38));
    G.d[4].l(G.io->w(G.a[6] + 0x3a));
    // 008c92: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  L8c96:;
    // 008c96: MOVE.W dst:D0 src:#8020
    G.d[0].w(0x8020);
    // 008c9a: MOVE.W dst:D3 src:#fc80
    G.d[3].w(0xfc80);
    // 008c9e: MOVE.W dst:D4 src:D3
    G.d[4].w(UCC(G.d[3].w()));
    // 008ca0: MOVEM.W dst:(A6.L)+38 regs:D3,D4
    G.io->w(G.a[6] + 0x38, G.d[3].w());
    G.io->w(G.a[6] + 0x3a, G.d[4].w());
    // 008ca6: BSR src:(6b12)
    F6b12();
    // 008caa: MOVE.W dst:D0 src:#8026
    G.d[0].w(UCC(0x8026));
    // 008cae: MOVEM.W src:(A6.L)+38 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x38));
    G.d[4].l(G.io->w(G.a[6] + 0x3a));
    // 008cb4: BSR src:(6b12)
    F6b12();
    // 008cb8: MOVE.W dst:D0 src:#801a
    G.d[0].w(UCC(0x801a));
    // 008cbc: MOVEM.W src:(A6.L)+38 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x38));
    G.d[4].l(G.io->w(G.a[6] + 0x3a));
    // 008cc2: BSR src:(6b12)
    F6b12();
    // 008cc6: MOVE.W dst:D0 src:#8014
    G.d[0].w(UCC(0x8014));
    // 008cca: MOVEM.W src:(A6.L)+38 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x38));
    G.d[4].l(G.io->w(G.a[6] + 0x3a));
    // 008cd0: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  L8cd4:;
    // 008cd4: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8bc6()
  {
    _log_call(__func__);

    // 008bc6: JMP src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8cd6()
  {
    _log_call(__func__);

    // 008cd6: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));
    // 008cda: LEA.L dst:A0 src:(f4d0)
    G.a[0] = 0xf4d0;
    // 008ce0: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 008ce6: Bcc cond:EQ src:(8cee)
    if (G.sr.check_condition(Condition::EQ)) { goto L8cee; }
    // 008ce8: LEA.L dst:A0 src:(f4dc)
    G.a[0] = 0xf4dc;

  L8cee:;
    // 008cee: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 008cf4: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 008cf6: MOVE.W dst:(A6.L)+24 src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x24, UCC(G.io->w(G.a[0] + G.d[0].w())));
    // 008cfc: BSR src:(50e6)
    F50e6();
    // 008d00: BSR src:(6820)
    F6820();
    // 008d04: CLR.W dst:(ff0042)
    G.io->w(0xff0042, UCC(0));
    // 008d0a: BSET.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 5));
    // 008d12: MOVE.W dst:D7 src:#5
    G.d[7].w(5);
    // 008d16: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 008d18: MOVE.L dst:D1 src:#1400003e
    G.d[1].l(UCC(0x1400003e));

  L8d1e:;
    // 008d1e: BSR src:(6600)
    F6600();
    // 008d22: ADDQ.W dst:D1 src:#1
    G.d[1].w(ADD<W>(G.d[1].w(), 1));
    // 008d24: DBcc.W cond:False dst:D7 src:(8d1e)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L8d1e; }
    // 008d28: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8d2a()
  {
    _log_call(__func__);

    // 008d2a: BSR src:(5114)
    F5114();
    // 008d2e: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 008d32: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 008d36: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 008d3a: Bcc cond:MI src:(8da8)
    if (G.sr.check_condition(Condition::MI)) { goto L8da8; }
    // 008d3e: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 008d42: Bcc cond:EQ src:(8d50)
    if (G.sr.check_condition(Condition::EQ)) { goto L8d50; }
    // 008d44: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 008d48: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 008d4c: Bcc cond:CS src:(8da8)
    if (G.sr.check_condition(Condition::CS)) { goto L8da8; }

  L8d50:;
    // 008d50: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x14)));
    // 008d54: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 008d58: Bcc cond:NE src:(8d5e)
    if (G.sr.check_condition(Condition::NE)) {
      F8d5e();
      goto end;
    }
    // 008d5a: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  L8d5e:;
    // 008d5e: JMP src:(8d5e)
    F8d5e();
    goto end;

  L8da8:;
    // 008da8: MOVE.W dst:(ff0042) src:#2
    G.io->w(0xff0042, UCC(2));
    // 008db0: BCLR.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 5));
    // 008db8: JMP src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8d5e()
  {
    _log_call(__func__);

    // 008d5e: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 008d64: MOVE.W dst:D1 src:(ff2a9c)
    G.d[1].w(UCC(G.io->w(0xff2a9c)));
    // 008d6a: ROL.W dst:D1 src:#3
    G.d[1].w(ROL<W>(G.d[1].w(), 3));
    // 008d6c: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 008d6e: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 008d70: AND.W dst:D2 src:#7
    G.d[2].w(AND<W>(G.d[2].w(), 7));
    // 008d74: Bcc cond:NE src:(8da4)
    if (G.sr.check_condition(Condition::NE)) { goto L8da4; }
    // 008d76: AND.W dst:D0 src:#18
    G.d[0].w(AND<W>(G.d[0].w(), 0x18));
    // 008d7a: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 008d7c: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 008d7e: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 008d80: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 008d82: LEA.L dst:A0 src:(ad82)
    G.a[0] = 0xad82;
    // 008d88: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 008d8a: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 008d90: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 008d94: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 008d96: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 008d9a: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 008d9e: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 008da0: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L8da4:;
    // 008da4: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8dbe()
  {
    _log_call(__func__);

    // 008dbe: BSR src:(50e6)
    F50e6();
    // 008dc2: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 008dc6: ANDI.W dst:D2 src:#7ff
    G.d[2].w(AND<W>(G.d[2].w(), 0x7ff));
    // 008dca: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 008dce: MOVE.L dst:D1 src:#4a1c0
    G.d[1].l(UCC(0x4a1c0));
    // 008dd4: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 008dd8: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 008ddc: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 008de2: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 008de6: ASL.W dst:D0 src:#4
    G.d[0].w(ASL<W>(G.d[0].w(), 4));
    // 008de8: MOVE.W dst:(A6.L)+32 src:D0
    G.io->w(G.a[6] + 0x32, UCC(G.d[0].w()));
    // 008dec: Bcc cond:True src:(6820)
    F6820();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8df0()
  {
    _log_call(__func__);

    // 008df0: CMPI.W dst:(ff0042) src:#1
    CMP<W>(G.io->w(0xff0042), 1);
    // 008df8: Bcc cond:EQ src:(50a0)
    if (G.sr.check_condition(Condition::EQ)) {
      F50a0();
      goto end;
    }
    // 008dfc: CMPI.W dst:(ff0042) src:#2
    CMP<W>(G.io->w(0xff0042), 2);
    // 008e04: Bcc cond:EQ src:(8bc6)
    if (G.sr.check_condition(Condition::EQ)) {
      F8bc6();
      goto end;
    }
    // 008e08: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 008e0c: BSR src:(5114)
    F5114();
    // 008e10: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 008e14: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 008e18: Bcc cond:NE src:(8e1e)
    if (G.sr.check_condition(Condition::NE)) { goto L8e1e; }
    // 008e1a: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  L8e1e:;
    // 008e1e: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 008e22: MOVE.W dst:D1 src:#7f
    G.d[1].w(UCC(0x7f));
    // 008e26: CMPI.W dst:(A6.L)+30 src:#ea6
    CMP<W>(G.io->w(G.a[6] + 0x30), 0xea6);
    // 008e2c: Bcc cond:CS src:(8e3a)
    if (G.sr.check_condition(Condition::CS)) { goto L8e3a; }
    // 008e2e: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 008e30: CMPI.W dst:(A6.L)+30 src:#1d4c
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x1d4c);
    // 008e36: Bcc cond:CS src:(8e3a)
    if (G.sr.check_condition(Condition::CS)) { goto L8e3a; }
    // 008e38: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));

  L8e3a:;
    // 008e3a: CMP.W dst:D1 src:(A6.L)+32
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x32));
    // 008e3e: Bcc cond:CC src:(8e4e)
    if (G.sr.check_condition(Condition::CC)) {
      F8e4e();
      goto end;
    }
    // 008e40: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 008e44: BSR src:(6658)
    F6658();
    // 008e48: MOVE.W dst:D0 src:D1
    G.d[0].w(UCC(G.d[1].w()));
    // 008e4a: BSR src:(6b1c)
    F6b1c();

  L8e4e:;
    // 008e4e: JMP src:(8e4e)
    F8e4e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8e4e()
  {
    _log_call(__func__);

    // 008e4e: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 008e54: MOVE.W dst:D1 src:(ff2a9c)
    G.d[1].w(UCC(G.io->w(0xff2a9c)));
    // 008e5a: ROL.W dst:D1 src:#3
    G.d[1].w(ROL<W>(G.d[1].w(), 3));
    // 008e5c: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 008e5e: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 008e60: AND.W dst:D2 src:#3
    G.d[2].w(AND<W>(G.d[2].w(), 3));
    // 008e64: Bcc cond:NE src:(8e84)
    if (G.sr.check_condition(Condition::NE)) { goto L8e84; }
    // 008e66: AND.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 008e6a: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 008e6c: LEA.L dst:A0 src:(ad9a)
    G.a[0] = 0xad9a;
    // 008e72: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 008e74: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 008e7a: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 008e7e: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 008e80: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));

  L8e84:;
    // 008e84: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8e88()
  {
    _log_call(__func__);

    // 008e88: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 008e8c: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 008e8e: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 008e90: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, UCC(G.d[0].w()));
    // 008e94: BSR src:(6820)
    F6820();
    // 008e98: MOVE.W dst:(A6.L)+14 src:#a000
    G.io->w(G.a[6] + 0x14, UCC(0xa000));
    // 008e9e: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 008ea2: Bcc cond:NE src:(8eac)
    if (G.sr.check_condition(Condition::NE)) { goto L8eac; }
    // 008ea4: MOVE.W dst:D2 src:#9000
    G.d[2].w(0x9000);
    // 008ea8: SUB.W dst:D2 src:D1
    G.d[2].w(SUB<W>(G.d[2].w(), G.d[1].w()));
    // 008eaa: MOVE.W dst:D1 src:D2
    G.d[1].w(UCC(G.d[2].w()));

  L8eac:;
    // 008eac: DIVU.W dst:D1 src:#60
    G.d[1].l(DIVU(G.d[1].l(), 0x60));
    // 008eb0: MOVE.W dst:(A6.L)+30 src:D1
    G.io->w(G.a[6] + 0x30, G.d[1].w());
    // 008eb4: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 008eb6: LEA.L dst:A0 src:(ae02)
    G.a[0] = 0xae02;
    // 008ebc: Bcc cond:True src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8ec0()
  {
    _log_call(__func__);

    // 008ec0: BSR src:(6858)
    F6858();
    // 008ec4: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 008ec8: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 008ecc: ADDI.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 008ed0: CMPI.W dst:D0 src:#e800
    CMP<W>(G.d[0].w(), 0xe800);
    // 008ed4: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 008ed8: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 008edc: Bcc cond:NE src:(8f0c)
    if (G.sr.check_condition(Condition::NE)) { goto L8f0c; }
    // 008ede: SUBI.W dst:(A6.L)+16 src:#60
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0x60));
    // 008ee4: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 008ee8: CMPI.W dst:(A6.L)+30 src:#180
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x180);
    // 008eee: Bcc cond:CS src:(8f36)
    if (G.sr.check_condition(Condition::CS)) { goto L8f36; }
    // 008ef0: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 008ef4: MOVE.W dst:(A6.L)+16 src:#9000
    G.io->w(G.a[6] + 0x16, 0x9000);
    // 008efa: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 008f00: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 008f04: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 008f06: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 008f0a: Bcc cond:True src:(8f36)
    goto L8f36;

  L8f0c:;
    // 008f0c: ADDI.W dst:(A6.L)+16 src:#60
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0x60));
    // 008f12: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 008f16: CMPI.W dst:(A6.L)+30 src:#180
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x180);
    // 008f1c: Bcc cond:CS src:(8f36)
    if (G.sr.check_condition(Condition::CS)) { goto L8f36; }
    // 008f1e: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 008f22: CLR.W dst:(A6.L)+16
    G.io->w(G.a[6] + 0x16, 0);
    // 008f26: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 008f2c: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 008f30: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 008f32: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));

  L8f36:;
    // 008f36: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 008f38: Bcc cond:True src:(5ade)
    F5ade();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8f3c()
  {
    _log_call(__func__);

    // 008f3c: BCLR.B dst:(A6.L)+26 src:#3
    G.io->b(G.a[6] + 0x26, BCLR<B>(G.io->b(G.a[6] + 0x26), 3));
    // 008f42: Bcc cond:NE src:(8f52)
    if (G.sr.check_condition(Condition::NE)) { goto L8f52; }
    // 008f44: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, 0x30);
    // 008f4a: MOVE.W dst:(A6.L)+14 src:#a800
    G.io->w(G.a[6] + 0x14, UCC(0xa800));
    // 008f50: Bcc cond:True src:(8f5e)
    goto L8f5e;

  L8f52:;
    // 008f52: MOVE.W dst:(A6.L)+8 src:#10
    G.io->w(G.a[6] + 8, 0x10);
    // 008f58: MOVE.W dst:(A6.L)+14 src:#f800
    G.io->w(G.a[6] + 0x14, UCC(0xf800));

  L8f5e:;
    // 008f5e: MOVE.L dst:D0 src:(A6.L)+26
    G.d[0].l(G.io->l(G.a[6] + 0x26));
    // 008f62: ASL.L dst:D0 src:#7
    G.d[0].l(ASL<L>(G.d[0].l(), 7));
    // 008f64: MOVE.W dst:(A6.L)+28 src:D0
    G.io->w(G.a[6] + 0x28, UCC(G.d[0].w()));
    // 008f68: SWAP.L dst:D0
    G.d[0].l(SWAP(G.d[0].l()));
    // 008f6a: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, G.d[0].w());
    // 008f6e: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 008f74: ASL.W dst:D0 src:#4
    G.d[0].w(ASL<W>(G.d[0].w(), 4));
    // 008f76: MOVE.W dst:D1 src:(ff006e)
    G.d[1].w(UCC(G.io->w(0xff006e)));
    // 008f7c: ASL.W dst:D1 src:#1
    G.d[1].w(ASL<W>(G.d[1].w(), 1));
    // 008f7e: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 008f80: MOVE.W dst:(A6.L)+30 src:#98
    G.io->w(G.a[6] + 0x30, 0x98);
    // 008f86: SUB.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), G.d[0].w()));
    // 008f8a: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 008f8e: Bcc cond:True src:(6820)
    F6820();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F8f92()
  {
    _log_call(__func__);

    // 008f92: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 008f96: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 008f9a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 008f9e: Bcc cond:MI src:(8bc6)
    if (G.sr.check_condition(Condition::MI)) {
      F8bc6();
      goto end;
    }
    // 008fa2: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 008fa6: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 008faa: BTST.B dst:(ff0075) src:#5
    BTST<B>(G.io->b(0xff0075), 5);
    // 008fb2: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 008fb6: BSR src:(675a)
    F675a();
    // 008fba: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 008fbe: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 008fc2: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 008fca: Bcc cond:NE src:(9004)
    if (G.sr.check_condition(Condition::NE)) { goto L9004; }
    // 008fcc: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x14)));
    // 008fd0: CMP.W dst:D0 src:#a000
    CMP<W>(G.d[0].w(), 0xa000);
    // 008fd4: Bcc cond:CC src:(9040)
    if (G.sr.check_condition(Condition::CC)) { goto L9040; }
    // 008fd8: CMPI.W dst:(A6.L)+8 src:#10
    CMP<W>(G.io->w(G.a[6] + 8), 0x10);
    // 008fde: Bcc cond:NE src:(8ffa)
    if (G.sr.check_condition(Condition::NE)) { goto L8ffa; }
    // 008fe0: CMP.W dst:D0 src:(A6.L)+28
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x28));
    // 008fe4: Bcc cond:CS src:(9040)
    if (G.sr.check_condition(Condition::CS)) { goto L9040; }

  L8fe8:;
    // 008fe8: MOVE.W dst:(A6.L)+6 src:#10
    G.io->w(G.a[6] + 6, UCC(0x10));
    // 008fee: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 008ff6: Bcc cond:True src:(9040)
    goto L9040;

  L8ffa:;
    // 008ffa: CMP.W dst:D0 src:(A6.L)+28
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x28));
    // 008ffe: Bcc cond:CC src:(9040)
    if (G.sr.check_condition(Condition::CC)) { goto L9040; }
    // 009002: Bcc cond:True src:(8fe8)
    goto L8fe8;

  L9004:;
    // 009004: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00900a: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00900e: Bcc cond:NE src:(9024)
    if (G.sr.check_condition(Condition::NE)) { goto L9024; }
    // 009010: BTST.B dst:(ff0842) src:#7
    BTST<B>(G.io->b(0xff0842), 7);
    // 009018: Bcc cond:EQ src:(9024)
    if (G.sr.check_condition(Condition::EQ)) { goto L9024; }
    // 00901a: MOVEQ.L dst:D4 src:#1
    G.d[4].l(UCC(1));
    // 00901c: BSR src:(66e2)
    F66e2();
    // 009020: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, UCC(G.d[1].w()));

  L9024:;
    // 009024: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 009028: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x32)));
    // 00902c: CMP.W dst:D0 src:(A6.L)+30
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x30));
    // 009030: Bcc cond:CS src:(9040)
    if (G.sr.check_condition(Condition::CS)) { goto L9040; }
    // 009032: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 009036: BSR src:(6658)
    F6658();
    // 00903a: MOVE.W dst:D0 src:D1
    G.d[0].w(UCC(G.d[1].w()));
    // 00903c: BSR src:(6b1c)
    F6b1c();

  L9040:;
    // 009040: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 009046: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00904c: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00904e: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 009052: Bcc cond:NE src:(9080)
    if (G.sr.check_condition(Condition::NE)) { goto L9080; }
    // 009054: AND.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 009058: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 00905a: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 00905c: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 00905e: LEA.L dst:A0 src:(b146)
    G.a[0] = 0xb146;
    // 009064: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 009066: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 009068: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00906e: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 009072: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 009076: MOVE.L dst:D1 src:(A0)
    G.d[1].l(G.io->l(G.a[0]));
    // 009078: MOVE.W dst:D0 src:#10
    G.d[0].w(UCC(0x10));
    // 00907c: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L9080:;
    // 009080: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9084()
  {
    _log_call(__func__);

    // 009084: CLR.L dst:(ff0042)
    G.io->l(0xff0042, 0);
    // 00908a: MOVEQ.L dst:D0 src:#3
    G.d[0].l(UCC(3));
    // 00908c: LEA.L dst:A0 src:(A6.L)+20
    G.a[0] = G.a[6] + 0x20;

  L9090:;
    // 009090: CLR.L dst:(A0)+
    G.io->l(G.a[0], UCC(0));
    G.a[0] += 4;
    // 009092: DBcc.W cond:False dst:D0 src:(9090)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L9090; }
    // 009096: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, UCC(G.a[6]));
    // 00909c: BSET.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 5));
    // 0090a4: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 0090a6: MOVE.L dst:D1 src:#1d00006a
    G.d[1].l(UCC(0x1d00006a));
    // 0090ac: BSR src:(6600)
    F6600();
    // 0090b0: MOVE.L dst:D1 src:#1d00106e
    G.d[1].l(UCC(0x1d00106e));
    // 0090b6: BSR src:(6600)
    F6600();
    // 0090ba: MOVE.L dst:D1 src:#1d00206f
    G.d[1].l(UCC(0x1d00206f));
    // 0090c0: Bcc cond:True src:(6600)
    F6600();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F90c4()
  {
    _log_call(__func__);

    // 0090c4: CMPI.W dst:(ff0044) src:#7
    CMP<W>(G.io->w(0xff0044), 7);
    // 0090cc: Bcc cond:CC src:(90d0)
    if (G.sr.check_condition(Condition::CC)) { goto L90d0; }
    // 0090ce: RTS
    goto end;

  L90d0:;
    // 0090d0: BCLR.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 5));
    // 0090d8: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(UCC(G.io->w(0xff2a9c)));
    // 0090de: Bcc cond:True src:(663a)
    F663a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F90e2()
  {
    _log_call(__func__);

    // 0090e2: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));
    // 0090e6: LEA.L dst:A0 src:(f4d0)
    G.a[0] = 0xf4d0;
    // 0090ec: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 0090f2: Bcc cond:EQ src:(90fa)
    if (G.sr.check_condition(Condition::EQ)) { goto L90fa; }
    // 0090f4: LEA.L dst:A0 src:(f4dc)
    G.a[0] = 0xf4dc;

  L90fa:;
    // 0090fa: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 009100: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 009102: MOVE.W dst:(A6.L)+24 src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x24, UCC(G.io->w(G.a[0] + G.d[0].w())));
    // 009108: BSR src:(50e6)
    F50e6();
    // 00910c: MOVE.W dst:D2 src:(A6.L)+26
    G.d[2].w(G.io->w(G.a[6] + 0x26));
    // 009110: MOVE.W dst:D6 src:D2
    G.d[6].w(UCC(G.d[2].w()));
    // 009112: LSL.W dst:D6 src:#3
    G.d[6].w(LSL<W>(G.d[6].w(), 3));
    // 009114: MOVE.L dst:A0 src:(ff0046)
    G.a[0] = UCC(G.io->l(0xff0046));
    // 00911a: MOVEM.W src:(A6.L)+14 regs:D1,D3
    G.d[1].l(G.io->w(G.a[6] + 0x14));
    G.d[3].l(G.io->w(G.a[6] + 0x16));
    // 009120: MOVEM.W dst:(A0,D6.W)+24 regs:D1,D3
    G.io->w(G.a[0] + G.d[6].w() + 0x24, G.d[1].w());
    G.io->w(G.a[0] + G.d[6].w() + 0x26, G.d[3].w());
    // 009126: MOVE.W dst:D0 src:#2
    G.d[0].w(2);
    // 00912a: MOVE.L dst:D1 src:#18000000
    G.d[1].l(0x18000000);
    // 009130: MOVEQ.L dst:D3 src:#c
    G.d[3].l(UCC(12));
    // 009132: ASL.W dst:D2 src:D3
    G.d[2].w(ASL<W>(G.d[2].w(), G.d[3].w()));
    // 009134: ADD.W dst:D1 src:D2
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[2].w()));
    // 009136: BSR src:(6600)
    F6600();
    // 00913a: ADDQ.W dst:D1 src:#1
    G.d[1].w(ADD<W>(G.d[1].w(), 1));
    // 00913c: Bcc cond:True src:(6600)
    F6600();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F915a()
  {
    _log_call(__func__);

    // 00915a: BSR src:(5114)
    F5114();
    // 00915e: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 009162: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 009166: MOVE.W dst:D6 src:(A6.L)+26
    G.d[6].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00916a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00916e: Bcc cond:MI src:(91e4)
    if (G.sr.check_condition(Condition::MI)) { goto L91e4; }
    // 009172: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 009176: Bcc cond:EQ src:(918a)
    if (G.sr.check_condition(Condition::EQ)) { goto L918a; }
    // 009178: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00917c: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 009180: Bcc cond:CS src:(91e4)
    if (G.sr.check_condition(Condition::CS)) { goto L91e4; }
    // 009184: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 009186: BSR src:(62d0)
    F62d0();

  L918a:;
    // 00918a: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00918e: ADD.W dst:D0 src:#1800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1800));
    // 009192: CMP.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 009196: Bcc cond:CC src:(91f0)
    if (G.sr.check_condition(Condition::CC)) { goto L91f0; }
    // 00919a: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 00919e: Bcc cond:NE src:(91c4)
    if (G.sr.check_condition(Condition::NE)) { goto L91c4; }
    // 0091a2: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0091a6: LSL.W dst:D6 src:#3
    G.d[6].w(LSL<W>(G.d[6].w(), 3));
    // 0091a8: MOVE.L dst:A0 src:(ff0046)
    G.a[0] = UCC(G.io->l(0xff0046));
    // 0091ae: MOVEM.W dst:(A0,D6.W)+20 regs:D2,D3
    G.io->w(G.a[0] + G.d[6].w() + 0x20, G.d[2].w());
    G.io->w(G.a[0] + G.d[6].w() + 0x22, G.d[3].w());
    // 0091b4: MOVEM.W src:(A6.L)+14 regs:D1,D2
    G.d[1].l(G.io->w(G.a[6] + 0x14));
    G.d[2].l(G.io->w(G.a[6] + 0x16));
    // 0091ba: MOVEM.W dst:(A0,D6.W)+24 regs:D1,D2
    G.io->w(G.a[0] + G.d[6].w() + 0x24, G.d[1].w());
    G.io->w(G.a[0] + G.d[6].w() + 0x26, G.d[2].w());
    // 0091c0: Bcc cond:True src:(8d5e)
    F8d5e();
    goto end;

  L91c4:;
    // 0091c4: LSL.W dst:D6 src:#3
    G.d[6].w(LSL<W>(G.d[6].w(), 3));
    // 0091c6: MOVE.L dst:A0 src:(ff0046)
    G.a[0] = G.io->l(0xff0046);
    // 0091cc: MOVE.L dst:(A0,D6.W)+20 src:#0
    G.io->l(G.a[0] + G.d[6].w() + 0x20, UCC(0));
    // 0091d4: MOVEM.W src:(A6.L)+14 regs:D1,D2
    G.d[1].l(G.io->w(G.a[6] + 0x14));
    G.d[2].l(G.io->w(G.a[6] + 0x16));
    // 0091da: MOVEM.W dst:(A0,D6.W)+24 regs:D1,D2
    G.io->w(G.a[0] + G.d[6].w() + 0x24, G.d[1].w());
    G.io->w(G.a[0] + G.d[6].w() + 0x26, G.d[2].w());
    // 0091e0: Bcc cond:True src:(8d5e)
    F8d5e();
    goto end;

  L91e4:;
    // 0091e4: BSET.B dst:(ff0045) src:D6
    G.io->b(0xff0045, BSET<B>(G.io->b(0xff0045), G.d[6].b()));
    // 0091ea: JMP src:(736a)
    F736a();
    goto end;

  L91f0:;
    // 0091f0: BSET.B dst:(ff0045) src:D6
    G.io->b(0xff0045, BSET<B>(G.io->b(0xff0045), G.d[6].b()));
    // 0091f6: Bcc cond:True src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F91fa()
  {
    _log_call(__func__);

    // 0091fa: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, UCC(0));
    // 0091fe: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 009204: MULU.W dst:D1 src:#6
    G.d[1].l(MULU(G.d[1].w(), 6));
    // 009208: MOVE.W dst:(A6.L)+28 src:D1
    G.io->w(G.a[6] + 0x28, UCC(G.d[1].w()));
    // 00920c: LEA.L dst:A5 src:(9260)
    G.a[5] = 0x9260;
    // 009212: MOVE.W dst:(A6.L)+8 src:(A5,D1.W)+0
    G.io->w(G.a[6] + 8, UCC(G.io->w(G.a[5] + G.d[1].w())));
    // 009218: MOVEM.W src:(A5,D1.W)+2 regs:D2,D3
    G.d[2].l(G.io->w(G.a[5] + G.d[1].w() + 2));
    G.d[3].l(G.io->w(G.a[5] + G.d[1].w() + 4));
    // 00921e: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 009224: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));
    // 009226: ADD.W dst:D2 src:(A5,D0.W)+24
    G.d[2].w(ADD<W>(G.d[2].w(), G.io->w(G.a[5] + G.d[0].w() + 0x24)));
    // 00922a: MOVE.W dst:(A6.L)+14 src:D2
    G.io->w(G.a[6] + 0x14, G.d[2].w());
    // 00922e: ADD.W dst:D3 src:(A5,D0.W)+26
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[5] + G.d[0].w() + 0x26)));
    // 009232: MOVE.W dst:(A6.L)+16 src:D3
    G.io->w(G.a[6] + 0x16, UCC(G.d[3].w()));
    // 009236: BSR src:(9374)
    F9374();
    // 00923a: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 009240: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 009244: ASL.W dst:D0 src:#4
    G.d[0].w(ASL<W>(G.d[0].w(), 4));
    // 009246: MOVE.W dst:(A6.L)+36 src:D0
    G.io->w(G.a[6] + 0x36, G.d[0].w());
    // 00924a: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 00924e: ANDI.W dst:D2 src:#7ff
    G.d[2].w(AND<W>(G.d[2].w(), 0x7ff));
    // 009252: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 009256: MOVE.L dst:D1 src:#4a1c0
    G.d[1].l(UCC(0x4a1c0));
    // 00925c: Bcc cond:True src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F926c()
  {
    _log_call(__func__);

    // 00926c: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 009270: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 009274: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 009278: BTST.B dst:(ff0045) src:D0
    BTST<B>(G.io->b(0xff0045), G.d[0].b());
    // 00927e: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 009282: MOVE.W dst:D1 src:(A6.L)+14
    G.d[1].w(G.io->w(G.a[6] + 0x14));
    // 009286: ADD.W dst:D1 src:#600
    G.d[1].w(ADD<W>(G.d[1].w(), 0x600));
    // 00928a: CMP.W dst:D1 src:#fc00
    CMP<W>(G.d[1].w(), 0xfc00);
    // 00928e: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 009292: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 009298: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));
    // 00929a: MOVEM.W src:(A5,D0.W)+20 regs:D1,D2
    G.d[1].l(G.io->w(G.a[5] + G.d[0].w() + 0x20));
    G.d[2].l(G.io->w(G.a[5] + G.d[0].w() + 0x22));
    // 0092a0: ADD.W dst:(A6.L)+14 src:D2
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[2].w()));
    // 0092a4: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 0092a8: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 0092ac: ADDQ.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, ADD<W>(G.io->w(G.a[6] + 0x24), 1));
    // 0092b0: ANDI.W dst:(A6.L)+24 src:#7f
    G.io->w(G.a[6] + 0x24, AND<W>(G.io->w(G.a[6] + 0x24), 0x7f));
    // 0092b6: Bcc cond:NE src:(92e4)
    if (G.sr.check_condition(Condition::NE)) { goto L92e4; }
    // 0092b8: LEA.L dst:A0 src:(9260)
    G.a[0] = 0x9260;
    // 0092be: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 0092c2: MOVEM.W src:(A0,D0.W)+2 regs:D1,D2
    G.d[1].l(G.io->w(G.a[0] + G.d[0].w() + 2));
    G.d[2].l(G.io->w(G.a[0] + G.d[0].w() + 4));
    // 0092c8: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 0092cc: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));
    // 0092ce: MOVE.L dst:A0 src:(ff0046)
    G.a[0] = G.io->l(0xff0046);
    // 0092d4: ADD.W dst:D1 src:(A0,D0.W)+24
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(G.a[0] + G.d[0].w() + 0x24)));
    // 0092d8: MOVE.W dst:(A6.L)+14 src:D1
    G.io->w(G.a[6] + 0x14, G.d[1].w());
    // 0092dc: ADD.W dst:D2 src:(A0,D0.W)+26
    G.d[2].w(ADD<W>(G.d[2].w(), G.io->w(G.a[0] + G.d[0].w() + 0x26)));
    // 0092e0: MOVE.W dst:(A6.L)+16 src:D2
    G.io->w(G.a[6] + 0x16, UCC(G.d[2].w()));

  L92e4:;
    // 0092e4: BTST.B dst:(A6.L)+25 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x25), 0);
    // 0092ea: Bcc cond:NE src:(92f6)
    if (G.sr.check_condition(Condition::NE)) { goto L92f6; }
    // 0092ec: SUBQ.W dst:(A6.L)+8 src:#1
    G.io->w(G.a[6] + 8, SUB<W>(G.io->w(G.a[6] + 8), 1));
    // 0092f0: ANDI.W dst:(A6.L)+8 src:#3f
    G.io->w(G.a[6] + 8, AND<W>(G.io->w(G.a[6] + 8), 0x3f));

  L92f6:;
    // 0092f6: ADDQ.W dst:(A6.L)+36 src:#1
    G.io->w(G.a[6] + 0x36, ADD<W>(G.io->w(G.a[6] + 0x36), 1));
    // 0092fa: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(G.io->w(G.a[6] + 0x34));
    // 0092fe: MOVE.W dst:D1 src:(ff0044)
    G.d[1].w(UCC(G.io->w(0xff0044)));
    // 009304: ASL.W dst:D1 src:#3
    G.d[1].w(ASL<W>(G.d[1].w(), 3));
    // 009306: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 009308: Bcc cond:CS src:(9310)
    if (G.sr.check_condition(Condition::CS)) { goto L9310; }
    // 00930a: CMP.W dst:D0 src:#10
    CMP<W>(G.d[0].w(), 0x10);
    // 00930e: Bcc cond:CC src:(9314)
    if (G.sr.check_condition(Condition::CC)) { goto L9314; }

  L9310:;
    // 009310: MOVE.W dst:D0 src:#10
    G.d[0].w(UCC(0x10));

  L9314:;
    // 009314: CMP.W dst:D0 src:(A6.L)+36
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x36));
    // 009318: Bcc cond:CC src:(8e4e)
    if (G.sr.check_condition(Condition::CC)) {
      F8e4e();
      goto end;
    }
    // 00931c: BSR src:(6658)
    F6658();
    // 009320: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 009322: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));
    // 009326: BSR src:(6b1c)
    F6b1c();
    // 00932a: Bcc cond:True src:(8e4e)
    F8e4e();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F932e()
  {
    _log_call(__func__);

    // 00932e: MOVE.L dst:(A6.L)+14 src:#ac000a00
    G.io->l(G.a[6] + 0x14, 0xac000a00);
    // 009336: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, 0);
    // 00933a: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 009340: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));
    // 009342: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 009346: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 00934c: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 009350: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 009352: ASL.W dst:D0 src:#5
    G.d[0].w(ASL<W>(G.d[0].w(), 5));
    // 009354: ADD.W dst:D0 src:#40
    G.d[0].w(ADD<W>(G.d[0].w(), 0x40));
    // 009358: MOVE.W dst:(A6.L)+3c src:D0
    G.io->w(G.a[6] + 0x3c, UCC(G.d[0].w()));
    // 00935c: MULU.W dst:D1 src:#5
    G.d[1].l(MULU(G.d[1].w(), 5));
    // 009360: ADD.W dst:D1 src:#1a
    G.d[1].w(ADD<W>(G.d[1].w(), 0x1a));
    // 009364: MOVE.W dst:(A6.L)+3e src:D1
    G.io->w(G.a[6] + 0x3e, UCC(G.d[1].w()));
    // 009368: BSR src:(9374)
    F9374();
    // 00936c: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 009370: Bcc cond:NE src:(9394)
    if (G.sr.check_condition(Condition::NE)) { goto L9394; }
    // 009372: RTS
    goto end;

  L9394:;
    // 009394: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 009398: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00939a: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, G.d[0].w());
    // 00939e: MOVE.W dst:(A6.L)+16 src:#f400
    G.io->w(G.a[6] + 0x16, UCC(0xf400));
    // 0093a4: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 0093ac: MOVE.W dst:(A6.L)+32 src:#400
    G.io->w(G.a[6] + 0x32, UCC(0x400));
    // 0093b2: LEA.L dst:A0 src:(ae4a)
    G.a[0] = 0xae4a;
    // 0093b8: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 0093ba: BSR src:(5abc)
    F5abc();
    // 0093be: CMPI.W dst:(A6.L)+26 src:#2
    CMP<W>(G.io->w(G.a[6] + 0x26), 2);
    // 0093c4: Bcc cond:NE src:(93ce)
    if (G.sr.check_condition(Condition::NE)) { goto L93ce; }
    // 0093c6: BSET.B dst:(ff2aa3) src:#3
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 3));

  L93ce:;
    // 0093ce: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9374()
  {
    _log_call(__func__);

    // 009374: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00937a: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 00937c: ADD.W dst:D0 src:(ff006e)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 009382: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 009384: MOVE.W dst:(A6.L)+34 src:#7c
    G.io->w(G.a[6] + 0x34, 0x7c);
    // 00938a: SUB.W dst:(A6.L)+34 src:D0
    G.io->w(G.a[6] + 0x34, SUB<W>(G.io->w(G.a[6] + 0x34), G.d[0].w()));
    // 00938e: CLR.L dst:(A6.L)+36
    G.io->l(G.a[6] + 0x36, UCC(0));
    // 009392: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F93d0()
  {
    _log_call(__func__);

    // 0093d0: BSR src:(6858)
    F6858();
    // 0093d4: CMPI.W dst:(A6.L)+14 src:#9c00
    CMP<W>(G.io->w(G.a[6] + 0x14), 0x9c00);
    // 0093da: Bcc cond:CC src:(93e0)
    if (G.sr.check_condition(Condition::CC)) { goto L93e0; }
    // 0093dc: BCLR.B dst:(A6) src:#5
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 5));

  L93e0:;
    // 0093e0: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 0093e4: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 0093e8: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 0093ec: Bcc cond:MI src:(8bc6)
    if (G.sr.check_condition(Condition::MI)) {
      F8bc6();
      goto end;
    }
    // 0093f0: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 0093f4: Bcc cond:EQ src:(9402)
    if (G.sr.check_condition(Condition::EQ)) { goto L9402; }
    // 0093f6: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 0093fa: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 0093fe: Bcc cond:CS src:(8bc6)
    if (G.sr.check_condition(Condition::CS)) {
      F8bc6();
      goto end;
    }

  L9402:;
    // 009402: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 009406: ADD.W dst:D0 src:#c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc00));
    // 00940a: CMP.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 00940e: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 009412: ADDQ.W dst:(A6.L)+36 src:#1
    G.io->w(G.a[6] + 0x36, ADD<W>(G.io->w(G.a[6] + 0x36), 1));
    // 009416: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x34)));
    // 00941a: CMP.W dst:D0 src:(A6.L)+36
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x36));
    // 00941e: Bcc cond:CC src:(9434)
    if (G.sr.check_condition(Condition::CC)) { goto L9434; }
    // 009420: BSR src:(6658)
    F6658();
    // 009424: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 009426: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, 0);
    // 00942a: MOVEQ.L dst:D3 src:#0
    G.d[3].l(0);
    // 00942c: MOVE.W dst:D4 src:#800
    G.d[4].w(UCC(0x800));
    // 009430: BSR src:(6b12)
    F6b12();

  L9434:;
    // 009434: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 00943c: Bcc cond:NE src:(94f6)
    if (G.sr.check_condition(Condition::NE)) { goto L94f6; }
    // 009440: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 009444: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 009448: CMPI.W dst:(A6.L)+30 src:#20
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x20);
    // 00944e: Bcc cond:NE src:(9492)
    if (G.sr.check_condition(Condition::NE)) { goto L9492; }
    // 009450: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 009454: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 00945c: MOVE.W dst:(A6.L)+32 src:#400
    G.io->w(G.a[6] + 0x32, UCC(0x400));
    // 009462: BCLR.B dst:(ff2aa3) src:#3
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 3));
    // 00946a: MOVE.W dst:D1 src:(A6.L)+14
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x14)));
    // 00946e: CMP.W dst:D1 src:(ff0856)
    CMP<W>(G.d[1].w(), G.io->w(0xff0856));
    // 009474: Bcc cond:CC src:(9492)
    if (G.sr.check_condition(Condition::CC)) { goto L9492; }
    // 009476: CMPI.W dst:(ff0858) src:#4800
    CMP<W>(G.io->w(0xff0858), 0x4800);
    // 00947e: Bcc cond:CS src:(9492)
    if (G.sr.check_condition(Condition::CS)) { goto L9492; }
    // 009480: BSET.B dst:(ff2aa3) src:#4
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 4));
    // 009488: Bcc cond:NE src:(9492)
    if (G.sr.check_condition(Condition::NE)) { goto L9492; }
    // 00948a: BSET.B dst:(ff2aa3) src:#3
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 3));

  L9492:;
    // 009492: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 009494: MOVE.W dst:D6 src:D0
    G.d[6].w(G.d[0].w());
    // 009496: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 00949a: Bcc cond:NE src:(954a)
    if (G.sr.check_condition(Condition::NE)) { goto L954a; }
    // 00949e: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 0094a2: MULU.W dst:D0 src:#6
    G.d[0].l(MULU(G.d[0].w(), 6));
    // 0094a6: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 0094a8: ROR.W dst:D0 src:#2
    G.d[0].w(ROR<W>(G.d[0].w(), 2));
    // 0094aa: LEA.L dst:A1 src:(95d8)
    G.a[1] = 0x95d8;
    // 0094b0: LEA.L dst:A0 src:(ae4a)
    G.a[0] = 0xae4a;
    // 0094b6: ADDA.W dst:A1 src:D0
    G.a[1] = ADD<L>(G.a[1], G.d[0].w());
    // 0094b8: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 0094ba: MOVE.W dst:(A6.L)+16 src:(A1)+
    G.io->w(G.a[6] + 0x16, UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 0094be: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 0094c4: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 0094c8: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 0094ca: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 0094ce: MOVE.L dst:(A6.L)+1c src:(A1)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 0094d2: MOVEQ.L dst:D7 src:#1
    G.d[7].l(1);
    // 0094d4: MOVE.W dst:D0 src:D6
    G.d[0].w(G.d[6].w());
    // 0094d6: ANDI.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 0094da: Bcc cond:EQ src:(94f2)
    if (G.sr.check_condition(Condition::EQ)) { goto L94f2; }
    // 0094dc: CMPI.W dst:D0 src:#c
    CMP<W>(G.d[0].w(), 12);
    // 0094e0: Bcc cond:EQ src:(94f2)
    if (G.sr.check_condition(Condition::EQ)) { goto L94f2; }
    // 0094e2: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 0094e4: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 0094e6: LEA.L dst:A0 src:(A6.L)+5e
    G.a[0] = G.a[6] + 0x5e;
    // 0094ea: MOVE.W dst:D1 src:D7
    G.d[1].w(UCC(G.d[7].w()));
    // 0094ec: BSR src:(5b5e)
    F5b5e();
    // 0094f0: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;

  L94f2:;
    // 0094f2: Bcc cond:True src:(5abc)
    F5abc();
    goto end;

  L94f6:;
    // 0094f6: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 0094fa: Bcc cond:NE src:(9570)
    if (G.sr.check_condition(Condition::NE)) { goto L9570; }
    // 0094fe: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x3c)));
    // 009502: BTST.B dst:(ff2aa3) src:#3
    BTST<B>(G.io->b(0xff2aa3), 3);
    // 00950a: Bcc cond:NE src:(9512)
    if (G.sr.check_condition(Condition::NE)) { goto L9512; }
    // 00950c: SUB.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 009510: Bcc cond:True src:(951a)
    goto L951a;

  L9512:;
    // 009512: ADD.W dst:D0 src:#40
    G.d[0].w(ADD<W>(G.d[0].w(), 0x40));
    // 009516: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));

  L951a:;
    // 00951a: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 00951e: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 009522: MOVE.W dst:D1 src:(A6.L)+3e
    G.d[1].w(G.io->w(G.a[6] + 0x3e));
    // 009526: SUB.W dst:(A6.L)+32 src:D1
    G.io->w(G.a[6] + 0x32, SUB<W>(G.io->w(G.a[6] + 0x32), G.d[1].w()));
    // 00952a: MOVE.W dst:D0 src:#1000
    G.d[0].w(0x1000);
    // 00952e: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 009534: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 009538: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 00953a: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 00953c: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 009540: Bcc cond:LT src:(954a)
    if (G.sr.check_condition(Condition::LT)) { goto L954a; }
    // 009542: BCLR.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 1));

  L954a:;
    // 00954a: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 00954e: MOVEQ.L dst:D7 src:#1
    G.d[7].l(1);
    // 009550: ANDI.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 009554: Bcc cond:EQ src:(956c)
    if (G.sr.check_condition(Condition::EQ)) { goto L956c; }
    // 009556: CMPI.W dst:D0 src:#c
    CMP<W>(G.d[0].w(), 12);
    // 00955a: Bcc cond:EQ src:(956c)
    if (G.sr.check_condition(Condition::EQ)) { goto L956c; }
    // 00955c: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 00955e: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 009560: LEA.L dst:A0 src:(A6.L)+5e
    G.a[0] = G.a[6] + 0x5e;
    // 009564: MOVE.W dst:D1 src:D7
    G.d[1].w(UCC(G.d[7].w()));
    // 009566: BSR src:(5b5e)
    F5b5e();
    // 00956a: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;

  L956c:;
    // 00956c: Bcc cond:True src:(5ade)
    F5ade();
    goto end;

  L9570:;
    // 009570: BTST.B dst:(ff2aa3) src:#3
    BTST<B>(G.io->b(0xff2aa3), 3);
    // 009578: Bcc cond:NE src:(9582)
    if (G.sr.check_condition(Condition::NE)) { goto L9582; }
    // 00957a: SUBI.W dst:(A6.L)+14 src:#d0
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0xd0));
    // 009580: Bcc cond:True src:(9588)
    goto L9588;

  L9582:;
    // 009582: ADDI.W dst:(A6.L)+14 src:#50
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x50));

  L9588:;
    // 009588: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 00958c: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 009590: MOVE.W dst:D1 src:(A6.L)+3e
    G.d[1].w(G.io->w(G.a[6] + 0x3e));
    // 009594: SUB.W dst:(A6.L)+32 src:D1
    G.io->w(G.a[6] + 0x32, SUB<W>(G.io->w(G.a[6] + 0x32), G.d[1].w()));
    // 009598: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 0095a0: Bcc cond:NE src:(95c4)
    if (G.sr.check_condition(Condition::NE)) { goto L95c4; }
    // 0095a2: BTST.B dst:(A6.L)+32 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x32), 7);
    // 0095a8: Bcc cond:EQ src:(954a)
    if (G.sr.check_condition(Condition::EQ)) { goto L954a; }
    // 0095aa: CMPI.W dst:(A6.L)+16 src:#1000
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x1000);
    // 0095b0: Bcc cond:CC src:(954a)
    if (G.sr.check_condition(Condition::CC)) { goto L954a; }
    // 0095b2: BCLR.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 1));
    // 0095ba: BSET.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 2));
    // 0095c2: Bcc cond:True src:(954a)
    goto L954a;

  L95c4:;
    // 0095c4: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 0095c8: ADD.W dst:D0 src:#1c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1c00));
    // 0095cc: CMP.W dst:D0 src:#9800
    CMP<W>(G.d[0].w(), 0x9800);
    // 0095d0: Bcc cond:CS src:(954a)
    if (G.sr.check_condition(Condition::CS)) { goto L954a; }
    // 0095d4: Bcc cond:True src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9608()
  {
    _log_call(__func__);

    // 009608: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00960e: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 009612: ORI.W dst:(A6.L)+10 src:#4000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x4000));
    // 009618: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 00961c: MOVE.L dst:D1 src:#49fc0
    G.d[1].l(UCC(0x49fc0));
    // 009622: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 009626: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 00962a: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00962c: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, G.d[0].w());
    // 009630: MOVE.W dst:(A6.L)+16 src:#7800
    G.io->w(G.a[6] + 0x16, 0x7800);
    // 009636: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, UCC(0));
    // 00963a: BSR src:(4f86)
    F4f86();
    // 00963e: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 009640: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 009648: Bcc cond:CS src:(964c)
    if (G.sr.check_condition(Condition::CS)) { goto L964c; }
    // 00964a: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));

  L964c:;
    // 00964c: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, UCC(G.d[0].w()));
    // 009650: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9652()
  {
    _log_call(__func__);

    // 009652: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 009656: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 00965a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00965e: Bcc cond:MI src:(8bc6)
    if (G.sr.check_condition(Condition::MI)) {
      F8bc6();
      goto end;
    }
    // 009662: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 009666: Bcc cond:EQ src:(96ce)
    if (G.sr.check_condition(Condition::EQ)) { goto L96ce; }
    // 00966a: MOVE.W dst:D0 src:#400
    G.d[0].w(UCC(0x400));
    // 00966e: TST.W src:(ff0846)
    TST<W>(G.io->w(0xff0846));
    // 009674: Bcc cond:NE src:(967c)
    if (G.sr.check_condition(Condition::NE)) { goto L967c; }
    // 009676: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00967a: Bcc cond:True src:(96c2)
    goto L96c2;

  L967c:;
    // 00967c: CMPI.W dst:(ff0846) src:#1
    CMP<W>(G.io->w(0xff0846), 1);
    // 009684: Bcc cond:NE src:(968c)
    if (G.sr.check_condition(Condition::NE)) { goto L968c; }
    // 009686: SUB.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00968a: Bcc cond:True src:(96c2)
    goto L96c2;

  L968c:;
    // 00968c: MOVE.W dst:D1 src:(ff0858)
    G.d[1].w(UCC(G.io->w(0xff0858)));
    // 009692: CMP.W dst:D1 src:(A6.L)+16
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x16));
    // 009696: Bcc cond:CC src:(969e)
    if (G.sr.check_condition(Condition::CC)) { goto L969e; }
    // 009698: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00969c: Bcc cond:True src:(96a2)
    goto L96a2;

  L969e:;
    // 00969e: SUB.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));

  L96a2:;
    // 0096a2: CMPI.W dst:(ff0846) src:#2
    CMP<W>(G.io->w(0xff0846), 2);
    // 0096aa: Bcc cond:EQ src:(96c2)
    if (G.sr.check_condition(Condition::EQ)) { goto L96c2; }
    // 0096ac: MOVE.W dst:D1 src:(ff0856)
    G.d[1].w(UCC(G.io->w(0xff0856)));
    // 0096b2: CMP.W dst:D1 src:(A6.L)+14
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x14));
    // 0096b6: Bcc cond:CC src:(96be)
    if (G.sr.check_condition(Condition::CC)) { goto L96be; }
    // 0096b8: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 0096bc: Bcc cond:True src:(96c2)
    goto L96c2;

  L96be:;
    // 0096be: SUB.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));

  L96c2:;
    // 0096c2: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 0096c6: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 0096ca: Bcc cond:CS src:(8bc6)
    if (G.sr.check_condition(Condition::CS)) {
      F8bc6();
      goto end;
    }

  L96ce:;
    // 0096ce: BSR src:(6870)
    F6870();
    // 0096d2: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 0096d6: ADD.W dst:D0 src:#800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x800));
    // 0096da: CMP.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 0096de: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 0096e2: SUBI.W dst:(A6.L)+16 src:#40
    G.io->w(G.a[6] + 0x16, SUB<W>(G.io->w(G.a[6] + 0x16), 0x40));
    // 0096e8: CMPI.W dst:(A6.L)+16 src:#2000
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x2000);
    // 0096ee: Bcc cond:CC src:(5984)
    if (G.sr.check_condition(Condition::CC)) {
      _m->update_sprite_with_something(G.a[6]);
      goto end;
    }
    // 0096f2: BSET.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 2));
    // 0096fa: MOVE.W dst:(A6.L)+3c src:#3
    G.io->w(G.a[6] + 0x3c, 3);
    // 009700: MOVE.W dst:D0 src:(A6.L)+3a
    G.d[0].w(G.io->w(G.a[6] + 0x3a));
    // 009704: AND.W dst:D0 src:#ffc0
    G.d[0].w(AND<W>(G.d[0].w(), 0xffc0));
    // 009708: MOVE.W dst:D0 src:#8000
    G.d[0].w(UCC(0x8000));
    // 00970c: BSR src:(6b1c)
    F6b1c();
    // 009710: MOVE.W dst:D0 src:#8005
    G.d[0].w(UCC(0x8005));
    // 009714: BSR src:(6b1c)
    F6b1c();
    // 009718: MOVE.W dst:D0 src:#800a
    G.d[0].w(UCC(0x800a));
    // 00971c: BSR src:(6b1c)
    F6b1c();
    // 009720: MOVE.W dst:D0 src:#800f
    G.d[0].w(UCC(0x800f));
    // 009724: BSR src:(6b1c)
    F6b1c();
    // 009728: MOVE.W dst:D0 src:#803b
    G.d[0].w(UCC(0x803b));
    // 00972c: BSR src:(6b1c)
    F6b1c();
    // 009730: MOVE.W dst:D0 src:#8036
    G.d[0].w(UCC(0x8036));
    // 009734: BSR src:(6b1c)
    F6b1c();
    // 009738: MOVE.W dst:D0 src:#8031
    G.d[0].w(UCC(0x8031));
    // 00973c: BSR src:(6b1c)
    F6b1c();
    // 009740: JMP src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9746()
  {
    _log_call(__func__);

    // 009746: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 00974a: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 009750: ADDQ.W dst:D0 src:#2
    G.d[0].w(ADD<W>(G.d[0].w(), 2));
    // 009752: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, UCC(G.d[0].w()));
    // 009756: BSR src:(50e6)
    F50e6();
    // 00975a: BSR src:(6820)
    F6820();
    // 00975e: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 009764: ORI.W dst:(A6.L)+10 src:#6000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x6000));
    // 00976a: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 009770: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 009772: ADD.W dst:D0 src:(ff006e)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 009778: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00977a: MOVE.W dst:(A6.L)+30 src:#100
    G.io->w(G.a[6] + 0x30, UCC(0x100));
    // 009780: BTST.B dst:(ff0001) src:#7
    BTST<B>(G.io->b(0xff0001), 7);
    // 009788: Bcc cond:NE src:(9790)
    if (G.sr.check_condition(Condition::NE)) { goto L9790; }
    // 00978a: SUBI.W dst:(A6.L)+30 src:#10
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), 0x10));

  L9790:;
    // 009790: SUB.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), G.d[0].w()));
    // 009794: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 00979a: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00979e: ASL.W dst:D0 src:#4
    G.d[0].w(ASL<W>(G.d[0].w(), 4));
    // 0097a0: MOVE.W dst:(A6.L)+32 src:D0
    G.io->w(G.a[6] + 0x32, UCC(G.d[0].w()));
    // 0097a4: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F97a6()
  {
    _log_call(__func__);

    // 0097a6: BSR src:(5114)
    F5114();
    // 0097aa: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 0097ae: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 0097b2: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 0097b6: Bcc cond:MI src:(8bc6)
    if (G.sr.check_condition(Condition::MI)) {
      F8bc6();
      goto end;
    }
    // 0097ba: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 0097be: Bcc cond:EQ src:(97cc)
    if (G.sr.check_condition(Condition::EQ)) { goto L97cc; }
    // 0097c0: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 0097c4: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 0097c8: Bcc cond:CS src:(8bc6)
    if (G.sr.check_condition(Condition::CS)) {
      F8bc6();
      goto end;
    }

  L97cc:;
    // 0097cc: BSR src:(675a)
    F675a();
    // 0097d0: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 0097d4: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 0097d8: Bcc cond:NE src:(97e0)
    if (G.sr.check_condition(Condition::NE)) { goto L97e0; }
    // 0097dc: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  L97e0:;
    // 0097e0: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 0097e4: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x32)));
    // 0097e8: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 0097f0: Bcc cond:NE src:(9844)
    if (G.sr.check_condition(Condition::NE)) { goto L9844; }
    // 0097f2: CMP.W dst:D0 src:(A6.L)+30
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x30));
    // 0097f6: Bcc cond:CS src:(9804)
    if (G.sr.check_condition(Condition::CS)) { goto L9804; }
    // 0097f8: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 0097fc: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));

  L9804:;
    // 009804: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00980a: ANDI.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 00980e: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 009810: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 009812: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 009814: LEA.L dst:A0 src:(b02a)
    G.a[0] = 0xb02a;
    // 00981a: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00981c: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00981e: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 009820: CMP.W dst:D0 src:(A6.L)+44
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x44));
    // 009824: Bcc cond:EQ src:(9840)
    if (G.sr.check_condition(Condition::EQ)) { goto L9840; }
    // 009826: MOVE.W dst:(A6.L)+44 src:D0
    G.io->w(G.a[6] + 0x44, G.d[0].w());
    // 00982a: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 009830: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 009834: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 009838: MOVE.W dst:D0 src:#10
    G.d[0].w(UCC(0x10));
    // 00983c: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L9840:;
    // 009840: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L9844:;
    // 009844: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 009848: MOVE.W dst:D2 src:D0
    G.d[2].w(UCC(G.d[0].w()));
    // 00984a: LSR.W dst:D2 src:#1
    G.d[2].w(LSR<W>(G.d[2].w(), 1));
    // 00984c: ADD.W dst:D0 src:D2
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[2].w()));
    // 00984e: LEA.L dst:A0 src:(b042)
    G.a[0] = 0xb042;
    // 009854: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 009856: MOVE.L dst:D0 src:(A0.L)+2
    G.d[0].l(G.io->l(G.a[0] + 2));
    // 00985a: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 00985e: Bcc cond:EQ src:(987e)
    if (G.sr.check_condition(Condition::EQ)) { goto L987e; }
    // 009860: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 009864: MOVE.L dst:D1 src:D0
    G.d[1].l(G.d[0].l());
    // 009866: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00986c: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 009870: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 009872: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 009876: MOVE.W dst:D0 src:#10
    G.d[0].w(UCC(0x10));
    // 00987a: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  L987e:;
    // 00987e: MOVE.W dst:D1 src:(A6.L)+32
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x32)));
    // 009882: CMP.W dst:D1 src:#4
    CMP<W>(G.d[1].w(), 4);
    // 009886: Bcc cond:NE src:(9892)
    if (G.sr.check_condition(Condition::NE)) { goto L9892; }
    // 009888: BSR src:(6658)
    F6658();
    // 00988c: MOVE.W dst:D0 src:D1
    G.d[0].w(UCC(G.d[1].w()));
    // 00988e: BSR src:(6b1c)
    F6b1c();

  L9892:;
    // 009892: CMPI.W dst:(A6.L)+32 src:#1f
    CMP<W>(G.io->w(G.a[6] + 0x32), 0x1f);
    // 009898: Bcc cond:CS src:(5984)
    if (G.sr.check_condition(Condition::CS)) {
      _m->update_sprite_with_something(G.a[6]);
      goto end;
    }
    // 00989c: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 0098a0: BCLR.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 1));
    // 0098a8: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F98ac()
  {
    _log_call(__func__);

    // 0098ac: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 0098b0: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 0098b6: ORI.W dst:(A0.L)+2 src:#2000
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), 0x2000));
    // 0098bc: MOVE.W dst:(A0.L)+4 src:#d08
    G.io->w(G.a[0] + 4, 0xd08);
    // 0098c2: MOVE.L dst:(A0.L)+6 src:#f8000000
    G.io->l(G.a[0] + 6, 0xf8000000);
    // 0098ca: MOVE.L dst:(A0.L)+a src:#4d160
    G.io->l(G.a[0] + 10, UCC(0x4d160));
    // 0098d2: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 0098d6: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 0098dc: ORI.W dst:(A0.L)+2 src:#2000
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), 0x2000));
    // 0098e2: MOVE.W dst:(A0.L)+4 src:#504
    G.io->w(G.a[0] + 4, 0x504);
    // 0098e8: MOVE.L dst:(A0.L)+6 src:#4000500
    G.io->l(G.a[0] + 6, 0x4000500);
    // 0098f0: MOVE.L dst:(A0.L)+a src:#4d0e0
    G.io->l(G.a[0] + 10, 0x4d0e0);
    // 0098f8: ANDI.W dst:(A0.L)+10 src:#7ff
    G.io->w(G.a[0] + 0x10, AND<W>(G.io->w(G.a[0] + 0x10), 0x7ff));
    // 0098fe: ORI.W dst:(A0.L)+10 src:#4000
    G.io->w(G.a[0] + 0x10, OR<W>(G.io->w(G.a[0] + 0x10), 0x4000));
    // 009904: MOVE.W dst:(A0.L)+12 src:#f10
    G.io->w(G.a[0] + 0x12, 0xf10);
    // 00990a: MOVE.L dst:(A0.L)+14 src:#f8000800
    G.io->l(G.a[0] + 0x14, 0xf8000800);
    // 009912: MOVE.L dst:(A0.L)+18 src:#4cce0
    G.io->l(G.a[0] + 0x18, 0x4cce0);
    // 00991a: MOVE.W dst:(A6.L)+36 src:#400
    G.io->w(G.a[6] + 0x36, 0x400);
    // 009920: MOVE.W dst:(A6.L)+16 src:#1000
    G.io->w(G.a[6] + 0x16, UCC(0x1000));
    // 009926: BSR src:(6820)
    F6820();
    // 00992a: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 00992e: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 009934: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 009938: MULU.W dst:D0 src:#5
    G.d[0].l(MULU(G.d[0].w(), 5));
    // 00993c: ADD.W dst:D0 src:#1a
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1a));
    // 009940: BTST.B dst:(A6.L)+29 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x29), 0);
    // 009946: Bcc cond:EQ src:(994a)
    if (G.sr.check_condition(Condition::EQ)) { goto L994a; }
    // 009948: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));

  L994a:;
    // 00994a: MOVE.W dst:(A6.L)+32 src:D0
    G.io->w(G.a[6] + 0x32, UCC(G.d[0].w()));
    // 00994e: BCLR.B dst:(A6.L)+29 src:#1
    G.io->b(G.a[6] + 0x29, BCLR<B>(G.io->b(G.a[6] + 0x29), 1));
    // 009954: Bcc cond:NE src:(99c8)
    if (G.sr.check_condition(Condition::NE)) { goto L99c8; }
    // 009958: MOVE.W dst:D0 src:(ff0078)
    G.d[0].w(UCC(G.io->w(0xff0078)));
    // 00995e: BTST.B dst:(A6.L)+29 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x29), 0);
    // 009964: Bcc cond:NE src:(99ae)
    if (G.sr.check_condition(Condition::NE)) { goto L99ae; }
    // 009966: AND.W dst:D0 src:#38
    G.d[0].w(AND<W>(G.d[0].w(), 0x38));
    // 00996a: ADD.W dst:D0 src:#40
    G.d[0].w(ADD<W>(G.d[0].w(), 0x40));
    // 00996e: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 009970: MOVE.W dst:D1 src:(ff0856)
    G.d[1].w(UCC(G.io->w(0xff0856)));
    // 009976: CMPI.W dst:D1 src:#5000
    CMP<W>(G.d[1].w(), 0x5000);
    // 00997a: Bcc cond:CC src:(9988)
    if (G.sr.check_condition(Condition::CC)) { goto L9988; }

  L997c:;
    // 00997c: ADD.W dst:D1 src:D0
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[0].w()));
    // 00997e: MOVE.W dst:(A6.L)+14 src:D1
    G.io->w(G.a[6] + 0x14, UCC(G.d[1].w()));

  L9982:;
    // 009982: CLR.W dst:(A6.L)+34
    G.io->w(G.a[6] + 0x34, UCC(0));
    // 009986: RTS
    goto end;

  L9988:;
    // 009988: SUB.W dst:D1 src:D0
    G.d[1].w(SUB<W>(G.d[1].w(), G.d[0].w()));
    // 00998a: MOVE.W dst:(A6.L)+14 src:D1
    G.io->w(G.a[6] + 0x14, UCC(G.d[1].w()));

  L998e:;
    // 00998e: MOVE.W dst:(A6.L)+34 src:#800
    G.io->w(G.a[6] + 0x34, UCC(0x800));
    // 009994: LEA.L dst:A2 src:(A6.L)+6c
    G.a[2] = G.a[6] + 0x6c;
    // 009998: ANDI.W dst:(A2.L)+2 src:#e7ff
    G.io->w(G.a[2] + 2, AND<W>(G.io->w(G.a[2] + 2), 0xe7ff));
    // 00999e: ORI.W dst:(A2.L)+2 src:#800
    G.io->w(G.a[2] + 2, OR<W>(G.io->w(G.a[2] + 2), 0x800));
    // 0099a4: MOVE.L dst:(A6.L)+64 src:#f4000500
    G.io->l(G.a[6] + 0x64, UCC(0xf4000500));
    // 0099ac: RTS
    goto end;

  L99ae:;
    // 0099ae: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 0099b2: ASL.W dst:D0 src:#4
    G.d[0].w(ASL<W>(G.d[0].w(), 4));
    // 0099b4: ADD.W dst:D0 src:#60
    G.d[0].w(ADD<W>(G.d[0].w(), 0x60));
    // 0099b8: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 0099ba: MOVE.W dst:D1 src:#5000
    G.d[1].w(UCC(0x5000));
    // 0099be: CMP.W dst:D1 src:(ff0856)
    CMP<W>(G.d[1].w(), G.io->w(0xff0856));
    // 0099c4: Bcc cond:CC src:(997c)
    if (G.sr.check_condition(Condition::CC)) { goto L997c; }
    // 0099c6: Bcc cond:True src:(9988)
    goto L9988;

  L99c8:;
    // 0099c8: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 0099cc: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 0099ce: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, G.d[0].w());
    // 0099d2: MOVE.W dst:D0 src:(ff0856)
    G.d[0].w(UCC(G.io->w(0xff0856)));
    // 0099d8: CMP.W dst:D0 src:(A6.L)+14
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x14));
    // 0099dc: Bcc cond:CC src:(998e)
    if (G.sr.check_condition(Condition::CC)) { goto L998e; }
    // 0099de: Bcc cond:True src:(9982)
    goto L9982;

  end:
    _log_ret(__func__);
  }

  void F99e0()
  {
    _log_call(__func__);

    // 0099e0: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 0099e4: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 0099e8: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 0099ec: Bcc cond:MI src:(8bc6)
    if (G.sr.check_condition(Condition::MI)) {
      F8bc6();
      goto end;
    }
    // 0099f0: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 0099f4: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 0099f8: CMPI.W dst:(A6.L)+14 src:#a800
    CMP<W>(G.io->w(G.a[6] + 0x14), 0xa800);
    // 0099fe: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 009a02: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 009a0a: Bcc cond:NE src:(9a7a)
    if (G.sr.check_condition(Condition::NE)) { goto L9a7a; }
    // 009a0c: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 009a10: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 009a14: AND.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 009a18: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 009a1c: LEA.L dst:A0 src:(b092)
    G.a[0] = 0xb092;
    // 009a22: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 009a24: MOVEQ.L dst:D7 src:#0
    G.d[7].l(0);
    // 009a26: MOVE.L dst:D0 src:(A0.L)+8
    G.d[0].l(UCC(G.io->l(G.a[0] + 8)));
    // 009a2a: CMP.W dst:D0 src:(A6.L)+4a
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x4a));
    // 009a2e: Bcc cond:EQ src:(9a54)
    if (G.sr.check_condition(Condition::EQ)) { goto L9a54; }
    // 009a30: MOVE.L dst:(A6.L)+4a src:D1
    G.io->l(G.a[6] + 0x4a, UCC(G.d[1].l()));
    // 009a34: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 009a38: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 009a3e: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 009a40: ADD.W dst:D0 src:(A6.L)+34
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x34)));
    // 009a44: OR.W dst:(A1.L)+2 src:D0
    G.io->w(G.a[1] + 2, OR<W>(G.io->w(G.a[1] + 2), G.d[0].w()));
    // 009a48: MOVE.W dst:(A1.L)+4 src:(A0)+
    G.io->w(G.a[1] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 009a4c: MOVE.L dst:(A1.L)+6 src:(A0)+
    G.io->l(G.a[1] + 6, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 009a50: MOVE.L dst:(A1.L)+a src:(A0)
    G.io->l(G.a[1] + 10, UCC(G.io->l(G.a[0])));

  L9a54:;
    // 009a54: BSR src:(5ade)
    F5ade();
    // 009a58: CMPI.W dst:(A6.L)+30 src:#f
    CMP<W>(G.io->w(G.a[6] + 0x30), 15);
    // 009a5e: Bcc cond:CS src:(9a78)
    if (G.sr.check_condition(Condition::CS)) { goto L9a78; }
    // 009a60: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 009a68: BCLR.B dst:(A6) src:#5
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 5));
    // 009a6c: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 009a70: MOVE.W dst:D1 src:#0
    G.d[1].w(UCC(0));
    // 009a74: Bcc cond:True src:(5b5e)
    F5b5e();
    goto end;

  L9a78:;
    // 009a78: RTS
    goto end;

  L9a7a:;
    // 009a7a: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 009a82: Bcc cond:NE src:(9bd6)
    if (G.sr.check_condition(Condition::NE)) { goto L9bd6; }
    // 009a86: BTST.B dst:(ff2aa3) src:#4
    BTST<B>(G.io->b(0xff2aa3), 4);
    // 009a8e: Bcc cond:NE src:(9c26)
    if (G.sr.check_condition(Condition::NE)) { goto L9c26; }
    // 009a92: MOVE.W dst:D0 src:(A6.L)+36
    G.d[0].w(G.io->w(G.a[6] + 0x36));
    // 009a96: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 009a9a: SUB.W dst:D0 src:(A6.L)+32
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32)));
    // 009a9e: MOVE.W dst:(A6.L)+36 src:D0
    G.io->w(G.a[6] + 0x36, UCC(G.d[0].w()));
    // 009aa2: BSR src:(9b82)
    F9b82();
    // 009aa6: BTST.B dst:(A6.L)+29 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x29), 0);
    // 009aac: Bcc cond:EQ src:(9aea)
    if (G.sr.check_condition(Condition::EQ)) { goto L9aea; }
    // 009ab0: BSR src:(9bae)
    F9bae();
    // 009ab4: MOVE.W dst:D0 src:#1400
    G.d[0].w(0x1400);
    // 009ab8: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 009abe: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 009ac2: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 009ac4: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 009ac6: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 009aca: Bcc cond:HI src:(9aea)
    if (G.sr.check_condition(Condition::HI)) { goto L9aea; }
    // 009acc: BSET.B dst:(ff2aa3) src:#4
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 4));
    // 009ad4: MOVE.W dst:D0 src:#1a
    G.d[0].w(0x1a);
    // 009ad8: ADD.W dst:D0 src:(ff0844)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff0844)));
    // 009ade: MOVE.W dst:(A6.L)+6 src:D0
    G.io->w(G.a[6] + 6, G.d[0].w());
    // 009ae2: CLR.W dst:(A6.L)+8
    G.io->w(G.a[6] + 8, UCC(0));
    // 009ae6: Bcc cond:True src:(9b78)
    goto L9b78;

  L9aea:;
    // 009aea: MOVE.W dst:D0 src:#1400
    G.d[0].w(0x1400);
    // 009aee: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 009af4: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 009af8: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 009afa: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 009afc: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 009b00: Bcc cond:LS src:(9b2a)
    if (G.sr.check_condition(Condition::LS)) { goto L9b2a; }
    // 009b02: MOVE.W dst:(A6.L)+16 src:#1000
    G.io->w(G.a[6] + 0x16, 0x1000);
    // 009b08: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 009b0c: BSET.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 2));
    // 009b14: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 009b18: LEA.L dst:A0 src:(A6.L)+5e
    G.a[0] = G.a[6] + 0x5e;
    // 009b1c: MOVE.W dst:D1 src:#1
    G.d[1].w(UCC(1));
    // 009b20: BSR src:(5b5e)
    F5b5e();
    // 009b24: MOVE.W dst:(A6.L)+30 src:#10
    G.io->w(G.a[6] + 0x30, UCC(0x10));

  L9b2a:;
    // 009b2a: MOVE.W dst:D0 src:(A6.L)+36
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x36)));
    // 009b2e: Bcc cond:PL src:(9b32)
    if (G.sr.check_condition(Condition::PL)) { goto L9b32; }
    // 009b30: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));

  L9b32:;
    // 009b32: MOVE.W dst:D1 src:#1c0
    G.d[1].w(UCC(0x1c0));
    // 009b36: TST.W src:(ff0040)
    TST<W>(G.io->w(0xff0040));
    // 009b3c: Bcc cond:EQ src:(9b42)
    if (G.sr.check_condition(Condition::EQ)) { goto L9b42; }
    // 009b3e: MOVE.W dst:D1 src:#200
    G.d[1].w(UCC(0x200));

  L9b42:;
    // 009b42: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 009b4a: Bcc cond:CC src:(9b50)
    if (G.sr.check_condition(Condition::CC)) { goto L9b50; }
    // 009b4c: SUB.W dst:D1 src:#60
    G.d[1].w(SUB<W>(G.d[1].w(), 0x60));

  L9b50:;
    // 009b50: CMP.W dst:D0 src:D1
    CMP<W>(G.d[0].w(), G.d[1].w());
    // 009b52: Bcc cond:CC src:(9b78)
    if (G.sr.check_condition(Condition::CC)) { goto L9b78; }
    // 009b54: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 009b5a: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 009b5e: Bcc cond:NE src:(9b78)
    if (G.sr.check_condition(Condition::NE)) { goto L9b78; }
    // 009b60: BSR src:(6658)
    F6658();
    // 009b64: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 009b66: MOVE.W dst:D4 src:#180
    G.d[4].w(UCC(0x180));
    // 009b6a: TST.W src:(A6.L)+34
    TST<W>(G.io->w(G.a[6] + 0x34));
    // 009b6e: Bcc cond:NE src:(9b7a)
    if (G.sr.check_condition(Condition::NE)) { goto L9b7a; }
    // 009b70: MOVE.W dst:D3 src:#fc80
    G.d[3].w(UCC(0xfc80));
    // 009b74: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  L9b78:;
    // 009b78: RTS
    goto end;

  L9b7a:;
    // 009b7a: MOVE.W dst:D3 src:#380
    G.d[3].w(UCC(0x380));
    // 009b7e: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  L9bd6:;
    // 009bd6: SUBQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), 1));
    // 009bda: Bcc cond:CS src:(50a0)
    if (G.sr.check_condition(Condition::CS)) {
      F50a0();
      goto end;
    }
    // 009bde: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 009be2: AND.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 009be6: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 009bea: LEA.L dst:A0 src:(b092)
    G.a[0] = 0xb092;
    // 009bf0: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 009bf2: MOVEQ.L dst:D7 src:#0
    G.d[7].l(0);
    // 009bf4: MOVE.L dst:D0 src:(A0.L)+8
    G.d[0].l(UCC(G.io->l(G.a[0] + 8)));
    // 009bf8: CMP.W dst:D0 src:(A6.L)+4a
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x4a));
    // 009bfc: Bcc cond:EQ src:(9c22)
    if (G.sr.check_condition(Condition::EQ)) { goto L9c22; }
    // 009bfe: MOVE.L dst:(A6.L)+4a src:D1
    G.io->l(G.a[6] + 0x4a, UCC(G.d[1].l()));
    // 009c02: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 009c06: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 009c0c: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 009c0e: ADD.W dst:D0 src:(A6.L)+34
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x34)));
    // 009c12: OR.W dst:(A1.L)+2 src:D0
    G.io->w(G.a[1] + 2, OR<W>(G.io->w(G.a[1] + 2), G.d[0].w()));
    // 009c16: MOVE.W dst:(A1.L)+4 src:(A0)+
    G.io->w(G.a[1] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 009c1a: MOVE.L dst:(A1.L)+6 src:(A0)+
    G.io->l(G.a[1] + 6, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 009c1e: MOVE.L dst:(A1.L)+a src:(A0)
    G.io->l(G.a[1] + 10, UCC(G.io->l(G.a[0])));

  L9c22:;
    // 009c22: Bcc cond:True src:(5ade)
    F5ade();
    goto end;

  L9c26:;
    // 009c26: CMPI.W dst:(A6.L)+16 src:#7800
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x7800);
    // 009c2c: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 009c30: MOVE.W dst:D0 src:#1400
    G.d[0].w(0x1400);
    // 009c34: MOVE.W dst:D1 src:(VSCROLL_FG)
    G.d[1].w(G.io->w(VSCROLL_FG));
    // 009c3a: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 009c3e: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 009c40: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 009c42: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 009c46: Bcc cond:LS src:(9c72)
    if (G.sr.check_condition(Condition::LS)) { goto L9c72; }
    // 009c48: MOVE.W dst:(A6.L)+16 src:#1000
    G.io->w(G.a[6] + 0x16, 0x1000);
    // 009c4e: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 009c52: BSET.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 2));
    // 009c5a: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 009c5e: LEA.L dst:A0 src:(A6.L)+5e
    G.a[0] = G.a[6] + 0x5e;
    // 009c62: MOVE.W dst:D1 src:#1
    G.d[1].w(UCC(1));
    // 009c66: BSR src:(5b5e)
    F5b5e();
    // 009c6a: MOVE.W dst:(A6.L)+30 src:#10
    G.io->w(G.a[6] + 0x30, UCC(0x10));

  L9c70:;
    // 009c70: RTS
    goto end;

  L9c72:;
    // 009c72: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 009c76: BSR src:(9b82)
    F9b82();
    // 009c7a: BSR src:(9bae)
    F9bae();
    // 009c7e: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 009c84: AND.W dst:D0 src:#1
    G.d[0].w(AND<W>(G.d[0].w(), 1));
    // 009c88: Bcc cond:NE src:(9c70)
    if (G.sr.check_condition(Condition::NE)) { goto L9c70; }
    // 009c8a: MOVEQ.L dst:D4 src:#1
    G.d[4].l(UCC(1));
    // 009c8c: BSR src:(66e2)
    F66e2();
    // 009c90: TST.W src:(A6.L)+34
    TST<W>(G.io->w(G.a[6] + 0x34));
    // 009c94: Bcc cond:NE src:(9caa)
    if (G.sr.check_condition(Condition::NE)) { goto L9caa; }
    // 009c96: CMP.W dst:D1 src:#20
    CMP<W>(G.d[1].w(), 0x20);
    // 009c9a: Bcc cond:CC src:(9cbc)
    if (G.sr.check_condition(Condition::CC)) { goto L9cbc; }
    // 009c9c: CMP.W dst:D1 src:#10
    CMP<W>(G.d[1].w(), 0x10);
    // 009ca0: Bcc cond:CC src:(9ca6)
    if (G.sr.check_condition(Condition::CC)) { goto L9ca6; }
    // 009ca2: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));
    // 009ca4: Bcc cond:True src:(9cbc)
    goto L9cbc;

  L9ca6:;
    // 009ca6: MOVEQ.L dst:D1 src:#20
    G.d[1].l(UCC(0x20));
    // 009ca8: Bcc cond:True src:(9cbc)
    goto L9cbc;

  L9caa:;
    // 009caa: CMP.W dst:D1 src:#20
    CMP<W>(G.d[1].w(), 0x20);
    // 009cae: Bcc cond:CS src:(9cbc)
    if (G.sr.check_condition(Condition::CS)) { goto L9cbc; }
    // 009cb0: CMP.W dst:D1 src:#30
    CMP<W>(G.d[1].w(), 0x30);
    // 009cb4: Bcc cond:CC src:(9cba)
    if (G.sr.check_condition(Condition::CC)) { goto L9cba; }
    // 009cb6: MOVEQ.L dst:D1 src:#20
    G.d[1].l(UCC(0x20));
    // 009cb8: Bcc cond:True src:(9cbc)
    goto L9cbc;

  L9cba:;
    // 009cba: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));

  L9cbc:;
    // 009cbc: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, UCC(G.d[1].w()));
    // 009cc0: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9b82()
  {
    _log_call(__func__);

    // 009b82: LEA.L dst:A2 src:(A6.L)+6c
    G.a[2] = G.a[6] + 0x6c;
    // 009b86: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 009b8c: AND.W dst:D0 src:#4
    G.d[0].w(AND<W>(G.d[0].w(), 4));
    // 009b90: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 009b92: LEA.L dst:A0 src:(b08a)
    G.a[0] = 0xb08a;
    // 009b98: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 009b9a: MOVE.L dst:D0 src:(A0)
    G.d[0].l(G.io->l(G.a[0]));
    // 009b9c: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 009ba0: Bcc cond:EQ src:(9baa)
    if (G.sr.check_condition(Condition::EQ)) { goto L9baa; }
    // 009ba2: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 009ba6: MOVE.L dst:(A2.L)+a src:D0
    G.io->l(G.a[2] + 10, UCC(G.d[0].l()));

  L9baa:;
    // 009baa: Bcc cond:True src:(5ae2)
    F5ae2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9bae()
  {
    _log_call(__func__);

    // 009bae: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(G.io->w(SOME_STATE_COUNTER));
    // 009bb4: AND.W dst:D1 src:#2
    G.d[1].w(AND<W>(G.d[1].w(), 2));
    // 009bb8: ROR.W dst:D1 src:#5
    G.d[1].w(ROR<W>(G.d[1].w(), 5));
    // 009bba: ADD.W dst:D1 src:(A6.L)+34
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(G.a[6] + 0x34)));
    // 009bbe: LEA.L dst:A2 src:(A6.L)+5e
    G.a[2] = G.a[6] + 0x5e;
    // 009bc2: ANDI.W dst:(A2.L)+2 src:#e7ff
    G.io->w(G.a[2] + 2, AND<W>(G.io->w(G.a[2] + 2), 0xe7ff));
    // 009bc8: ANDI.W dst:D1 src:#1800
    G.d[1].w(AND<W>(G.d[1].w(), 0x1800));
    // 009bcc: OR.W dst:(A2.L)+2 src:D1
    G.io->w(G.a[2] + 2, OR<W>(G.io->w(G.a[2] + 2), G.d[1].w()));
    // 009bd0: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 009bd2: Bcc cond:True src:(5ae2)
    F5ae2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9cc2()
  {
    _log_call(__func__);

    // 009cc2: MOVEQ.L dst:D2 src:#3
    G.d[2].l(UCC(3));
    // 009cc4: LEA.L dst:A1 src:(b17e)
    G.a[1] = 0xb17e;
    // 009cca: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;

  L9cce:;
    // 009cce: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 009cd4: MOVE.W dst:D0 src:(A1)+
    G.d[0].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 009cd6: OR.W dst:(A0.L)+2 src:D0
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[0].w()));
    // 009cda: MOVE.W dst:(A0.L)+4 src:(A1)+
    G.io->w(G.a[0] + 4, UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 009cde: MOVE.L dst:(A0.L)+6 src:(A1)+
    G.io->l(G.a[0] + 6, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 009ce2: MOVE.L dst:(A0.L)+a src:(A1)+
    G.io->l(G.a[0] + 10, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 009ce6: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 009cea: DBcc.W cond:False dst:D2 src:(9cce)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L9cce; }
    // 009cee: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 009cf2: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 009cf4: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, G.d[0].w());
    // 009cf8: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 009cfc: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 009d00: Bcc cond:NE src:(9d12)
    if (G.sr.check_condition(Condition::NE)) { goto L9d12; }
    // 009d02: MOVE.W dst:(A6.L)+16 src:#f800
    G.io->w(G.a[6] + 0x16, 0xf800);
    // 009d08: MOVE.W dst:(A6.L)+32 src:#80
    G.io->w(G.a[6] + 0x32, UCC(0x80));
    // 009d0e: Bcc cond:True src:(6820)
    F6820();
    goto end;

  L9d12:;
    // 009d12: MOVEQ.L dst:D2 src:#2
    G.d[2].l(UCC(2));
    // 009d14: LEA.L dst:A0 src:(A6.L)+5e
    G.a[0] = G.a[6] + 0x5e;

  L9d18:;
    // 009d18: ORI.W dst:(A0.L)+2 src:#1000
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), 0x1000));
    // 009d1e: NEG.W dst:(A0.L)+8
    G.io->w(G.a[0] + 8, NEG<W>(G.io->w(G.a[0] + 8)));
    // 009d22: ADDI.W dst:(A0.L)+8 src:#1000
    G.io->w(G.a[0] + 8, ADD<W>(G.io->w(G.a[0] + 8), 0x1000));
    // 009d28: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 009d2c: DBcc.W cond:False dst:D2 src:(9d18)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L9d18; }
    // 009d30: ORI.W dst:(A6.L)+52 src:#1000
    G.io->w(G.a[6] + 0x52, OR<W>(G.io->w(G.a[6] + 0x52), 0x1000));
    // 009d36: MOVE.W dst:(A6.L)+16 src:#7800
    G.io->w(G.a[6] + 0x16, 0x7800);
    // 009d3c: MOVE.W dst:(A6.L)+32 src:#ff80
    G.io->w(G.a[6] + 0x32, UCC(0xff80));
    // 009d42: Bcc cond:True src:(6820)
    F6820();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9d46()
  {
    _log_call(__func__);

    // 009d46: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 009d4a: BSR src:(675a)
    F675a();
    // 009d4e: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 009d52: BSR src:(6858)
    F6858();
    // 009d56: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 009d5a: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 009d62: Bcc cond:NE src:(9dcc)
    if (G.sr.check_condition(Condition::NE)) { goto L9dcc; }
    // 009d64: MOVE.W dst:D0 src:#0
    G.d[0].w(UCC(0));
    // 009d68: BTST.B dst:(ff0077) src:#1
    BTST<B>(G.io->b(0xff0077), 1);
    // 009d70: Bcc cond:EQ src:(9d76)
    if (G.sr.check_condition(Condition::EQ)) { goto L9d76; }
    // 009d72: MOVE.W dst:D0 src:#2000
    G.d[0].w(UCC(0x2000));

  L9d76:;
    // 009d76: MOVEQ.L dst:D2 src:#3
    G.d[2].l(UCC(3));
    // 009d78: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;

  L9d7c:;
    // 009d7c: ANDI.W dst:(A0.L)+2 src:#9fff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x9fff));
    // 009d82: OR.W dst:(A0.L)+2 src:D0
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[0].w()));
    // 009d86: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 009d8a: DBcc.W cond:False dst:D2 src:(9d7c)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L9d7c; }
    // 009d8e: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 009d92: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 009d96: ANDI.W dst:(A6.L)+30 src:#1f
    G.io->w(G.a[6] + 0x30, AND<W>(G.io->w(G.a[6] + 0x30), 0x1f));
    // 009d9c: Bcc cond:NE src:(9dc6)
    if (G.sr.check_condition(Condition::NE)) {
      F9dc6();
      goto end;
    }
    // 009d9e: MOVEQ.L dst:D2 src:#3
    G.d[2].l(UCC(3));
    // 009da0: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;

  L9da4:;
    // 009da4: ANDI.W dst:(A0.L)+2 src:#9fff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x9fff));
    // 009daa: ORI.W dst:(A0.L)+2 src:#2000
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), 0x2000));
    // 009db0: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 009db4: DBcc.W cond:False dst:D2 src:(9da4)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto L9da4; }
    // 009db8: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 009dc0: MOVE.W dst:(A6.L)+12 src:(A6.L)+24
    G.io->w(G.a[6] + 0x12, UCC(G.io->w(G.a[6] + 0x24)));

  L9dc6:;
    // 009dc6: JMP src:(9dc6)
    F9dc6();
    goto end;

  L9dcc:;
    // 009dcc: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 009dd4: Bcc cond:NE src:(9e1e)
    if (G.sr.check_condition(Condition::NE)) { goto L9e1e; }
    // 009dd6: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 009dda: Bcc cond:EQ src:(9df0)
    if (G.sr.check_condition(Condition::EQ)) { goto L9df0; }
    // 009ddc: MOVE.W dst:(A6.L)+34 src:#80
    G.io->w(G.a[6] + 0x34, 0x80);
    // 009de2: ADDI.W dst:(A6.L)+16 src:#fe00
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0xfe00));
    // 009de8: ADDI.W dst:(A6.L)+1c src:#200
    G.io->w(G.a[6] + 0x1c, ADD<W>(G.io->w(G.a[6] + 0x1c), 0x200));
    // 009dee: Bcc cond:True src:(9e02)
    goto L9e02;

  L9df0:;
    // 009df0: MOVE.W dst:(A6.L)+34 src:#ff80
    G.io->w(G.a[6] + 0x34, 0xff80);
    // 009df6: ADDI.W dst:(A6.L)+16 src:#200
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0x200));
    // 009dfc: ADDI.W dst:(A6.L)+1e src:#200
    G.io->w(G.a[6] + 0x1e, ADD<W>(G.io->w(G.a[6] + 0x1e), 0x200));

  L9e02:;
    // 009e02: CMPI.W dst:(A6.L)+30 src:#18
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x18);
    // 009e08: Bcc cond:CS src:(9e16)
    if (G.sr.check_condition(Condition::CS)) { goto L9e16; }
    // 009e0a: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 009e0e: BSET.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 2));

  L9e16:;
    // 009e16: BSR src:(9dc6)
    F9dc6();
    // 009e1a: Bcc cond:True src:(9f38)
    goto L9f38;

  L9e1e:;
    // 009e1e: MOVE.W dst:(A6.L)+34 src:#0
    G.io->w(G.a[6] + 0x34, UCC(0));
    // 009e24: BTST.B dst:(ff2aa3) src:#3
    BTST<B>(G.io->b(0xff2aa3), 3);
    // 009e2c: Bcc cond:NE src:(9e5c)
    if (G.sr.check_condition(Condition::NE)) { goto L9e5c; }
    // 009e2e: ANDI.W dst:(A6.L)+30 src:#f
    G.io->w(G.a[6] + 0x30, AND<W>(G.io->w(G.a[6] + 0x30), 15));
    // 009e34: Bcc cond:EQ src:(9e54)
    if (G.sr.check_condition(Condition::EQ)) { goto L9e54; }
    // 009e36: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 009e3a: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 009e3c: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 009e40: Bcc cond:NE src:(9e16)
    if (G.sr.check_condition(Condition::NE)) { goto L9e16; }
    // 009e42: AND.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 009e46: LEA.L dst:A0 src:(b15e)
    G.a[0] = 0xb15e;
    // 009e4c: MOVE.L dst:(A6.L)+5a src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x5a, UCC(G.io->l(G.a[0] + G.d[0].w())));
    // 009e52: Bcc cond:True src:(9e16)
    goto L9e16;

  L9e54:;
    // 009e54: BSET.B dst:(ff2aa3) src:#3
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 3));

  L9e5c:;
    // 009e5c: BTST.B dst:(ff2aa3) src:#4
    BTST<B>(G.io->b(0xff2aa3), 4);
    // 009e64: Bcc cond:NE src:(9ec6)
    if (G.sr.check_condition(Condition::NE)) { goto L9ec6; }
    // 009e66: CMPI.W dst:(A6.L)+30 src:#8
    CMP<W>(G.io->w(G.a[6] + 0x30), 8);
    // 009e6c: Bcc cond:EQ src:(9e96)
    if (G.sr.check_condition(Condition::EQ)) { goto L9e96; }
    // 009e6e: CMPI.W dst:(A6.L)+30 src:#20
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x20);
    // 009e74: Bcc cond:EQ src:(9e96)
    if (G.sr.check_condition(Condition::EQ)) { goto L9e96; }
    // 009e76: CMPI.W dst:(A6.L)+30 src:#38
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x38);
    // 009e7c: Bcc cond:EQ src:(9e96)
    if (G.sr.check_condition(Condition::EQ)) { goto L9e96; }
    // 009e7e: CMPI.W dst:(A6.L)+30 src:#40
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x40);
    // 009e84: Bcc cond:CS src:(9ec2)
    if (G.sr.check_condition(Condition::CS)) { goto L9ec2; }
    // 009e86: BSET.B dst:(ff2aa3) src:#4
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 4));
    // 009e8e: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 009e92: Bcc cond:True src:(9e16)
    goto L9e16;

  L9e96:;
    // 009e96: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 009e98: MOVEM.W src:(A6.L)+14 regs:D1,D2
    G.d[1].l(G.io->w(G.a[6] + 0x14));
    G.d[2].l(G.io->w(G.a[6] + 0x16));
    // 009e9e: AND.L dst:D1 src:#ff80
    G.d[1].l(AND<L>(G.d[1].l(), 0xff80));
    // 009ea4: ASL.L dst:D1 src:#5
    G.d[1].l(ASL<L>(G.d[1].l(), 5));
    // 009ea6: AND.W dst:D2 src:#ff80
    G.d[2].w(AND<W>(G.d[2].w(), 0xff80));
    // 009eaa: LSR.W dst:D2 src:#7
    G.d[2].w(LSR<W>(G.d[2].w(), 7));
    // 009eac: ADD.W dst:D1 src:D2
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[2].w()));
    // 009eae: ADD.L dst:D1 src:#25000000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x25000000));
    // 009eb4: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 009eb8: Bcc cond:EQ src:(9ebe)
    if (G.sr.check_condition(Condition::EQ)) { goto L9ebe; }
    // 009eba: BSET.L dst:D1 src:#17
    G.d[1].l(BSET<L>(G.d[1].l(), 0x17));

  L9ebe:;
    // 009ebe: BSR src:(6600)
    F6600();

  L9ec2:;
    // 009ec2: Bcc cond:True src:(9e16)
    goto L9e16;

  L9ec6:;
    // 009ec6: BTST.B dst:(ff2aa3) src:#5
    BTST<B>(G.io->b(0xff2aa3), 5);
    // 009ece: Bcc cond:NE src:(9f08)
    if (G.sr.check_condition(Condition::NE)) { goto L9f08; }
    // 009ed0: ANDI.W dst:(A6.L)+30 src:#f
    G.io->w(G.a[6] + 0x30, AND<W>(G.io->w(G.a[6] + 0x30), 15));
    // 009ed6: Bcc cond:EQ src:(9f00)
    if (G.sr.check_condition(Condition::EQ)) { goto L9f00; }
    // 009ed8: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 009edc: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 009ede: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 009ee2: Bcc cond:NE src:(9e16)
    if (G.sr.check_condition(Condition::NE)) { goto L9e16; }
    // 009ee6: AND.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 009eea: SUBI.W dst:D0 src:#c
    G.d[0].w(SUB<W>(G.d[0].w(), 12));
    // 009eee: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 009ef0: LEA.L dst:A0 src:(b15e)
    G.a[0] = 0xb15e;
    // 009ef6: MOVE.L dst:(A6.L)+5a src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x5a, UCC(G.io->l(G.a[0] + G.d[0].w())));
    // 009efc: Bcc cond:True src:(9e16)
    goto L9e16;

  L9f00:;
    // 009f00: BSET.B dst:(ff2aa3) src:#5
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 5));

  L9f08:;
    // 009f08: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 009f0c: Bcc cond:EQ src:(9f22)
    if (G.sr.check_condition(Condition::EQ)) { goto L9f22; }
    // 009f0e: MOVE.W dst:(A6.L)+34 src:#ff80
    G.io->w(G.a[6] + 0x34, 0xff80);
    // 009f14: ADDI.W dst:(A6.L)+16 src:#200
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0x200));
    // 009f1a: SUBI.W dst:(A6.L)+1c src:#200
    G.io->w(G.a[6] + 0x1c, SUB<W>(G.io->w(G.a[6] + 0x1c), 0x200));
    // 009f20: Bcc cond:True src:(9f34)
    goto L9f34;

  L9f22:;
    // 009f22: MOVE.W dst:(A6.L)+34 src:#80
    G.io->w(G.a[6] + 0x34, 0x80);
    // 009f28: ADDI.W dst:(A6.L)+16 src:#fe00
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0xfe00));
    // 009f2e: SUBI.W dst:(A6.L)+1e src:#200
    G.io->w(G.a[6] + 0x1e, SUB<W>(G.io->w(G.a[6] + 0x1e), 0x200));

  L9f34:;
    // 009f34: BSR src:(9dc6)
    F9dc6();

  L9f38:;
    // 009f38: LEA.L dst:A0 src:(A6.L)+5e
    G.a[0] = G.a[6] + 0x5e;
    // 009f3c: MOVE.L dst:A2 src:A0
    G.a[2] = G.a[0];
    // 009f3e: MOVEQ.L dst:D1 src:#2
    G.d[1].l(2);
    // 009f40: MOVEQ.L dst:D2 src:#0
    G.d[2].l(0);
    // 009f42: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x34)));

  L9f46:;
    // 009f46: ADD.W dst:D2 src:D0
    G.d[2].w(ADD<W>(G.d[2].w(), G.d[0].w()));
    // 009f48: ADD.W dst:(A0.L)+8 src:D2
    G.io->w(G.a[0] + 8, ADD<W>(G.io->w(G.a[0] + 8), G.d[2].w()));
    // 009f4c: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 009f50: DBcc.W cond:False dst:D1 src:(9f46)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto L9f46; }
    // 009f54: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 009f56: Bcc cond:True src:(5ae2)
    F5ae2();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9dc6()
  {
    _log_call(__func__);

    // 009dc6: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 009dc8: Bcc cond:True src:(5ade)
    F5ade();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9f5a()
  {
    _log_call(__func__);

    // 009f5a: MOVE.L dst:(A6.L)+2a src:#a08c
    G.io->l(G.a[6] + 0x2a, UCC(0xa08c));
    // 009f62: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 009f68: MOVE.W dst:D2 src:#200
    G.d[2].w(UCC(0x200));
    // 009f6c: BCLR.L dst:D0 src:#b
    G.d[0].l(BCLR<L>(G.d[0].l(), 11));
    // 009f70: Bcc cond:EQ src:(9f7c)
    if (G.sr.check_condition(Condition::EQ)) { goto L9f7c; }
    // 009f72: MOVE.L dst:(A6.L)+2a src:#a0b0
    G.io->l(G.a[6] + 0x2a, UCC(0xa0b0));
    // 009f7a: NEG.W dst:D2
    G.d[2].w(NEG<W>(G.d[2].w()));

  L9f7c:;
    // 009f7c: MOVE.W dst:(A6.L)+34 src:D2
    G.io->w(G.a[6] + 0x34, UCC(G.d[2].w()));
    // 009f80: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 009f82: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, UCC(G.d[0].w()));
    // 009f86: ASL.W dst:D1 src:#7
    G.d[1].w(ASL<W>(G.d[1].w(), 7));
    // 009f88: MOVE.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, G.d[1].w());
    // 009f8c: CLR.L dst:(A6.L)+2e
    G.io->l(G.a[6] + 0x2e, UCC(0));
    // 009f90: LEA.L dst:A0 src:(b1ae)
    G.a[0] = 0xb1ae;
    // 009f96: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 009f98: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 009f9e: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 009fa2: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 009fa6: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 009faa: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 009fac: Bcc cond:True src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F9fb0()
  {
    _log_call(__func__);

    // 009fb0: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 009fb4: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 009fb8: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 009fbc: Bcc cond:MI src:(8bc6)
    if (G.sr.check_condition(Condition::MI)) {
      F8bc6();
      goto end;
    }
    // 009fc0: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 009fc4: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 009fc8: SUBI.W dst:(A6.L)+14 src:#40
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x40));
    // 009fce: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 009fd6: Bcc cond:NE src:(a022)
    if (G.sr.check_condition(Condition::NE)) { goto La022; }
    // 009fda: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 009fde: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(G.io->w(G.a[6] + 0x34));
    // 009fe2: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 009fe6: CMPI.W dst:(A6.L)+30 src:#a
    CMP<W>(G.io->w(G.a[6] + 0x30), 10);
    // 009fec: Bcc cond:CS src:(5984)
    if (G.sr.check_condition(Condition::CS)) {
      _m->update_sprite_with_something(G.a[6]);
      goto end;
    }
    // 009ff0: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 009ff8: MOVE.W dst:D0 src:(ff006e)
    G.d[0].w(G.io->w(0xff006e));
    // 009ffe: ADD.W dst:D0 src:(ff0844)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff0844)));
    // 00a004: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00a006: SUB.W dst:D0 src:#40
    G.d[0].w(SUB<W>(G.d[0].w(), 0x40));
    // 00a00a: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 00a00c: MOVE.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, G.d[0].w());
    // 00a010: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 00a016: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00a01a: ASL.W dst:D0 src:#4
    G.d[0].w(ASL<W>(G.d[0].w(), 4));
    // 00a01c: MOVE.W dst:(A6.L)+32 src:D0
    G.io->w(G.a[6] + 0x32, UCC(G.d[0].w()));
    // 00a020: RTS
    goto end;

  La022:;
    // 00a022: BSR src:(675a)
    F675a();
    // 00a026: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 00a02a: BSR src:(5114)
    F5114();
    // 00a02e: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 00a032: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00a038: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00a03a: ANDI.W dst:D1 src:#1
    G.d[1].w(AND<W>(G.d[1].w(), 1));
    // 00a03e: Bcc cond:NE src:(a06a)
    if (G.sr.check_condition(Condition::NE)) { goto La06a; }
    // 00a040: AND.W dst:D0 src:#6
    G.d[0].w(AND<W>(G.d[0].w(), 6));
    // 00a044: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 00a048: LEA.L dst:A0 src:(b1ae)
    G.a[0] = 0xb1ae;
    // 00a04e: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00a050: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00a052: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00a058: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 00a05c: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00a060: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 00a064: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00a066: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  La06a:;
    // 00a06a: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00a06e: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 00a072: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00a076: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 00a07a: Bcc cond:CC src:(a08a)
    if (G.sr.check_condition(Condition::CC)) { goto La08a; }
    // 00a07c: BSR src:(6658)
    F6658();
    // 00a080: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00a082: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 00a086: Bcc cond:True src:(6b1c)
    F6b1c();
    goto end;

  La08a:;
    // 00a08a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa0d4()
  {
    _log_call(__func__);

    // 00a0d4: ANDI.W dst:(A6.L)+10 src:#9fff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x9fff));
    // 00a0da: ORI.W dst:(A6.L)+10 src:#6000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x6000));
    // 00a0e0: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00a0e4: Bcc cond:NE src:(a0fc)
    if (G.sr.check_condition(Condition::NE)) { goto La0fc; }
    // 00a0e6: MOVE.W dst:(A6) src:#8000
    G.io->w(G.a[6], UCC(0x8000));
    // 00a0ea: BSR src:(50e6)
    F50e6();
    // 00a0ee: ANDI.W dst:(A6.L)+10 src:#9fff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x9fff));
    // 00a0f4: ORI.W dst:(A6.L)+10 src:#4000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x4000));
    // 00a0fa: Bcc cond:True src:(a10c)
    goto La10c;

  La0fc:;
    // 00a0fc: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 00a102: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00a104: ASL.W dst:D1 src:#7
    G.d[1].w(ASL<W>(G.d[1].w(), 7));
    // 00a106: MOVEM.W dst:(A6.L)+14 regs:D0,D1
    G.io->w(G.a[6] + 0x14, G.d[0].w());
    G.io->w(G.a[6] + 0x16, G.d[1].w());

  La10c:;
    // 00a10c: BTST.B dst:(ff0001) src:#0
    BTST<B>(G.io->b(0xff0001), 0);
    // 00a114: Bcc cond:EQ src:(a11a)
    if (G.sr.check_condition(Condition::EQ)) { goto La11a; }
    // 00a116: BSET.B dst:(A6) src:#1
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 1));

  La11a:;
    // 00a11a: MOVE.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, 1);
    // 00a120: MOVE.W dst:D0 src:(ff006e)
    G.d[0].w(G.io->w(0xff006e));
    // 00a126: ADD.W dst:D0 src:(ff0844)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff0844)));
    // 00a12c: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00a12e: MOVE.W dst:(A6.L)+30 src:#68
    G.io->w(G.a[6] + 0x30, 0x68);
    // 00a134: SUB.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), G.d[0].w()));
    // 00a138: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, 0);
    // 00a13c: MOVE.W dst:(A6.L)+38 src:#30
    G.io->w(G.a[6] + 0x38, UCC(0x30));
    // 00a142: BSR src:(6820)
    F6820();
    // 00a146: MOVE.W dst:D0 src:(A6.L)+38
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x38)));
    // 00a14a: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 00a14c: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 00a150: LEA.L dst:A0 src:(b1c6)
    G.a[0] = 0xb1c6;
    // 00a156: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00a158: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00a15a: ANDI.W dst:(A6.L)+10 src:#e7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0xe7ff));
    // 00a160: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 00a164: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00a168: MOVE.L dst:D1 src:(A0)
    G.d[1].l(G.io->l(G.a[0]));
    // 00a16a: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 00a16c: Bcc cond:True src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa170()
  {
    _log_call(__func__);

    // 00a170: BSR src:(6858)
    F6858();
    // 00a174: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00a178: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 00a17c: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00a180: Bcc cond:MI src:(a256)
    if (G.sr.check_condition(Condition::MI)) { goto La256; }
    // 00a184: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00a188: Bcc cond:EQ src:(a196)
    if (G.sr.check_condition(Condition::EQ)) { goto La196; }
    // 00a18a: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00a18e: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00a192: Bcc cond:CS src:(a256)
    if (G.sr.check_condition(Condition::CS)) { goto La256; }

  La196:;
    // 00a196: BSR src:(675a)
    F675a();
    // 00a19a: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 00a19e: BSR src:(5114)
    F5114();
    // 00a1a2: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 00a1a6: Bcc cond:NE src:(a1ac)
    if (G.sr.check_condition(Condition::NE)) { goto La1ac; }
    // 00a1a8: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  La1ac:;
    // 00a1ac: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00a1b2: AND.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 00a1b6: Bcc cond:NE src:(a1d4)
    if (G.sr.check_condition(Condition::NE)) { goto La1d4; }
    // 00a1b8: MOVE.W dst:-(USP) src:(A6.L)+8
    G.a[7] -= 2;
    G.io->w(G.a[7], G.io->w(G.a[6] + 8));
    // 00a1bc: MOVE.W dst:(A6.L)+8 src:(A6.L)+38
    G.io->w(G.a[6] + 8, G.io->w(G.a[6] + 0x38));
    // 00a1c2: MOVEQ.L dst:D4 src:#4
    G.d[4].l(UCC(4));
    // 00a1c4: BSR src:(66e2)
    F66e2();
    // 00a1c8: AND.W dst:D1 src:#3c
    G.d[1].w(AND<W>(G.d[1].w(), 0x3c));
    // 00a1cc: MOVE.W dst:(A6.L)+38 src:D1
    G.io->w(G.a[6] + 0x38, G.d[1].w());
    // 00a1d0: MOVE.W dst:(A6.L)+8 src:(USP)+
    G.io->w(G.a[6] + 8, UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  La1d4:;
    // 00a1d4: MOVE.W dst:D0 src:(A6.L)+38
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x38)));
    // 00a1d8: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 00a1da: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 00a1de: LEA.L dst:A0 src:(b1c6)
    G.a[0] = 0xb1c6;
    // 00a1e4: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00a1e6: MOVE.L dst:D0 src:(A0.L)+2
    G.d[0].l(G.io->l(G.a[0] + 2));
    // 00a1ea: CMP.L dst:D0 src:(A6.L)+44
    CMP<L>(G.d[0].l(), G.io->l(G.a[6] + 0x44));
    // 00a1ee: Bcc cond:EQ src:(a20c)
    if (G.sr.check_condition(Condition::EQ)) { goto La20c; }
    // 00a1f0: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 00a1f4: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00a1f6: ANDI.W dst:(A6.L)+10 src:#e7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0xe7ff));
    // 00a1fc: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x10)));
    // 00a200: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00a204: MOVE.L dst:D1 src:(A0)
    G.d[1].l(G.io->l(G.a[0]));
    // 00a206: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 00a208: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  La20c:;
    // 00a20c: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00a210: BTST.B dst:(A6) src:#1
    BTST<B>(G.io->b(G.a[6]), 1);
    // 00a214: Bcc cond:NE src:(a254)
    if (G.sr.check_condition(Condition::NE)) { goto La254; }
    // 00a216: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 00a21a: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00a21e: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 00a222: Bcc cond:CC src:(a254)
    if (G.sr.check_condition(Condition::CC)) { goto La254; }
    // 00a224: BSR src:(6658)
    F6658();
    // 00a228: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00a22a: ADDQ.W dst:D1 src:#2
    G.d[1].w(ADD<W>(G.d[1].w(), 2));
    // 00a22c: AND.W dst:D1 src:#3c
    G.d[1].w(AND<W>(G.d[1].w(), 0x3c));
    // 00a230: CMP.W dst:D1 src:(A6.L)+38
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x38));
    // 00a234: Bcc cond:NE src:(a254)
    if (G.sr.check_condition(Condition::NE)) { goto La254; }
    // 00a236: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, 0);
    // 00a23a: MOVE.W dst:D1 src:(A6.L)+38
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x38)));
    // 00a23e: LEA.L dst:A0 src:(a272)
    G.a[0] = 0xa272;
    // 00a244: MOVE.W dst:D3 src:(A0,D1.W)+0
    G.d[3].w(G.io->w(G.a[0] + G.d[1].w()));
    // 00a248: MOVE.W dst:D4 src:(A0,D1.W)+2
    G.d[4].w(G.io->w(G.a[0] + G.d[1].w() + 2));
    // 00a24c: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 00a250: BSR src:(6b12)
    F6b12();

  La254:;
    // 00a254: RTS
    goto end;

  La256:;
    // 00a256: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00a25a: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 00a25e: MOVE.L dst:D1 src:(A6.L)+14
    G.d[1].l(G.io->l(G.a[6] + 0x14));
    // 00a262: AND.W dst:D1 src:#ff80
    G.d[1].w(AND<W>(G.d[1].w(), 0xff80));
    // 00a266: MOVEQ.L dst:D0 src:#22
    G.d[0].l(UCC(0x22));
    // 00a268: BSR src:(6600)
    F6600();
    // 00a26c: JMP src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa2b2()
  {
    _log_call(__func__);

    // 00a2b2: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 00a2b4: CMPI.W dst:(A6.L)+28 src:#2
    CMP<W>(G.io->w(G.a[6] + 0x28), 2);
    // 00a2ba: Bcc cond:NE src:(a2ce)
    if (G.sr.check_condition(Condition::NE)) { goto La2ce; }
    // 00a2bc: CMPI.W dst:(ff0856) src:#5000
    CMP<W>(G.io->w(0xff0856), 0x5000);
    // 00a2c4: Bcc cond:CS src:(a2ca)
    if (G.sr.check_condition(Condition::CS)) { goto La2ca; }
    // 00a2c6: MOVE.W dst:D0 src:#800
    G.d[0].w(UCC(0x800));

  La2ca:;
    // 00a2ca: MOVE.W dst:(A6.L)+28 src:D0
    G.io->w(G.a[6] + 0x28, UCC(G.d[0].w()));

  La2ce:;
    // 00a2ce: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00a2d4: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00a2d8: ORI.W dst:(A6.L)+10 src:#6000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x6000));
    // 00a2de: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, 0x30);
    // 00a2e4: MOVE.W dst:(A6.L)+14 src:#a800
    G.io->w(G.a[6] + 0x14, 0xa800);
    // 00a2ea: MOVE.W dst:(A6.L)+38 src:#f800
    G.io->w(G.a[6] + 0x38, UCC(0xf800));
    // 00a2f0: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 00a2f4: Bcc cond:EQ src:(a308)
    if (G.sr.check_condition(Condition::EQ)) { goto La308; }
    // 00a2f6: MOVE.W dst:(A6.L)+14 src:#f800
    G.io->w(G.a[6] + 0x14, 0xf800);
    // 00a2fc: MOVE.W dst:(A6.L)+8 src:#10
    G.io->w(G.a[6] + 8, 0x10);
    // 00a302: MOVE.W dst:(A6.L)+38 src:#800
    G.io->w(G.a[6] + 0x38, UCC(0x800));

  La308:;
    // 00a308: MOVE.W dst:D0 src:(ff0856)
    G.d[0].w(UCC(G.io->w(0xff0856)));
    // 00a30e: ROR.W dst:D0 src:#7
    G.d[0].w(ROR<W>(G.d[0].w(), 7));
    // 00a310: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00a316: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00a31a: MULU.W dst:D0 src:#18
    G.d[0].l(MULU(G.d[0].w(), 0x18));
    // 00a31e: CMPI.W dst:(ff0858) src:#3800
    CMP<W>(G.io->w(0xff0858), 0x3800);
    // 00a326: Bcc cond:CS src:(a32a)
    if (G.sr.check_condition(Condition::CS)) { goto La32a; }
    // 00a328: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));

  La32a:;
    // 00a32a: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00a32c: ADD.W dst:D0 src:#3800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3800));
    // 00a330: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, G.d[0].w());
    // 00a334: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00a33a: CMP.W dst:D0 src:#2
    CMP<W>(G.d[0].w(), 2);
    // 00a33e: Bcc cond:CS src:(a342)
    if (G.sr.check_condition(Condition::CS)) { goto La342; }
    // 00a340: SUBQ.W dst:D0 src:#2
    G.d[0].w(SUB<W>(G.d[0].w(), 2));

  La342:;
    // 00a342: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00a344: ADDQ.W dst:D0 src:#1
    G.d[0].w(ADD<W>(G.d[0].w(), 1));
    // 00a346: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 00a34a: MOVE.W dst:(A6.L)+30 src:#30
    G.io->w(G.a[6] + 0x30, 0x30);
    // 00a350: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));
    // 00a354: Bcc cond:True src:(6820)
    F6820();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa358()
  {
    _log_call(__func__);

    // 00a358: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00a35c: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 00a360: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00a364: Bcc cond:MI src:(8bc6)
    if (G.sr.check_condition(Condition::MI)) {
      F8bc6();
      goto end;
    }
    // 00a368: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00a36c: Bcc cond:EQ src:(a37a)
    if (G.sr.check_condition(Condition::EQ)) { goto La37a; }
    // 00a36e: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00a372: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00a376: Bcc cond:CS src:(8bc6)
    if (G.sr.check_condition(Condition::CS)) {
      F8bc6();
      goto end;
    }

  La37a:;
    // 00a37a: BSR src:(675a)
    F675a();
    // 00a37e: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 00a382: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(G.io->w(SOME_STATE_COUNTER));
    // 00a388: AND.W dst:D1 src:#2
    G.d[1].w(AND<W>(G.d[1].w(), 2));
    // 00a38c: LSL.W dst:D1 src:#1
    G.d[1].w(LSL<W>(G.d[1].w(), 1));
    // 00a38e: LEA.L dst:A0 src:(b292)
    G.a[0] = 0xb292;
    // 00a394: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 00a396: MOVEQ.L dst:D7 src:#0
    G.d[7].l(0);
    // 00a398: MOVE.L dst:D1 src:(A0)
    G.d[1].l(G.io->l(G.a[0]));
    // 00a39a: CMP.L dst:D1 src:(A6.L)+44
    CMP<L>(G.d[1].l(), G.io->l(G.a[6] + 0x44));
    // 00a39e: Bcc cond:EQ src:(a3b2)
    if (G.sr.check_condition(Condition::EQ)) { goto La3b2; }
    // 00a3a0: MOVE.L dst:(A6.L)+44 src:D0
    G.io->l(G.a[6] + 0x44, G.d[0].l());
    // 00a3a4: MOVE.W dst:D2 src:(A6.L)+10
    G.d[2].w(G.io->w(G.a[6] + 0x10));
    // 00a3a8: ANDI.W dst:D2 src:#7ff
    G.d[2].w(AND<W>(G.d[2].w(), 0x7ff));
    // 00a3ac: MOVEQ.L dst:D0 src:#10
    G.d[0].l(UCC(0x10));
    // 00a3ae: BSR src:(5c5c)
    _m->add_to_dma_queue(G.d[0].w(), G.d[1].l(), G.d[2].w());

  La3b2:;
    // 00a3b2: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00a3b6: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 00a3be: Bcc cond:NE src:(a3fa)
    if (G.sr.check_condition(Condition::NE)) { goto La3fa; }
    // 00a3c0: BSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 00a3c4: SUBQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00a3c8: Bcc cond:NE src:(a3d2)
    if (G.sr.check_condition(Condition::NE)) { goto La3d2; }
    // 00a3ca: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));

  La3d2:;
    // 00a3d2: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 00a3da: Bcc cond:EQ src:(a3f8)
    if (G.sr.check_condition(Condition::EQ)) { goto La3f8; }
    // 00a3dc: CMPI.W dst:(A6.L)+16 src:#1000
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x1000);
    // 00a3e2: Bcc cond:CS src:(a3ec)
    if (G.sr.check_condition(Condition::CS)) { goto La3ec; }
    // 00a3e4: CMPI.W dst:(A6.L)+16 src:#6000
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x6000);
    // 00a3ea: Bcc cond:CS src:(a3f8)
    if (G.sr.check_condition(Condition::CS)) { goto La3f8; }

  La3ec:;
    // 00a3ec: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 00a3f0: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));

  La3f8:;
    // 00a3f8: RTS
    goto end;

  La3fa:;
    // 00a3fa: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00a3fe: Bcc cond:EQ src:(a406)
    if (G.sr.check_condition(Condition::EQ)) { goto La406; }
    // 00a400: CMP.W dst:D0 src:#8
    CMP<W>(G.d[0].w(), 8);
    // 00a404: Bcc cond:NE src:(a42a)
    if (G.sr.check_condition(Condition::NE)) { goto La42a; }

  La406:;
    // 00a406: BSR src:(6658)
    F6658();
    // 00a40a: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 00a40e: Bcc cond:NE src:(a418)
    if (G.sr.check_condition(Condition::NE)) { goto La418; }
    // 00a410: CMP.W dst:D1 src:#20
    CMP<W>(G.d[1].w(), 0x20);
    // 00a414: Bcc cond:CS src:(a42a)
    if (G.sr.check_condition(Condition::CS)) { goto La42a; }
    // 00a416: Bcc cond:True src:(a41e)
    goto La41e;

  La418:;
    // 00a418: CMP.W dst:D1 src:#20
    CMP<W>(G.d[1].w(), 0x20);
    // 00a41c: Bcc cond:CC src:(a42a)
    if (G.sr.check_condition(Condition::CC)) { goto La42a; }

  La41e:;
    // 00a41e: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00a420: MOVE.W dst:D3 src:(A6.L)+38
    G.d[3].w(G.io->w(G.a[6] + 0x38));
    // 00a424: MOVEQ.L dst:D4 src:#0
    G.d[4].l(UCC(0));
    // 00a426: BSR src:(6b12)
    F6b12();

  La42a:;
    // 00a42a: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00a42e: CMPI.W dst:(A6.L)+30 src:#9
    CMP<W>(G.io->w(G.a[6] + 0x30), 9);
    // 00a434: Bcc cond:NE src:(a3f8)
    if (G.sr.check_condition(Condition::NE)) { goto La3f8; }
    // 00a436: BCLR.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 1));
    // 00a43e: BCHG.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BCHG<B>(G.io->b(0xff2aa3), 2));
    // 00a446: Bcc cond:NE src:(a4ac)
    if (G.sr.check_condition(Condition::NE)) { goto La4ac; }
    // 00a448: MOVE.W dst:(A6.L)+30 src:#20
    G.io->w(G.a[6] + 0x30, UCC(0x20));
    // 00a44e: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 00a452: Bcc cond:NE src:(a480)
    if (G.sr.check_condition(Condition::NE)) { goto La480; }
    // 00a454: MOVE.W dst:D0 src:(ff0858)
    G.d[0].w(UCC(G.io->w(0xff0858)));
    // 00a45a: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 00a45e: Bcc cond:CC src:(a470)
    if (G.sr.check_condition(Condition::CC)) { goto La470; }
    // 00a460: CMPI.W dst:(A6.L)+16 src:#1000
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x1000);
    // 00a466: Bcc cond:CS src:(a478)
    if (G.sr.check_condition(Condition::CS)) { goto La478; }

  La468:;
    // 00a468: MOVE.W dst:(A6.L)+8 src:#1a
    G.io->w(G.a[6] + 8, UCC(0x1a));
    // 00a46e: RTS
    goto end;

  La470:;
    // 00a470: CMPI.W dst:(A6.L)+16 src:#6800
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x6800);
    // 00a476: Bcc cond:CC src:(a468)
    if (G.sr.check_condition(Condition::CC)) { goto La468; }

  La478:;
    // 00a478: MOVE.W dst:(A6.L)+8 src:#6
    G.io->w(G.a[6] + 8, UCC(6));
    // 00a47e: RTS
    goto end;

  La480:;
    // 00a480: MOVE.W dst:D0 src:(ff0858)
    G.d[0].w(UCC(G.io->w(0xff0858)));
    // 00a486: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 00a48a: Bcc cond:CC src:(a49c)
    if (G.sr.check_condition(Condition::CC)) { goto La49c; }
    // 00a48c: CMPI.W dst:(A6.L)+16 src:#1000
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x1000);
    // 00a492: Bcc cond:CS src:(a4a4)
    if (G.sr.check_condition(Condition::CS)) { goto La4a4; }

  La494:;
    // 00a494: MOVE.W dst:(A6.L)+8 src:#26
    G.io->w(G.a[6] + 8, UCC(0x26));
    // 00a49a: RTS
    goto end;

  La49c:;
    // 00a49c: CMPI.W dst:(A6.L)+16 src:#6800
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x6800);
    // 00a4a2: Bcc cond:CC src:(a494)
    if (G.sr.check_condition(Condition::CC)) { goto La494; }

  La4a4:;
    // 00a4a4: MOVE.W dst:(A6.L)+8 src:#3a
    G.io->w(G.a[6] + 8, UCC(0x3a));
    // 00a4aa: RTS
    goto end;

  La4ac:;
    // 00a4ac: MOVE.W dst:(A6.L)+30 src:#30
    G.io->w(G.a[6] + 0x30, UCC(0x30));
    // 00a4b2: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 00a4b6: Bcc cond:NE src:(a4c0)
    if (G.sr.check_condition(Condition::NE)) { goto La4c0; }
    // 00a4b8: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, UCC(0x30));
    // 00a4be: RTS
    goto end;

  La4c0:;
    // 00a4c0: MOVE.W dst:(A6.L)+8 src:#10
    G.io->w(G.a[6] + 8, UCC(0x10));
    // 00a4c6: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa4d8()
  {
    _log_call(__func__);

    // 00a4d8: BSET.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 5));
    // 00a4e0: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00a4e2: MOVEQ.L dst:D7 src:#3
    G.d[7].l(3);
    // 00a4e4: MOVE.L dst:D1 src:#1f0000a2
    G.d[1].l(UCC(0x1f0000a2));

  La4ea:;
    // 00a4ea: BSR src:(6600)
    F6600();
    // 00a4ee: ADDQ.W dst:D1 src:#1
    G.d[1].w(ADD<W>(G.d[1].w(), 1));
    // 00a4f0: DBcc.W cond:False dst:D7 src:(a4ea)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto La4ea; }
    // 00a4f4: CLR.L dst:(ff0042)
    G.io->l(0xff0042, 0);
    // 00a4fa: MOVE.W dst:(A6.L)+24 src:#30
    G.io->w(G.a[6] + 0x24, UCC(0x30));
    // 00a500: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa502()
  {
    _log_call(__func__);

    goto La502;

  La500:;
    // 00a500: RTS
    goto end;

  La502:;
    // 00a502: CMPI.W dst:(ff0044) src:#4
    CMP<W>(G.io->w(0xff0044), 4);
    // 00a50a: Bcc cond:NE src:(a500)
    if (G.sr.check_condition(Condition::NE)) { goto La500; }
    // 00a50c: SUBQ.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, SUB<W>(G.io->w(G.a[6] + 0x24), 1));
    // 00a510: Bcc cond:NE src:(a500)
    if (G.sr.check_condition(Condition::NE)) { goto La500; }
    // 00a512: BCLR.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 5));
    // 00a51a: MOVE.W dst:D0 src:(ff0842)
    G.d[0].w(UCC(G.io->w(0xff0842)));
    // 00a520: BTST.L dst:D0 src:#3
    BTST<L>(G.d[0].l(), 3);
    // 00a524: Bcc cond:NE src:(a542)
    if (G.sr.check_condition(Condition::NE)) { goto La542; }
    // 00a528: BTST.L dst:D0 src:#c
    BTST<L>(G.d[0].l(), 12);
    // 00a52c: Bcc cond:NE src:(a542)
    if (G.sr.check_condition(Condition::NE)) { goto La542; }
    // 00a530: MOVE.W dst:D0 src:#0
    G.d[0].w(UCC(0));
    // 00a534: JSR src:(663a)
    F663a();
    // 00a53a: MOVE.W dst:(ff0882) src:#1
    G.io->w(0xff0882, UCC(1));

  La542:;
    // 00a542: Bcc cond:True src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa546()
  {
    _log_call(__func__);

    // 00a546: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00a54c: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00a552: Bcc cond:EQ src:(a55a)
    if (G.sr.check_condition(Condition::EQ)) { goto La55a; }
    // 00a554: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;

  La55a:;
    // 00a55a: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00a560: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00a562: MOVE.W dst:(A6.L)+24 src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x24, G.io->w(G.a[0] + G.d[0].w()));
    // 00a568: MOVE.W dst:(A6.L)+3e src:#249f
    G.io->w(G.a[6] + 0x3e, UCC(0x249f));
    // 00a56e: BSR src:(50e6)
    F50e6();
    // 00a572: BSR src:(6820)
    F6820();
    // 00a576: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 00a57a: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 00a580: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00a584: ASL.W dst:D0 src:#4
    G.d[0].w(ASL<W>(G.d[0].w(), 4));
    // 00a586: MOVE.W dst:(A6.L)+36 src:D0
    G.io->w(G.a[6] + 0x36, G.d[0].w());
    // 00a58a: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00a590: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 00a592: ADD.W dst:D0 src:(ff006e)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 00a598: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00a59a: ADD.W dst:D0 src:(ff006e)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff006e)));
    // 00a5a0: MOVE.W dst:(A6.L)+34 src:#80
    G.io->w(G.a[6] + 0x34, 0x80);
    // 00a5a6: SUB.W dst:(A6.L)+34 src:D0
    G.io->w(G.a[6] + 0x34, SUB<W>(G.io->w(G.a[6] + 0x34), G.d[0].w()));
    // 00a5aa: LEA.L dst:A0 src:(b0c2)
    G.a[0] = 0xb0c2;
    // 00a5b0: MOVEQ.L dst:D7 src:#5
    G.d[7].l(UCC(5));
    // 00a5b2: Bcc cond:True src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa5b6()
  {
    _log_call(__func__);

    // 00a5b6: BSR src:(5114)
    F5114();
    // 00a5ba: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00a5be: Bcc cond:NE src:(8bc6)
    if (G.sr.check_condition(Condition::NE)) {
      F8bc6();
      goto end;
    }
    // 00a5c2: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00a5c6: Bcc cond:MI src:(a6cc)
    if (G.sr.check_condition(Condition::MI)) { goto La6cc; }
    // 00a5ca: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00a5ce: Bcc cond:EQ src:(a5e2)
    if (G.sr.check_condition(Condition::EQ)) { goto La5e2; }
    // 00a5d0: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00a5d4: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00a5d8: Bcc cond:CS src:(a6cc)
    if (G.sr.check_condition(Condition::CS)) { goto La6cc; }
    // 00a5dc: MOVEQ.L dst:D0 src:#1
    G.d[0].l(UCC(1));
    // 00a5de: BSR src:(62d0)
    F62d0();

  La5e2:;
    // 00a5e2: SUBQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, SUB<W>(G.io->w(G.a[6] + 0x3e), 1));
    // 00a5e6: Bcc cond:CC src:(a5f6)
    if (G.sr.check_condition(Condition::CC)) { goto La5f6; }
    // 00a5e8: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, 0);
    // 00a5ec: MOVE.W dst:(A6.L)+c src:#1000
    G.io->w(G.a[6] + 12, UCC(0x1000));
    // 00a5f2: BSET.B dst:(A6) src:#6
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 6));

  La5f6:;
    // 00a5f6: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 00a5fa: Bcc cond:NE src:(a600)
    if (G.sr.check_condition(Condition::NE)) { goto La600; }
    // 00a5fc: BSR src:(677c)
    _m->F677c_manual(G.a[6]);

  La600:;
    // 00a600: ADDQ.W dst:(A6.L)+36 src:#1
    G.io->w(G.a[6] + 0x36, ADD<W>(G.io->w(G.a[6] + 0x36), 1));
    // 00a604: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 00a60c: Bcc cond:NE src:(a642)
    if (G.sr.check_condition(Condition::NE)) { goto La642; }
    // 00a60e: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(G.io->w(G.a[6] + 0x34));
    // 00a612: MOVE.W dst:D1 src:(ff0044)
    G.d[1].w(UCC(G.io->w(0xff0044)));
    // 00a618: ASL.W dst:D1 src:#4
    G.d[1].w(ASL<W>(G.d[1].w(), 4));
    // 00a61a: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 00a61c: Bcc cond:CS src:(a624)
    if (G.sr.check_condition(Condition::CS)) { goto La624; }
    // 00a61e: CMP.W dst:D0 src:#10
    CMP<W>(G.d[0].w(), 0x10);
    // 00a622: Bcc cond:CC src:(a628)
    if (G.sr.check_condition(Condition::CC)) { goto La628; }

  La624:;
    // 00a624: MOVE.W dst:D0 src:#10
    G.d[0].w(UCC(0x10));

  La628:;
    // 00a628: CMP.W dst:D0 src:(A6.L)+36
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x36));
    // 00a62c: Bcc cond:CC src:(a664)
    if (G.sr.check_condition(Condition::CC)) { goto La664; }
    // 00a62e: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));
    // 00a632: BTST.B dst:(A6) src:#1
    BTST<B>(G.io->b(G.a[6]), 1);
    // 00a636: Bcc cond:NE src:(a664)
    if (G.sr.check_condition(Condition::NE)) { goto La664; }
    // 00a638: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 00a640: Bcc cond:True src:(a664)
    goto La664;

  La642:;
    // 00a642: CMPI.W dst:(A6.L)+36 src:#8
    CMP<W>(G.io->w(G.a[6] + 0x36), 8);
    // 00a648: Bcc cond:NE src:(a64e)
    if (G.sr.check_condition(Condition::NE)) { goto La64e; }
    // 00a64a: BSR src:(a6d8)
    Fa6d8();

  La64e:;
    // 00a64e: MOVE.W dst:D1 src:(A6.L)+36
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x36)));
    // 00a652: CMP.W dst:D1 src:#f
    CMP<W>(G.d[1].w(), 15);
    // 00a656: Bcc cond:NE src:(a664)
    if (G.sr.check_condition(Condition::NE)) { goto La664; }
    // 00a658: BCLR.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 1));
    // 00a660: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));

  La664:;
    // 00a664: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 00a66c: Bcc cond:NE src:(a67c)
    if (G.sr.check_condition(Condition::NE)) { goto La67c; }
    // 00a66e: BCLR.B dst:(A6) src:#0
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 0));
    // 00a672: Bcc cond:EQ src:(a6a0)
    if (G.sr.check_condition(Condition::EQ)) { goto La6a0; }
    // 00a674: BSET.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 2));

  La67c:;
    // 00a67c: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00a680: CMPI.W dst:(A6.L)+30 src:#18
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x18);
    // 00a686: Bcc cond:NE src:(a68c)
    if (G.sr.check_condition(Condition::NE)) { goto La68c; }
    // 00a688: BSR src:(a74a)
    Fa74a();

  La68c:;
    // 00a68c: CMPI.W dst:(A6.L)+30 src:#30
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x30);
    // 00a692: Bcc cond:CS src:(a6a0)
    if (G.sr.check_condition(Condition::CS)) { goto La6a0; }
    // 00a694: BCLR.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 2));
    // 00a69c: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));

  La6a0:;
    // 00a6a0: MOVE.W dst:D3 src:(A6.L)+30
    G.d[3].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00a6a4: CMP.W dst:D3 src:#18
    CMP<W>(G.d[3].w(), 0x18);
    // 00a6a8: Bcc cond:CS src:(a6b0)
    if (G.sr.check_condition(Condition::CS)) { goto La6b0; }
    // 00a6aa: SUBI.W dst:D3 src:#30
    G.d[3].w(SUB<W>(G.d[3].w(), 0x30));
    // 00a6ae: NEG.W dst:D3
    G.d[3].w(NEG<W>(G.d[3].w()));

  La6b0:;
    // 00a6b0: MOVE.W dst:D4 src:#800
    G.d[4].w(UCC(0x800));
    // 00a6b4: ASL.W dst:D3 src:#7
    G.d[3].w(ASL<W>(G.d[3].w(), 7));
    // 00a6b6: SUB.W dst:D4 src:D3
    G.d[4].w(SUB<W>(G.d[4].w(), G.d[3].w()));
    // 00a6b8: LEA.L dst:A0 src:(A6.L)+88
    G.a[0] = G.a[6] + 0x88;
    // 00a6bc: MOVE.W dst:(A0.L)+8 src:D4
    G.io->w(G.a[0] + 8, G.d[4].w());
    // 00a6c0: MOVE.W dst:(A0.L)+16 src:D4
    G.io->w(G.a[0] + 0x16, G.d[4].w());
    // 00a6c4: MOVEQ.L dst:D7 src:#5
    G.d[7].l(UCC(5));
    // 00a6c6: BSR src:(5ade)
    F5ade();
    // 00a6ca: RTS
    goto end;

  La6cc:;
    // 00a6cc: ADDQ.W dst:(ff0044) src:#1
    G.io->w(0xff0044, ADD<W>(G.io->w(0xff0044), 1));
    // 00a6d2: JMP src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa6d8()
  {
    _log_call(__func__);

    // 00a6d8: BTST.B dst:(ff0001) src:#4
    BTST<B>(G.io->b(0xff0001), 4);
    // 00a6e0: Bcc cond:NE src:(a6f8)
    if (G.sr.check_condition(Condition::NE)) { goto La6f8; }
    // 00a6e2: LEA.L dst:A5 src:(ff02c2)
    G.a[5] = 0xff02c2;
    // 00a6e8: MOVE.W dst:D7 src:#f
    G.d[7].w(UCC(15));

  La6ec:;
    // 00a6ec: TST.W src:(A5)
    TST<W>(G.io->w(G.a[5]));
    // 00a6ee: Bcc cond:EQ src:(a6fa)
    if (G.sr.check_condition(Condition::EQ)) { goto La6fa; }
    // 00a6f0: LEA.L dst:A5 src:(A5.L)+40
    G.a[5] += 0x40;
    // 00a6f4: DBcc.W cond:False dst:D7 src:(a6ec)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto La6ec; }

  La6f8:;
    // 00a6f8: RTS
    goto end;

  La6fa:;
    // 00a6fa: MOVE.L dst:(A5) src:#80000000
    G.io->l(G.a[5], UCC(0x80000000));
    // 00a700: BSR src:(6658)
    F6658();
    // 00a704: MOVE.W dst:(A5.L)+8 src:D1
    G.io->w(G.a[5] + 8, G.d[1].w());
    // 00a708: MOVE.W dst:D3 src:#f800
    G.d[3].w(0xf800);
    // 00a70c: ADD.W dst:D3 src:(A6.L)+14
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x14)));
    // 00a710: MOVE.W dst:(A5.L)+14 src:D3
    G.io->w(G.a[5] + 0x14, G.d[3].w());
    // 00a714: MOVE.W dst:D3 src:#800
    G.d[3].w(0x800);
    // 00a718: ADD.W dst:D3 src:(A6.L)+16
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x16)));
    // 00a71c: MOVE.W dst:(A5.L)+16 src:D3
    G.io->w(G.a[5] + 0x16, G.d[3].w());
    // 00a720: MOVE.W dst:D0 src:(ff0040)
    G.d[0].w(UCC(G.io->w(0xff0040)));
    // 00a726: MULS.W dst:D0 src:#4
    G.d[0].l(MULS(G.d[0].w(), 4));
    // 00a72a: ADDI.W dst:D0 src:#10
    G.d[0].w(ADD<W>(G.d[0].w(), 0x10));
    // 00a72e: MOVE.W dst:(A5.L)+6 src:D0
    G.io->w(G.a[5] + 6, G.d[0].w());
    // 00a732: MOVE.W dst:(A5.L)+10 src:#66b1
    G.io->w(G.a[5] + 0x10, 0x66b1);
    // 00a738: MOVE.W dst:(A5.L)+12 src:#504
    G.io->w(G.a[5] + 0x12, 0x504);
    // 00a73e: MOVE.L dst:(A5.L)+20 src:#fc000400
    G.io->l(G.a[5] + 0x20, UCC(0xfc000400));
    // 00a746: Bcc cond:True src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa74a()
  {
    _log_call(__func__);

    // 00a74a: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00a74c: MOVE.L dst:D1 src:#20000000
    G.d[1].l(0x20000000);
    // 00a752: MOVE.L dst:D2 src:#400
    G.d[2].l(0x400);
    // 00a758: MOVE.L dst:D3 src:#fffff600
    G.d[3].l(0xfffff600);
    // 00a75e: ADD.W dst:D2 src:(A6.L)+14
    G.d[2].w(ADD<W>(G.d[2].w(), G.io->w(G.a[6] + 0x14)));
    // 00a762: AND.W dst:D2 src:#ff80
    G.d[2].w(AND<W>(G.d[2].w(), 0xff80));
    // 00a766: ASL.L dst:D2 src:#5
    G.d[2].l(ASL<L>(G.d[2].l(), 5));
    // 00a768: ADD.W dst:D3 src:(A6.L)+16
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x16)));
    // 00a76c: AND.W dst:D3 src:#ff80
    G.d[3].w(AND<W>(G.d[3].w(), 0xff80));
    // 00a770: LSR.W dst:D3 src:#7
    G.d[3].w(LSR<W>(G.d[3].w(), 7));
    // 00a772: MOVE.W dst:D1 src:D3
    G.d[1].w(G.d[3].w());
    // 00a774: ADD.L dst:D1 src:D2
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[2].l()));
    // 00a776: Bcc cond:True src:(6600)
    F6600();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa77a()
  {
    _log_call(__func__);

    // 00a77a: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00a780: ORI.W dst:(A6.L)+10 src:#4000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x4000));
    // 00a786: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 00a78c: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00a78e: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, UCC(G.d[0].w()));
    // 00a792: ASL.W dst:D1 src:#7
    G.d[1].w(ASL<W>(G.d[1].w(), 7));
    // 00a794: MOVE.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, G.d[1].w());
    // 00a798: MOVEQ.L dst:D0 src:#15
    G.d[0].l(UCC(0x15));
    // 00a79a: Bcc cond:True src:(654c)
    F654c();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa79e()
  {
    _log_call(__func__);

    // 00a79e: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00a7a2: ADD.W dst:D0 src:#c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc00));
    // 00a7a6: CMP.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 00a7aa: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 00a7ae: MOVE.L dst:D1 src:#59b
    G.d[1].l(UCC(0x59b));
    // 00a7b4: BTST.B dst:(ff0077) src:#1
    BTST<B>(G.io->b(0xff0077), 1);
    // 00a7bc: Bcc cond:EQ src:(a7c4)
    if (G.sr.check_condition(Condition::EQ)) { goto La7c4; }
    // 00a7be: MOVE.L dst:D1 src:#5a7
    G.d[1].l(UCC(0x5a7));

  La7c4:;
    // 00a7c4: BSR src:(5a9a)
    F5a9a();
    // 00a7c8: SUBI.W dst:(A6.L)+14 src:#400
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x400));
    // 00a7ce: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa7d0()
  {
    _log_call(__func__);

    // 00a7d0: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00a7d6: MOVE.W dst:(A6.L)+14 src:(A5.L)+14
    G.io->w(G.a[6] + 0x14, G.io->w(G.a[5] + 0x14));
    // 00a7dc: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 00a7e0: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00a7e2: MOVE.W dst:(A6.L)+3c src:D0
    G.io->w(G.a[6] + 0x3c, UCC(G.d[0].w()));
    // 00a7e6: BSR src:(6820)
    F6820();
    // 00a7ea: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00a7ee: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 00a7f0: MOVE.W dst:(A6.L)+26 src:D0
    G.io->w(G.a[6] + 0x26, UCC(G.d[0].w()));
    // 00a7f4: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fa7f6()
  {
    _log_call(__func__);

    // 00a7f6: TST.W src:(ff0042)
    TST<W>(G.io->w(0xff0042));
    // 00a7fc: Bcc cond:NE src:(50a0)
    if (G.sr.check_condition(Condition::NE)) {
      F50a0();
      goto end;
    }
    // 00a800: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00a806: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[5] + 0x14));
    // 00a80c: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 00a810: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00a814: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00a81a: ADD.W dst:D0 src:(A6.L)+26
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[6] + 0x26)));
    // 00a81e: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00a820: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 00a822: AND.W dst:D0 src:#30
    G.d[0].w(AND<W>(G.d[0].w(), 0x30));
    // 00a826: ROR.W dst:D0 src:#2
    G.d[0].w(ROR<W>(G.d[0].w(), 2));
    // 00a828: MULU.W dst:D0 src:#9
    G.d[0].l(MULU(G.d[0].w(), 9));
    // 00a82c: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00a82e: BTST.B dst:(A6.L)+27 src:#3
    BTST<B>(G.io->b(G.a[6] + 0x27), 3);
    // 00a834: Bcc cond:NE src:(a854)
    if (G.sr.check_condition(Condition::NE)) { goto La854; }
    // 00a836: ANDI.W dst:D2 src:#f
    G.d[2].w(AND<W>(G.d[2].w(), 15));
    // 00a83a: Bcc cond:NE src:(a848)
    if (G.sr.check_condition(Condition::NE)) { goto La848; }
    // 00a83c: LEA.L dst:A0 src:(af0a)
    G.a[0] = 0xaf0a;
    // 00a842: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00a844: BSR src:(5abc)
    F5abc();

  La848:;
    // 00a848: AND.W dst:D1 src:#3f
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f));
    // 00a84c: CMP.W dst:D1 src:#7
    CMP<W>(G.d[1].w(), 7);
    // 00a850: Bcc cond:EQ src:(a872)
    if (G.sr.check_condition(Condition::EQ)) { goto La872; }
    // 00a852: Bcc cond:True src:(a894)
    goto La894;

  La854:;
    // 00a854: ANDI.W dst:D2 src:#f
    G.d[2].w(AND<W>(G.d[2].w(), 15));
    // 00a858: Bcc cond:NE src:(a866)
    if (G.sr.check_condition(Condition::NE)) { goto La866; }
    // 00a85a: LEA.L dst:A0 src:(af9a)
    G.a[0] = 0xaf9a;
    // 00a860: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00a862: BSR src:(5abc)
    F5abc();

  La866:;
    // 00a866: AND.W dst:D1 src:#3f
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f));
    // 00a86a: CMP.W dst:D1 src:#26
    CMP<W>(G.d[1].w(), 0x26);
    // 00a86e: Bcc cond:EQ src:(a872)
    if (G.sr.check_condition(Condition::EQ)) { goto La872; }
    // 00a870: Bcc cond:True src:(a894)
    goto La894;

  La872:;
    // 00a872: MOVE.W dst:D1 src:(ff0856)
    G.d[1].w(G.io->w(0xff0856));
    // 00a878: MOVEQ.L dst:D0 src:#10
    G.d[0].l(0x10);
    // 00a87a: MOVE.W dst:D3 src:#1800
    G.d[3].w(UCC(0x1800));
    // 00a87e: CMP.W dst:D1 src:(A6.L)+14
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x14));
    // 00a882: Bcc cond:CC src:(a888)
    if (G.sr.check_condition(Condition::CC)) { goto La888; }
    // 00a884: MOVEQ.L dst:D0 src:#30
    G.d[0].l(UCC(0x30));
    // 00a886: NEG.W dst:D3
    G.d[3].w(NEG<W>(G.d[3].w()));

  La888:;
    // 00a888: MOVEQ.L dst:D4 src:#0
    G.d[4].l(UCC(0));
    // 00a88a: BSR src:(6bd0)
    F6bd0();
    // 00a88e: MOVEQ.L dst:D0 src:#15
    G.d[0].l(UCC(0x15));
    // 00a890: BSR src:(654c)
    F654c();

  La894:;
    // 00a894: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00a896: Bcc cond:True src:(5ade)
    F5ade();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb3d0()
  {
    _log_call(__func__);

    // 00b3d0: MOVE.W dst:D7 src:(A6.L)+26
    G.d[7].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00b3d4: ASL.W dst:D7 src:#2
    G.d[7].w(ASL<W>(G.d[7].w(), 2));
    // 00b3d6: LEA.L dst:A0 src:(47ea)
    G.a[0] = 0x47ea;
    // 00b3dc: MOVE.L dst:(A6.L)+14 src:(A0,D7.W)+0
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[0] + G.d[7].w())));
    // 00b3e2: BSR src:(6820)
    F6820();
    // 00b3e6: BSR src:(4f86)
    F4f86();
    // 00b3ea: MOVE.W dst:(A6.L)+8 src:D0
    G.io->w(G.a[6] + 8, G.d[0].w());
    // 00b3ee: CLR.W dst:(A6.L)+26
    G.io->w(G.a[6] + 0x26, 0);
    // 00b3f2: MOVE.W dst:(A6.L)+2a src:#30
    G.io->w(G.a[6] + 0x2a, UCC(0x30));
    // 00b3f8: LEA.L dst:A1 src:(45aa)
    G.a[1] = 0x45aa;
    // 00b3fe: LEA.L dst:A2 src:(A6.L)+52
    G.a[2] = G.a[6] + 0x52;
    // 00b402: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));
    // 00b404: CMPI.W dst:(A6.L)+16 src:#4000
    CMP<W>(G.io->w(G.a[6] + 0x16), 0x4000);
    // 00b40a: Bcc cond:CS src:(b410)
    if (G.sr.check_condition(Condition::CS)) { goto Lb410; }
    // 00b40c: MOVE.W dst:D1 src:#1000
    G.d[1].w(UCC(0x1000));

  Lb410:;
    // 00b410: MOVE.W dst:D0 src:(A1)+
    G.d[0].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00b412: Bcc cond:MI src:(b428)
    if (G.sr.check_condition(Condition::MI)) { goto Lb428; }
    // 00b414: ANDI.W dst:(A2) src:#7ff
    G.io->w(G.a[2], AND<W>(G.io->w(G.a[2]), 0x7ff));
    // 00b418: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 00b41a: ADD.W dst:(A2)+ src:D0
    G.io->w(G.a[2], ADD<W>(G.io->w(G.a[2]), G.d[0].w()));
    G.a[2] += 2;
    // 00b41c: MOVE.W dst:(A2)+ src:(A1)+
    G.io->w(G.a[2], UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    G.a[2] += 2;
    // 00b41e: MOVE.L dst:(A2)+ src:(A1)+
    G.io->l(G.a[2], UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    G.a[2] += 4;
    // 00b420: MOVE.L dst:(A2) src:(A1)+
    G.io->l(G.a[2], UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 00b422: LEA.L dst:A2 src:(A2.L)+6
    G.a[2] += 6;
    // 00b426: Bcc cond:True src:(b410)
    goto Lb410;

  Lb428:;
    // 00b428: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb42a()
  {
    _log_call(__func__);

    // 00b42a: BSR src:(6858)
    F6858();
    // 00b42e: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00b432: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00b436: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00b43a: Bcc cond:MI src:(4776)
    if (G.sr.check_condition(Condition::MI)) {
      F4776();
      goto end;
    }
    // 00b43e: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00b442: Bcc cond:EQ src:(b450)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb450; }
    // 00b444: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(UCC(G.io->w(G.a[6] + 8)));
    // 00b448: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00b44c: Bcc cond:CS src:(4776)
    if (G.sr.check_condition(Condition::CS)) {
      F4776();
      goto end;
    }

  Lb450:;
    // 00b450: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00b454: ADD.W dst:D0 src:#a00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xa00));
    // 00b458: Bcc cond:EQ src:(50a0)
    if (G.sr.check_condition(Condition::EQ)) {
      F50a0();
      goto end;
    }
    // 00b45c: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00b45e: BSR src:(5ade)
    F5ade();
    // 00b462: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00b468: AND.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00b46c: Bcc cond:NE src:(b4a4)
    if (G.sr.check_condition(Condition::NE)) { goto Lb4a4; }
    // 00b46e: MOVE.W dst:D0 src:(A6.L)+2a
    G.d[0].w(G.io->w(G.a[6] + 0x2a));
    // 00b472: MOVE.W dst:D3 src:#f800
    G.d[3].w(0xf800);
    // 00b476: MOVEQ.L dst:D4 src:#0
    G.d[4].l(0);
    // 00b478: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 00b47c: BSR src:(6b12)
    F6b12();
    // 00b480: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 00b484: Bcc cond:NE src:(b494)
    if (G.sr.check_condition(Condition::NE)) { goto Lb494; }
    // 00b486: SUBQ.W dst:(A6.L)+2a src:#4
    G.io->w(G.a[6] + 0x2a, SUB<W>(G.io->w(G.a[6] + 0x2a), 4));
    // 00b48a: CMPI.W dst:(A6.L)+2a src:#28
    CMP<W>(G.io->w(G.a[6] + 0x2a), 0x28);
    // 00b490: Bcc cond:EQ src:(b4a0)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb4a0; }
    // 00b492: RTS
    goto end;

  Lb494:;
    // 00b494: ADDQ.W dst:(A6.L)+2a src:#4
    G.io->w(G.a[6] + 0x2a, ADD<W>(G.io->w(G.a[6] + 0x2a), 4));
    // 00b498: CMPI.W dst:(A6.L)+2a src:#38
    CMP<W>(G.io->w(G.a[6] + 0x2a), 0x38);
    // 00b49e: Bcc cond:NE src:(b4a4)
    if (G.sr.check_condition(Condition::NE)) { goto Lb4a4; }

  Lb4a0:;
    // 00b4a0: EORI.W dst:(A6) src:#800
    G.io->w(G.a[6], EOR<W>(G.io->w(G.a[6]), 0x800));

  Lb4a4:;
    // 00b4a4: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb4a6()
  {
    _log_call(__func__);

    // 00b4a6: BSR src:(4f86)
    F4f86();
    // 00b4aa: MOVE.W dst:(A6.L)+8 src:D0
    G.io->w(G.a[6] + 8, G.d[0].w());
    // 00b4ae: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 00b4b2: ADDI.W dst:(A6.L)+10 src:#2800
    G.io->w(G.a[6] + 0x10, ADD<W>(G.io->w(G.a[6] + 0x10), 0x2800));
    // 00b4b8: MOVE.W dst:(A6.L)+14 src:#aa00
    G.io->w(G.a[6] + 0x14, 0xaa00);
    // 00b4be: MOVE.W dst:(A6.L)+16 src:#2400
    G.io->w(G.a[6] + 0x16, UCC(0x2400));
    // 00b4c4: CMPI.W dst:(A6.L)+28 src:#644
    CMP<W>(G.io->w(G.a[6] + 0x28), 0x644);
    // 00b4ca: Bcc cond:EQ src:(b4d8)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb4d8; }
    // 00b4cc: ADDI.W dst:(A6.L)+10 src:#1000
    G.io->w(G.a[6] + 0x10, ADD<W>(G.io->w(G.a[6] + 0x10), 0x1000));
    // 00b4d2: MOVE.W dst:(A6.L)+16 src:#4c00
    G.io->w(G.a[6] + 0x16, UCC(0x4c00));

  Lb4d8:;
    // 00b4d8: BSR src:(6820)
    F6820();
    // 00b4dc: MOVE.W dst:D1 src:#395
    G.d[1].w(UCC(0x395));
    // 00b4e0: Bcc cond:True src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb4e4()
  {
    _log_call(__func__);

    goto Lb4e4;

  Lb4a4:;
    // 00b4a4: RTS
    goto end;

  Lb4e4:;
    // 00b4e4: BSR src:(6858)
    F6858();
    // 00b4e8: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00b4ec: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00b4f0: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00b4f4: Bcc cond:MI src:(4776)
    if (G.sr.check_condition(Condition::MI)) {
      F4776();
      goto end;
    }
    // 00b4f8: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00b4fc: Bcc cond:EQ src:(b50a)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb50a; }
    // 00b4fe: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(UCC(G.io->w(G.a[6] + 8)));
    // 00b502: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00b506: Bcc cond:CS src:(4776)
    if (G.sr.check_condition(Condition::CS)) {
      F4776();
      goto end;
    }

  Lb50a:;
    // 00b50a: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00b50e: ADD.W dst:D0 src:#800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x800));
    // 00b512: Bcc cond:EQ src:(50a0)
    if (G.sr.check_condition(Condition::EQ)) {
      F50a0();
      goto end;
    }
    // 00b516: BSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00b51a: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00b520: AND.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00b524: Bcc cond:NE src:(b4a4)
    if (G.sr.check_condition(Condition::NE)) { goto Lb4a4; }
    // 00b528: MOVE.W dst:D3 src:#f800
    G.d[3].w(UCC(0xf800));
    // 00b52c: CMPI.W dst:(A6.L)+28 src:#644
    CMP<W>(G.io->w(G.a[6] + 0x28), 0x644);
    // 00b532: Bcc cond:NE src:(b546)
    if (G.sr.check_condition(Condition::NE)) { goto Lb546; }
    // 00b534: BTST.B dst:(ff0077) src:#5
    BTST<B>(G.io->b(0xff0077), 5);
    // 00b53c: Bcc cond:NE src:(b4a4)
    if (G.sr.check_condition(Condition::NE)) { goto Lb4a4; }
    // 00b540: MOVE.W dst:D4 src:#680
    G.d[4].w(UCC(0x680));
    // 00b544: Bcc cond:True src:(b556)
    goto Lb556;

  Lb546:;
    // 00b546: BTST.B dst:(ff0077) src:#5
    BTST<B>(G.io->b(0xff0077), 5);
    // 00b54e: Bcc cond:EQ src:(b4a4)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb4a4; }
    // 00b552: MOVE.W dst:D4 src:#f980
    G.d[4].w(UCC(0xf980));

  Lb556:;
    // 00b556: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00b55a: BSR src:(6658)
    F6658();
    // 00b55e: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00b562: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00b564: ADD.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 00b568: CMP.W dst:D0 src:#8020
    CMP<W>(G.d[0].w(), 0x8020);
    // 00b56c: Bcc cond:CS src:(b572)
    if (G.sr.check_condition(Condition::CS)) { goto Lb572; }
    // 00b56e: BSR src:(6b12)
    F6b12();

  Lb572:;
    // 00b572: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb574()
  {
    _log_call(__func__);

    // 00b574: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00b578: Bcc cond:NE src:(b5e6)
    if (G.sr.check_condition(Condition::NE)) { goto Lb5e6; }
    // 00b57c: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 00b580: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 00b584: BSET.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 5));
    // 00b58c: RTS
    goto end;

  Lb5e6:;
    // 00b5e6: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 00b5ea: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 00b5ec: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, G.d[0].w());
    // 00b5f0: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, 0x30);
    // 00b5f6: MOVE.W dst:(A6.L)+14 src:#c000
    G.io->w(G.a[6] + 0x14, UCC(0xc000));
    // 00b5fc: JSR src:(4f86)
    F4f86();
    // 00b602: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 00b604: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 00b60c: Bcc cond:CS src:(b610)
    if (G.sr.check_condition(Condition::CS)) { goto Lb610; }
    // 00b60e: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));

  Lb610:;
    // 00b610: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, UCC(G.d[0].w()));
    // 00b614: LEA.L dst:A0 src:(b67e)
    G.a[0] = 0xb67e;
    // 00b61a: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 00b61c: JMP src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb58e()
  {
    _log_call(__func__);

    // 00b58e: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00b592: Bcc cond:NE src:(b622)
    if (G.sr.check_condition(Condition::NE)) { goto Lb622; }
    // 00b596: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00b59a: CMPI.W dst:(A6.L)+30 src:#3f
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x3f);
    // 00b5a0: Bcc cond:CS src:(b5d6)
    if (G.sr.check_condition(Condition::CS)) { goto Lb5d6; }
    // 00b5a2: CMPI.W dst:(A6.L)+30 src:#6ff
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x6ff);
    // 00b5a8: Bcc cond:EQ src:(b5d8)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb5d8; }
    // 00b5aa: CMPI.W dst:(A6.L)+30 src:#6bf
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x6bf);
    // 00b5b0: Bcc cond:CC src:(b5d6)
    if (G.sr.check_condition(Condition::CC)) { goto Lb5d6; }
    // 00b5b2: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00b5b8: ANDI.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00b5bc: Bcc cond:NE src:(b5d6)
    if (G.sr.check_condition(Condition::NE)) { goto Lb5d6; }
    // 00b5be: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 00b5c0: MOVE.W dst:D1 src:(ff0858)
    G.d[1].w(UCC(G.io->w(0xff0858)));
    // 00b5c6: LSR.W dst:D1 src:#7
    G.d[1].w(LSR<W>(G.d[1].w(), 7));
    // 00b5c8: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00b5ca: ADD.L dst:D1 src:#21001000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x21001000));
    // 00b5d0: JMP src:(6600)
    F6600();
    goto end;

  Lb5d6:;
    // 00b5d6: RTS
    goto end;

  Lb5d8:;
    // 00b5d8: BCLR.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 5));
    // 00b5e0: JMP src:(50a0)
    F50a0();
    goto end;

  Lb622:;
    // 00b622: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00b626: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00b62a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00b62e: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 00b632: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00b636: Bcc cond:EQ src:(b644)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb644; }
    // 00b638: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00b63c: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00b640: Bcc cond:CS src:(736a)
    if (G.sr.check_condition(Condition::CS)) {
      F736a();
      goto end;
    }

  Lb644:;
    // 00b644: JSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 00b64a: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00b64e: ADDI.W dst:D0 src:#2000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x2000));
    // 00b652: CMPI.W dst:D0 src:#e800
    CMP<W>(G.d[0].w(), 0xe800);
    // 00b656: Bcc cond:CS src:(b65e)
    if (G.sr.check_condition(Condition::CS)) { goto Lb65e; }
    // 00b658: JMP src:(50a0)
    F50a0();
    goto end;

  Lb65e:;
    // 00b65e: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 00b660: JSR src:(5ade)
    F5ade();
    // 00b666: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 00b66e: Bcc cond:EQ src:(b67c)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb67c; }
    // 00b670: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));
    // 00b672: LEA.L dst:A0 src:(A6.L)+7a
    G.a[0] = G.a[6] + 0x7a;
    // 00b676: JMP src:(5b5e)
    F5b5e();
    goto end;

  Lb67c:;
    // 00b67c: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb6ae()
  {
    _log_call(__func__);

    // 00b6ae: JSR src:(4f86)
    F4f86();
    // 00b6b4: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00b6b6: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 00b6be: Bcc cond:CS src:(b6c2)
    if (G.sr.check_condition(Condition::CS)) { goto Lb6c2; }
    // 00b6c0: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));

  Lb6c2:;
    // 00b6c2: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 00b6c6: MOVE.W dst:(A6.L)+16 src:#e800
    G.io->w(G.a[6] + 0x16, UCC(0xe800));
    // 00b6cc: BSR src:(6820)
    F6820();
    // 00b6d0: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 00b6d4: Bcc cond:NE src:(b6f8)
    if (G.sr.check_condition(Condition::NE)) { goto Lb6f8; }
    // 00b6d6: LEA.L dst:A0 src:(b8d8)
    G.a[0] = 0xb8d8;
    // 00b6dc: MOVE.W dst:(A6.L)+14 src:#8000
    G.io->w(G.a[6] + 0x14, 0x8000);
    // 00b6e2: MOVE.L dst:(A6.L)+34 src:#ec000030
    G.io->l(G.a[6] + 0x34, 0xec000030);
    // 00b6ea: MOVE.W dst:(A6.L)+38 src:#e400
    G.io->w(G.a[6] + 0x38, 0xe400);
    // 00b6f0: MOVE.W dst:(A6.L)+8 src:#80
    G.io->w(G.a[6] + 8, UCC(0x80));
    // 00b6f6: Bcc cond:True src:(b718)
    goto Lb718;

  Lb6f8:;
    // 00b6f8: LEA.L dst:A0 src:(b8fc)
    G.a[0] = 0xb8fc;
    // 00b6fe: MOVE.W dst:(A6.L)+14 src:#2000
    G.io->w(G.a[6] + 0x14, 0x2000);
    // 00b704: MOVE.L dst:(A6.L)+34 src:#14000010
    G.io->l(G.a[6] + 0x34, 0x14000010);
    // 00b70c: MOVE.W dst:(A6.L)+38 src:#1c00
    G.io->w(G.a[6] + 0x38, 0x1c00);
    // 00b712: MOVE.W dst:(A6.L)+8 src:#ff80
    G.io->w(G.a[6] + 8, UCC(0xff80));

  Lb718:;
    // 00b718: CLR.W dst:(A6.L)+2e
    G.io->w(G.a[6] + 0x2e, 0);
    // 00b71c: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00b722: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00b724: MOVE.W dst:(A6.L)+30 src:#20
    G.io->w(G.a[6] + 0x30, 0x20);
    // 00b72a: SUB.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), G.d[0].w()));
    // 00b72e: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, 0);
    // 00b732: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00b734: JSR src:(5abc)
    F5abc();
    // 00b73a: LEA.L dst:A0 src:(b920)
    G.a[0] = 0xb920;
    // 00b740: LEA.L dst:A1 src:(A6.L)+7a
    G.a[1] = G.a[6] + 0x7a;
    // 00b744: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));

  Lb746:;
    // 00b746: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00b748: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 00b74e: OR.W dst:(A1.L)+2 src:D0
    G.io->w(G.a[1] + 2, OR<W>(G.io->w(G.a[1] + 2), G.d[0].w()));
    // 00b752: MOVE.W dst:(A1.L)+4 src:(A0)+
    G.io->w(G.a[1] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00b756: MOVE.L dst:(A1.L)+6 src:(A0)+
    G.io->l(G.a[1] + 6, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00b75a: MOVE.L dst:(A1.L)+a src:(A0)+
    G.io->l(G.a[1] + 10, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00b75e: LEA.L dst:A1 src:(A1.L)+e
    G.a[1] += 14;
    // 00b762: DBcc.W cond:False dst:D7 src:(b746)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto Lb746; }
    // 00b766: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb768()
  {
    _log_call(__func__);

    // 00b768: MOVE.W dst:D0 src:(ff0092)
    G.d[0].w(G.io->w(0xff0092));
    // 00b76e: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00b772: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00b776: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00b77a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00b77e: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 00b782: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00b786: Bcc cond:EQ src:(b794)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb794; }
    // 00b788: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00b78c: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00b790: Bcc cond:CS src:(736a)
    if (G.sr.check_condition(Condition::CS)) {
      F736a();
      goto end;
    }

  Lb794:;
    // 00b794: TST.W src:(ff0042)
    TST<W>(G.io->w(0xff0042));
    // 00b79a: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00b79e: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 00b7a2: ADD.W dst:D0 src:#3c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3c00));
    // 00b7a6: CMP.W dst:D0 src:#a000
    CMP<W>(G.d[0].w(), 0xa000);
    // 00b7aa: Bcc cond:CC src:(50a0)
    if (G.sr.check_condition(Condition::CC)) {
      F50a0();
      goto end;
    }
    // 00b7ae: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x34)));
    // 00b7b2: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 00b7ba: Bcc cond:EQ src:(b804)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb804; }
    // 00b7bc: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 00b7c0: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00b7c4: ADDQ.W dst:(A6.L)+2e src:#1
    G.io->w(G.a[6] + 0x2e, ADD<W>(G.io->w(G.a[6] + 0x2e), 1));
    // 00b7c8: MOVE.W dst:D0 src:(A6.L)+2e
    G.d[0].w(G.io->w(G.a[6] + 0x2e));
    // 00b7cc: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00b7ce: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 00b7d2: Bcc cond:NE src:(b7ea)
    if (G.sr.check_condition(Condition::NE)) { goto Lb7ea; }
    // 00b7d4: AND.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00b7d8: LEA.L dst:A0 src:(b950)
    G.a[0] = 0xb950;
    // 00b7de: MOVE.L dst:D0 src:(A0,D0.W)+0
    G.d[0].l(G.io->l(G.a[0] + G.d[0].w()));
    // 00b7e2: MOVE.L dst:(A6.L)+5a src:D0
    G.io->l(G.a[6] + 0x5a, G.d[0].l());
    // 00b7e6: MOVE.L dst:(A6.L)+68 src:D0
    G.io->l(G.a[6] + 0x68, UCC(G.d[0].l()));

  Lb7ea:;
    // 00b7ea: CMPI.W dst:(A6.L)+2e src:#80
    CMP<W>(G.io->w(G.a[6] + 0x2e), 0x80);
    // 00b7f0: Bcc cond:NE src:(b864)
    if (G.sr.check_condition(Condition::NE)) { goto Lb864; }
    // 00b7f4: CLR.W dst:(A6.L)+2e
    G.io->w(G.a[6] + 0x2e, UCC(0));
    // 00b7f8: BCLR.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BCLR<B>(G.io->b(0xff2aa3), 1));
    // 00b800: Bcc cond:True src:(b864)
    goto Lb864;

  Lb804:;
    // 00b804: ADDQ.W dst:(A6.L)+2e src:#1
    G.io->w(G.a[6] + 0x2e, ADD<W>(G.io->w(G.a[6] + 0x2e), 1));
    // 00b808: MOVE.W dst:D0 src:#ff80
    G.d[0].w(UCC(0xff80));
    // 00b80c: CMPI.W dst:(A6.L)+2e src:#30
    CMP<W>(G.io->w(G.a[6] + 0x2e), 0x30);
    // 00b812: Bcc cond:CS src:(b818)
    if (G.sr.check_condition(Condition::CS)) { goto Lb818; }
    // 00b814: MOVE.W dst:D0 src:#80
    G.d[0].w(UCC(0x80));

  Lb818:;
    // 00b818: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00b81c: SUB.W dst:(A6.L)+1c src:D0
    G.io->w(G.a[6] + 0x1c, SUB<W>(G.io->w(G.a[6] + 0x1c), G.d[0].w()));
    // 00b820: SUB.W dst:(A6.L)+9e src:D0
    G.io->w(G.a[6] + 0x9e, SUB<W>(G.io->w(G.a[6] + 0x9e), G.d[0].w()));
    // 00b824: SUB.W dst:(A6.L)+ac src:D0
    G.io->w(G.a[6] + 0xac, SUB<W>(G.io->w(G.a[6] + 0xac), G.d[0].w()));
    // 00b828: ASR.W dst:D0 src:#1
    G.d[0].w(ASR<W>(G.d[0].w(), 1));
    // 00b82a: SUB.W dst:(A6.L)+82 src:D0
    G.io->w(G.a[6] + 0x82, SUB<W>(G.io->w(G.a[6] + 0x82), G.d[0].w()));
    // 00b82e: SUB.W dst:(A6.L)+90 src:D0
    G.io->w(G.a[6] + 0x90, SUB<W>(G.io->w(G.a[6] + 0x90), G.d[0].w()));
    // 00b832: LEA.L dst:A2 src:(A6.L)+7a
    G.a[2] = G.a[6] + 0x7a;
    // 00b836: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 00b838: JSR src:(5ae2)
    F5ae2();
    // 00b83e: CMPI.W dst:(A6.L)+2e src:#5f
    CMP<W>(G.io->w(G.a[6] + 0x2e), 0x5f);
    // 00b844: Bcc cond:NE src:(b864)
    if (G.sr.check_condition(Condition::NE)) { goto Lb864; }
    // 00b846: SUBQ.W dst:D0 src:#4
    G.d[0].w(SUB<W>(G.d[0].w(), 4));
    // 00b848: LEA.L dst:A0 src:(A6.L)+7a
    G.a[0] = G.a[6] + 0x7a;
    // 00b84c: MOVEQ.L dst:D1 src:#3
    G.d[1].l(UCC(3));
    // 00b84e: JSR src:(5b5e)
    F5b5e();
    // 00b854: CLR.W dst:(A6.L)+2e
    G.io->w(G.a[6] + 0x2e, UCC(0));
    // 00b858: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 00b860: NEG.W dst:(A6.L)+8
    G.io->w(G.a[6] + 8, NEG<W>(G.io->w(G.a[6] + 8)));

  Lb864:;
    // 00b864: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00b866: JSR src:(5ade)
    F5ade();
    // 00b86c: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 00b870: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00b874: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 00b878: Bcc cond:CC src:(b8d6)
    if (G.sr.check_condition(Condition::CC)) { goto Lb8d6; }
    // 00b87a: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, UCC(0));
    // 00b87e: BCHG.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BCHG<B>(G.io->b(0xff2aa3), 2));
    // 00b886: Bcc cond:NE src:(b8c6)
    if (G.sr.check_condition(Condition::NE)) { goto Lb8c6; }
    // 00b888: JSR src:(6658)
    F6658();
    // 00b88e: MOVE.W dst:D0 src:D1
    G.d[0].w(UCC(G.d[1].w()));
    // 00b890: MOVE.W dst:-(USP) src:D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 00b892: MOVE.W dst:D3 src:(A6.L)+34
    G.d[3].w(G.io->w(G.a[6] + 0x34));
    // 00b896: MOVE.W dst:D4 src:#fc00
    G.d[4].w(UCC(0xfc00));
    // 00b89a: BSR src:(6b12)
    F6b12();
    // 00b89e: MOVE.W dst:D0 src:(USP)
    G.d[0].w(G.io->w(G.a[7]));
    // 00b8a0: SUBQ.W dst:D0 src:#4
    G.d[0].w(SUB<W>(G.d[0].w(), 4));
    // 00b8a2: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00b8a6: MOVE.W dst:D3 src:(A6.L)+34
    G.d[3].w(G.io->w(G.a[6] + 0x34));
    // 00b8aa: MOVE.W dst:D4 src:#fc00
    G.d[4].w(UCC(0xfc00));
    // 00b8ae: BSR src:(6b12)
    F6b12();
    // 00b8b2: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 00b8b4: ADDQ.W dst:D0 src:#4
    G.d[0].w(ADD<W>(G.d[0].w(), 4));
    // 00b8b6: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00b8ba: MOVE.W dst:D3 src:(A6.L)+34
    G.d[3].w(G.io->w(G.a[6] + 0x34));
    // 00b8be: MOVE.W dst:D4 src:#fc00
    G.d[4].w(UCC(0xfc00));
    // 00b8c2: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  Lb8c6:;
    // 00b8c6: MOVE.W dst:D3 src:(A6.L)+38
    G.d[3].w(G.io->w(G.a[6] + 0x38));
    // 00b8ca: MOVE.W dst:D4 src:#fe00
    G.d[4].w(0xfe00);
    // 00b8ce: MOVE.W dst:D0 src:(A6.L)+36
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x36)));
    // 00b8d2: Bcc cond:True src:(6bd0)
    F6bd0();
    goto end;

  Lb8d6:;
    // 00b8d6: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fb974()
  {
    _log_call(__func__);

    // 00b974: CLR.W dst:(ff0042)
    G.io->w(0xff0042, 0);
    // 00b97a: MOVE.L dst:(A6.L)+14 src:#8000d000
    G.io->l(G.a[6] + 0x14, UCC(0x8000d000));
    // 00b982: BSR src:(6820)
    F6820();
    // 00b986: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00b98c: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00b992: Bcc cond:EQ src:(b9aa)
    if (G.sr.check_condition(Condition::EQ)) { goto Lb9aa; }
    // 00b994: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 00b99a: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00b9a2: Bcc cond:NE src:(b9aa)
    if (G.sr.check_condition(Condition::NE)) { goto Lb9aa; }
    // 00b9a4: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  Lb9aa:;
    // 00b9aa: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00b9b0: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00b9b2: MOVE.W dst:(A6.L)+24 src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x24, G.io->w(G.a[0] + G.d[0].w()));
    // 00b9b8: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));
    // 00b9bc: LEA.L dst:A0 src:(bac2)
    G.a[0] = 0xbac2;
    // 00b9c2: MOVEQ.L dst:D7 src:#7
    G.d[7].l(UCC(7));
    // 00b9c4: JSR src:(5abc)
    F5abc();
    // 00b9ca: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00b9cc: MOVE.L dst:D1 src:#2d014000
    G.d[1].l(UCC(0x2d014000));
    // 00b9d2: JSR src:(6600)
    F6600();
    // 00b9d8: MOVE.L dst:D1 src:#2d028010
    G.d[1].l(UCC(0x2d028010));
    // 00b9de: JSR src:(6600)
    F6600();
    // 00b9e4: MOVE.L dst:D1 src:#2d000020
    G.d[1].l(UCC(0x2d000020));
    // 00b9ea: JSR src:(6600)
    F6600();
    // 00b9f0: MOVE.L dst:D1 src:#2d014030
    G.d[1].l(UCC(0x2d014030));
    // 00b9f6: JSR src:(6600)
    F6600();
    // 00b9fc: MOVE.L dst:D1 src:#2d028040
    G.d[1].l(UCC(0x2d028040));
    // 00ba02: JSR src:(6600)
    F6600();
    // 00ba08: MOVE.L dst:D1 src:#2d000050
    G.d[1].l(UCC(0x2d000050));
    // 00ba0e: JMP src:(6600)
    F6600();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fba14()
  {
    _log_call(__func__);

    // 00ba14: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00ba1a: MOVE.W dst:D0 src:(ff0092)
    G.d[0].w(G.io->w(0xff0092));
    // 00ba20: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00ba24: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 00ba2c: Bcc cond:NE src:(ba48)
    if (G.sr.check_condition(Condition::NE)) { goto Lba48; }
    // 00ba2e: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 00ba32: ADD.W dst:D0 src:#3000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3000));
    // 00ba36: CMPI.W dst:D0 src:#5000
    CMP<W>(G.d[0].w(), 0x5000);
    // 00ba3a: Bcc cond:CS src:(ba48)
    if (G.sr.check_condition(Condition::CS)) { goto Lba48; }
    // 00ba3c: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 00ba44: ADDQ.W dst:(A5.L)+16 src:#1
    G.io->w(G.a[5] + 0x16, ADD<W>(G.io->w(G.a[5] + 0x16), 1));

  Lba48:;
    // 00ba48: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00ba4c: Bcc cond:NE src:(ba80)
    if (G.sr.check_condition(Condition::NE)) { goto Lba80; }
    // 00ba50: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00ba54: Bcc cond:MI src:(ba72)
    if (G.sr.check_condition(Condition::MI)) { goto Lba72; }
    // 00ba58: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00ba5c: Bcc cond:EQ src:(ba6a)
    if (G.sr.check_condition(Condition::EQ)) { goto Lba6a; }
    // 00ba5e: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00ba62: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00ba66: Bcc cond:CS src:(ba72)
    if (G.sr.check_condition(Condition::CS)) { goto Lba72; }

  Lba6a:;
    // 00ba6a: MOVEQ.L dst:D7 src:#7
    G.d[7].l(UCC(7));
    // 00ba6c: JMP src:(5ade)
    F5ade();
    goto end;

  Lba72:;
    // 00ba72: BSET.B dst:(ff0043) src:#0
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 0));
    // 00ba7a: BSET.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 4));

  Lba80:;
    // 00ba80: JSR src:(736a)
    F736a();
    // 00ba86: BTST.B dst:(A6.L)+1 src:#4
    BTST<B>(G.io->b(G.a[6] + 1), 4);
    // 00ba8c: Bcc cond:EQ src:(ba90)
    if (G.sr.check_condition(Condition::EQ)) { goto Lba90; }
    // 00ba8e: RTS
    goto end;

  Lba90:;
    // 00ba90: BSET.B dst:(ff0043) src:#7
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 7));
    // 00ba98: MOVE.W dst:D0 src:(ff0842)
    G.d[0].w(UCC(G.io->w(0xff0842)));
    // 00ba9e: BTST.L dst:D0 src:#3
    BTST<L>(G.d[0].l(), 3);
    // 00baa2: Bcc cond:NE src:(babc)
    if (G.sr.check_condition(Condition::NE)) { goto Lbabc; }
    // 00baa4: BTST.L dst:D0 src:#c
    BTST<L>(G.d[0].l(), 12);
    // 00baa8: Bcc cond:NE src:(babc)
    if (G.sr.check_condition(Condition::NE)) { goto Lbabc; }
    // 00baaa: MOVE.W dst:(ff0882) src:#1
    G.io->w(0xff0882, 1);
    // 00bab2: MOVE.W dst:D0 src:#0
    G.d[0].w(UCC(0));
    // 00bab6: JSR src:(663a)
    F663a();

  Lbabc:;
    // 00babc: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbb22()
  {
    _log_call(__func__);

    // 00bb22: MOVE.W dst:(A6.L)+14 src:#6a00
    G.io->w(G.a[6] + 0x14, 0x6a00);
    // 00bb28: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 00bb2c: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00bb2e: ADD.W dst:D0 src:#c600
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc600));
    // 00bb32: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, UCC(G.d[0].w()));
    // 00bb36: BSR src:(6820)
    F6820();
    // 00bb3a: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 00bb3e: LEA.L dst:A0 src:(bbce)
    G.a[0] = 0xbbce;
    // 00bb44: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00bb4a: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00bb4c: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00bb50: MOVE.L dst:D1 src:(A0)+
    G.d[1].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00bb52: JMP src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbb58()
  {
    _log_call(__func__);

    // 00bb58: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00bb5e: MOVE.W dst:D0 src:(ff0092)
    G.d[0].w(G.io->w(0xff0092));
    // 00bb64: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00bb68: TST.W src:(ff0042)
    TST<W>(G.io->w(0xff0042));
    // 00bb6e: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00bb72: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00bb76: Bcc cond:NE src:(bbc4)
    if (G.sr.check_condition(Condition::NE)) { goto Lbbc4; }
    // 00bb78: TST.W src:(A6.L)+30
    TST<W>(G.io->w(G.a[6] + 0x30));
    // 00bb7c: Bcc cond:NE src:(bb94)
    if (G.sr.check_condition(Condition::NE)) { goto Lbb94; }
    // 00bb7e: ADDI.W dst:(A6.L)+14 src:#800
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x800));
    // 00bb84: MOVE.W dst:D0 src:#30
    G.d[0].w(0x30);
    // 00bb88: MOVE.W dst:D3 src:#f800
    G.d[3].w(0xf800);
    // 00bb8c: MOVEQ.L dst:D4 src:#0
    G.d[4].l(UCC(0));
    // 00bb8e: BSR src:(6bd0)
    F6bd0();
    // 00bb92: Bcc cond:True src:(bbba)
    goto Lbbba;

  Lbb94:;
    // 00bb94: MOVE.W dst:D0 src:(A5.L)+12
    G.d[0].w(UCC(G.io->w(G.a[5] + 0x12)));
    // 00bb98: CMPI.W dst:(A6.L)+30 src:#9
    CMP<W>(G.io->w(G.a[6] + 0x30), 9);
    // 00bb9e: Bcc cond:CC src:(bba8)
    if (G.sr.check_condition(Condition::CC)) { goto Lbba8; }
    // 00bba0: SUBI.W dst:(A6.L)+14 src:#100
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x100));
    // 00bba6: Bcc cond:True src:(bbba)
    goto Lbbba;

  Lbba8:;
    // 00bba8: CMPI.W dst:(A6.L)+30 src:#44
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x44);
    // 00bbae: Bcc cond:CS src:(bbba)
    if (G.sr.check_condition(Condition::CS)) { goto Lbbba; }
    // 00bbb0: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 00bbb4: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  Lbbba:;
    // 00bbba: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00bbbe: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  Lbbc4:;
    // 00bbc4: SUBQ.W dst:(A6.L)+26 src:#1
    G.io->w(G.a[6] + 0x26, SUB<W>(G.io->w(G.a[6] + 0x26), 1));
    // 00bbc8: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbbd4()
  {
    _log_call(__func__);

    // 00bbd4: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, UCC(G.a[6]));
    // 00bbda: BSET.B dst:(ff0074) src:#3
    G.io->b(0xff0074, BSET<B>(G.io->b(0xff0074), 3));
    // 00bbe2: MOVE.W dst:(VSCROLL_BG) src:#10
    G.io->w(VSCROLL_BG, 0x10);
    // 00bbea: MOVE.W dst:(VSCROLL_FG) src:#20
    G.io->w(VSCROLL_FG, 0x20);
    // 00bbf2: MOVE.W dst:(HSCROLL_BG) src:#140
    G.io->w(HSCROLL_BG, 0x140);
    // 00bbfa: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, 0);
    // 00bbfe: CLR.W dst:(A6.L)+16
    G.io->w(G.a[6] + 0x16, 0);
    // 00bc02: CLR.W dst:(ff0042)
    G.io->w(0xff0042, 0);
    // 00bc08: MOVE.W dst:(A6.L)+12 src:#0
    G.io->w(G.a[6] + 0x12, 0);
    // 00bc0e: MOVE.W dst:(A6.L)+4c src:#0
    G.io->w(G.a[6] + 0x4c, 0);
    // 00bc14: MOVE.W dst:(A6.L)+4e src:(VSCROLL_FG)
    G.io->w(G.a[6] + 0x4e, G.io->w(VSCROLL_FG));
    // 00bc1c: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00bc20: MOVE.W dst:D1 src:#2000
    G.d[1].w(0x2000);
    // 00bc24: MOVEQ.L dst:D2 src:#3f
    G.d[2].l(0x3f);
    // 00bc26: MOVEQ.L dst:D3 src:#1d
    G.d[3].l(UCC(0x1d));
    // 00bc28: Bcc cond:True src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbc2c()
  {
    _log_call(__func__);

    // 00bc2c: MOVE.W dst:(A6.L)+4c src:#0
    G.io->w(G.a[6] + 0x4c, 0);
    // 00bc32: MOVE.W dst:(ff0092) src:#0
    G.io->w(0xff0092, 0);
    // 00bc3a: MOVE.W dst:D0 src:(VSCROLL_FG)
    G.d[0].w(G.io->w(VSCROLL_FG));
    // 00bc40: SUB.W dst:D0 src:(A6.L)+4e
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(G.a[6] + 0x4e)));
    // 00bc44: Bcc cond:EQ src:(bc60)
    if (G.sr.check_condition(Condition::EQ)) { goto Lbc60; }
    // 00bc46: MOVE.W dst:(A6.L)+4e src:(VSCROLL_FG)
    G.io->w(G.a[6] + 0x4e, G.io->w(VSCROLL_FG));
    // 00bc4e: ADD.W dst:(VSCROLL_BG) src:D0
    G.io->w(VSCROLL_BG, ADD<W>(G.io->w(VSCROLL_BG), G.d[0].w()));
    // 00bc54: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 00bc56: MOVE.W dst:(A6.L)+4c src:D0
    G.io->w(G.a[6] + 0x4c, G.d[0].w());
    // 00bc5a: MOVE.W dst:(ff0092) src:D0
    G.io->w(0xff0092, UCC(G.d[0].w()));

  Lbc60:;
    // 00bc60: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 00bc68: Bcc cond:NE src:(bd12)
    if (G.sr.check_condition(Condition::NE)) { goto Lbd12; }
    // 00bc6c: TST.W src:(A6.L)+30
    TST<W>(G.io->w(G.a[6] + 0x30));
    // 00bc70: Bcc cond:NE src:(bc98)
    if (G.sr.check_condition(Condition::NE)) { goto Lbc98; }
    // 00bc72: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00bc74: MOVE.L dst:D1 src:#3d045
    G.d[1].l(UCC(0x3d045));
    // 00bc7a: JSR src:(6600)
    F6600();
    // 00bc80: LEA.L dst:A0 src:(be28)
    G.a[0] = 0xbe28;
    // 00bc86: MOVE.W dst:D5 src:#2e00
    G.d[5].w(0x2e00);
    // 00bc8a: MOVEQ.L dst:D6 src:#1
    G.d[6].l(1);
    // 00bc8c: MOVEQ.L dst:D7 src:#9
    G.d[7].l(9);
    // 00bc8e: MOVE.W dst:D3 src:#d8
    G.d[3].w(UCC(0xd8));
    // 00bc92: BSR src:(bec8)
    Fbec8();
    // 00bc96: Bcc cond:True src:(bcd0)
    goto Lbcd0;

  Lbc98:;
    // 00bc98: CMPI.W dst:(A6.L)+30 src:#140
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x140);
    // 00bc9e: Bcc cond:NE src:(bcd0)
    if (G.sr.check_condition(Condition::NE)) { goto Lbcd0; }
    // 00bca0: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00bca2: MOVE.L dst:D1 src:#3d046
    G.d[1].l(UCC(0x3d046));
    // 00bca8: JSR src:(6600)
    F6600();
    // 00bcae: MOVE.L dst:D1 src:#5c048
    G.d[1].l(UCC(0x5c048));
    // 00bcb4: JSR src:(6600)
    F6600();
    // 00bcba: LEA.L dst:A0 src:(be50)
    G.a[0] = 0xbe50;
    // 00bcc0: MOVE.W dst:D5 src:#2e28
    G.d[5].w(0x2e28);
    // 00bcc4: MOVEQ.L dst:D6 src:#1
    G.d[6].l(1);
    // 00bcc6: MOVEQ.L dst:D7 src:#9
    G.d[7].l(9);
    // 00bcc8: MOVE.W dst:D3 src:#d8
    G.d[3].w(UCC(0xd8));
    // 00bccc: BSR src:(bec8)
    Fbec8();

  Lbcd0:;
    // 00bcd0: CMPI.W dst:(A6.L)+30 src:#27f
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x27f);
    // 00bcd6: Bcc cond:CC src:(bcf0)
    if (G.sr.check_condition(Condition::CC)) { goto Lbcf0; }
    // 00bcd8: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 00bcdc: ADDQ.W dst:D0 src:#2
    G.d[0].w(ADD<W>(G.d[0].w(), 2));
    // 00bcde: ANDI.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00bce2: Bcc cond:NE src:(bcea)
    if (G.sr.check_condition(Condition::NE)) { goto Lbcea; }
    // 00bce4: SUBQ.W dst:(HSCROLL_BG) src:#1
    G.io->w(HSCROLL_BG, SUB<W>(G.io->w(HSCROLL_BG), 1));

  Lbcea:;
    // 00bcea: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00bcee: RTS
    goto end;

  Lbcf0:;
    // 00bcf0: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 00bcf8: BSET.B dst:(ff0001) src:#5
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 5));
    // 00bd00: MOVE.W dst:(A6.L)+30 src:#40
    G.io->w(G.a[6] + 0x30, UCC(0x40));
    // 00bd06: BCHG.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BCHG<B>(G.io->b(0xff2aa3), 2));
    // 00bd0e: ADDQ.W dst:(A6.L)+12 src:#1
    G.io->w(G.a[6] + 0x12, ADD<W>(G.io->w(G.a[6] + 0x12), 1));

  Lbd12:;
    // 00bd12: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 00bd16: ANDI.W dst:D0 src:#1ff
    G.d[0].w(AND<W>(G.d[0].w(), 0x1ff));
    // 00bd1a: Bcc cond:NE src:(bd4c)
    if (G.sr.check_condition(Condition::NE)) { goto Lbd4c; }
    // 00bd1e: TST.W src:(A6.L)+16
    TST<W>(G.io->w(G.a[6] + 0x16));
    // 00bd22: Bcc cond:EQ src:(bd30)
    if (G.sr.check_condition(Condition::EQ)) { goto Lbd30; }
    // 00bd24: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 00bd28: ANDI.W dst:D0 src:#3ff
    G.d[0].w(AND<W>(G.d[0].w(), 0x3ff));
    // 00bd2c: Bcc cond:NE src:(bd4c)
    if (G.sr.check_condition(Condition::NE)) { goto Lbd4c; }

  Lbd30:;
    // 00bd30: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00bd34: CMPI.W dst:D0 src:#200
    CMP<W>(G.d[0].w(), 0x200);
    // 00bd38: Bcc cond:NE src:(bd44)
    if (G.sr.check_condition(Condition::NE)) { goto Lbd44; }
    // 00bd3a: LEA.L dst:A0 src:(be78)
    G.a[0] = 0xbe78;
    // 00bd40: BSR src:(be18)
    Fbe18();

  Lbd44:;
    // 00bd44: ADDQ.W dst:(A6.L)+12 src:#1
    G.io->w(G.a[6] + 0x12, ADD<W>(G.io->w(G.a[6] + 0x12), 1));
    // 00bd48: BSR src:(bd98)
    Fbd98();

  Lbd4c:;
    // 00bd4c: MOVE.W dst:D0 src:(A6.L)+30
    G.d[0].w(G.io->w(G.a[6] + 0x30));
    // 00bd50: MOVEQ.L dst:D1 src:#3
    G.d[1].l(UCC(3));
    // 00bd52: TST.W src:(A6.L)+16
    TST<W>(G.io->w(G.a[6] + 0x16));
    // 00bd56: Bcc cond:EQ src:(bd5a)
    if (G.sr.check_condition(Condition::EQ)) { goto Lbd5a; }
    // 00bd58: MOVEQ.L dst:D1 src:#7
    G.d[1].l(UCC(7));

  Lbd5a:;
    // 00bd5a: MOVEQ.L dst:D2 src:#0
    G.d[2].l(0);
    // 00bd5c: AND.W dst:D0 src:D1
    G.d[0].w(AND<W>(G.d[0].w(), G.d[1].w()));
    // 00bd5e: Bcc cond:NE src:(bd6a)
    if (G.sr.check_condition(Condition::NE)) { goto Lbd6a; }
    // 00bd60: ADDQ.W dst:(VSCROLL_BG) src:#1
    G.io->w(VSCROLL_BG, ADD<W>(G.io->w(VSCROLL_BG), 1));
    // 00bd66: MOVE.W dst:D2 src:#80
    G.d[2].w(UCC(0x80));

  Lbd6a:;
    // 00bd6a: ADD.W dst:D2 src:(A6.L)+4c
    G.d[2].w(ADD<W>(G.d[2].w(), G.io->w(G.a[6] + 0x4c)));
    // 00bd6e: MOVE.W dst:(ff0092) src:D2
    G.io->w(0xff0092, G.d[2].w());
    // 00bd74: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00bd78: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 00bd80: Bcc cond:NE src:(bd84)
    if (G.sr.check_condition(Condition::NE)) { goto Lbd84; }
    // 00bd82: RTS
    goto end;

  Lbd84:;
    // 00bd84: BCLR.B dst:(ff0074) src:#3
    G.io->b(0xff0074, BCLR<B>(G.io->b(0xff0074), 3));
    // 00bd8c: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(UCC(G.io->w(0xff2a9c)));
    // 00bd92: JMP src:(663a)
    F663a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbd98()
  {
    _log_call(__func__);

    // 00bd98: BCHG.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BCHG<B>(G.io->b(0xff2aa3), 2));
    // 00bda0: Bcc cond:NE src:(bdda)
    if (G.sr.check_condition(Condition::NE)) { goto Lbdda; }
    // 00bda2: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 00bda4: CMPI.W dst:(A6.L)+12 src:#5
    CMP<W>(G.io->w(G.a[6] + 0x12), 5);
    // 00bdaa: Bcc cond:CC src:(bdc4)
    if (G.sr.check_condition(Condition::CC)) { goto Lbdc4; }
    // 00bdac: MOVE.L dst:D1 src:#5d047
    G.d[1].l(UCC(0x5d047));
    // 00bdb2: JSR src:(6600)
    F6600();
    // 00bdb8: MOVE.L dst:D1 src:#5f048
    G.d[1].l(UCC(0x5f048));
    // 00bdbe: JSR src:(6600)
    F6600();

  Lbdc4:;
    // 00bdc4: CMPI.W dst:(A6.L)+12 src:#6
    CMP<W>(G.io->w(G.a[6] + 0x12), 6);
    // 00bdca: Bcc cond:CC src:(bdd8)
    if (G.sr.check_condition(Condition::CC)) { goto Lbdd8; }
    // 00bdcc: MOVE.L dst:D1 src:#2a000001
    G.d[1].l(UCC(0x2a000001));
    // 00bdd2: JMP src:(6600)
    F6600();
    goto end;

  Lbdd8:;
    // 00bdd8: RTS
    goto end;

  Lbdda:;
    // 00bdda: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 00bddc: CMPI.W dst:(A6.L)+12 src:#5
    CMP<W>(G.io->w(G.a[6] + 0x12), 5);
    // 00bde2: Bcc cond:CC src:(bdfc)
    if (G.sr.check_condition(Condition::CC)) { goto Lbdfc; }
    // 00bde4: MOVE.L dst:D1 src:#5d048
    G.d[1].l(UCC(0x5d048));
    // 00bdea: JSR src:(6600)
    F6600();
    // 00bdf0: MOVE.L dst:D1 src:#5e047
    G.d[1].l(UCC(0x5e047));
    // 00bdf6: JSR src:(6600)
    F6600();

  Lbdfc:;
    // 00bdfc: MOVE.L dst:D1 src:#2a000000
    G.d[1].l(UCC(0x2a000000));
    // 00be02: CMPI.W dst:(A6.L)+12 src:#6
    CMP<W>(G.io->w(G.a[6] + 0x12), 6);
    // 00be08: Bcc cond:CS src:(be12)
    if (G.sr.check_condition(Condition::CS)) { goto Lbe12; }
    // 00be0a: Bcc cond:NE src:(bdd8)
    if (G.sr.check_condition(Condition::NE)) { goto Lbdd8; }
    // 00be0c: MOVE.L dst:D1 src:#2c000000
    G.d[1].l(UCC(0x2c000000));

  Lbe12:;
    // 00be12: JMP src:(6600)
    F6600();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbe18()
  {
    _log_call(__func__);

    // 00be18: MOVE.W dst:D5 src:#2600
    G.d[5].w(0x2600);
    // 00be1c: MOVEQ.L dst:D6 src:#1
    G.d[6].l(1);
    // 00be1e: MOVEQ.L dst:D7 src:#13
    G.d[7].l(0x13);
    // 00be20: MOVE.W dst:D3 src:#b0
    G.d[3].w(UCC(0xb0));
    // 00be24: Bcc cond:True src:(bec8)
    Fbec8();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbec8()
  {
    _log_call(__func__);

  Lbec8:;
    // 00bec8: MOVE.W dst:D4 src:D7
    G.d[4].w(UCC(G.d[7].w()));

  Lbeca:;
    // 00beca: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00becc: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00bece: ANDI.W dst:D1 src:#1800
    G.d[1].w(AND<W>(G.d[1].w(), 0x1800));
    // 00bed2: ROR.W dst:D1 src:#8
    G.d[1].w(ROR<W>(G.d[1].w(), 8));
    // 00bed4: LEA.L dst:A1 src:(391a)
    G.a[1] = 0x391a;
    // 00beda: ADDA.W dst:A1 src:D1
    G.a[1] = ADD<L>(G.a[1], G.d[1].w());
    // 00bedc: ANDI.W dst:D0 src:#e7ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xe7ff));
    // 00bee0: ADD.W dst:D0 src:(A1)+
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00bee2: MOVE.W dst:D1 src:D5
    G.d[1].w(UCC(G.d[5].w()));
    // 00bee4: ANDI.L dst:D1 src:#3fff
    G.d[1].l(AND<L>(G.d[1].l(), 0x3fff));
    // 00beea: SWAP.L dst:D1
    G.d[1].l(SWAP(G.d[1].l()));
    // 00beec: OR.L dst:D1 src:#40000000
    G.d[1].l(OR<L>(G.d[1].l(), 0x40000000));
    // 00bef2: MOVE.L dst:(VDP_CTRL1) src:D1
    G.io->l(VDP_CTRL1, G.d[1].l());
    // 00bef8: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 00befe: ADD.W dst:D0 src:(A1)+
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00bf00: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 00bf06: ADD.L dst:D1 src:#800000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x800000));
    // 00bf0c: ADD.W dst:D0 src:(A1)+
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00bf0e: MOVE.L dst:(VDP_CTRL1) src:D1
    G.io->l(VDP_CTRL1, G.d[1].l());
    // 00bf14: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 00bf1a: ADD.W dst:D0 src:(A1)+
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00bf1c: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, G.d[0].w());
    // 00bf22: ADDQ.W dst:D5 src:#4
    G.d[5].w(ADD<W>(G.d[5].w(), 4));
    // 00bf24: DBcc.W cond:False dst:D4 src:(beca)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lbeca; }
    // 00bf28: ADD.W dst:D5 src:D3
    G.d[5].w(ADD<W>(G.d[5].w(), G.d[3].w()));
    // 00bf2a: DBcc.W cond:False dst:D6 src:(bec8)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto Lbec8; }
    // 00bf2e: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fbf30()
  {
    _log_call(__func__);

    // 00bf30: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00bf34: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00bf38: Bcc cond:NE src:(bfa0)
    if (G.sr.check_condition(Condition::NE)) { goto Lbfa0; }
    // 00bf3a: JSR src:(50e6)
    F50e6();
    // 00bf40: BSR src:(6820)
    F6820();
    // 00bf44: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, G.a[6]);
    // 00bf4a: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00bf4e: MOVE.W dst:D1 src:#200
    G.d[1].w(0x200);
    // 00bf52: MOVE.W dst:D2 src:#3f
    G.d[2].w(0x3f);
    // 00bf56: MOVE.W dst:D3 src:#1b
    G.d[3].w(UCC(0x1b));
    // 00bf5a: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 00bf5e: MOVE.W dst:(ff0042) src:#0
    G.io->w(0xff0042, UCC(0));
    // 00bf66: BSET.B dst:(ff0075) src:#0
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 0));
    // 00bf6e: BSET.B dst:(ff0001) src:#5
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 5));
    // 00bf76: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 00bf7a: CLR.W dst:(HSCROLL_FG)
    G.io->w(HSCROLL_FG, 0);
    // 00bf80: MOVE.W dst:(A6.L)+4a src:#19c8
    G.io->w(G.a[6] + 0x4a, 0x19c8);
    // 00bf86: MOVEQ.L dst:D1 src:#5
    G.d[1].l(UCC(5));
    // 00bf88: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;

  Lbf8c:;
    // 00bf8c: MOVE.W dst:D0 src:(A1)
    G.d[0].w(G.io->w(G.a[1]));
    // 00bf8e: CLR.W dst:(A1)
    G.io->w(G.a[1], UCC(0));
    // 00bf90: JSR src:(50d4)
    F50d4();
    // 00bf96: LEA.L dst:A1 src:(A1.L)+e
    G.a[1] += 14;
    // 00bf9a: DBcc.W cond:False dst:D1 src:(bf8c)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto Lbf8c; }
    // 00bf9e: RTS
    goto end;

  Lbfa0:;
    // 00bfa0: CLR.W dst:(A6.L)+3e
    G.io->w(G.a[6] + 0x3e, 0);
    // 00bfa4: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00bfaa: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 00bfb0: CMPI.W dst:D0 src:#3
    CMP<W>(G.d[0].w(), 3);
    // 00bfb4: Bcc cond:EQ src:(bffc)
    if (G.sr.check_condition(Condition::EQ)) { goto Lbffc; }
    // 00bfb6: CMPI.W dst:D0 src:#2
    CMP<W>(G.d[0].w(), 2);
    // 00bfba: Bcc cond:EQ src:(c05c)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc05c; }
    // 00bfbe: CMPI.W dst:D0 src:#1
    CMP<W>(G.d[0].w(), 1);
    // 00bfc2: Bcc cond:EQ src:(c032)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc032; }
    // 00bfc4: LEA.L dst:A0 src:(c644)
    G.a[0] = 0xc644;
    // 00bfca: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00bfce: MOVE.L dst:(A6.L)+1c src:(A0)
    G.io->l(G.a[6] + 0x1c, G.io->l(G.a[0]));
    // 00bfd2: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, 0);
    // 00bfd6: MOVEQ.L dst:D1 src:#2
    G.d[1].l(UCC(2));
    // 00bfd8: LEA.L dst:A1 src:(A6.L)+88
    G.a[1] = G.a[6] + 0x88;

  Lbfdc:;
    // 00bfdc: MOVE.W dst:D0 src:(A1)
    G.d[0].w(G.io->w(G.a[1]));
    // 00bfde: CLR.W dst:(A1)
    G.io->w(G.a[1], UCC(0));
    // 00bfe0: JSR src:(50d4)
    F50d4();
    // 00bfe6: LEA.L dst:A1 src:(A1.L)+e
    G.a[1] += 14;
    // 00bfea: DBcc.W cond:False dst:D1 src:(bfdc)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto Lbfdc; }
    // 00bfee: LEA.L dst:A0 src:(c6e8)
    G.a[0] = 0xc6e8;
    // 00bff4: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00bff6: JMP src:(5abc)
    F5abc();
    goto end;

  Lbffc:;
    // 00bffc: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 00c000: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00c004: MOVE.L dst:(A6.L)+1c src:(A0)
    G.io->l(G.a[6] + 0x1c, G.io->l(G.a[0]));
    // 00c008: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, 0);
    // 00c00c: MOVEQ.L dst:D1 src:#2
    G.d[1].l(UCC(2));
    // 00c00e: LEA.L dst:A1 src:(A6.L)+88
    G.a[1] = G.a[6] + 0x88;

  Lc012:;
    // 00c012: MOVE.W dst:D0 src:(A1)
    G.d[0].w(G.io->w(G.a[1]));
    // 00c014: CLR.W dst:(A1)
    G.io->w(G.a[1], UCC(0));
    // 00c016: JSR src:(50d4)
    F50d4();
    // 00c01c: LEA.L dst:A1 src:(A1.L)+e
    G.a[1] += 14;
    // 00c020: DBcc.W cond:False dst:D1 src:(c012)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto Lc012; }
    // 00c024: LEA.L dst:A0 src:(c7c0)
    G.a[0] = 0xc7c0;
    // 00c02a: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00c02c: JMP src:(5abc)
    F5abc();
    goto end;

  Lc032:;
    // 00c032: LEA.L dst:A0 src:(c634)
    G.a[0] = 0xc634;
    // 00c038: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00c03c: MOVE.L dst:(A6.L)+1c src:(A0)
    G.io->l(G.a[6] + 0x1c, G.io->l(G.a[0]));
    // 00c040: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, UCC(0));
    // 00c044: LEA.L dst:A1 src:(c7d8)
    G.a[1] = 0xc7d8;
    // 00c04a: MOVE.L dst:(A6.L)+34 src:(A1)
    G.io->l(G.a[6] + 0x34, UCC(G.io->l(G.a[1])));
    // 00c04e: LEA.L dst:A0 src:(c76c)
    G.a[0] = 0xc76c;
    // 00c054: MOVEQ.L dst:D7 src:#5
    G.d[7].l(UCC(5));
    // 00c056: JMP src:(5abc)
    F5abc();
    goto end;

  Lc05c:;
    // 00c05c: LEA.L dst:A0 src:(c63c)
    G.a[0] = 0xc63c;
    // 00c062: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00c066: MOVE.L dst:(A6.L)+1c src:(A0)
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    // 00c06a: BCLR.B dst:(A6.L)+1 src:#2
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 2));
    // 00c070: LEA.L dst:A0 src:(c7e8)
    G.a[0] = 0xc7e8;
    // 00c076: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00c07c: Bcc cond:EQ src:(c094)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc094; }
    // 00c07e: LEA.L dst:A0 src:(c7f4)
    G.a[0] = 0xc7f4;
    // 00c084: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00c08c: Bcc cond:NE src:(c094)
    if (G.sr.check_condition(Condition::NE)) { goto Lc094; }
    // 00c08e: LEA.L dst:A0 src:(c800)
    G.a[0] = 0xc800;

  Lc094:;
    // 00c094: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00c09a: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00c09c: MOVE.W dst:(A6.L)+3c src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3c, G.io->w(G.a[0] + G.d[0].w()));
    // 00c0a2: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, 0);
    // 00c0a6: MOVE.W dst:(A6.L)+24 src:#0
    G.io->w(G.a[6] + 0x24, 0);
    // 00c0ac: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 00c0b0: LEA.L dst:A0 src:(c6ac)
    G.a[0] = 0xc6ac;
    // 00c0b6: MOVEQ.L dst:D7 src:#4
    G.d[7].l(UCC(4));
    // 00c0b8: JMP src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc0be()
  {
    _log_call(__func__);

    // 00c0be: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00c0c2: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00c0c6: Bcc cond:NE src:(c1ce)
    if (G.sr.check_condition(Condition::NE)) { goto Lc1ce; }
    // 00c0ca: TST.W src:(A6.L)+30
    TST<W>(G.io->w(G.a[6] + 0x30));
    // 00c0ce: Bcc cond:NE src:(c164)
    if (G.sr.check_condition(Condition::NE)) { goto Lc164; }
    // 00c0d2: BSET.B dst:(A6.L)+30 src:#0
    G.io->b(G.a[6] + 0x30, BSET<B>(G.io->b(G.a[6] + 0x30), 0));
    // 00c0d8: MOVE.W dst:D0 src:#80
    G.d[0].w(0x80);
    // 00c0dc: MOVE.L dst:D1 src:#37b80
    G.d[1].l(0x37b80);
    // 00c0e2: MOVE.W dst:D2 src:#1b4
    G.d[2].w(UCC(0x1b4));
    // 00c0e6: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 00c0ec: MOVE.W dst:D0 src:#34
    G.d[0].w(0x34);
    // 00c0f0: MOVE.L dst:D1 src:#38b80
    G.d[1].l(0x38b80);
    // 00c0f6: MOVE.W dst:D2 src:#374
    G.d[2].w(UCC(0x374));
    // 00c0fa: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 00c100: MOVE.W dst:D5 src:#950
    G.d[5].w(UCC(0x950));
    // 00c104: LEA.L dst:A0 src:(c64c)
    G.a[0] = 0xc64c;
    // 00c10a: MOVEQ.L dst:D6 src:#3
    G.d[6].l(3);
    // 00c10c: MOVEQ.L dst:D7 src:#b
    G.d[7].l(11);
    // 00c10e: MOVE.W dst:D3 src:#d0
    G.d[3].w(UCC(0xd0));
    // 00c112: BSR src:(bec8)
    Fbec8();
    // 00c116: MOVE.W dst:(A6.L)+4e src:(VSCROLL_BG)
    G.io->w(G.a[6] + 0x4e, G.io->w(VSCROLL_BG));
    // 00c11e: MOVEQ.L dst:D4 src:#3
    G.d[4].l(3);
    // 00c120: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00c122: MOVE.L dst:D7 src:#1000
    G.d[7].l(UCC(0x1000));

  Lc128:;
    // 00c128: MOVE.L dst:D1 src:#3c000000
    G.d[1].l(0x3c000000);
    // 00c12e: ADD.L dst:D1 src:D7
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[7].l()));
    // 00c130: JSR src:(6600)
    F6600();
    // 00c136: ADD.L dst:D7 src:#1000
    G.d[7].l(ADD<L>(G.d[7].l(), 0x1000));
    // 00c13c: DBcc.W cond:False dst:D4 src:(c128)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lc128; }
    // 00c140: MOVEQ.L dst:D4 src:#2
    G.d[4].l(UCC(2));
    // 00c142: LEA.L dst:A0 src:(c80c)
    G.a[0] = 0xc80c;
    // 00c148: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lc14a:;
    // 00c14a: MOVE.L dst:D1 src:#26000000
    G.d[1].l(0x26000000);
    // 00c150: MOVE.W dst:D2 src:(A0)+
    G.d[2].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c152: OR.W dst:D1 src:D2
    G.d[1].w(OR<W>(G.d[1].w(), G.d[2].w()));
    // 00c154: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00c156: JSR src:(6600)
    F6600();
    // 00c15c: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00c15e: DBcc.W cond:False dst:D4 src:(c14a)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lc14a; }
    // 00c162: RTS
    goto end;

  Lc164:;
    // 00c164: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00c168: JSR src:(5114)
    F5114();
    // 00c16e: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00c172: BTST.B dst:(A6.L)+31 src:#6
    BTST<B>(G.io->b(G.a[6] + 0x31), 6);
    // 00c178: Bcc cond:EQ src:(c18a)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc18a; }
    // 00c17a: BSR src:(c572)
    Fc572();
    // 00c17e: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 00c184: Bcc cond:NE src:(c5ca)
    if (G.sr.check_condition(Condition::NE)) { goto Lc5ca; }
    // 00c188: RTS
    goto end;

  Lc18a:;
    // 00c18a: JSR src:(3e2e)
    F3e2e();
    // 00c190: TST.W src:(A6.L)+4a
    TST<W>(G.io->w(G.a[6] + 0x4a));
    // 00c194: Bcc cond:EQ src:(c19c)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc19c; }
    // 00c196: SUBQ.W dst:(A6.L)+4a src:#1
    G.io->w(G.a[6] + 0x4a, SUB<W>(G.io->w(G.a[6] + 0x4a), 1));
    // 00c19a: Bcc cond:True src:(c1a2)
    goto Lc1a2;

  Lc19c:;
    // 00c19c: BSET.B dst:(A6.L)+31 src:#2
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 2));

  Lc1a2:;
    // 00c1a2: MOVE.W dst:D0 src:(VSCROLL_BG)
    G.d[0].w(G.io->w(VSCROLL_BG));
    // 00c1a8: SUB.W dst:D0 src:(A6.L)+4e
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(G.a[6] + 0x4e)));
    // 00c1ac: Bcc cond:EQ src:(c1c6)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc1c6; }
    // 00c1ae: MOVE.W dst:(A6.L)+4e src:(VSCROLL_BG)
    G.io->w(G.a[6] + 0x4e, G.io->w(VSCROLL_BG));
    // 00c1b6: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00c1b8: ADD.W dst:(VSCROLL_FG) src:D0
    G.io->w(VSCROLL_FG, ADD<W>(G.io->w(VSCROLL_FG), G.d[0].w()));
    // 00c1be: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 00c1c0: ADD.W dst:(ff008e) src:D0
    G.io->w(0xff008e, ADD<W>(G.io->w(0xff008e), G.d[0].w()));

  Lc1c6:;
    // 00c1c6: BSR src:(6858)
    F6858();
    // 00c1ca: Bcc cond:True src:(6864)
    _m->inc_something(G.a[6]);
    goto end;

  Lc1ce:;
    // 00c1ce: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00c1d4: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 00c1da: CMPI.W dst:D0 src:#2
    CMP<W>(G.d[0].w(), 2);
    // 00c1de: Bcc cond:EQ src:(c416)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc416; }
    // 00c1e2: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00c1e6: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00c1ea: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 00c1f2: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00c1f6: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00c1fa: CMPI.W dst:D0 src:#3
    CMP<W>(G.d[0].w(), 3);
    // 00c1fe: Bcc cond:EQ src:(c226)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc226; }
    // 00c202: CMPI.W dst:D0 src:#1
    CMP<W>(G.d[0].w(), 1);
    // 00c206: Bcc cond:EQ src:(c22e)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc22e; }
    // 00c208: ADDI.W dst:(A6.L)+14 src:#f300
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0xf300));
    // 00c20e: MOVE.W dst:D0 src:(A6.L)+7a
    G.d[0].w(G.io->w(G.a[6] + 0x7a));
    // 00c212: MOVE.W dst:D0 src:(A5.L)+36
    G.d[0].w(G.io->w(G.a[5] + 0x36));
    // 00c216: ADDI.W dst:D0 src:#c00
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc00));
    // 00c21a: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00c21e: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00c220: JMP src:(5ade)
    F5ade();
    goto end;

  Lc226:;
    // 00c226: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00c228: JMP src:(5ade)
    F5ade();
    goto end;

  Lc22e:;
    // 00c22e: ADDI.W dst:(A6.L)+14 src:#600
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x600));
    // 00c234: ADDI.W dst:(A6.L)+16 src:#1400
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0x1400));
    // 00c23a: CMPI.W dst:(A6.L)+24 src:#60
    CMP<W>(G.io->w(G.a[6] + 0x24), 0x60);
    // 00c240: Bcc cond:CS src:(c3f4)
    if (G.sr.check_condition(Condition::CS)) { goto Lc3f4; }
    // 00c244: CMPI.W dst:(A6.L)+24 src:#71
    CMP<W>(G.io->w(G.a[6] + 0x24), 0x71);
    // 00c24a: Bcc cond:CS src:(c288)
    if (G.sr.check_condition(Condition::CS)) { goto Lc288; }
    // 00c24c: CMPI.W dst:(A6.L)+24 src:#89
    CMP<W>(G.io->w(G.a[6] + 0x24), 0x89);
    // 00c252: Bcc cond:CS src:(c2fa)
    if (G.sr.check_condition(Condition::CS)) { goto Lc2fa; }
    // 00c256: Bcc cond:NE src:(c262)
    if (G.sr.check_condition(Condition::NE)) { goto Lc262; }
    // 00c258: BTST.B dst:(A5.L)+31 src:#2
    BTST<B>(G.io->b(G.a[5] + 0x31), 2);
    // 00c25e: Bcc cond:NE src:(c38c)
    if (G.sr.check_condition(Condition::NE)) { goto Lc38c; }

  Lc262:;
    // 00c262: CMPI.W dst:(A6.L)+24 src:#90
    CMP<W>(G.io->w(G.a[6] + 0x24), 0x90);
    // 00c268: Bcc cond:CS src:(c352)
    if (G.sr.check_condition(Condition::CS)) { goto Lc352; }
    // 00c26c: CMPI.W dst:(A6.L)+24 src:#9c
    CMP<W>(G.io->w(G.a[6] + 0x24), 0x9c);
    // 00c272: Bcc cond:CS src:(c326)
    if (G.sr.check_condition(Condition::CS)) { goto Lc326; }
    // 00c276: CMPI.W dst:(A6.L)+24 src:#ad
    CMP<W>(G.io->w(G.a[6] + 0x24), 0xad);
    // 00c27c: Bcc cond:CS src:(c29c)
    if (G.sr.check_condition(Condition::CS)) { goto Lc29c; }
    // 00c27e: MOVE.W dst:(A6.L)+24 src:#0
    G.io->w(G.a[6] + 0x24, UCC(0));
    // 00c284: Bcc cond:True src:(c3f4)
    goto Lc3f4;

  Lc288:;
    // 00c288: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(G.io->w(G.a[6] + 0x24));
    // 00c28c: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00c28e: ANDI.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 00c292: Bcc cond:NE src:(c3f4)
    if (G.sr.check_condition(Condition::NE)) { goto Lc3f4; }
    // 00c296: SUBI.W dst:D1 src:#58
    G.d[1].w(SUB<W>(G.d[1].w(), 0x58));
    // 00c29a: Bcc cond:True src:(c2b4)
    goto Lc2b4;

  Lc29c:;
    // 00c29c: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(G.io->w(G.a[6] + 0x24));
    // 00c2a0: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00c2a2: ANDI.W dst:D1 src:#7
    G.d[1].w(AND<W>(G.d[1].w(), 7));
    // 00c2a6: Bcc cond:NE src:(c3f4)
    if (G.sr.check_condition(Condition::NE)) { goto Lc3f4; }
    // 00c2aa: SUBI.W dst:D0 src:#98
    G.d[0].w(SUB<W>(G.d[0].w(), 0x98));
    // 00c2ae: MOVE.W dst:D1 src:#10
    G.d[1].w(0x10);
    // 00c2b2: SUB.W dst:D1 src:D0
    G.d[1].w(SUB<W>(G.d[1].w(), G.d[0].w()));

  Lc2b4:;
    // 00c2b4: LEA.L dst:A0 src:(c70c)
    G.a[0] = 0xc70c;
    // 00c2ba: LSR.W dst:D1 src:#1
    G.d[1].w(LSR<W>(G.d[1].w(), 1));
    // 00c2bc: MOVE.W dst:D2 src:D1
    G.d[2].w(UCC(G.d[1].w()));
    // 00c2be: MULU.W dst:D1 src:#6
    G.d[1].l(MULU(G.d[1].w(), 6));
    // 00c2c2: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 00c2c4: LEA.L dst:A1 src:(c7d8)
    G.a[1] = 0xc7d8;
    // 00c2ca: MOVE.L dst:(A6.L)+34 src:(A1,D2.W)+0
    G.io->l(G.a[6] + 0x34, G.io->l(G.a[1] + G.d[2].w()));
    // 00c2d0: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00c2d2: LEA.L dst:A1 src:(A6.L)+96
    G.a[1] = G.a[6] + 0x96;

  Lc2d6:;
    // 00c2d6: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c2d8: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 00c2de: OR.W dst:(A1.L)+2 src:D0
    G.io->w(G.a[1] + 2, OR<W>(G.io->w(G.a[1] + 2), G.d[0].w()));
    // 00c2e2: MOVE.W dst:(A1.L)+4 src:(A0)+
    G.io->w(G.a[1] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c2e6: MOVE.L dst:(A1.L)+6 src:(A0)+
    G.io->l(G.a[1] + 6, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00c2ea: MOVE.L dst:(A1.L)+a src:(A0)+
    G.io->l(G.a[1] + 10, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00c2ee: LEA.L dst:A1 src:(A1.L)+e
    G.a[1] += 14;
    // 00c2f2: DBcc.W cond:False dst:D7 src:(c2d6)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto Lc2d6; }
    // 00c2f6: Bcc cond:True src:(c3f4)
    goto Lc3f4;

  Lc2fa:;
    // 00c2fa: LEA.L dst:A1 src:(A6.L)+7a
    G.a[1] = G.a[6] + 0x7a;
    // 00c2fe: MOVEQ.L dst:D1 src:#2
    G.d[1].l(2);
    // 00c300: MOVE.W dst:D2 src:#80
    G.d[2].w(UCC(0x80));

  Lc304:;
    // 00c304: SUB.W dst:(A1.L)+6 src:D2
    G.io->w(G.a[1] + 6, SUB<W>(G.io->w(G.a[1] + 6), G.d[2].w()));
    // 00c308: ADDI.W dst:D2 src:#80
    G.d[2].w(ADD<W>(G.d[2].w(), 0x80));
    // 00c30c: LEA.L dst:A1 src:(A1.L)-e
    G.a[1] += 0xfffffff2;
    // 00c310: DBcc.W cond:False dst:D1 src:(c304)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto Lc304; }
    // 00c314: SUBI.W dst:D2 src:#80
    G.d[2].w(SUB<W>(G.d[2].w(), 0x80));
    // 00c318: SUB.W dst:(A1.L)+6 src:D2
    G.io->w(G.a[1] + 6, SUB<W>(G.io->w(G.a[1] + 6), G.d[2].w()));
    // 00c31c: ADDI.W dst:(A6.L)+1a src:#180
    G.io->w(G.a[6] + 0x1a, ADD<W>(G.io->w(G.a[6] + 0x1a), 0x180));
    // 00c322: Bcc cond:True src:(c3f4)
    goto Lc3f4;

  Lc326:;
    // 00c326: LEA.L dst:A1 src:(A6.L)+7a
    G.a[1] = G.a[6] + 0x7a;
    // 00c32a: MOVEQ.L dst:D1 src:#2
    G.d[1].l(2);
    // 00c32c: MOVE.W dst:D2 src:#100
    G.d[2].w(UCC(0x100));

  Lc330:;
    // 00c330: ADD.W dst:(A1.L)+6 src:D2
    G.io->w(G.a[1] + 6, ADD<W>(G.io->w(G.a[1] + 6), G.d[2].w()));
    // 00c334: ADDI.W dst:D2 src:#100
    G.d[2].w(ADD<W>(G.d[2].w(), 0x100));
    // 00c338: LEA.L dst:A1 src:(A1.L)-e
    G.a[1] += 0xfffffff2;
    // 00c33c: DBcc.W cond:False dst:D1 src:(c330)
    G.d[1].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[1].w())) { goto Lc330; }
    // 00c340: SUBI.W dst:D2 src:#100
    G.d[2].w(SUB<W>(G.d[2].w(), 0x100));
    // 00c344: ADD.W dst:(A1.L)+6 src:D2
    G.io->w(G.a[1] + 6, ADD<W>(G.io->w(G.a[1] + 6), G.d[2].w()));
    // 00c348: SUBI.W dst:(A6.L)+1a src:#300
    G.io->w(G.a[6] + 0x1a, SUB<W>(G.io->w(G.a[6] + 0x1a), 0x300));
    // 00c34e: Bcc cond:True src:(c3f4)
    goto Lc3f4;

  Lc352:;
    // 00c352: CMPI.W dst:(A6.L)+24 src:#8c
    CMP<W>(G.io->w(G.a[6] + 0x24), 0x8c);
    // 00c358: Bcc cond:NE src:(c3f4)
    if (G.sr.check_condition(Condition::NE)) { goto Lc3f4; }
    // 00c35c: MOVEQ.L dst:D6 src:#7
    G.d[6].l(UCC(7));
    // 00c35e: MOVE.L dst:-(USP) src:A5
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[5]));
    // 00c360: LEA.L dst:A0 src:(c604)
    G.a[0] = 0xc604;

  Lc366:;
    // 00c366: MOVEM.W src:(A6.L)+14 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x14));
    G.d[4].l(G.io->w(G.a[6] + 0x16));
    // 00c36c: MOVEM.W src:(A6.L)+34 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x34));
    G.d[1].l(G.io->w(G.a[6] + 0x36));
    // 00c372: ADD.W dst:D3 src:D0
    G.d[3].w(ADD<W>(G.d[3].w(), G.d[0].w()));
    // 00c374: ADD.W dst:D4 src:D1
    G.d[4].w(ADD<W>(G.d[4].w(), G.d[1].w()));
    // 00c376: ADD.W dst:D3 src:(A0)+
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c378: ADD.W dst:D4 src:(A0)+
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c37a: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c37c: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00c37e: BSR src:(6b22)
    F6b22();
    // 00c382: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00c384: DBcc.W cond:False dst:D6 src:(c366)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto Lc366; }
    // 00c388: MOVE.L dst:A5 src:(USP)+
    G.a[5] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00c38a: Bcc cond:True src:(c3f4)
    goto Lc3f4;

  Lc38c:;
    // 00c38c: BSET.B dst:(A5.L)+31 src:#3
    G.io->b(G.a[5] + 0x31, BSET<B>(G.io->b(G.a[5] + 0x31), 3));
    // 00c392: TST.W src:(A6.L)+3e
    TST<W>(G.io->w(G.a[6] + 0x3e));
    // 00c396: Bcc cond:NE src:(c3f0)
    if (G.sr.check_condition(Condition::NE)) { goto Lc3f0; }
    // 00c398: MOVE.W dst:(A6.L)+3e src:#a
    G.io->w(G.a[6] + 0x3e, 10);
    // 00c39e: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x3c)));
    // 00c3a2: LEA.L dst:A0 src:(c604)
    G.a[0] = 0xc604;
    // 00c3a8: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00c3aa: MOVEM.W src:(A6.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x14));
    G.d[1].l(G.io->w(G.a[6] + 0x16));
    // 00c3b0: MOVEM.W src:(A6.L)+34 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x34));
    G.d[4].l(G.io->w(G.a[6] + 0x36));
    // 00c3b6: ADD.W dst:D0 src:D3
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[3].w()));
    // 00c3b8: ADD.W dst:D1 src:D4
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[4].w()));
    // 00c3ba: ADD.W dst:D0 src:(A0)+
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c3bc: ADD.W dst:D1 src:(A0)+
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c3be: MOVEM.W dst:-(USP) regs:D1,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[1].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 00c3c2: MOVEM.W src:(ff0856) regs:D2,D3
    G.d[2].l(G.io->w(0xff0856));
    G.d[3].l(G.io->w(0xff0858));
    // 00c3ca: BSR src:(6666)
    F6666();
    // 00c3ce: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00c3d2: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00c3d4: ADDI.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 00c3d8: MOVE.L dst:-(USP) src:A5
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[5]));
    // 00c3da: BSR src:(6b22)
    F6b22();
    // 00c3de: MOVE.L dst:A5 src:(USP)+
    G.a[5] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00c3e0: ADDQ.W dst:(A6.L)+3c src:#6
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 6));
    // 00c3e4: CMPI.W dst:(A6.L)+3c src:#30
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x30);
    // 00c3ea: Bcc cond:CS src:(c3f0)
    if (G.sr.check_condition(Condition::CS)) { goto Lc3f0; }
    // 00c3ec: CLR.W dst:(A6.L)+3c
    G.io->w(G.a[6] + 0x3c, UCC(0));

  Lc3f0:;
    // 00c3f0: SUBQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, SUB<W>(G.io->w(G.a[6] + 0x3e), 1));

  Lc3f4:;
    // 00c3f4: BTST.B dst:(A5.L)+31 src:#3
    BTST<B>(G.io->b(G.a[5] + 0x31), 3);
    // 00c3fa: Bcc cond:NE src:(c400)
    if (G.sr.check_condition(Condition::NE)) { goto Lc400; }
    // 00c3fc: ADDQ.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, ADD<W>(G.io->w(G.a[6] + 0x24), 1));

  Lc400:;
    // 00c400: MOVEM.W src:(A6.L)+34 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x34));
    G.d[1].l(G.io->w(G.a[6] + 0x36));
    // 00c406: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00c40a: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00c40e: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00c410: JMP src:(5ade)
    F5ade();
    goto end;

  Lc416:;
    // 00c416: ADDI.W dst:(A6.L)+14 src:#600
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x600));
    // 00c41c: ADDI.W dst:(A6.L)+16 src:#1400
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), 0x1400));
    // 00c422: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00c426: Bcc cond:NE src:(c500)
    if (G.sr.check_condition(Condition::NE)) { goto Lc500; }
    // 00c42a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00c42e: Bcc cond:MI src:(c500)
    if (G.sr.check_condition(Condition::MI)) { goto Lc500; }
    // 00c432: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00c436: Bcc cond:EQ src:(c444)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc444; }
    // 00c438: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00c43c: CMP.W dst:D0 src:(A6.L)+3c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3c));
    // 00c440: Bcc cond:CC src:(c500)
    if (G.sr.check_condition(Condition::CC)) { goto Lc500; }

  Lc444:;
    // 00c444: TST.W src:(A6.L)+3e
    TST<W>(G.io->w(G.a[6] + 0x3e));
    // 00c448: Bcc cond:NE src:(c462)
    if (G.sr.check_condition(Condition::NE)) { goto Lc462; }
    // 00c44a: BSR src:(6658)
    F6658();
    // 00c44e: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00c450: SUBI.W dst:D1 src:#2e
    G.d[1].w(SUB<W>(G.d[1].w(), 0x2e));
    // 00c454: CMPI.W dst:D1 src:#8
    CMP<W>(G.d[1].w(), 8);
    // 00c458: Bcc cond:HI src:(c4ea)
    if (G.sr.check_condition(Condition::HI)) { goto Lc4ea; }
    // 00c45c: MOVE.W dst:(A6.L)+3e src:#40
    G.io->w(G.a[6] + 0x3e, UCC(0x40));

  Lc462:;
    // 00c462: CMPI.W dst:(A6.L)+3e src:#20
    CMP<W>(G.io->w(G.a[6] + 0x3e), 0x20);
    // 00c468: Bcc cond:HI src:(c4e6)
    if (G.sr.check_condition(Condition::HI)) { goto Lc4e6; }
    // 00c46a: CMPI.W dst:(A6.L)+3e src:#18
    CMP<W>(G.io->w(G.a[6] + 0x3e), 0x18);
    // 00c470: Bcc cond:HI src:(c4da)
    if (G.sr.check_condition(Condition::HI)) { goto Lc4da; }
    // 00c472: CMPI.L dst:(A6.L)+44 src:#53720
    CMP<L>(G.io->l(G.a[6] + 0x44), 0x53720);
    // 00c47a: Bcc cond:EQ src:(c48c)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc48c; }
    // 00c47c: MOVE.L dst:(A6.L)+92 src:#53720
    G.io->l(G.a[6] + 0x92, 0x53720);
    // 00c484: MOVE.L dst:(A6.L)+44 src:#53720
    G.io->l(G.a[6] + 0x44, UCC(0x53720));

  Lc48c:;
    // 00c48c: CMPI.W dst:(A6.L)+3e src:#10
    CMP<W>(G.io->w(G.a[6] + 0x3e), 0x10);
    // 00c492: Bcc cond:HI src:(c4d2)
    if (G.sr.check_condition(Condition::HI)) { goto Lc4d2; }
    // 00c494: CMPI.W dst:(A6.L)+3e src:#10
    CMP<W>(G.io->w(G.a[6] + 0x3e), 0x10);
    // 00c49a: Bcc cond:NE src:(c4aa)
    if (G.sr.check_condition(Condition::NE)) { goto Lc4aa; }
    // 00c49c: MOVE.W dst:D0 src:#30
    G.d[0].w(0x30);
    // 00c4a0: MOVE.W dst:D3 src:#fc00
    G.d[3].w(0xfc00);
    // 00c4a4: MOVEQ.L dst:D4 src:#0
    G.d[4].l(UCC(0));
    // 00c4a6: BSR src:(6bd0)
    F6bd0();

  Lc4aa:;
    // 00c4aa: CMPI.W dst:(A6.L)+3e src:#8
    CMP<W>(G.io->w(G.a[6] + 0x3e), 8);
    // 00c4b0: Bcc cond:HI src:(c4e0)
    if (G.sr.check_condition(Condition::HI)) { goto Lc4e0; }
    // 00c4b2: CMPI.L dst:(A6.L)+44 src:#536a0
    CMP<L>(G.io->l(G.a[6] + 0x44), 0x536a0);
    // 00c4ba: Bcc cond:EQ src:(c4cc)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc4cc; }
    // 00c4bc: MOVE.L dst:(A6.L)+92 src:#536a0
    G.io->l(G.a[6] + 0x92, 0x536a0);
    // 00c4c4: MOVE.L dst:(A6.L)+44 src:#536a0
    G.io->l(G.a[6] + 0x44, UCC(0x536a0));

  Lc4cc:;
    // 00c4cc: ADDI.W dst:(A5.L)+36 src:#80
    G.io->w(G.a[5] + 0x36, ADD<W>(G.io->w(G.a[5] + 0x36), 0x80));

  Lc4d2:;
    // 00c4d2: SUBI.W dst:(A6.L)+8e src:#100
    G.io->w(G.a[6] + 0x8e, SUB<W>(G.io->w(G.a[6] + 0x8e), 0x100));
    // 00c4d8: Bcc cond:True src:(c4e6)
    goto Lc4e6;

  Lc4da:;
    // 00c4da: ADDI.W dst:(A5.L)+36 src:#ff80
    G.io->w(G.a[5] + 0x36, ADD<W>(G.io->w(G.a[5] + 0x36), 0xff80));

  Lc4e0:;
    // 00c4e0: ADDI.W dst:(A6.L)+8e src:#100
    G.io->w(G.a[6] + 0x8e, ADD<W>(G.io->w(G.a[6] + 0x8e), 0x100));

  Lc4e6:;
    // 00c4e6: SUBQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, SUB<W>(G.io->w(G.a[6] + 0x3e), 1));

  Lc4ea:;
    // 00c4ea: BTST.B dst:(A5.L)+31 src:#3
    BTST<B>(G.io->b(G.a[5] + 0x31), 3);
    // 00c4f0: Bcc cond:NE src:(c4f6)
    if (G.sr.check_condition(Condition::NE)) { goto Lc4f6; }
    // 00c4f2: ADDQ.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, ADD<W>(G.io->w(G.a[6] + 0x24), 1));

  Lc4f6:;
    // 00c4f6: MOVEQ.L dst:D7 src:#4
    G.d[7].l(UCC(4));
    // 00c4f8: JMP src:(5ade)
    F5ade();
    goto end;

  Lc4fe:;
    // 00c4fe: RTS
    goto end;

  Lc500:;
    // 00c500: BSET.B dst:(ff0043) src:#6
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 6));
    // 00c508: BSET.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 4));
    // 00c50e: BSR src:(736a)
    F736a();
    // 00c512: BTST.B dst:(A6.L)+1 src:#4
    BTST<B>(G.io->b(G.a[6] + 1), 4);
    // 00c518: Bcc cond:NE src:(c4fe)
    if (G.sr.check_condition(Condition::NE)) { goto Lc4fe; }
    // 00c51c: BSET.B dst:(A5.L)+31 src:#6
    G.io->b(G.a[5] + 0x31, BSET<B>(G.io->b(G.a[5] + 0x31), 6));
    // 00c522: MOVE.W dst:D0 src:(A5.L)+16
    G.d[0].w(UCC(G.io->w(G.a[5] + 0x16)));
    // 00c526: LSR.W dst:D0 src:#7
    G.d[0].w(LSR<W>(G.d[0].w(), 7));
    // 00c528: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00c52a: ADDI.W dst:D0 src:#30
    G.d[0].w(ADD<W>(G.d[0].w(), 0x30));
    // 00c52e: SUBI.W dst:D1 src:#30
    G.d[1].w(SUB<W>(G.d[1].w(), 0x30));
    // 00c532: Bcc cond:CC src:(c536)
    if (G.sr.check_condition(Condition::CC)) { goto Lc536; }
    // 00c534: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));

  Lc536:;
    // 00c536: MOVEM.W dst:(A5.L)+34 regs:D0,D1
    G.io->w(G.a[5] + 0x34, G.d[0].w());
    G.io->w(G.a[5] + 0x36, G.d[1].w());
    // 00c53c: CLR.W dst:(A5.L)+32
    G.io->w(G.a[5] + 0x32, 0);
    // 00c540: MOVEQ.L dst:D4 src:#6
    G.d[4].l(UCC(6));
    // 00c542: LEA.L dst:A0 src:(f5f4)
    G.a[0] = 0xf5f4;
    // 00c548: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lc54a:;
    // 00c54a: MOVE.L dst:D1 src:#3e000000
    G.d[1].l(0x3e000000);
    // 00c550: MOVE.L dst:D2 src:(A0)+
    G.d[2].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00c552: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 00c554: OR.W dst:D1 src:D2
    G.d[1].w(OR<W>(G.d[1].w(), G.d[2].w()));
    // 00c556: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 00c55a: ROR.L dst:D2 src:#4
    G.d[2].l(ROR<L>(G.d[2].l(), 4));
    // 00c55c: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 00c55e: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00c560: JSR src:(6600)
    F6600();
    // 00c566: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00c568: DBcc.W cond:False dst:D4 src:(c54a)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lc54a; }
    // 00c56c: JMP src:(50a0)
    F50a0();
    goto end;

  Lc5ca:;
    // 00c5ca: MOVE.W dst:(ff0042) src:#1
    G.io->w(0xff0042, UCC(1));
    // 00c5d2: BCLR.B dst:(ff0075) src:#0
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 0));
    // 00c5da: MOVE.W dst:D0 src:(ff0842)
    G.d[0].w(UCC(G.io->w(0xff0842)));
    // 00c5e0: BTST.L dst:D0 src:#3
    BTST<L>(G.d[0].l(), 3);
    // 00c5e4: Bcc cond:NE src:(c5fe)
    if (G.sr.check_condition(Condition::NE)) { goto Lc5fe; }
    // 00c5e6: BTST.L dst:D0 src:#c
    BTST<L>(G.d[0].l(), 12);
    // 00c5ea: Bcc cond:NE src:(c5fe)
    if (G.sr.check_condition(Condition::NE)) { goto Lc5fe; }
    // 00c5ec: MOVE.W dst:(ff0882) src:#1
    G.io->w(0xff0882, 1);
    // 00c5f4: MOVE.W dst:D0 src:#0
    G.d[0].w(UCC(0));
    // 00c5f8: JSR src:(663a)
    F663a();

  Lc5fe:;
    // 00c5fe: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc572()
  {
    _log_call(__func__);

    // 00c572: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 00c576: MOVEM.W src:(A6.L)+34 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x34));
    G.d[1].l(G.io->w(G.a[6] + 0x36));
    // 00c57c: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 00c580: Bcc cond:EQ src:(c5c2)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc5c2; }
    // 00c582: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 00c586: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 00c588: SUB.W dst:D2 src:D1
    G.d[2].w(SUB<W>(G.d[2].w(), G.d[1].w()));
    // 00c58a: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 00c58c: Bcc cond:CS src:(c5b4)
    if (G.sr.check_condition(Condition::CS)) { goto Lc5b4; }
    // 00c58e: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00c592: Bcc cond:NE src:(c5b4)
    if (G.sr.check_condition(Condition::NE)) { goto Lc5b4; }
    // 00c594: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00c598: MOVE.L dst:A0 src:#0
    G.a[0] = 0;
    // 00c59e: MOVE.W dst:A0 src:#d50
    G.a[0].w(0xd50);
    // 00c5a2: ANDI.W dst:D2 src:#f0
    G.d[2].w(AND<W>(G.d[2].w(), 0xf0));
    // 00c5a6: LSL.W dst:D2 src:#4
    G.d[2].w(LSL<W>(G.d[2].w(), 4));
    // 00c5a8: SUBA.W dst:A0 src:D2
    G.a[0] = SUB<L>(G.a[0], G.d[2].w());
    // 00c5aa: MOVEQ.L dst:D6 src:#b
    G.d[6].l(11);
    // 00c5ac: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00c5ae: JSR src:(3eea)
    F3eea();

  Lc5b4:;
    // 00c5b4: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 00c5b6: MOVEQ.L dst:D1 src:#20
    G.d[1].l(UCC(0x20));
    // 00c5b8: JSR src:(3e4a)
    F3e4a();
    // 00c5be: Bcc cond:True src:(6864)
    _m->inc_something(G.a[6]);
    goto end;

  Lc5c2:;
    // 00c5c2: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 00c5c8: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc812()
  {
    _log_call(__func__);

    // 00c812: JSR src:(50e6)
    F50e6();
    // 00c818: BSR src:(6820)
    F6820();
    // 00c81c: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, G.a[6]);
    // 00c822: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00c826: MOVE.W dst:D1 src:#200
    G.d[1].w(0x200);
    // 00c82a: MOVE.W dst:D2 src:#3f
    G.d[2].w(0x3f);
    // 00c82e: MOVE.W dst:D3 src:#1b
    G.d[3].w(UCC(0x1b));
    // 00c832: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 00c836: MOVE.W dst:(ff0042) src:#0
    G.io->w(0xff0042, UCC(0));
    // 00c83e: ORI.W dst:(ff0074) src:#21
    G.io->w(0xff0074, OR<W>(G.io->w(0xff0074), 0x21));
    // 00c846: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 00c84a: CLR.W dst:(HSCROLL_FG)
    G.io->w(HSCROLL_FG, UCC(0));
    // 00c850: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00c856: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00c85c: Bcc cond:EQ src:(c874)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc874; }
    // 00c85e: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 00c864: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00c86c: Bcc cond:NE src:(c874)
    if (G.sr.check_condition(Condition::NE)) { goto Lc874; }
    // 00c86e: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  Lc874:;
    // 00c874: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00c87a: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00c87c: MOVE.W dst:(A6.L)+3c src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3c, G.io->w(G.a[0] + G.d[0].w()));
    // 00c882: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00c888: ASL.W dst:D0 src:#2
    G.d[0].w(ASL<W>(G.d[0].w(), 2));
    // 00c88a: MOVE.W dst:(A6.L)+34 src:#70
    G.io->w(G.a[6] + 0x34, 0x70);
    // 00c890: SUB.W dst:(A6.L)+34 src:D0
    G.io->w(G.a[6] + 0x34, SUB<W>(G.io->w(G.a[6] + 0x34), G.d[0].w()));
    // 00c894: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, 0);
    // 00c898: MOVE.W dst:(A6.L)+24 src:#0
    G.io->w(G.a[6] + 0x24, 0);
    // 00c89e: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));
    // 00c8a2: LEA.L dst:A0 src:(ce86)
    G.a[0] = 0xce86;
    // 00c8a8: MOVEQ.L dst:D7 src:#4
    G.d[7].l(UCC(4));
    // 00c8aa: JMP src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fc8b0()
  {
    _log_call(__func__);

    // 00c8b0: TST.W src:(A6.L)+30
    TST<W>(G.io->w(G.a[6] + 0x30));
    // 00c8b4: Bcc cond:NE src:(c93c)
    if (G.sr.check_condition(Condition::NE)) { goto Lc93c; }
    // 00c8b8: BSET.B dst:(A6.L)+30 src:#0
    G.io->b(G.a[6] + 0x30, BSET<B>(G.io->b(G.a[6] + 0x30), 0));
    // 00c8be: MOVE.W dst:D0 src:#20
    G.d[0].w(0x20);
    // 00c8c2: MOVE.L dst:D1 src:#3ce80
    G.d[1].l(0x3ce80);
    // 00c8c8: MOVE.W dst:D2 src:#204
    G.d[2].w(UCC(0x204));
    // 00c8cc: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 00c8d2: MOVE.W dst:D5 src:#654
    G.d[5].w(UCC(0x654));
    // 00c8d6: LEA.L dst:A0 src:(ce3e)
    G.a[0] = 0xce3e;
    // 00c8dc: MOVEQ.L dst:D6 src:#5
    G.d[6].l(5);
    // 00c8de: MOVEQ.L dst:D7 src:#5
    G.d[7].l(5);
    // 00c8e0: MOVE.W dst:D3 src:#e8
    G.d[3].w(UCC(0xe8));
    // 00c8e4: BSR src:(bec8)
    Fbec8();
    // 00c8e8: MOVE.W dst:D0 src:(VSCROLL_BG)
    G.d[0].w(G.io->w(VSCROLL_BG));
    // 00c8ee: MOVE.W dst:(A6.L)+4e src:D0
    G.io->w(G.a[6] + 0x4e, G.d[0].w());
    // 00c8f2: MOVEQ.L dst:D4 src:#5
    G.d[4].l(UCC(5));
    // 00c8f4: LEA.L dst:A0 src:(cd1a)
    G.a[0] = 0xcd1a;
    // 00c8fa: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lc8fc:;
    // 00c8fc: MOVE.L dst:D1 src:(A0)+
    G.d[1].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00c8fe: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00c900: JSR src:(6600)
    F6600();
    // 00c906: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00c908: DBcc.W cond:False dst:D4 src:(c8fc)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lc8fc; }
    // 00c90c: MOVEQ.L dst:D4 src:#3
    G.d[4].l(3);
    // 00c90e: MOVEQ.L dst:D7 src:#c
    G.d[7].l(UCC(12));
    // 00c910: LEA.L dst:A0 src:(cd12)
    G.a[0] = 0xcd12;
    // 00c916: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lc918:;
    // 00c918: MOVE.L dst:D1 src:#1b000000
    G.d[1].l(0x1b000000);
    // 00c91e: MOVE.W dst:D2 src:(A0)+
    G.d[2].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00c920: AND.W dst:D2 src:#fff
    G.d[2].w(AND<W>(G.d[2].w(), 0xfff));
    // 00c924: ADD.W dst:D1 src:D2
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[2].w()));
    // 00c926: MOVE.W dst:D2 src:D4
    G.d[2].w(UCC(G.d[4].w()));
    // 00c928: ASL.W dst:D2 src:D7
    G.d[2].w(ASL<W>(G.d[2].w(), G.d[7].w()));
    // 00c92a: ADD.W dst:D1 src:D2
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[2].w()));
    // 00c92c: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00c92e: JSR src:(6600)
    F6600();
    // 00c934: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00c936: DBcc.W cond:False dst:D4 src:(c918)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lc918; }
    // 00c93a: RTS
    goto end;

  Lc93c:;
    // 00c93c: JSR src:(5114)
    F5114();
    // 00c942: ADDQ.W dst:(A6.L)+38 src:#1
    G.io->w(G.a[6] + 0x38, ADD<W>(G.io->w(G.a[6] + 0x38), 1));
    // 00c946: BCLR.B dst:(A6) src:#1
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 1));
    // 00c94a: BTST.B dst:(A6.L)+31 src:#6
    BTST<B>(G.io->b(G.a[6] + 0x31), 6);
    // 00c950: Bcc cond:EQ src:(c962)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc962; }
    // 00c952: BSR src:(cda4)
    Fcda4();
    // 00c956: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 00c95c: Bcc cond:NE src:(cdfc)
    if (G.sr.check_condition(Condition::NE)) { goto Lcdfc; }
    // 00c960: RTS
    goto end;

  Lc962:;
    // 00c962: JSR src:(3e2e)
    F3e2e();
    // 00c968: MOVE.W dst:D0 src:(VSCROLL_BG)
    G.d[0].w(G.io->w(VSCROLL_BG));
    // 00c96e: SUB.W dst:D0 src:(A6.L)+4e
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(G.a[6] + 0x4e)));
    // 00c972: Bcc cond:EQ src:(c98c)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc98c; }
    // 00c974: MOVE.W dst:(A6.L)+4e src:(VSCROLL_BG)
    G.io->w(G.a[6] + 0x4e, G.io->w(VSCROLL_BG));
    // 00c97c: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00c97e: ADD.W dst:(VSCROLL_FG) src:D0
    G.io->w(VSCROLL_FG, ADD<W>(G.io->w(VSCROLL_FG), G.d[0].w()));
    // 00c984: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 00c986: ADD.W dst:(ff008e) src:D0
    G.io->w(0xff008e, ADD<W>(G.io->w(0xff008e), G.d[0].w()));

  Lc98c:;
    // 00c98c: BSR src:(6858)
    F6858();
    // 00c990: BSR src:(6864)
    _m->inc_something(G.a[6]);
    // 00c994: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00c998: Bcc cond:NE src:(cd32)
    if (G.sr.check_condition(Condition::NE)) { goto Lcd32; }
    // 00c99c: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00c9a0: Bcc cond:MI src:(cd32)
    if (G.sr.check_condition(Condition::MI)) { goto Lcd32; }
    // 00c9a4: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00c9a8: Bcc cond:EQ src:(c9b6)
    if (G.sr.check_condition(Condition::EQ)) { goto Lc9b6; }
    // 00c9aa: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00c9ae: CMP.W dst:D0 src:(A6.L)+3c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3c));
    // 00c9b2: Bcc cond:CC src:(cd32)
    if (G.sr.check_condition(Condition::CC)) { goto Lcd32; }

  Lc9b6:;
    // 00c9b6: LEA.L dst:A0 src:(f304)
    G.a[0] = 0xf304;
    // 00c9bc: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00c9c2: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00c9c6: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00c9c8: MOVE.W dst:D2 src:#50
    G.d[2].w(0x50);
    // 00c9cc: MOVE.W dst:D0 src:#8
    G.d[0].w(8);
    // 00c9d0: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00c9d2: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 00c9d8: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00c9da: JSR src:(5ade)
    F5ade();
    // 00c9e0: ADDQ.W dst:D0 src:#4
    G.d[0].w(ADD<W>(G.d[0].w(), 4));
    // 00c9e2: LEA.L dst:A1 src:(A6.L)+7a
    G.a[1] = G.a[6] + 0x7a;
    // 00c9e6: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00c9e8: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 00c9f0: Bcc cond:NE src:(ca3e)
    if (G.sr.check_condition(Condition::NE)) { goto Lca3e; }
    // 00c9f4: BTST.B dst:(A6) src:#3
    BTST<B>(G.io->b(G.a[6]), 3);
    // 00c9f8: Bcc cond:NE src:(ca3e)
    if (G.sr.check_condition(Condition::NE)) { goto Lca3e; }
    // 00c9fc: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 00ca00: ANDI.W dst:D0 src:#30
    G.d[0].w(AND<W>(G.d[0].w(), 0x30));
    // 00ca04: LEA.L dst:A0 src:(cec2)
    G.a[0] = 0xcec2;
    // 00ca0a: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00ca0c: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 00ca12: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00ca14: OR.W dst:(A1.L)+2 src:D0
    G.io->w(G.a[1] + 2, OR<W>(G.io->w(G.a[1] + 2), G.d[0].w()));
    // 00ca18: MOVE.W dst:(A1.L)+4 src:(A0)+
    G.io->w(G.a[1] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00ca1c: MOVE.L dst:(A1.L)+6 src:(A0)+
    G.io->l(G.a[1] + 6, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00ca20: ANDI.W dst:(A1.L)+10 src:#7ff
    G.io->w(G.a[1] + 0x10, AND<W>(G.io->w(G.a[1] + 0x10), 0x7ff));
    // 00ca26: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00ca28: OR.W dst:(A1.L)+10 src:D0
    G.io->w(G.a[1] + 0x10, OR<W>(G.io->w(G.a[1] + 0x10), G.d[0].w()));
    // 00ca2c: MOVE.W dst:(A1.L)+12 src:(A0)+
    G.io->w(G.a[1] + 0x12, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00ca30: MOVE.L dst:(A1.L)+14 src:(A0)+
    G.io->l(G.a[1] + 0x14, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00ca34: MOVE.L dst:A2 src:A1
    G.a[2] = UCC(G.a[1]);
    // 00ca36: JSR src:(5ae2)
    F5ae2();
    // 00ca3c: Bcc cond:True src:(ca46)
    goto Lca46;

  Lca3e:;
    // 00ca3e: MOVE.W dst:D1 src:D7
    G.d[1].w(G.d[7].w());
    // 00ca40: MOVE.L dst:A0 src:A1
    G.a[0] = UCC(G.a[1]);
    // 00ca42: BSR src:(5b5e)
    F5b5e();

  Lca46:;
    // 00ca46: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 00ca4a: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00ca4c: ADD.W dst:D0 src:#1400
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1400));
    // 00ca50: CMP.W dst:D0 src:(ff0858)
    CMP<W>(G.d[0].w(), G.io->w(0xff0858));
    // 00ca56: Bcc cond:CS src:(cb02)
    if (G.sr.check_condition(Condition::CS)) { goto Lcb02; }
    // 00ca5a: SUB.W dst:D1 src:#1400
    G.d[1].w(SUB<W>(G.d[1].w(), 0x1400));
    // 00ca5e: CMP.W dst:D1 src:(ff0858)
    CMP<W>(G.d[1].w(), G.io->w(0xff0858));
    // 00ca64: Bcc cond:CC src:(cc0a)
    if (G.sr.check_condition(Condition::CC)) { goto Lcc0a; }
    // 00ca68: CMPI.W dst:(A6.L)+38 src:#15f9
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x15f9);
    // 00ca6e: Bcc cond:CS src:(ca80)
    if (G.sr.check_condition(Condition::CS)) { goto Lca80; }
    // 00ca70: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00ca76: AND.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00ca7a: Bcc cond:NE src:(cb00)
    if (G.sr.check_condition(Condition::NE)) { goto Lcb00; }
    // 00ca7e: Bcc cond:True src:(ca92)
    goto Lca92;

  Lca80:;
    // 00ca80: ADDQ.W dst:(A6.L)+36 src:#1
    G.io->w(G.a[6] + 0x36, ADD<W>(G.io->w(G.a[6] + 0x36), 1));
    // 00ca84: MOVE.W dst:D0 src:(A6.L)+34
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x34)));
    // 00ca88: CMP.W dst:D0 src:(A6.L)+36
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x36));
    // 00ca8c: Bcc cond:CC src:(cb00)
    if (G.sr.check_condition(Condition::CC)) { goto Lcb00; }
    // 00ca8e: CLR.W dst:(A6.L)+36
    G.io->w(G.a[6] + 0x36, UCC(0));

  Lca92:;
    // 00ca92: MOVE.W dst:D3 src:#f00
    G.d[3].w(0xf00);
    // 00ca96: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x14)));
    // 00ca9a: CMP.W dst:D0 src:(ff0856)
    CMP<W>(G.d[0].w(), G.io->w(0xff0856));
    // 00caa0: Bcc cond:CS src:(caa4)
    if (G.sr.check_condition(Condition::CS)) { goto Lcaa4; }
    // 00caa2: NEG.W dst:D3
    G.d[3].w(NEG<W>(G.d[3].w()));

  Lcaa4:;
    // 00caa4: ADD.W dst:D3 src:D0
    G.d[3].w(ADD<W>(G.d[3].w(), G.d[0].w()));
    // 00caa6: MOVE.W dst:D4 src:#600
    G.d[4].w(0x600);
    // 00caaa: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x16)));
    // 00caae: CMP.W dst:D0 src:(ff0858)
    CMP<W>(G.d[0].w(), G.io->w(0xff0858));
    // 00cab4: Bcc cond:CC src:(cab8)
    if (G.sr.check_condition(Condition::CC)) { goto Lcab8; }
    // 00cab6: NEG.W dst:D4
    G.d[4].w(NEG<W>(G.d[4].w()));

  Lcab8:;
    // 00cab8: ADD.W dst:D4 src:D0
    G.d[4].w(ADD<W>(G.d[4].w(), G.d[0].w()));
    // 00caba: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cabe: MOVE.W dst:D0 src:D3
    G.d[0].w(G.d[3].w());
    // 00cac0: MOVE.W dst:D1 src:D4
    G.d[1].w(UCC(G.d[4].w()));
    // 00cac2: MOVEM.W src:(ff0856) regs:D2,D3
    G.d[2].l(G.io->w(0xff0856));
    G.d[3].l(G.io->w(0xff0858));
    // 00caca: BSR src:(6666)
    F6666();
    // 00cace: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00cad0: ADD.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 00cad4: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cad8: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 00cadc: BSR src:(6b22)
    F6b22();
    // 00cae0: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cae4: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 00cae8: ADDQ.W dst:D0 src:#4
    G.d[0].w(ADD<W>(G.d[0].w(), 4));
    // 00caea: AND.W dst:D0 src:#c03f
    G.d[0].w(AND<W>(G.d[0].w(), 0xc03f));
    // 00caee: BSR src:(6b22)
    F6b22();
    // 00caf2: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00caf6: SUBQ.W dst:D0 src:#4
    G.d[0].w(SUB<W>(G.d[0].w(), 4));
    // 00caf8: AND.W dst:D0 src:#c03f
    G.d[0].w(AND<W>(G.d[0].w(), 0xc03f));
    // 00cafc: Bcc cond:True src:(6b22)
    F6b22();
    goto end;

  Lcb00:;
    // 00cb00: RTS
    goto end;

  Lcb02:;
    // 00cb02: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00cb08: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00cb0c: Bcc cond:NE src:(cb00)
    if (G.sr.check_condition(Condition::NE)) { goto Lcb00; }
    // 00cb0e: MOVE.W dst:D3 src:#700
    G.d[3].w(0x700);
    // 00cb12: ADD.W dst:D3 src:(A6.L)+14
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x14)));
    // 00cb16: MOVE.W dst:D4 src:#1b00
    G.d[4].w(0x1b00);
    // 00cb1a: ADD.W dst:D4 src:(A6.L)+16
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[6] + 0x16)));
    // 00cb1e: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cb22: MOVE.W dst:D0 src:#8000
    G.d[0].w(UCC(0x8000));
    // 00cb26: BSR src:(6b22)
    F6b22();
    // 00cb2a: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cb2e: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cb32: MOVE.W dst:D0 src:#8006
    G.d[0].w(UCC(0x8006));
    // 00cb36: BSR src:(6b22)
    F6b22();
    // 00cb3a: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cb3e: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cb42: MOVE.W dst:D0 src:#800c
    G.d[0].w(UCC(0x800c));
    // 00cb46: BSR src:(6b22)
    F6b22();
    // 00cb4a: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cb4e: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cb52: MOVE.W dst:D0 src:#8012
    G.d[0].w(UCC(0x8012));
    // 00cb56: BSR src:(6b22)
    F6b22();
    // 00cb5a: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cb5e: SUB.W dst:D3 src:#e00
    G.d[3].w(SUB<W>(G.d[3].w(), 0xe00));
    // 00cb62: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cb66: MOVE.W dst:D0 src:#8000
    G.d[0].w(UCC(0x8000));
    // 00cb6a: BSR src:(6b22)
    F6b22();
    // 00cb6e: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cb72: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cb76: MOVE.W dst:D0 src:#803a
    G.d[0].w(UCC(0x803a));
    // 00cb7a: BSR src:(6b22)
    F6b22();
    // 00cb7e: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cb82: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cb86: MOVE.W dst:D0 src:#8034
    G.d[0].w(UCC(0x8034));
    // 00cb8a: BSR src:(6b22)
    F6b22();
    // 00cb8e: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cb92: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cb96: MOVE.W dst:D0 src:#802e
    G.d[0].w(UCC(0x802e));
    // 00cb9a: BSR src:(6b22)
    F6b22();
    // 00cb9e: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cba2: CMPI.W dst:(A6.L)+38 src:#15f9
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x15f9);
    // 00cba8: Bcc cond:CS src:(cc08)
    if (G.sr.check_condition(Condition::CS)) { goto Lcc08; }
    // 00cbac: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cbb0: MOVE.W dst:D0 src:#803d
    G.d[0].w(UCC(0x803d));
    // 00cbb4: BSR src:(6b22)
    F6b22();
    // 00cbb8: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cbbc: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cbc0: MOVE.W dst:D0 src:#8037
    G.d[0].w(UCC(0x8037));
    // 00cbc4: BSR src:(6b22)
    F6b22();
    // 00cbc8: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cbcc: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cbd0: MOVE.W dst:D0 src:#8031
    G.d[0].w(UCC(0x8031));
    // 00cbd4: BSR src:(6b22)
    F6b22();
    // 00cbd8: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cbdc: ADD.W dst:D3 src:#e00
    G.d[3].w(ADD<W>(G.d[3].w(), 0xe00));
    // 00cbe0: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cbe4: MOVE.W dst:D0 src:#8003
    G.d[0].w(UCC(0x8003));
    // 00cbe8: BSR src:(6b22)
    F6b22();
    // 00cbec: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cbf0: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cbf4: MOVE.W dst:D0 src:#8009
    G.d[0].w(UCC(0x8009));
    // 00cbf8: BSR src:(6b22)
    F6b22();
    // 00cbfc: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cc00: MOVE.W dst:D0 src:#800f
    G.d[0].w(UCC(0x800f));
    // 00cc04: Bcc cond:True src:(6b22)
    F6b22();
    goto end;

  Lcc08:;
    // 00cc08: RTS
    goto end;

  Lcc0a:;
    // 00cc0a: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00cc10: AND.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00cc14: Bcc cond:NE src:(cb00)
    if (G.sr.check_condition(Condition::NE)) { goto Lcb00; }
    // 00cc18: MOVE.W dst:D3 src:#700
    G.d[3].w(0x700);
    // 00cc1c: ADD.W dst:D3 src:(A6.L)+14
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x14)));
    // 00cc20: MOVE.W dst:D4 src:#e500
    G.d[4].w(0xe500);
    // 00cc24: ADD.W dst:D4 src:(A6.L)+16
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[6] + 0x16)));
    // 00cc28: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cc2c: MOVE.W dst:D0 src:#8020
    G.d[0].w(UCC(0x8020));
    // 00cc30: BSR src:(6b22)
    F6b22();
    // 00cc34: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cc38: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cc3c: MOVE.W dst:D0 src:#801a
    G.d[0].w(UCC(0x801a));
    // 00cc40: BSR src:(6b22)
    F6b22();
    // 00cc44: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cc48: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cc4c: MOVE.W dst:D0 src:#8014
    G.d[0].w(UCC(0x8014));
    // 00cc50: BSR src:(6b22)
    F6b22();
    // 00cc54: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cc58: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cc5c: MOVE.W dst:D0 src:#800e
    G.d[0].w(UCC(0x800e));
    // 00cc60: BSR src:(6b22)
    F6b22();
    // 00cc64: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cc68: SUB.W dst:D3 src:#e00
    G.d[3].w(SUB<W>(G.d[3].w(), 0xe00));
    // 00cc6c: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cc70: MOVE.W dst:D0 src:#8020
    G.d[0].w(UCC(0x8020));
    // 00cc74: BSR src:(6b22)
    F6b22();
    // 00cc78: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cc7c: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cc80: MOVE.W dst:D0 src:#8026
    G.d[0].w(UCC(0x8026));
    // 00cc84: BSR src:(6b22)
    F6b22();
    // 00cc88: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cc8c: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cc90: MOVE.W dst:D0 src:#802c
    G.d[0].w(UCC(0x802c));
    // 00cc94: BSR src:(6b22)
    F6b22();
    // 00cc98: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cc9c: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00cca0: MOVE.W dst:D0 src:#8032
    G.d[0].w(UCC(0x8032));
    // 00cca4: BSR src:(6b22)
    F6b22();
    // 00cca8: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00ccac: CMPI.W dst:(A6.L)+38 src:#15f9
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x15f9);
    // 00ccb2: Bcc cond:CS src:(cc08)
    if (G.sr.check_condition(Condition::CS)) { goto Lcc08; }
    // 00ccb6: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00ccba: MOVE.W dst:D0 src:#8023
    G.d[0].w(UCC(0x8023));
    // 00ccbe: BSR src:(6b22)
    F6b22();
    // 00ccc2: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00ccc6: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00ccca: MOVE.W dst:D0 src:#8029
    G.d[0].w(UCC(0x8029));
    // 00ccce: BSR src:(6b22)
    F6b22();
    // 00ccd2: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00ccd6: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00ccda: MOVE.W dst:D0 src:#802f
    G.d[0].w(UCC(0x802f));
    // 00ccde: BSR src:(6b22)
    F6b22();
    // 00cce2: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cce6: ADD.W dst:D3 src:#e00
    G.d[3].w(ADD<W>(G.d[3].w(), 0xe00));
    // 00ccea: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00ccee: MOVE.W dst:D0 src:#801d
    G.d[0].w(UCC(0x801d));
    // 00ccf2: BSR src:(6b22)
    F6b22();
    // 00ccf6: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00ccfa: MOVEM.W dst:-(USP) regs:D4,D3
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    // 00ccfe: MOVE.W dst:D0 src:#8017
    G.d[0].w(UCC(0x8017));
    // 00cd02: BSR src:(6b22)
    F6b22();
    // 00cd06: MOVEM.W src:(USP)+ regs:D3,D4
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00cd0a: MOVE.W dst:D0 src:#8011
    G.d[0].w(UCC(0x8011));
    // 00cd0e: Bcc cond:True src:(6b22)
    F6b22();
    goto end;

  Lcd32:;
    // 00cd32: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00cd36: MOVE.W dst:(ff0042) src:#2
    G.io->w(0xff0042, UCC(2));
    // 00cd3e: BSET.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 4));
    // 00cd44: BSR src:(736a)
    F736a();
    // 00cd48: BTST.B dst:(A6.L)+1 src:#4
    BTST<B>(G.io->b(G.a[6] + 1), 4);
    // 00cd4e: Bcc cond:NE src:(cb00)
    if (G.sr.check_condition(Condition::NE)) { goto Lcb00; }
    // 00cd52: BSET.B dst:(A6.L)+31 src:#6
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 6));
    // 00cd58: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x16)));
    // 00cd5c: LSR.W dst:D0 src:#7
    G.d[0].w(LSR<W>(G.d[0].w(), 7));
    // 00cd5e: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00cd60: ADDI.W dst:D0 src:#50
    G.d[0].w(ADD<W>(G.d[0].w(), 0x50));
    // 00cd64: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 00cd68: Bcc cond:CC src:(cd6c)
    if (G.sr.check_condition(Condition::CC)) { goto Lcd6c; }
    // 00cd6a: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));

  Lcd6c:;
    // 00cd6c: MOVEM.W dst:(A6.L)+34 regs:D0,D1
    G.io->w(G.a[6] + 0x34, G.d[0].w());
    G.io->w(G.a[6] + 0x36, G.d[1].w());
    // 00cd72: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, 0);
    // 00cd76: MOVEQ.L dst:D4 src:#6
    G.d[4].l(UCC(6));
    // 00cd78: LEA.L dst:A0 src:(f5f4)
    G.a[0] = 0xf5f4;
    // 00cd7e: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lcd80:;
    // 00cd80: MOVE.L dst:D1 src:#3e000000
    G.d[1].l(0x3e000000);
    // 00cd86: MOVE.L dst:D2 src:(A0)+
    G.d[2].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00cd88: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 00cd8a: OR.W dst:D1 src:D2
    G.d[1].w(OR<W>(G.d[1].w(), G.d[2].w()));
    // 00cd8c: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 00cd90: ROR.L dst:D2 src:#4
    G.d[2].l(ROR<L>(G.d[2].l(), 4));
    // 00cd92: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 00cd94: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00cd96: JSR src:(6600)
    F6600();
    // 00cd9c: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00cd9e: DBcc.W cond:False dst:D4 src:(cd80)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lcd80; }
    // 00cda2: RTS
    goto end;

  Lcdfc:;
    // 00cdfc: MOVE.W dst:(ff0042) src:#1
    G.io->w(0xff0042, UCC(1));
    // 00ce04: BCLR.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 5));
    // 00ce0c: BCLR.B dst:(ff0075) src:#0
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 0));
    // 00ce14: MOVE.W dst:D0 src:(ff0842)
    G.d[0].w(UCC(G.io->w(0xff0842)));
    // 00ce1a: BTST.L dst:D0 src:#3
    BTST<L>(G.d[0].l(), 3);
    // 00ce1e: Bcc cond:NE src:(ce38)
    if (G.sr.check_condition(Condition::NE)) { goto Lce38; }
    // 00ce20: BTST.L dst:D0 src:#c
    BTST<L>(G.d[0].l(), 12);
    // 00ce24: Bcc cond:NE src:(ce38)
    if (G.sr.check_condition(Condition::NE)) { goto Lce38; }
    // 00ce26: MOVE.W dst:D0 src:#0
    G.d[0].w(UCC(0));
    // 00ce2a: JSR src:(663a)
    F663a();
    // 00ce30: MOVE.W dst:(ff0882) src:#1
    G.io->w(0xff0882, UCC(1));

  Lce38:;
    // 00ce38: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fcda4()
  {
    _log_call(__func__);

    // 00cda4: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 00cda8: MOVEM.W src:(A6.L)+34 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x34));
    G.d[1].l(G.io->w(G.a[6] + 0x36));
    // 00cdae: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 00cdb2: Bcc cond:EQ src:(cdf4)
    if (G.sr.check_condition(Condition::EQ)) { goto Lcdf4; }
    // 00cdb4: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 00cdb8: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 00cdba: SUB.W dst:D2 src:D1
    G.d[2].w(SUB<W>(G.d[2].w(), G.d[1].w()));
    // 00cdbc: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 00cdbe: Bcc cond:CS src:(cde6)
    if (G.sr.check_condition(Condition::CS)) { goto Lcde6; }
    // 00cdc0: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00cdc4: Bcc cond:NE src:(cde6)
    if (G.sr.check_condition(Condition::NE)) { goto Lcde6; }
    // 00cdc6: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00cdca: MOVE.L dst:A0 src:#0
    G.a[0] = 0;
    // 00cdd0: MOVE.W dst:A0 src:#c50
    G.a[0].w(0xc50);
    // 00cdd4: ANDI.W dst:D2 src:#f0
    G.d[2].w(AND<W>(G.d[2].w(), 0xf0));
    // 00cdd8: LSL.W dst:D2 src:#4
    G.d[2].w(LSL<W>(G.d[2].w(), 4));
    // 00cdda: SUBA.W dst:A0 src:D2
    G.a[0] = SUB<L>(G.a[0], G.d[2].w());
    // 00cddc: MOVEQ.L dst:D6 src:#7
    G.d[6].l(7);
    // 00cdde: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00cde0: JSR src:(3eea)
    F3eea();

  Lcde6:;
    // 00cde6: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 00cde8: MOVEQ.L dst:D1 src:#20
    G.d[1].l(UCC(0x20));
    // 00cdea: JSR src:(3e4a)
    F3e4a();
    // 00cdf0: Bcc cond:True src:(6864)
    _m->inc_something(G.a[6]);
    goto end;

  Lcdf4:;
    // 00cdf4: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 00cdfa: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fcf02()
  {
    _log_call(__func__);

    // 00cf02: BTST.B dst:(ff0074) src:#0
    BTST<B>(G.io->b(0xff0074), 0);
    // 00cf0a: Bcc cond:NE src:(cf70)
    if (G.sr.check_condition(Condition::NE)) { goto Lcf70; }
    // 00cf0c: BSET.B dst:(ff0074) src:#0
    G.io->b(0xff0074, BSET<B>(G.io->b(0xff0074), 0));
    // 00cf14: MOVE.W dst:D0 src:#2c
    G.d[0].w(0x2c);
    // 00cf18: MOVE.L dst:D1 src:#3d280
    G.d[1].l(0x3d280);
    // 00cf1e: MOVE.W dst:D2 src:#1b8
    G.d[2].w(UCC(0x1b8));
    // 00cf22: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 00cf28: MOVE.W dst:(HSCROLL_BG) src:#fffe
    G.io->w(HSCROLL_BG, 0xfffe);
    // 00cf30: MOVE.W dst:(ff0096) src:#fffe
    G.io->w(0xff0096, 0xfffe);
    // 00cf38: MOVE.W dst:D1 src:#20
    G.d[1].w(0x20);
    // 00cf3c: SUB.W dst:D1 src:(VSCROLL_BG)
    G.d[1].w(SUB<W>(G.d[1].w(), G.io->w(VSCROLL_BG)));
    // 00cf42: SUB.W dst:(VSCROLL_BG) src:D1
    G.io->w(VSCROLL_BG, SUB<W>(G.io->w(VSCROLL_BG), G.d[1].w()));
    // 00cf48: JSR src:(64aa)
    _m->push_scroll_state();
    // 00cf4e: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00cf52: MOVE.W dst:D1 src:#2000
    G.d[1].w(0x2000);
    // 00cf56: MOVE.W dst:D2 src:#3f
    G.d[2].w(0x3f);
    // 00cf5a: MOVE.W dst:D3 src:#1f
    G.d[3].w(UCC(0x1f));
    // 00cf5e: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 00cf62: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00cf64: MOVE.L dst:D1 src:#3f101000
    G.d[1].l(UCC(0x3f101000));
    // 00cf6a: JSR src:(6600)
    F6600();

  Lcf70:;
    // 00cf70: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 00cf76: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00cf7a: ROL.W dst:D0 src:#5
    G.d[0].w(ROL<W>(G.d[0].w(), 5));
    // 00cf7c: MOVE.W dst:(A6.L)+30 src:D0
    G.io->w(G.a[6] + 0x30, G.d[0].w());
    // 00cf80: CLR.W dst:(A6.L)+32
    G.io->w(G.a[6] + 0x32, 0);
    // 00cf84: CLR.L dst:(A6.L)+36
    G.io->l(G.a[6] + 0x36, 0);
    // 00cf88: CLR.L dst:(A6.L)+3c
    G.io->l(G.a[6] + 0x3c, 0);
    // 00cf8c: MOVE.W dst:(A6.L)+14 src:#a800
    G.io->w(G.a[6] + 0x14, 0xa800);
    // 00cf92: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(G.io->w(G.a[6] + 0x28));
    // 00cf96: AND.W dst:D0 src:#1ff
    G.d[0].w(AND<W>(G.d[0].w(), 0x1ff));
    // 00cf9a: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00cf9c: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, G.d[0].w());
    // 00cfa0: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00cfa6: MOVE.L dst:D1 src:#381
    G.d[1].l(UCC(0x381));
    // 00cfac: JSR src:(5a9a)
    F5a9a();
    // 00cfb2: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00cfb6: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00cfba: TST.W src:D0
    TST<W>(G.d[0].w());
    // 00cfbc: Bcc cond:NE src:(cfd6)
    if (G.sr.check_condition(Condition::NE)) { goto Lcfd6; }
    // 00cfbe: BSR src:(6820)
    F6820();
    // 00cfc2: ORI.W dst:(A6.L)+10 src:#2000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x2000));
    // 00cfc8: JSR src:(4f86)
    F4f86();
    // 00cfce: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00cfd0: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, UCC(G.d[0].w()));
    // 00cfd4: RTS
    goto end;

  Lcfd6:;
    // 00cfd6: BSR src:(6836)
    F6836();
    // 00cfda: JSR src:(4f86)
    F4f86();
    // 00cfe0: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00cfe2: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, UCC(G.d[0].w()));
    // 00cfe6: ORI.W dst:(A6.L)+10 src:#3800
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x3800));
    // 00cfec: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(G.io->w(G.a[6] + 0x28));
    // 00cff0: AND.W dst:D0 src:#e00
    G.d[0].w(AND<W>(G.d[0].w(), 0xe00));
    // 00cff4: ROR.W dst:D0 src:#8
    G.d[0].w(ROR<W>(G.d[0].w(), 8));
    // 00cff6: LEA.L dst:A0 src:(d03c)
    G.a[0] = 0xd03c;
    // 00cffc: MOVE.W dst:D0 src:(A0,D0.W)+0
    G.d[0].w(G.io->w(G.a[0] + G.d[0].w()));
    // 00d000: MOVE.W dst:(A6.L)+3a src:D0
    G.io->w(G.a[6] + 0x3a, G.d[0].w());
    // 00d004: MOVE.L dst:D5 src:#0
    G.d[5].l(0);
    // 00d00a: MOVE.W dst:D5 src:D0
    G.d[5].w(UCC(G.d[0].w()));
    // 00d00c: LEA.L dst:A0 src:(d026)
    G.a[0] = 0xd026;
    // 00d012: MOVEQ.L dst:D6 src:#0
    G.d[6].l(0);
    // 00d014: MOVEQ.L dst:D7 src:#5
    G.d[7].l(5);
    // 00d016: MOVE.W dst:D3 src:#e8
    G.d[3].w(UCC(0xe8));
    // 00d01a: BSR src:(bec8)
    Fbec8();
    // 00d01e: MOVEQ.L dst:D6 src:#0
    G.d[6].l(0);
    // 00d020: MOVEQ.L dst:D7 src:#4
    G.d[7].l(UCC(4));
    // 00d022: Bcc cond:True src:(bec8)
    Fbec8();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd04c()
  {
    _log_call(__func__);

    // 00d04c: BSR src:(6858)
    F6858();
    // 00d050: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00d054: Bcc cond:NE src:(d19a)
    if (G.sr.check_condition(Condition::NE)) { goto Ld19a; }
    // 00d058: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00d05c: Bcc cond:MI src:(d15c)
    if (G.sr.check_condition(Condition::MI)) { goto Ld15c; }
    // 00d060: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00d064: Bcc cond:EQ src:(d072)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld072; }
    // 00d066: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00d06a: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00d06e: Bcc cond:CS src:(d15c)
    if (G.sr.check_condition(Condition::CS)) { goto Ld15c; }

  Ld072:;
    // 00d072: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00d076: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00d07a: TST.W src:D0
    TST<W>(G.d[0].w());
    // 00d07c: Bcc cond:NE src:(d0d2)
    if (G.sr.check_condition(Condition::NE)) { goto Ld0d2; }
    // 00d080: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00d084: ADD.W dst:D0 src:#800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x800));
    // 00d088: CMP.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 00d08c: Bcc cond:CS src:(d094)
    if (G.sr.check_condition(Condition::CS)) { goto Ld094; }
    // 00d08e: JMP src:(50a0)
    F50a0();
    goto end;

  Ld094:;
    // 00d094: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00d09a: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00d09e: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00d0a4: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 00d0a6: SUB.W dst:D0 src:#48
    G.d[0].w(SUB<W>(G.d[0].w(), 0x48));
    // 00d0aa: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 00d0ac: CMP.W dst:D0 src:(A6.L)+30
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x30));
    // 00d0b0: Bcc cond:CC src:(d0b6)
    if (G.sr.check_condition(Condition::CC)) { goto Ld0b6; }
    // 00d0b2: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));

  Ld0b6:;
    // 00d0b6: MOVE.W dst:D1 src:(A6.L)+30
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00d0ba: CMP.W dst:D1 src:#10
    CMP<W>(G.d[1].w(), 0x10);
    // 00d0be: Bcc cond:NE src:(d0d0)
    if (G.sr.check_condition(Condition::NE)) { goto Ld0d0; }
    // 00d0c0: MOVE.W dst:D0 src:#8030
    G.d[0].w(0x8030);
    // 00d0c4: MOVE.W dst:D3 src:#f880
    G.d[3].w(0xf880);
    // 00d0c8: MOVE.W dst:D4 src:#300
    G.d[4].w(UCC(0x300));
    // 00d0cc: BSR src:(6bd0)
    F6bd0();

  Ld0d0:;
    // 00d0d0: RTS
    goto end;

  Ld0d2:;
    // 00d0d2: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00d0d6: ADD.W dst:D0 src:#2800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x2800));
    // 00d0da: CMP.W dst:D0 src:#fc00
    CMP<W>(G.d[0].w(), 0xfc00);
    // 00d0de: Bcc cond:CS src:(d100)
    if (G.sr.check_condition(Condition::CS)) { goto Ld100; }
    // 00d0e0: MOVE.L dst:A0 src:#0
    G.a[0] = 0;
    // 00d0e6: MOVE.W dst:A0 src:(A6.L)+3a
    G.a[0].w(G.io->w(G.a[6] + 0x3a));
    // 00d0ea: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00d0ee: MOVE.W dst:D6 src:#5
    G.d[6].w(5);
    // 00d0f2: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00d0f4: JSR src:(3eea)
    F3eea();
    // 00d0fa: JMP src:(50a0)
    F50a0();
    goto end;

  Ld100:;
    // 00d100: MOVE.W dst:D0 src:(A6)
    G.d[0].w(G.io->w(G.a[6]));
    // 00d102: AND.W dst:D0 src:#2010
    G.d[0].w(AND<W>(G.d[0].w(), 0x2010));
    // 00d106: Bcc cond:NE src:(d0d0)
    if (G.sr.check_condition(Condition::NE)) { goto Ld0d0; }
    // 00d10a: MOVE.W dst:D0 src:(ff0094)
    G.d[0].w(G.io->w(0xff0094));
    // 00d110: MOVE.W dst:D1 src:(ff0092)
    G.d[1].w(G.io->w(0xff0092));
    // 00d116: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00d11a: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00d11e: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00d124: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00d128: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00d12e: ASL.W dst:D0 src:#3
    G.d[0].w(ASL<W>(G.d[0].w(), 3));
    // 00d130: SUB.W dst:D0 src:#38
    G.d[0].w(SUB<W>(G.d[0].w(), 0x38));
    // 00d134: NEG.W dst:D0
    G.d[0].w(NEG<W>(G.d[0].w()));
    // 00d136: CMP.W dst:D0 src:(A6.L)+30
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x30));
    // 00d13a: Bcc cond:CC src:(d140)
    if (G.sr.check_condition(Condition::CC)) { goto Ld140; }
    // 00d13c: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, UCC(0));

  Ld140:;
    // 00d140: MOVE.W dst:D1 src:(A6.L)+30
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x30)));
    // 00d144: CMP.W dst:D1 src:#10
    CMP<W>(G.d[1].w(), 0x10);
    // 00d148: Bcc cond:NE src:(d0d0)
    if (G.sr.check_condition(Condition::NE)) { goto Ld0d0; }
    // 00d14c: MOVE.W dst:D0 src:#8010
    G.d[0].w(0x8010);
    // 00d150: MOVE.W dst:D3 src:#780
    G.d[3].w(0x780);
    // 00d154: MOVE.W dst:D4 src:#fd00
    G.d[4].w(UCC(0xfd00));
    // 00d158: Bcc cond:True src:(6bd0)
    F6bd0();
    goto end;

  Ld15c:;
    // 00d15c: MOVE.W dst:D2 src:(A6.L)+26
    G.d[2].w(G.io->w(G.a[6] + 0x26));
    // 00d160: ANDI.W dst:D2 src:#f
    G.d[2].w(AND<W>(G.d[2].w(), 15));
    // 00d164: ADDQ.W dst:D2 src:#1
    G.d[2].w(ADD<W>(G.d[2].w(), 1));
    // 00d166: MOVE.L dst:D1 src:(A6.L)+14
    G.d[1].l(G.io->l(G.a[6] + 0x14));
    // 00d16a: AND.W dst:D1 src:#ff80
    G.d[1].w(AND<W>(G.d[1].w(), 0xff80));
    // 00d16e: ADD.W dst:D1 src:D2
    G.d[1].w(ADD<W>(G.d[1].w(), G.d[2].w()));
    // 00d170: MOVEQ.L dst:D0 src:#22
    G.d[0].l(UCC(0x22));
    // 00d172: JSR src:(6600)
    F6600();
    // 00d178: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00d17c: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00d180: TST.W src:D0
    TST<W>(G.d[0].w());
    // 00d182: Bcc cond:EQ src:(736a)
    if (G.sr.check_condition(Condition::EQ)) {
      F736a();
      goto end;
    }
    // 00d186: BSET.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 4));
    // 00d18c: MOVE.W dst:(A6.L)+48 src:#1
    G.io->w(G.a[6] + 0x48, UCC(1));
    // 00d192: BSR src:(736a)
    F736a();
    // 00d196: Bcc cond:True src:(d0d2)
    goto Ld0d2;

  Ld19a:;
    // 00d19a: BSR src:(736a)
    F736a();
    // 00d19e: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00d1a2: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00d1a6: TST.W src:D0
    TST<W>(G.d[0].w());
    // 00d1a8: Bcc cond:EQ src:(d0d0)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld0d0; }
    // 00d1ac: BTST.B dst:(A6.L)+1 src:#4
    BTST<B>(G.io->b(G.a[6] + 1), 4);
    // 00d1b2: Bcc cond:NE src:(d0d2)
    if (G.sr.check_condition(Condition::NE)) { goto Ld0d2; }
    // 00d1b6: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 00d1ba: Bcc cond:True src:(d0d2)
    goto Ld0d2;

  end:
    _log_ret(__func__);
  }

  void Fd1c4()
  {
    _log_call(__func__);

    // 00d1c4: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 00d1c8: CLR.W dst:(A6.L)+3c
    G.io->w(G.a[6] + 0x3c, UCC(0));
    // 00d1cc: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd1ce()
  {
    _log_call(__func__);

    // 00d1ce: CMPI.W dst:(ff0098) src:#2c0
    CMP<W>(G.io->w(0xff0098), 0x2c0);
    // 00d1d6: Bcc cond:CS src:(d1f2)
    if (G.sr.check_condition(Condition::CS)) { goto Ld1f2; }
    // 00d1d8: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00d1dc: MOVE.W dst:D1 src:#2200
    G.d[1].w(0x2200);
    // 00d1e0: MOVE.W dst:D2 src:#3f
    G.d[2].w(0x3f);
    // 00d1e4: MOVE.W dst:D3 src:#1b
    G.d[3].w(UCC(0x1b));
    // 00d1e8: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 00d1ec: JMP src:(50a0)
    F50a0();
    goto end;

  Ld1f2:;
    // 00d1f2: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 00d1fa: Bcc cond:NE src:(d24a)
    if (G.sr.check_condition(Condition::NE)) { goto Ld24a; }
    // 00d1fc: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 00d200: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 00d204: ANDI.W dst:D0 src:#7f
    G.d[0].w(AND<W>(G.d[0].w(), 0x7f));
    // 00d208: MOVE.W dst:D2 src:#1
    G.d[2].w(1);
    // 00d20c: MOVE.W dst:D1 src:#20
    G.d[1].w(UCC(0x20));
    // 00d210: CMPI.W dst:D0 src:#40
    CMP<W>(G.d[0].w(), 0x40);
    // 00d214: Bcc cond:CS src:(d21e)
    if (G.sr.check_condition(Condition::CS)) { goto Ld21e; }
    // 00d216: MOVE.W dst:D2 src:#ffff
    G.d[2].w(0xffff);
    // 00d21a: MOVE.W dst:D1 src:#ffe0
    G.d[1].w(UCC(0xffe0));

  Ld21e:;
    // 00d21e: ADD.W dst:(VSCROLL_BG) src:D2
    G.io->w(VSCROLL_BG, ADD<W>(G.io->w(VSCROLL_BG), G.d[2].w()));
    // 00d224: MOVE.W dst:(ff0094) src:D1
    G.io->w(0xff0094, UCC(G.d[1].w()));
    // 00d22a: LSL.W dst:D1 src:#1
    G.d[1].w(LSL<W>(G.d[1].w(), 1));
    // 00d22c: MOVE.W dst:(ff0092) src:D1
    G.io->w(0xff0092, G.d[1].w());
    // 00d232: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00d238: ANDI.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00d23c: Bcc cond:NE src:(d24a)
    if (G.sr.check_condition(Condition::NE)) { goto Ld24a; }
    // 00d23e: ADD.W dst:(HSCROLL_BG) src:D2
    G.io->w(HSCROLL_BG, ADD<W>(G.io->w(HSCROLL_BG), G.d[2].w()));
    // 00d244: ADD.W dst:(ff0096) src:D2
    G.io->w(0xff0096, ADD<W>(G.io->w(0xff0096), G.d[2].w()));

  Ld24a:;
    // 00d24a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd324()
  {
    _log_call(__func__);

    // 00d324: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00d328: Bcc cond:NE src:(d3d0)
    if (G.sr.check_condition(Condition::NE)) { goto Ld3d0; }
    // 00d32c: BCLR.B dst:(A6.L)+1 src:#2
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 2));
    // 00d332: JSR src:(50e6)
    F50e6();
    // 00d338: MOVE.L dst:(ff0042) src:#0
    G.io->l(0xff0042, 0);
    // 00d342: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, UCC(G.a[6]));
    // 00d348: BSET.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BSET<B>(G.io->b(0xff0075), 5));
    // 00d350: LEA.L dst:A0 src:(f4d0)
    G.a[0] = 0xf4d0;
    // 00d356: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00d35c: Bcc cond:EQ src:(d374)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld374; }
    // 00d35e: LEA.L dst:A0 src:(f4dc)
    G.a[0] = 0xf4dc;
    // 00d364: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00d36c: Bcc cond:NE src:(d374)
    if (G.sr.check_condition(Condition::NE)) { goto Ld374; }
    // 00d36e: LEA.L dst:A0 src:(f4e8)
    G.a[0] = 0xf4e8;

  Ld374:;
    // 00d374: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00d37a: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00d37c: MOVE.W dst:(A6.L)+3e src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3e, G.io->w(G.a[0] + G.d[0].w()));
    // 00d382: MOVE.W dst:(A6.L)+a src:#200
    G.io->w(G.a[6] + 10, 0x200);
    // 00d388: MOVE.W dst:(A6.L)+3c src:#12e4
    G.io->w(G.a[6] + 0x3c, 0x12e4);
    // 00d38e: MOVEQ.L dst:D4 src:#c
    G.d[4].l(12);
    // 00d390: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00d392: MOVE.L dst:D7 src:#1000
    G.d[7].l(UCC(0x1000));

  Ld398:;
    // 00d398: MOVE.L dst:D1 src:#30000000
    G.d[1].l(0x30000000);
    // 00d39e: ADD.L dst:D1 src:D7
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[7].l()));
    // 00d3a0: JSR src:(6600)
    F6600();
    // 00d3a6: ADD.L dst:D7 src:#1000
    G.d[7].l(ADD<L>(G.d[7].l(), 0x1000));
    // 00d3ac: DBcc.W cond:False dst:D4 src:(d398)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Ld398; }
    // 00d3b0: MOVEQ.L dst:D4 src:#2
    G.d[4].l(UCC(2));
    // 00d3b2: LEA.L dst:A0 src:(f4c4)
    G.a[0] = 0xf4c4;
    // 00d3b8: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00d3ba: MOVE.L dst:D1 src:#10000000
    G.d[1].l(UCC(0x10000000));

  Ld3c0:;
    // 00d3c0: JSR src:(6600)
    F6600();
    // 00d3c6: ADDQ.W dst:D1 src:#1
    G.d[1].w(ADD<W>(G.d[1].w(), 1));
    // 00d3c8: DBcc.W cond:False dst:D4 src:(d3c0)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Ld3c0; }
    // 00d3cc: Bcc cond:True src:(d3dc)
    goto Ld3dc;

  Ld3d0:;
    // 00d3d0: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00d3d6: MOVE.L dst:(A6.L)+16 src:(A5.L)+14
    G.io->l(G.a[6] + 0x16, UCC(G.io->l(G.a[5] + 0x14)));

  Ld3dc:;
    // 00d3dc: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 00d3e0: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, 0);
    // 00d3e4: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 00d3e8: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 00d3ec: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00d3f0: MULU.W dst:D0 src:#18
    G.d[0].l(MULU(G.d[0].w(), 0x18));
    // 00d3f4: LEA.L dst:A0 src:(f354)
    G.a[0] = 0xf354;
    // 00d3fa: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00d3fc: LSR.W dst:D0 src:#3
    G.d[0].w(LSR<W>(G.d[0].w(), 3));
    // 00d3fe: ADD.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(SOME_STATE_COUNTER)));
    // 00d404: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00d40a: ANDI.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00d40e: MOVE.W dst:(A6.L)+3a src:D0
    G.io->w(G.a[6] + 0x3a, G.d[0].w());
    // 00d412: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00d418: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00d41a: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00d41e: MOVE.W dst:(A6.L)+12 src:(A0)+
    G.io->w(G.a[6] + 0x12, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00d422: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00d426: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00d42a: MOVE.L dst:(A6.L)+20 src:(A0)+
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00d42e: MOVE.L dst:(A6.L)+30 src:(A0)+
    G.io->l(G.a[6] + 0x30, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00d432: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00d434: JMP src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd438()
  {
    _log_call(__func__);

    // 00d438: ADDQ.L dst:(A2)+ src:#5
    G.io->l(G.a[2], ADD<L>(G.io->l(G.a[2]), 5));
    G.a[2] += 4;

  Ld43a:;
    // 00d43a: JMP src:(d43a)
    Fd43a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd43a()
  {
    _log_call(__func__);

    // 00d43a: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00d43e: Bcc cond:NE src:(d550)
    if (G.sr.check_condition(Condition::NE)) { goto Ld550; }
    // 00d442: JSR src:(5114)
    F5114();
    // 00d448: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00d44c: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00d450: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00d454: Bcc cond:MI src:(d46a)
    if (G.sr.check_condition(Condition::MI)) { goto Ld46a; }
    // 00d458: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00d45c: Bcc cond:EQ src:(d47e)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld47e; }
    // 00d45e: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00d462: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 00d466: Bcc cond:CS src:(d47e)
    if (G.sr.check_condition(Condition::CS)) { goto Ld47e; }

  Ld46a:;
    // 00d46a: BCLR.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 5));
    // 00d472: BSET.B dst:(ff0043) src:#6
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 6));
    // 00d47a: Bcc cond:True src:(736a)
    F736a();
    goto end;

  Ld47e:;
    // 00d47e: LEA.L dst:A0 src:(f2f4)
    G.a[0] = 0xf2f4;
    // 00d484: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00d48a: ANDI.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 00d48e: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00d490: MOVE.W dst:D2 src:#72
    G.d[2].w(0x72);
    // 00d494: MOVE.W dst:D0 src:#6
    G.d[0].w(6);
    // 00d498: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00d49a: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 00d4a0: JSR src:(3eb2)
    F3eb2();
    // 00d4a6: CMPI.W dst:(A6.L)+3c src:#ffff
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xffff);
    // 00d4ac: Bcc cond:EQ src:(d500)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld500; }
    // 00d4b0: SUBQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, SUB<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 00d4b4: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00d4ba: BTST.B dst:(ff0043) src:#1
    BTST<B>(G.io->b(0xff0043), 1);
    // 00d4c2: Bcc cond:EQ src:(d4fe)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld4fe; }
    // 00d4c4: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00d4ca: AND.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00d4ce: Bcc cond:EQ src:(d4d2)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld4d2; }
    // 00d4d0: RTS
    goto end;

  Ld4d2:;
    // 00d4d2: BSR src:(6658)
    F6658();
    // 00d4d6: BTST.B dst:(ff0077) src:#4
    BTST<B>(G.io->b(0xff0077), 4);
    // 00d4de: Bcc cond:EQ src:(d4f2)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld4f2; }
    // 00d4e0: ADDQ.W dst:D1 src:#3
    G.d[1].w(ADD<W>(G.d[1].w(), 3));
    // 00d4e2: BTST.B dst:(ff0077) src:#5
    BTST<B>(G.io->b(0xff0077), 5);
    // 00d4ea: Bcc cond:EQ src:(d4ee)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld4ee; }
    // 00d4ec: SUBQ.W dst:D1 src:#6
    G.d[1].w(SUB<W>(G.d[1].w(), 6));

  Ld4ee:;
    // 00d4ee: AND.W dst:D1 src:#3f
    G.d[1].w(AND<W>(G.d[1].w(), 0x3f));

  Ld4f2:;
    // 00d4f2: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00d4f4: ADD.W dst:D0 src:#c000
    G.d[0].w(ADD<W>(G.d[0].w(), 0xc000));
    // 00d4f8: JMP src:(6b1c)
    F6b1c();
    goto end;

  Ld4fe:;
    // 00d4fe: RTS
    goto end;

  Ld500:;
    // 00d500: CMPI.W dst:(A6.L)+24 src:#ffff
    CMP<W>(G.io->w(G.a[6] + 0x24), 0xffff);
    // 00d506: Bcc cond:EQ src:(d51c)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld51c; }
    // 00d508: MOVE.W dst:(A6.L)+24 src:#ffff
    G.io->w(G.a[6] + 0x24, 0xffff);
    // 00d50e: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, UCC(0x30));
    // 00d514: BCLR.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 5));

  Ld51c:;
    // 00d51c: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00d520: ADDI.W dst:D0 src:#1800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1800));
    // 00d524: CMPI.W dst:D0 src:#c000
    CMP<W>(G.d[0].w(), 0xc000);
    // 00d528: Bcc cond:CC src:(d542)
    if (G.sr.check_condition(Condition::CC)) { goto Ld542; }
    // 00d52a: MOVE.W dst:(A6.L)+6 src:#10
    G.io->w(G.a[6] + 6, 0x10);
    // 00d530: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, UCC(0x30));
    // 00d536: JSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 00d53c: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  Ld542:;
    // 00d542: BSET.B dst:(ff0043) src:#7
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 7));
    // 00d54a: JMP src:(50a0)
    F50a0();
    goto end;

  Ld550:;
    // 00d550: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00d554: Bcc cond:EQ src:(d566)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld566; }
    // 00d556: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00d55a: CMPI.W dst:D0 src:#d
    CMP<W>(G.d[0].w(), 13);
    // 00d55e: Bcc cond:EQ src:(736a)
    if (G.sr.check_condition(Condition::EQ)) {
      F736a();
      goto end;
    }
    // 00d562: Bcc cond:True src:(d622)
    goto Ld622;

  Ld566:;
    // 00d566: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 00d56e: Bcc cond:EQ src:(d588)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld588; }
    // 00d570: TST.W src:(A6.L)+3a
    TST<W>(G.io->w(G.a[6] + 0x3a));
    // 00d574: Bcc cond:EQ src:(d622)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld622; }
    // 00d578: SUBQ.W dst:(A6.L)+3a src:#1
    G.io->w(G.a[6] + 0x3a, SUB<W>(G.io->w(G.a[6] + 0x3a), 1));
    // 00d57c: ANDI.W dst:(A6.L)+10 src:#1fff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x1fff));
    // 00d582: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  Ld588:;
    // 00d588: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 00d590: Bcc cond:EQ src:(d598)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld598; }
    // 00d592: JMP src:(50a0)
    F50a0();
    goto end;

  Ld598:;
    // 00d598: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 00d59e: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00d5a2: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 00d5a8: MOVEM.W src:(A6.L)+30 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x30));
    G.d[1].l(G.io->w(G.a[6] + 0x32));
    // 00d5ae: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00d5b2: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00d5b6: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00d5ba: CMPI.W dst:D0 src:#3
    CMP<W>(G.d[0].w(), 3);
    // 00d5be: Bcc cond:EQ src:(d5dc)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld5dc; }
    // 00d5c2: CMPI.W dst:D0 src:#4
    CMP<W>(G.d[0].w(), 4);
    // 00d5c6: Bcc cond:EQ src:(d5dc)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld5dc; }
    // 00d5ca: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00d5d0: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00d5d4: CMPI.W dst:D0 src:#d
    CMP<W>(G.d[0].w(), 13);
    // 00d5d8: Bcc cond:EQ src:(d604)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld604; }
    // 00d5da: RTS
    goto end;

  Ld5dc:;
    // 00d5dc: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00d5e2: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00d5e4: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 00d5e8: Bcc cond:EQ src:(d5f0)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld5f0; }
    // 00d5ea: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  Ld5f0:;
    // 00d5f0: LEA.L dst:A0 src:(f4a4)
    G.a[0] = 0xf4a4;
    // 00d5f6: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00d5fa: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00d5fc: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00d5fe: JMP src:(5a9a)
    F5a9a();
    goto end;

  Ld604:;
    // 00d604: CMPI.W dst:(ff0044) src:#3
    CMP<W>(G.io->w(0xff0044), 3);
    // 00d60c: Bcc cond:CC src:(d616)
    if (G.sr.check_condition(Condition::CC)) { goto Ld616; }
    // 00d610: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00d614: RTS
    goto end;

  Ld616:;
    // 00d616: BSET.B dst:(ff0043) src:#1
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 1));
    // 00d61e: Bcc cond:True src:(736a)
    F736a();
    goto end;

  Ld622:;
    // 00d622: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 00d626: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 00d62a: LEA.L dst:A5 src:(A6.L)+34
    G.a[5] = G.a[6] + 0x34;
    // 00d62e: CMPI.W dst:(A6.L)+38 src:#44
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x44);
    // 00d634: Bcc cond:CC src:(d65e)
    if (G.sr.check_condition(Condition::CC)) { goto Ld65e; }
    // 00d636: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00d63a: Bcc cond:NE src:(d65a)
    if (G.sr.check_condition(Condition::NE)) { goto Ld65a; }
    // 00d63c: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00d63e: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00d644: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00d64a: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00d64e: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 00d654: MOVE.L dst:(A6.L)+64 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x64, UCC(G.io->l(G.a[0] + G.d[0].w())));

  Ld65a:;
    // 00d65a: BSR src:(75ca)
    F75ca();

  Ld65e:;
    // 00d65e: CMPI.W dst:(A6.L)+38 src:#4a
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x4a);
    // 00d664: Bcc cond:CC src:(d6a4)
    if (G.sr.check_condition(Condition::CC)) { goto Ld6a4; }
    // 00d666: CMPI.W dst:(A6.L)+38 src:#8
    CMP<W>(G.io->w(G.a[6] + 0x38), 8);
    // 00d66c: Bcc cond:CS src:(d69e)
    if (G.sr.check_condition(Condition::CS)) { goto Ld69e; }
    // 00d66e: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 00d672: LEA.L dst:A5 src:(A6.L)+36
    G.a[5] = G.a[6] + 0x36;
    // 00d676: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00d67a: Bcc cond:NE src:(d69a)
    if (G.sr.check_condition(Condition::NE)) { goto Ld69a; }
    // 00d67c: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00d67e: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00d684: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00d68a: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00d68e: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 00d694: MOVE.L dst:(A6.L)+56 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x56, UCC(G.io->l(G.a[0] + G.d[0].w())));

  Ld69a:;
    // 00d69a: BSR src:(75ca)
    F75ca();

  Ld69e:;
    // 00d69e: ADDQ.W dst:(A6.L)+38 src:#1
    G.io->w(G.a[6] + 0x38, ADD<W>(G.io->w(G.a[6] + 0x38), 1));
    // 00d6a2: RTS
    goto end;

  Ld6a4:;
    // 00d6a4: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd6aa()
  {
    _log_call(__func__);

    // 00d6aa: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00d6ae: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00d6b2: Bcc cond:NE src:(d7e2)
    if (G.sr.check_condition(Condition::NE)) { goto Ld7e2; }
    // 00d6b6: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00d6ba: Bcc cond:EQ src:(d76e)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld76e; }
    // 00d6be: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, UCC(G.a[6]));
    // 00d6c4: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 00d6c8: CLR.W dst:(A6.L)+a
    G.io->w(G.a[6] + 10, UCC(0));
    // 00d6cc: JSR src:(50e6)
    F50e6();
    // 00d6d2: JSR src:(6820)
    F6820();
    // 00d6d8: ADDI.W dst:(A6.L)+14 src:#200
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x200));
    // 00d6de: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00d6e0: LEA.L dst:A0 src:(db30)
    G.a[0] = 0xdb30;
    // 00d6e6: JSR src:(5abc)
    F5abc();
    // 00d6ec: MOVE.L dst:(ff0042) src:#0
    G.io->l(0xff0042, 0);
    // 00d6f6: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 00d6fa: MOVE.W dst:D0 src:#34
    G.d[0].w(0x34);
    // 00d6fe: MOVE.L dst:D1 src:#3c800
    G.d[1].l(0x3c800);
    // 00d704: MOVE.W dst:D2 src:#1b8
    G.d[2].w(UCC(0x1b8));
    // 00d708: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 00d70e: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00d710: MOVEQ.L dst:D4 src:#6
    G.d[4].l(6);
    // 00d712: MOVE.L dst:D7 src:#1000
    G.d[7].l(UCC(0x1000));

  Ld718:;
    // 00d718: MOVE.L dst:D1 src:#32000000
    G.d[1].l(0x32000000);
    // 00d71e: ADD.L dst:D1 src:D7
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[7].l()));
    // 00d720: JSR src:(6600)
    F6600();
    // 00d726: ADD.L dst:D7 src:#1000
    G.d[7].l(ADD<L>(G.d[7].l(), 0x1000));
    // 00d72c: DBcc.W cond:False dst:D4 src:(d718)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Ld718; }
    // 00d730: MOVE.L dst:D1 src:#32000000
    G.d[1].l(UCC(0x32000000));
    // 00d736: JSR src:(6600)
    F6600();
    // 00d73c: MOVEQ.L dst:D4 src:#2
    G.d[4].l(UCC(2));
    // 00d73e: LEA.L dst:A0 src:(dc38)
    G.a[0] = 0xdc38;
    // 00d744: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Ld746:;
    // 00d746: MOVE.L dst:D1 src:#15000000
    G.d[1].l(0x15000000);
    // 00d74c: MOVE.L dst:D2 src:(A6.L)+14
    G.d[2].l(G.io->l(G.a[6] + 0x14));
    // 00d750: ADD.L dst:D2 src:(A0)+
    G.d[2].l(ADD<L>(G.d[2].l(), G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00d752: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 00d754: OR.W dst:D1 src:D2
    G.d[1].w(OR<W>(G.d[1].w(), G.d[2].w()));
    // 00d756: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 00d75a: ROR.L dst:D2 src:#4
    G.d[2].l(ROR<L>(G.d[2].l(), 4));
    // 00d75c: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 00d75e: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00d760: JSR src:(6600)
    F6600();
    // 00d766: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00d768: DBcc.W cond:False dst:D4 src:(d746)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Ld746; }
    // 00d76c: RTS
    goto end;

  Ld76e:;
    // 00d76e: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00d774: MOVE.W dst:(A6.L)+4c src:(A6.L)+48
    G.io->w(G.a[6] + 0x4c, UCC(G.io->w(G.a[6] + 0x48)));
    // 00d77a: BCLR.B dst:(A6.L)+1 src:#0
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 0));
    // 00d780: BCLR.B dst:(A6.L)+1 src:#2
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 2));
    // 00d786: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[5] + 0x14));
    // 00d78c: ADDI.L dst:(A6.L)+14 src:#ebfff000
    G.io->l(G.a[6] + 0x14, ADD<L>(G.io->l(G.a[6] + 0x14), 0xebfff000));
    // 00d794: MOVE.W dst:(A6.L)+8 src:#ffc0
    G.io->w(G.a[6] + 8, UCC(0xffc0));
    // 00d79a: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00d7a0: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00d7a6: Bcc cond:EQ src:(d7be)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld7be; }
    // 00d7a8: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 00d7ae: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00d7b6: Bcc cond:NE src:(d7be)
    if (G.sr.check_condition(Condition::NE)) { goto Ld7be; }
    // 00d7b8: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  Ld7be:;
    // 00d7be: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00d7c4: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00d7c6: MOVE.W dst:(A6.L)+3c src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3c, G.io->w(G.a[0] + G.d[0].w()));
    // 00d7cc: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, 0);
    // 00d7d0: CLR.W dst:(A6.L)+3e
    G.io->w(G.a[6] + 0x3e, 0);
    // 00d7d4: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 00d7d6: LEA.L dst:A0 src:(db78)
    G.a[0] = 0xdb78;
    // 00d7dc: JMP src:(5abc)
    F5abc();
    goto end;

  Ld7e2:;
    // 00d7e2: CMPI.W dst:(A6.L)+26 src:#7
    CMP<W>(G.io->w(G.a[6] + 0x26), 7);
    // 00d7e8: Bcc cond:EQ src:(d856)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld856; }
    // 00d7ea: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00d7f0: MOVE.L dst:(A6.L)+16 src:(A5.L)+14
    G.io->l(G.a[6] + 0x16, G.io->l(G.a[5] + 0x14));
    // 00d7f6: CLR.L dst:(A6.L)+a
    G.io->l(G.a[6] + 10, 0);
    // 00d7fa: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, 0);
    // 00d7fe: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 00d802: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 00d806: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00d80a: SUBQ.W dst:D0 src:#1
    G.d[0].w(SUB<W>(G.d[0].w(), 1));
    // 00d80c: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00d810: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 00d812: MULU.W dst:D0 src:#c
    G.d[0].l(MULU(G.d[0].w(), 12));
    // 00d816: LEA.L dst:A0 src:(dbcc)
    G.a[0] = 0xdbcc;
    // 00d81c: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00d81e: LSR.W dst:D0 src:#3
    G.d[0].w(LSR<W>(G.d[0].w(), 3));
    // 00d820: ADD.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(SOME_STATE_COUNTER)));
    // 00d826: ANDI.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00d82a: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 00d82c: ANDI.W dst:D2 src:#3
    G.d[2].w(AND<W>(G.d[2].w(), 3));
    // 00d830: ADD.W dst:D0 src:D2
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[2].w()));
    // 00d832: MOVE.W dst:(A6.L)+3a src:D0
    G.io->w(G.a[6] + 0x3a, G.d[0].w());
    // 00d836: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00d83a: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00d83e: MOVE.L dst:(A6.L)+30 src:(A0)+
    G.io->l(G.a[6] + 0x30, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00d842: LEA.L dst:A0 src:(db84)
    G.a[0] = 0xdb84;
    // 00d848: MULU.W dst:D1 src:#c
    G.d[1].l(MULU(G.d[1].w(), 12));
    // 00d84c: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 00d84e: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 00d850: JMP src:(5abc)
    F5abc();
    goto end;

  Ld856:;
    // 00d856: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00d85c: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 00d860: CLR.L dst:(A6.L)+38
    G.io->l(G.a[6] + 0x38, 0);
    // 00d864: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[5] + 0x14));
    // 00d86a: ADDI.L dst:(A6.L)+14 src:#ebfff000
    G.io->l(G.a[6] + 0x14, ADD<L>(G.io->l(G.a[6] + 0x14), 0xebfff000));
    // 00d872: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00d874: LEA.L dst:A0 src:(db60)
    G.a[0] = 0xdb60;
    // 00d87a: JMP src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fd880()
  {
    _log_call(__func__);

    // 00d880: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00d884: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00d888: Bcc cond:NE src:(da4c)
    if (G.sr.check_condition(Condition::NE)) { goto Lda4c; }
    // 00d88c: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00d890: Bcc cond:EQ src:(d992)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld992; }
    // 00d894: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 00d89c: Bcc cond:EQ src:(d8a2)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld8a2; }
    // 00d89e: Bcc cond:True src:(d938)
    goto Ld938;

  Ld8a2:;
    // 00d8a2: JSR src:(5114)
    F5114();
    // 00d8a8: BCLR.B dst:(A6) src:#0
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 0));
    // 00d8ac: Bcc cond:EQ src:(d8b8)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld8b8; }
    // 00d8ae: BSET.B dst:(ff0043) src:#3
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 3));
    // 00d8b6: Bcc cond:True src:(d8c0)
    goto Ld8c0;

  Ld8b8:;
    // 00d8b8: BCLR.B dst:(ff0043) src:#3
    G.io->b(0xff0043, BCLR<B>(G.io->b(0xff0043), 3));

  Ld8c0:;
    // 00d8c0: JSR src:(3eb2)
    F3eb2();
    // 00d8c6: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 00d8ce: Bcc cond:NE src:(d938)
    if (G.sr.check_condition(Condition::NE)) { goto Ld938; }
    // 00d8d0: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00d8d6: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00d8da: Bcc cond:NE src:(d8e2)
    if (G.sr.check_condition(Condition::NE)) { goto Ld8e2; }
    // 00d8dc: MOVE.W dst:(A6.L)+24 src:#10
    G.io->w(G.a[6] + 0x24, UCC(0x10));

  Ld8e2:;
    // 00d8e2: CMPI.W dst:(A6.L)+24 src:#6
    CMP<W>(G.io->w(G.a[6] + 0x24), 6);
    // 00d8e8: Bcc cond:NE src:(d90c)
    if (G.sr.check_condition(Condition::NE)) { goto Ld90c; }
    // 00d8ea: MOVE.W dst:D6 src:#34
    G.d[6].w(0x34);
    // 00d8ee: MOVEQ.L dst:D5 src:#4
    G.d[5].l(UCC(4));

  Ld8f0:;
    // 00d8f0: MOVE.W dst:D0 src:D6
    G.d[0].w(G.d[6].w());
    // 00d8f2: ADDI.W dst:D0 src:#8000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8000));
    // 00d8f6: MOVE.W dst:D3 src:#200
    G.d[3].w(0x200);
    // 00d8fa: MOVE.W dst:D4 src:#400
    G.d[4].w(UCC(0x400));
    // 00d8fe: BSR src:(6b12)
    F6b12();
    // 00d902: ADDQ.W dst:D6 src:#6
    G.d[6].w(ADD<W>(G.d[6].w(), 6));
    // 00d904: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00d908: DBcc.W cond:False dst:D5 src:(d8f0)
    G.d[5].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[5].w())) { goto Ld8f0; }

  Ld90c:;
    // 00d90c: LEA.L dst:A0 src:(db30)
    G.a[0] = 0xdb30;
    // 00d912: TST.W src:(A6.L)+24
    TST<W>(G.io->w(G.a[6] + 0x24));
    // 00d916: Bcc cond:EQ src:(d920)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld920; }
    // 00d918: SUBQ.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, SUB<W>(G.io->w(G.a[6] + 0x24), 1));
    // 00d91c: ADDA.W dst:A0 src:#18
    G.a[0] = ADD<L>(G.a[0], 0x18);

  Ld920:;
    // 00d920: MOVEQ.L dst:D7 src:#1
    G.d[7].l(1);
    // 00d922: MOVE.L dst:D0 src:(A6.L)+44
    G.d[0].l(G.io->l(G.a[6] + 0x44));
    // 00d926: CMP.L dst:D0 src:(A0.L)+8
    CMP<L>(G.d[0].l(), G.io->l(G.a[0] + 8));
    // 00d92a: Bcc cond:EQ src:(d932)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld932; }
    // 00d92c: JMP src:(5abc)
    F5abc();
    goto end;

  Ld932:;
    // 00d932: JMP src:(5ade)
    F5ade();
    goto end;

  Ld938:;
    // 00d938: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 00d940: Bcc cond:NE src:(d95c)
    if (G.sr.check_condition(Condition::NE)) { goto Ld95c; }
    // 00d942: BSET.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 4));
    // 00d948: BSR src:(736a)
    F736a();
    // 00d94c: BTST.B dst:(A6.L)+1 src:#4
    BTST<B>(G.io->b(G.a[6] + 1), 4);
    // 00d952: Bcc cond:NE src:(d990)
    if (G.sr.check_condition(Condition::NE)) { goto Ld990; }
    // 00d954: BSET.B dst:(ff0043) src:#7
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 7));

  Ld95c:;
    // 00d95c: CMPI.W dst:(ff0044) src:#7
    CMP<W>(G.io->w(0xff0044), 7);
    // 00d964: Bcc cond:CS src:(d990)
    if (G.sr.check_condition(Condition::CS)) { goto Ld990; }
    // 00d966: MOVE.W dst:D0 src:(ff0842)
    G.d[0].w(UCC(G.io->w(0xff0842)));
    // 00d96c: BTST.L dst:D0 src:#3
    BTST<L>(G.d[0].l(), 3);
    // 00d970: Bcc cond:NE src:(d98a)
    if (G.sr.check_condition(Condition::NE)) { goto Ld98a; }
    // 00d972: BTST.L dst:D0 src:#c
    BTST<L>(G.d[0].l(), 12);
    // 00d976: Bcc cond:NE src:(d98a)
    if (G.sr.check_condition(Condition::NE)) { goto Ld98a; }
    // 00d978: MOVE.W dst:D0 src:#0
    G.d[0].w(UCC(0));
    // 00d97c: JSR src:(663a)
    F663a();
    // 00d982: MOVE.W dst:(ff0882) src:#1
    G.io->w(0xff0882, UCC(1));

  Ld98a:;
    // 00d98a: JMP src:(50a0)
    F50a0();
    goto end;

  Ld990:;
    // 00d990: RTS
    goto end;

  Ld992:;
    // 00d992: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 00d998: BTST.B dst:(A6.L)+0 src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00d99e: Bcc cond:NE src:(da2a)
    if (G.sr.check_condition(Condition::NE)) { goto Lda2a; }
    // 00d9a2: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00d9a6: Bcc cond:MI src:(da2a)
    if (G.sr.check_condition(Condition::MI)) { goto Lda2a; }
    // 00d9aa: BSR src:(6858)
    F6858();
    // 00d9ae: BTST.B dst:(A6.L)+31 src:#3
    BTST<B>(G.io->b(G.a[6] + 0x31), 3);
    // 00d9b4: Bcc cond:NE src:(d9d6)
    if (G.sr.check_condition(Condition::NE)) { goto Ld9d6; }
    // 00d9b6: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 00d9ba: MOVE.W dst:(A6.L)+48 src:(A6.L)+4c
    G.io->w(G.a[6] + 0x48, UCC(G.io->w(G.a[6] + 0x4c)));
    // 00d9c0: CMPI.W dst:(A6.L)+14 src:#5800
    CMP<W>(G.io->w(G.a[6] + 0x14), 0x5800);
    // 00d9c6: Bcc cond:HI src:(d9d6)
    if (G.sr.check_condition(Condition::HI)) { goto Ld9d6; }
    // 00d9c8: BSET.B dst:(A6.L)+31 src:#3
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 3));
    // 00d9ce: BSET.B dst:(ff0001) src:#5
    G.io->b(0xff0001, BSET<B>(G.io->b(0xff0001), 5));

  Ld9d6:;
    // 00d9d6: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00d9da: Bcc cond:EQ src:(d9e8)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld9e8; }
    // 00d9dc: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00d9e0: CMP.W dst:D0 src:(A6.L)+3c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3c));
    // 00d9e4: Bcc cond:CC src:(da2a)
    if (G.sr.check_condition(Condition::CC)) { goto Lda2a; }

  Ld9e8:;
    // 00d9e8: LEA.L dst:A0 src:(f304)
    G.a[0] = 0xf304;
    // 00d9ee: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00d9f4: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00d9f8: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00d9fa: MOVE.W dst:D2 src:#50
    G.d[2].w(0x50);
    // 00d9fe: MOVE.W dst:D0 src:#7
    G.d[0].w(7);
    // 00da02: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00da04: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 00da0a: SUBQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, SUB<W>(G.io->w(G.a[6] + 0x3e), 1));
    // 00da0e: Bcc cond:CC src:(da1a)
    if (G.sr.check_condition(Condition::CC)) { goto Lda1a; }
    // 00da10: NEG.W dst:(A6.L)+8
    G.io->w(G.a[6] + 8, NEG<W>(G.io->w(G.a[6] + 8)));
    // 00da14: MOVE.W dst:(A6.L)+3e src:#50
    G.io->w(G.a[6] + 0x3e, UCC(0x50));

  Lda1a:;
    // 00da1a: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 00da1e: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00da22: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 00da24: JMP src:(5ade)
    F5ade();
    goto end;

  Lda2a:;
    // 00da2a: BSET.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 4));
    // 00da30: BSR src:(736a)
    F736a();
    // 00da34: BTST.B dst:(A6.L)+1 src:#4
    BTST<B>(G.io->b(G.a[6] + 1), 4);
    // 00da3a: Bcc cond:NE src:(d990)
    if (G.sr.check_condition(Condition::NE)) { goto Ld990; }
    // 00da3e: BSET.B dst:(ff0043) src:#6
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 6));
    // 00da46: JMP src:(50a0)
    F50a0();
    goto end;

  Lda4c:;
    // 00da4c: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00da50: Bcc cond:NE src:(daa2)
    if (G.sr.check_condition(Condition::NE)) { goto Ldaa2; }
    // 00da52: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 00da5a: Bcc cond:EQ src:(da68)
    if (G.sr.check_condition(Condition::EQ)) { goto Lda68; }
    // 00da5c: TST.W src:(A6.L)+3a
    TST<W>(G.io->w(G.a[6] + 0x3a));
    // 00da60: Bcc cond:EQ src:(daa2)
    if (G.sr.check_condition(Condition::EQ)) { goto Ldaa2; }
    // 00da62: SUBQ.W dst:(A6.L)+3a src:#1
    G.io->w(G.a[6] + 0x3a, SUB<W>(G.io->w(G.a[6] + 0x3a), 1));
    // 00da66: RTS
    goto end;

  Lda68:;
    // 00da68: CMPI.W dst:(A6.L)+26 src:#7
    CMP<W>(G.io->w(G.a[6] + 0x26), 7);
    // 00da6e: Bcc cond:EQ src:(da96)
    if (G.sr.check_condition(Condition::EQ)) { goto Lda96; }
    // 00da70: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 00da76: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00da7a: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 00da80: MOVEM.W src:(A6.L)+30 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x30));
    G.d[1].l(G.io->w(G.a[6] + 0x32));
    // 00da86: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00da8a: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00da8e: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 00da90: JMP src:(5ade)
    F5ade();
    goto end;

  Lda96:;
    // 00da96: BSR src:(6858)
    F6858();
    // 00da9a: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00da9c: JMP src:(5ade)
    F5ade();
    goto end;

  Ldaa2:;
    // 00daa2: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 00daa6: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 00daaa: LEA.L dst:A5 src:(A6.L)+34
    G.a[5] = G.a[6] + 0x34;
    // 00daae: CMPI.W dst:(A6.L)+38 src:#44
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x44);
    // 00dab4: Bcc cond:CC src:(dade)
    if (G.sr.check_condition(Condition::CC)) { goto Ldade; }
    // 00dab6: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00daba: Bcc cond:NE src:(dada)
    if (G.sr.check_condition(Condition::NE)) { goto Ldada; }
    // 00dabc: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00dabe: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00dac4: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00daca: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00dace: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 00dad4: MOVE.L dst:(A6.L)+64 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x64, UCC(G.io->l(G.a[0] + G.d[0].w())));

  Ldada:;
    // 00dada: BSR src:(75ca)
    F75ca();

  Ldade:;
    // 00dade: CMPI.W dst:(A6.L)+38 src:#4a
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x4a);
    // 00dae4: Bcc cond:CC src:(db24)
    if (G.sr.check_condition(Condition::CC)) { goto Ldb24; }
    // 00dae6: CMPI.W dst:(A6.L)+38 src:#8
    CMP<W>(G.io->w(G.a[6] + 0x38), 8);
    // 00daec: Bcc cond:CS src:(db1e)
    if (G.sr.check_condition(Condition::CS)) { goto Ldb1e; }
    // 00daee: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 00daf2: LEA.L dst:A5 src:(A6.L)+36
    G.a[5] = G.a[6] + 0x36;
    // 00daf6: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00dafa: Bcc cond:NE src:(db1a)
    if (G.sr.check_condition(Condition::NE)) { goto Ldb1a; }
    // 00dafc: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00dafe: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00db04: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00db0a: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00db0e: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 00db14: MOVE.L dst:(A6.L)+56 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x56, UCC(G.io->l(G.a[0] + G.d[0].w())));

  Ldb1a:;
    // 00db1a: BSR src:(75ca)
    F75ca();

  Ldb1e:;
    // 00db1e: ADDQ.W dst:(A6.L)+38 src:#1
    G.io->w(G.a[6] + 0x38, ADD<W>(G.io->w(G.a[6] + 0x38), 1));
    // 00db22: RTS
    goto end;

  Ldb24:;
    // 00db24: ADDQ.W dst:(ff0044) src:#1
    G.io->w(0xff0044, ADD<W>(G.io->w(0xff0044), 1));
    // 00db2a: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fdc44()
  {
    _log_call(__func__);

    // 00dc44: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00dc4a: MOVE.W dst:(A6.L)+8 src:#0
    G.io->w(G.a[6] + 8, UCC(0));
    // 00dc50: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 00dc56: LSL.L dst:D0 src:#7
    G.d[0].l(LSL<L>(G.d[0].l(), 7));
    // 00dc58: LSL.L dst:D1 src:#7
    G.d[1].l(LSL<L>(G.d[1].l(), 7));
    // 00dc5a: SUB.W dst:D0 src:(A5.L)+14
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(G.a[5] + 0x14)));
    // 00dc5e: SUB.W dst:D1 src:(A5.L)+16
    G.d[1].w(SUB<W>(G.d[1].w(), G.io->w(G.a[5] + 0x16)));
    // 00dc62: MOVEM.W dst:(A6.L)+34 regs:D0,D1
    G.io->w(G.a[6] + 0x34, G.d[0].w());
    G.io->w(G.a[6] + 0x36, G.d[1].w());
    // 00dc68: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[5] + 0x14));
    // 00dc6e: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00dc72: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00dc76: MOVE.L dst:(A6.L)+30 src:#0
    G.io->l(G.a[6] + 0x30, 0);
    // 00dc7e: MOVE.L dst:(A6.L)+38 src:#40
    G.io->l(G.a[6] + 0x38, UCC(0x40));
    // 00dc86: BCLR.B dst:(A6.L)+1 src:#7
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 7));
    // 00dc8c: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00dc92: ORI.W dst:(A6.L)+10 src:#6000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x6000));
    // 00dc98: MOVE.L dst:D1 src:#4e2
    G.d[1].l(UCC(0x4e2));
    // 00dc9e: JMP src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fdca4()
  {
    _log_call(__func__);

    // 00dca4: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00dcaa: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 00dcb0: MOVEM.W src:(A6.L)+34 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x34));
    G.d[1].l(G.io->w(G.a[6] + 0x36));
    // 00dcb6: ADD.W dst:D1 src:(A6.L)+38
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(G.a[6] + 0x38)));
    // 00dcba: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00dcbe: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00dcc2: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00dcc6: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 00dcce: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00dcd2: TST.W src:(A6.L)+30
    TST<W>(G.io->w(G.a[6] + 0x30));
    // 00dcd6: Bcc cond:NE src:(dd30)
    if (G.sr.check_condition(Condition::NE)) { goto Ldd30; }
    // 00dcd8: BTST.B dst:(ff0043) src:#3
    BTST<B>(G.io->b(0xff0043), 3);
    // 00dce0: Bcc cond:EQ src:(dcf4)
    if (G.sr.check_condition(Condition::EQ)) { goto Ldcf4; }
    // 00dce2: BCHG.B dst:(A6.L)+33 src:#7
    G.io->b(G.a[6] + 0x33, BCHG<B>(G.io->b(G.a[6] + 0x33), 7));
    // 00dce8: NEG.W dst:(A6.L)+3a
    G.io->w(G.a[6] + 0x3a, NEG<W>(G.io->w(G.a[6] + 0x3a)));
    // 00dcec: MOVE.W dst:(A6.L)+30 src:#10
    G.io->w(G.a[6] + 0x30, UCC(0x10));
    // 00dcf2: Bcc cond:True src:(dd30)
    goto Ldd30;

  Ldcf4:;
    // 00dcf4: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00dcfa: BTST.B dst:(A6.L)+33 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x33), 7);
    // 00dd00: Bcc cond:EQ src:(dd1e)
    if (G.sr.check_condition(Condition::EQ)) { goto Ldd1e; }
    // 00dd02: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 00dd08: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00dd0c: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 00dd0e: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));
    // 00dd10: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 00dd12: ADD.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(SOME_STATE_COUNTER)));
    // 00dd18: ANDI.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00dd1c: Bcc cond:EQ src:(dd20)
    if (G.sr.check_condition(Condition::EQ)) { goto Ldd20; }

  Ldd1e:;
    // 00dd1e: RTS
    goto end;

  Ldd20:;
    // 00dd20: MOVE.W dst:D0 src:#8020
    G.d[0].w(0x8020);
    // 00dd24: MOVE.W dst:D3 src:#0
    G.d[3].w(0);
    // 00dd28: MOVE.W dst:D4 src:#fe00
    G.d[4].w(UCC(0xfe00));
    // 00dd2c: Bcc cond:True src:(6b12)
    F6b12();
    goto end;

  Ldd30:;
    // 00dd30: MOVE.W dst:D0 src:(A6.L)+3a
    G.d[0].w(G.io->w(G.a[6] + 0x3a));
    // 00dd34: ADD.W dst:(A6.L)+38 src:D0
    G.io->w(G.a[6] + 0x38, ADD<W>(G.io->w(G.a[6] + 0x38), G.d[0].w()));
    // 00dd38: SUBQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, SUB<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00dd3c: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fdd42()
  {
    _log_call(__func__);

    // 00dd42: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00dd46: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00dd4a: Bcc cond:NE src:(dd92)
    if (G.sr.check_condition(Condition::NE)) { goto Ldd92; }
    // 00dd4c: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 00dd50: JSR src:(50e6)
    F50e6();
    // 00dd56: JSR src:(6820)
    F6820();
    // 00dd5c: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, G.a[6]);
    // 00dd62: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00dd66: MOVE.W dst:D1 src:#200
    G.d[1].w(0x200);
    // 00dd6a: MOVE.W dst:D2 src:#3f
    G.d[2].w(0x3f);
    // 00dd6e: MOVE.W dst:D3 src:#1b
    G.d[3].w(UCC(0x1b));
    // 00dd72: BSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 00dd76: MOVE.W dst:(ff0042) src:#0
    G.io->w(0xff0042, UCC(0));
    // 00dd7e: ORI.W dst:(ff0074) src:#21
    G.io->w(0xff0074, OR<W>(G.io->w(0xff0074), 0x21));
    // 00dd86: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 00dd8a: CLR.W dst:(HSCROLL_FG)
    G.io->w(HSCROLL_FG, UCC(0));
    // 00dd90: RTS
    goto end;

  Ldd92:;
    // 00dd92: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 00dd98: LEA.L dst:A0 src:(f68c)
    G.a[0] = 0xf68c;
    // 00dd9e: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00dda4: Bcc cond:EQ src:(ddbc)
    if (G.sr.check_condition(Condition::EQ)) { goto Lddbc; }
    // 00dda6: LEA.L dst:A0 src:(f6a4)
    G.a[0] = 0xf6a4;
    // 00ddac: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00ddb4: Bcc cond:NE src:(ddbc)
    if (G.sr.check_condition(Condition::NE)) { goto Lddbc; }
    // 00ddb6: LEA.L dst:A0 src:(f6bc)
    G.a[0] = 0xf6bc;

  Lddbc:;
    // 00ddbc: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00ddc2: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));
    // 00ddc4: MOVE.L dst:(A6.L)+3c src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x3c, G.io->l(G.a[0] + G.d[0].w()));
    // 00ddca: MOVE.W dst:(A6.L)+24 src:#0
    G.io->w(G.a[6] + 0x24, 0);
    // 00ddd0: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 00ddd4: ANDI.W dst:(A6.L)+52 src:#7ff
    G.io->w(G.a[6] + 0x52, AND<W>(G.io->w(G.a[6] + 0x52), 0x7ff));
    // 00ddda: ORI.W dst:(A6.L)+52 src:#6000
    G.io->w(G.a[6] + 0x52, OR<W>(G.io->w(G.a[6] + 0x52), 0x6000));
    // 00dde0: MOVE.W dst:(A6.L)+54 src:#a09
    G.io->w(G.a[6] + 0x54, 0xa09);
    // 00dde6: MOVE.L dst:(A6.L)+18 src:#6000600
    G.io->l(G.a[6] + 0x18, 0x6000600);
    // 00ddee: MOVE.L dst:(A6.L)+1c src:#6000600
    G.io->l(G.a[6] + 0x1c, UCC(0x6000600));
    // 00ddf6: LEA.L dst:A0 src:(f4f4)
    G.a[0] = 0xf4f4;
    // 00ddfc: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00ddfe: ADD.W dst:(A6.L)+8 src:D0
    G.io->w(G.a[6] + 8, ADD<W>(G.io->w(G.a[6] + 8), G.d[0].w()));
    // 00de02: ANDI.W dst:(A6.L)+8 src:#3f
    G.io->w(G.a[6] + 8, AND<W>(G.io->w(G.a[6] + 8), 0x3f));
    // 00de08: MOVE.L dst:(A6.L)+14 src:(A0)+
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00de0c: MOVEM.W src:(A5.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[5] + 0x14));
    G.d[1].l(G.io->w(G.a[5] + 0x16));
    // 00de12: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00de16: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00de1a: MOVE.W dst:(A6.L)+34 src:(A0)
    G.io->w(G.a[6] + 0x34, G.io->w(G.a[0]));
    // 00de1e: MOVE.L dst:(A6.L)+56 src:#fa000600
    G.io->l(G.a[6] + 0x56, 0xfa000600);
    // 00de26: MOVE.L dst:(A6.L)+5a src:#488a0
    G.io->l(G.a[6] + 0x5a, 0x488a0);
    // 00de2e: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 00de30: JMP src:(5ade)
    F5ade();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fde36()
  {
    _log_call(__func__);

    // 00de36: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00de3a: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00de3e: Bcc cond:NE src:(df6c)
    if (G.sr.check_condition(Condition::NE)) { goto Ldf6c; }
    // 00de42: TST.W src:(A6.L)+30
    TST<W>(G.io->w(G.a[6] + 0x30));
    // 00de46: Bcc cond:NE src:(defa)
    if (G.sr.check_condition(Condition::NE)) { goto Ldefa; }
    // 00de4a: BSET.B dst:(A6.L)+30 src:#0
    G.io->b(G.a[6] + 0x30, BSET<B>(G.io->b(G.a[6] + 0x30), 0));
    // 00de50: MOVE.W dst:D0 src:#a8
    G.d[0].w(0xa8);
    // 00de54: MOVE.L dst:D1 src:#30600
    G.d[1].l(0x30600);
    // 00de5a: MOVE.W dst:D2 src:#1b8
    G.d[2].w(UCC(0x1b8));
    // 00de5e: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 00de64: MOVE.W dst:D5 src:#550
    G.d[5].w(UCC(0x550));
    // 00de68: LEA.L dst:A0 src:(f574)
    G.a[0] = 0xf574;
    // 00de6e: MOVEQ.L dst:D6 src:#7
    G.d[6].l(7);
    // 00de70: MOVEQ.L dst:D7 src:#7
    G.d[7].l(7);
    // 00de72: MOVE.W dst:D3 src:#e0
    G.d[3].w(UCC(0xe0));
    // 00de76: BSR src:(bec8)
    Fbec8();
    // 00de7a: MOVE.W dst:D0 src:(VSCROLL_BG)
    G.d[0].w(G.io->w(VSCROLL_BG));
    // 00de80: MOVE.W dst:(A6.L)+4e src:D0
    G.io->w(G.a[6] + 0x4e, G.d[0].w());
    // 00de84: MOVEQ.L dst:D4 src:#7
    G.d[4].l(UCC(7));
    // 00de86: LEA.L dst:A0 src:(f614)
    G.a[0] = 0xf614;
    // 00de8c: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lde8e:;
    // 00de8e: MOVE.L dst:D1 src:#b000000
    G.d[1].l(0xb000000);
    // 00de94: MOVE.L dst:D2 src:(A6.L)+14
    G.d[2].l(G.io->l(G.a[6] + 0x14));
    // 00de98: ADD.L dst:D2 src:(A0)+
    G.d[2].l(ADD<L>(G.d[2].l(), G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00de9a: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 00de9c: OR.W dst:D1 src:D2
    G.d[1].w(OR<W>(G.d[1].w(), G.d[2].w()));
    // 00de9e: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 00dea2: ROR.L dst:D2 src:#4
    G.d[2].l(ROR<L>(G.d[2].l(), 4));
    // 00dea4: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 00dea6: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00dea8: JSR src:(6600)
    F6600();
    // 00deae: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00deb0: DBcc.W cond:False dst:D4 src:(de8e)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lde8e; }
    // 00deb4: MOVEQ.L dst:D4 src:#5
    G.d[4].l(UCC(5));
    // 00deb6: LEA.L dst:A0 src:(f634)
    G.a[0] = 0xf634;
    // 00debc: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Ldebe:;
    // 00debe: MOVE.L dst:D1 src:(A0)+
    G.d[1].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00dec0: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00dec2: JSR src:(6600)
    F6600();
    // 00dec8: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00deca: DBcc.W cond:False dst:D4 src:(debe)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Ldebe; }
    // 00dece: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00ded0: MOVE.L dst:D1 src:#c000000
    G.d[1].l(0xc000000);
    // 00ded6: MOVE.L dst:D2 src:(A6.L)+14
    G.d[2].l(UCC(G.io->l(G.a[6] + 0x14)));
    // 00deda: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 00dedc: OR.W dst:D1 src:D2
    G.d[1].w(OR<W>(G.d[1].w(), G.d[2].w()));
    // 00dede: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 00dee2: ROR.L dst:D2 src:#4
    G.d[2].l(ROR<L>(G.d[2].l(), 4));
    // 00dee4: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 00dee6: JSR src:(6600)
    F6600();
    // 00deec: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00deee: MOVE.L dst:D1 src:#31001000
    G.d[1].l(UCC(0x31001000));
    // 00def4: JMP src:(6600)
    F6600();
    goto end;

  Ldefa:;
    // 00defa: JSR src:(5114)
    F5114();
    // 00df00: BTST.B dst:(A6.L)+31 src:#6
    BTST<B>(G.io->b(G.a[6] + 0x31), 6);
    // 00df06: Bcc cond:EQ src:(df18)
    if (G.sr.check_condition(Condition::EQ)) { goto Ldf18; }
    // 00df08: BSR src:(e0f0)
    Fe0f0();
    // 00df0c: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 00df12: Bcc cond:NE src:(e148)
    if (G.sr.check_condition(Condition::NE)) { goto Le148; }
    // 00df16: RTS
    goto end;

  Ldf18:;
    // 00df18: LEA.L dst:A0 src:(f324)
    G.a[0] = 0xf324;
    // 00df1e: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00df24: ANDI.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 00df28: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00df2a: MOVE.W dst:D2 src:#3a
    G.d[2].w(0x3a);
    // 00df2e: MOVE.W dst:D0 src:#3
    G.d[0].w(3);
    // 00df32: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00df34: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 00df3a: JSR src:(3e2e)
    F3e2e();
    // 00df40: MOVE.W dst:D0 src:(VSCROLL_BG)
    G.d[0].w(G.io->w(VSCROLL_BG));
    // 00df46: SUB.W dst:D0 src:(A6.L)+4e
    G.d[0].w(SUB<W>(G.d[0].w(), G.io->w(G.a[6] + 0x4e)));
    // 00df4a: Bcc cond:EQ src:(df64)
    if (G.sr.check_condition(Condition::EQ)) { goto Ldf64; }
    // 00df4c: MOVE.W dst:(A6.L)+4e src:(VSCROLL_BG)
    G.io->w(G.a[6] + 0x4e, G.io->w(VSCROLL_BG));
    // 00df54: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00df56: ADD.W dst:(VSCROLL_FG) src:D0
    G.io->w(VSCROLL_FG, ADD<W>(G.io->w(VSCROLL_FG), G.d[0].w()));
    // 00df5c: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 00df5e: ADD.W dst:(ff008e) src:D0
    G.io->w(0xff008e, ADD<W>(G.io->w(0xff008e), G.d[0].w()));

  Ldf64:;
    // 00df64: BSR src:(6858)
    F6858();
    // 00df68: Bcc cond:True src:(6864)
    _m->inc_something(G.a[6]);
    goto end;

  Ldf6c:;
    // 00df6c: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 00df72: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00df76: Bcc cond:NE src:(e080)
    if (G.sr.check_condition(Condition::NE)) { goto Le080; }
    // 00df7a: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00df7e: Bcc cond:MI src:(e080)
    if (G.sr.check_condition(Condition::MI)) { goto Le080; }
    // 00df82: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00df86: Bcc cond:EQ src:(df9a)
    if (G.sr.check_condition(Condition::EQ)) { goto Ldf9a; }
    // 00df88: MOVE.W dst:(A6.L)+34 src:#0
    G.io->w(G.a[6] + 0x34, 0);
    // 00df8e: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00df92: CMP.W dst:D0 src:(A6.L)+3c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3c));
    // 00df96: Bcc cond:CC src:(e080)
    if (G.sr.check_condition(Condition::CC)) { goto Le080; }

  Ldf9a:;
    // 00df9a: LEA.L dst:A0 src:(f304)
    G.a[0] = 0xf304;
    // 00dfa0: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00dfa6: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00dfaa: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00dfac: MOVE.W dst:D2 src:#70
    G.d[2].w(0x70);
    // 00dfb0: MOVE.W dst:D0 src:#8
    G.d[0].w(8);
    // 00dfb4: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 00dfb6: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 00dfbc: BSR src:(6858)
    F6858();
    // 00dfc0: TST.W src:(A6.L)+34
    TST<W>(G.io->w(G.a[6] + 0x34));
    // 00dfc4: Bcc cond:NE src:(e076)
    if (G.sr.check_condition(Condition::NE)) { goto Le076; }
    // 00dfc8: SUBQ.W dst:(A6.L)+4a src:#1
    G.io->w(G.a[6] + 0x4a, SUB<W>(G.io->w(G.a[6] + 0x4a), 1));
    // 00dfcc: Bcc cond:CC src:(e070)
    if (G.sr.check_condition(Condition::CC)) { goto Le070; }
    // 00dfd0: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 00dfd4: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 00dfd6: LSR.W dst:D1 src:#2
    G.d[1].w(LSR<W>(G.d[1].w(), 2));
    // 00dfd8: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 00dfda: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00dfde: Bcc cond:CS src:(dffe)
    if (G.sr.check_condition(Condition::CS)) { goto Ldffe; }
    // 00dfe0: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 00dfe2: CMP.W dst:D0 src:(A6.L)+c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 12));
    // 00dfe6: Bcc cond:CS src:(dff0)
    if (G.sr.check_condition(Condition::CS)) { goto Ldff0; }
    // 00dfe8: MOVE.W dst:(A6.L)+4a src:#1a
    G.io->w(G.a[6] + 0x4a, UCC(0x1a));
    // 00dfee: Bcc cond:True src:(e00a)
    goto Le00a;

  Ldff0:;
    // 00dff0: MOVE.W dst:(A6.L)+4a src:#c
    G.io->w(G.a[6] + 0x4a, 12);
    // 00dff6: MOVE.W dst:(A6.L)+6 src:#4
    G.io->w(G.a[6] + 6, UCC(4));
    // 00dffc: Bcc cond:True src:(e00a)
    goto Le00a;

  Ldffe:;
    // 00dffe: MOVE.W dst:(A6.L)+4a src:#6
    G.io->w(G.a[6] + 0x4a, 6);
    // 00e004: MOVE.W dst:(A6.L)+6 src:#8
    G.io->w(G.a[6] + 6, UCC(8));

  Le00a:;
    // 00e00a: MOVE.W dst:D0 src:(A5.L)+3e
    G.d[0].w(UCC(G.io->w(G.a[5] + 0x3e)));
    // 00e00e: BTST.B dst:(A6.L)+d src:D0
    BTST<B>(G.io->b(G.a[6] + 13), G.d[0].b());
    // 00e012: Bcc cond:NE src:(e020)
    if (G.sr.check_condition(Condition::NE)) { goto Le020; }
    // 00e014: MOVE.W dst:D1 src:#1
    G.d[1].w(1);
    // 00e018: MOVE.W dst:(A6.L)+8 src:#0
    G.io->w(G.a[6] + 8, UCC(0));
    // 00e01e: Bcc cond:True src:(e02a)
    goto Le02a;

  Le020:;
    // 00e020: MOVE.W dst:(A6.L)+8 src:#1c
    G.io->w(G.a[6] + 8, 0x1c);
    // 00e026: MOVE.W dst:D1 src:#ffff
    G.d[1].w(UCC(0xffff));

  Le02a:;
    // 00e02a: CMP.W dst:D1 src:(A6.L)+3a
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x3a));
    // 00e02e: Bcc cond:EQ src:(e034)
    if (G.sr.check_condition(Condition::EQ)) { goto Le034; }
    // 00e030: MOVE.W dst:(A6.L)+3a src:D1
    G.io->w(G.a[6] + 0x3a, UCC(G.d[1].w()));

  Le034:;
    // 00e034: LEA.L dst:A0 src:(f4f4)
    G.a[0] = 0xf4f4;
    // 00e03a: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00e03e: LSL.W dst:D0 src:#3
    G.d[0].w(LSL<W>(G.d[0].w(), 3));
    // 00e040: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00e042: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00e044: ADD.W dst:(A6.L)+8 src:D0
    G.io->w(G.a[6] + 8, ADD<W>(G.io->w(G.a[6] + 8), G.d[0].w()));
    // 00e048: ANDI.W dst:(A6.L)+8 src:#3f
    G.io->w(G.a[6] + 8, AND<W>(G.io->w(G.a[6] + 8), 0x3f));
    // 00e04e: ADD.W dst:(A6.L)+24 src:D1
    G.io->w(G.a[6] + 0x24, ADD<W>(G.io->w(G.a[6] + 0x24), G.d[1].w()));
    // 00e052: ANDI.W dst:(A6.L)+24 src:#f
    G.io->w(G.a[6] + 0x24, AND<W>(G.io->w(G.a[6] + 0x24), 15));
    // 00e058: MOVE.L dst:(A6.L)+14 src:(A0)+
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00e05c: MOVEM.W src:(A5.L)+14 regs:D0,D1
    G.d[0].l(G.io->w(G.a[5] + 0x14));
    G.d[1].l(G.io->w(G.a[5] + 0x16));
    // 00e062: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00e066: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00e06a: MOVE.W dst:(A6.L)+34 src:(A0)
    G.io->w(G.a[6] + 0x34, UCC(G.io->w(G.a[0])));
    // 00e06e: Bcc cond:NE src:(e076)
    if (G.sr.check_condition(Condition::NE)) { goto Le076; }

  Le070:;
    // 00e070: JSR src:(677c)
    _m->F677c_manual(G.a[6]);

  Le076:;
    // 00e076: MOVEQ.L dst:D7 src:#0
    G.d[7].l(UCC(0));
    // 00e078: JMP src:(5ade)
    F5ade();
    goto end;

  Le07e:;
    // 00e07e: RTS
    goto end;

  Le080:;
    // 00e080: MOVE.W dst:(ff0042) src:#2
    G.io->w(0xff0042, UCC(2));
    // 00e088: BSET.B dst:(A6.L)+1 src:#4
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 4));
    // 00e08e: BSR src:(736a)
    F736a();
    // 00e092: BTST.B dst:(A6.L)+1 src:#4
    BTST<B>(G.io->b(G.a[6] + 1), 4);
    // 00e098: Bcc cond:NE src:(e07e)
    if (G.sr.check_condition(Condition::NE)) { goto Le07e; }
    // 00e09a: BSET.B dst:(A5.L)+31 src:#6
    G.io->b(G.a[5] + 0x31, BSET<B>(G.io->b(G.a[5] + 0x31), 6));
    // 00e0a0: MOVE.W dst:D0 src:(A5.L)+16
    G.d[0].w(UCC(G.io->w(G.a[5] + 0x16)));
    // 00e0a4: LSR.W dst:D0 src:#7
    G.d[0].w(LSR<W>(G.d[0].w(), 7));
    // 00e0a6: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00e0a8: ADDI.W dst:D0 src:#60
    G.d[0].w(ADD<W>(G.d[0].w(), 0x60));
    // 00e0ac: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 00e0b0: Bcc cond:CC src:(e0b4)
    if (G.sr.check_condition(Condition::CC)) { goto Le0b4; }
    // 00e0b2: MOVEQ.L dst:D1 src:#0
    G.d[1].l(UCC(0));

  Le0b4:;
    // 00e0b4: MOVEM.W dst:(A5.L)+34 regs:D0,D1
    G.io->w(G.a[5] + 0x34, G.d[0].w());
    G.io->w(G.a[5] + 0x36, G.d[1].w());
    // 00e0ba: CLR.W dst:(A5.L)+32
    G.io->w(G.a[5] + 0x32, 0);
    // 00e0be: MOVEQ.L dst:D4 src:#6
    G.d[4].l(UCC(6));
    // 00e0c0: LEA.L dst:A0 src:(f5f4)
    G.a[0] = 0xf5f4;
    // 00e0c6: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Le0c8:;
    // 00e0c8: MOVE.L dst:D1 src:#3e000000
    G.d[1].l(0x3e000000);
    // 00e0ce: MOVE.L dst:D2 src:(A0)+
    G.d[2].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00e0d0: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 00e0d2: OR.W dst:D1 src:D2
    G.d[1].w(OR<W>(G.d[1].w(), G.d[2].w()));
    // 00e0d4: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 00e0d8: ROR.L dst:D2 src:#4
    G.d[2].l(ROR<L>(G.d[2].l(), 4));
    // 00e0da: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 00e0dc: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00e0de: JSR src:(6600)
    F6600();
    // 00e0e4: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00e0e6: DBcc.W cond:False dst:D4 src:(e0c8)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Le0c8; }
    // 00e0ea: JMP src:(50a0)
    F50a0();
    goto end;

  Le148:;
    // 00e148: MOVE.W dst:(ff0042) src:#1
    G.io->w(0xff0042, UCC(1));
    // 00e150: BCLR.B dst:(ff0075) src:#5
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 5));
    // 00e158: BCLR.B dst:(ff0075) src:#0
    G.io->b(0xff0075, BCLR<B>(G.io->b(0xff0075), 0));
    // 00e160: MOVE.W dst:D0 src:(ff0842)
    G.d[0].w(UCC(G.io->w(0xff0842)));
    // 00e166: BTST.L dst:D0 src:#3
    BTST<L>(G.d[0].l(), 3);
    // 00e16a: Bcc cond:NE src:(e184)
    if (G.sr.check_condition(Condition::NE)) { goto Le184; }
    // 00e16c: BTST.L dst:D0 src:#c
    BTST<L>(G.d[0].l(), 12);
    // 00e170: Bcc cond:NE src:(e184)
    if (G.sr.check_condition(Condition::NE)) { goto Le184; }
    // 00e172: MOVE.W dst:(ff0882) src:#1
    G.io->w(0xff0882, 1);
    // 00e17a: MOVE.W dst:D0 src:#0
    G.d[0].w(UCC(0));
    // 00e17e: JSR src:(663a)
    F663a();

  Le184:;
    // 00e184: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe0f0()
  {
    _log_call(__func__);

    // 00e0f0: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 00e0f4: MOVEM.W src:(A6.L)+34 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x34));
    G.d[1].l(G.io->w(G.a[6] + 0x36));
    // 00e0fa: CMP.W dst:D0 src:(A6.L)+32
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x32));
    // 00e0fe: Bcc cond:EQ src:(e140)
    if (G.sr.check_condition(Condition::EQ)) { goto Le140; }
    // 00e100: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 00e104: MOVE.W dst:D2 src:D0
    G.d[2].w(G.d[0].w());
    // 00e106: SUB.W dst:D2 src:D1
    G.d[2].w(SUB<W>(G.d[2].w(), G.d[1].w()));
    // 00e108: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 00e10a: Bcc cond:CS src:(e132)
    if (G.sr.check_condition(Condition::CS)) { goto Le132; }
    // 00e10c: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00e110: Bcc cond:NE src:(e132)
    if (G.sr.check_condition(Condition::NE)) { goto Le132; }
    // 00e112: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 00e116: MOVE.L dst:A0 src:#0
    G.a[0] = 0;
    // 00e11c: MOVE.W dst:A0 src:#c50
    G.a[0].w(0xc50);
    // 00e120: ANDI.W dst:D2 src:#f0
    G.d[2].w(AND<W>(G.d[2].w(), 0xf0));
    // 00e124: LSL.W dst:D2 src:#4
    G.d[2].w(LSL<W>(G.d[2].w(), 4));
    // 00e126: SUBA.W dst:A0 src:D2
    G.a[0] = SUB<L>(G.a[0], G.d[2].w());
    // 00e128: MOVEQ.L dst:D6 src:#7
    G.d[6].l(7);
    // 00e12a: MOVEQ.L dst:D7 src:#1
    G.d[7].l(UCC(1));
    // 00e12c: JSR src:(3eea)
    F3eea();

  Le132:;
    // 00e132: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 00e134: MOVEQ.L dst:D1 src:#20
    G.d[1].l(UCC(0x20));
    // 00e136: JSR src:(3e4a)
    F3e4a();
    // 00e13c: Bcc cond:True src:(6864)
    _m->inc_something(G.a[6]);
    goto end;

  Le140:;
    // 00e140: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 00e146: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe18a()
  {
    _log_call(__func__);

    // 00e18a: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 00e190: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 00e196: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 00e198: LSL.W dst:D1 src:#7
    G.d[1].w(LSL<W>(G.d[1].w(), 7));
    // 00e19a: MOVEM.W dst:(A6.L)+30 regs:D0,D1
    G.io->w(G.a[6] + 0x30, G.d[0].w());
    G.io->w(G.a[6] + 0x32, G.d[1].w());
    // 00e1a0: ADD.W dst:D0 src:(A5.L)+14
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(G.a[5] + 0x14)));
    // 00e1a4: ADD.W dst:D1 src:(A5.L)+16
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(G.a[5] + 0x16)));
    // 00e1a8: MOVEM.W dst:(A6.L)+14 regs:D0,D1
    G.io->w(G.a[6] + 0x14, G.d[0].w());
    G.io->w(G.a[6] + 0x16, G.d[1].w());
    // 00e1ae: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(UCC(G.io->w(0xff2a9c)));
    // 00e1b4: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 00e1b8: ADD.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(SOME_STATE_COUNTER)));
    // 00e1be: ANDI.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00e1c2: MOVE.W dst:(A6.L)+3a src:D0
    G.io->w(G.a[6] + 0x3a, G.d[0].w());
    // 00e1c6: CLR.L dst:(A6.L)+36
    G.io->l(G.a[6] + 0x36, UCC(0));
    // 00e1ca: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe1cc()
  {
    _log_call(__func__);

    goto Le1cc;

  Ld6a4:;
    // 00d6a4: JMP src:(50a0)
    F50a0();
    goto end;

  Le1cc:;
    // 00e1cc: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 00e1d0: CMPI.W dst:(ff0042) src:#1
    CMP<W>(G.io->w(0xff0042), 1);
    // 00e1d8: Bcc cond:EQ src:(d6a4)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld6a4; }
    // 00e1dc: TST.W src:(A6.L)+3a
    TST<W>(G.io->w(G.a[6] + 0x3a));
    // 00e1e0: Bcc cond:NE src:(e24e)
    if (G.sr.check_condition(Condition::NE)) { goto Le24e; }
    // 00e1e2: CMPI.W dst:(A6.L)+38 src:#20
    CMP<W>(G.io->w(G.a[6] + 0x38), 0x20);
    // 00e1e8: Bcc cond:CC src:(e23c)
    if (G.sr.check_condition(Condition::CC)) { goto Le23c; }
    // 00e1ea: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 00e1ee: LEA.L dst:A5 src:(A6.L)+36
    G.a[5] = G.a[6] + 0x36;
    // 00e1f2: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00e1f6: Bcc cond:NE src:(e232)
    if (G.sr.check_condition(Condition::NE)) { goto Le232; }
    // 00e1f8: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00e1fa: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00e200: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00e206: ANDI.W dst:D0 src:#3c
    G.d[0].w(AND<W>(G.d[0].w(), 0x3c));
    // 00e20a: LEA.L dst:A0 src:(e254)
    G.a[0] = 0xe254;
    // 00e210: MOVEM.W src:(A6.L)+30 regs:D1,D2
    G.d[1].l(G.io->w(G.a[6] + 0x30));
    G.d[2].l(G.io->w(G.a[6] + 0x32));
    // 00e216: MOVE.L dst:A4 src:(ff0046)
    G.a[4] = G.io->l(0xff0046);
    // 00e21c: ADD.W dst:D1 src:(A4.L)+14
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(G.a[4] + 0x14)));
    // 00e220: ADD.W dst:D2 src:(A4.L)+16
    G.d[2].w(ADD<W>(G.d[2].w(), G.io->w(G.a[4] + 0x16)));
    // 00e224: MOVE.L dst:(A6.L)+14 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[0] + G.d[0].w()));
    // 00e22a: ADD.W dst:(A6.L)+14 src:D1
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[1].w()));
    // 00e22e: ADD.W dst:(A6.L)+16 src:D2
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[2].w()));

  Le232:;
    // 00e232: BSR src:(7620)
    F7620();
    // 00e236: ADDQ.W dst:(A6.L)+38 src:#1
    G.io->w(G.a[6] + 0x38, ADD<W>(G.io->w(G.a[6] + 0x38), 1));
    // 00e23a: RTS
    goto end;

  Le23c:;
    // 00e23c: CMPI.W dst:(ff0042) src:#1
    CMP<W>(G.io->w(0xff0042), 1);
    // 00e244: Bcc cond:EQ src:(d6a4)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld6a4; }
    // 00e248: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, UCC(0));
    // 00e24c: RTS
    goto end;

  Le24e:;
    // 00e24e: SUBQ.W dst:(A6.L)+3a src:#1
    G.io->w(G.a[6] + 0x3a, SUB<W>(G.io->w(G.a[6] + 0x3a), 1));
    // 00e252: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe294()
  {
    _log_call(__func__);

    // 00e294: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 00e298: Bcc cond:NE src:(e334)
    if (G.sr.check_condition(Condition::NE)) { goto Le334; }
    // 00e29c: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, 0);
    // 00e2a0: CLR.W dst:(A6.L)+34
    G.io->w(G.a[6] + 0x34, UCC(0));
    // 00e2a4: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00e2aa: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00e2b0: Bcc cond:EQ src:(e2c8)
    if (G.sr.check_condition(Condition::EQ)) { goto Le2c8; }
    // 00e2b2: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 00e2b8: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00e2c0: Bcc cond:NE src:(e2c8)
    if (G.sr.check_condition(Condition::NE)) { goto Le2c8; }
    // 00e2c2: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  Le2c8:;
    // 00e2c8: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00e2ce: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00e2d0: MOVE.W dst:(A6.L)+3c src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3c, G.io->w(G.a[0] + G.d[0].w()));
    // 00e2d6: MOVE.W dst:(A6.L)+3e src:#0
    G.io->w(G.a[6] + 0x3e, 0);
    // 00e2dc: MOVE.W dst:(ff0042) src:#0
    G.io->w(0xff0042, 0);
    // 00e2e4: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, G.a[6]);
    // 00e2ea: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00e2f0: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00e2f2: MOVE.W dst:(A6.L)+36 src:#50
    G.io->w(G.a[6] + 0x36, 0x50);
    // 00e2f8: SUB.W dst:(A6.L)+36 src:D0
    G.io->w(G.a[6] + 0x36, SUB<W>(G.io->w(G.a[6] + 0x36), G.d[0].w()));
    // 00e2fc: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 00e300: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, 0x30);
    // 00e306: MOVE.W dst:(A6.L)+14 src:#b000
    G.io->w(G.a[6] + 0x14, 0xb000);
    // 00e30c: MOVE.W dst:(A6.L)+16 src:#2000
    G.io->w(G.a[6] + 0x16, UCC(0x2000));
    // 00e312: JSR src:(6820)
    F6820();
    // 00e318: LEA.L dst:A0 src:(e70e)
    G.a[0] = 0xe70e;
    // 00e31e: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e320: JSR src:(5abc)
    F5abc();
    // 00e326: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00e328: MOVE.L dst:D1 src:#35000001
    G.d[1].l(UCC(0x35000001));
    // 00e32e: JMP src:(6600)
    F6600();
    goto end;

  Le334:;
    // 00e334: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));
    // 00e338: MOVE.W dst:(A6.L)+3e src:#3
    G.io->w(G.a[6] + 0x3e, 3);
    // 00e33e: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, 0);
    // 00e342: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 00e346: MOVE.W dst:(A6.L)+14 src:#c800
    G.io->w(G.a[6] + 0x14, 0xc800);
    // 00e34c: MOVE.W dst:(A6.L)+16 src:#2000
    G.io->w(G.a[6] + 0x16, UCC(0x2000));
    // 00e352: LEA.L dst:A0 src:(e762)
    G.a[0] = 0xe762;
    // 00e358: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e35a: JMP src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe360()
  {
    _log_call(__func__);

    goto Le360;

  Ld6a4:;
    // 00d6a4: JMP src:(50a0)
    F50a0();
    goto end;

  Le360:;
    // 00e360: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00e364: Bcc cond:NE src:(e658)
    if (G.sr.check_condition(Condition::NE)) { goto Le658; }
    // 00e368: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00e36c: Bcc cond:MI src:(e658)
    if (G.sr.check_condition(Condition::MI)) { goto Le658; }
    // 00e370: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00e374: Bcc cond:EQ src:(e382)
    if (G.sr.check_condition(Condition::EQ)) { goto Le382; }
    // 00e376: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00e37a: CMP.W dst:D0 src:(A6.L)+3c
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3c));
    // 00e37e: Bcc cond:CC src:(e658)
    if (G.sr.check_condition(Condition::CC)) { goto Le658; }

  Le382:;
    // 00e382: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 00e386: Bcc cond:NE src:(e4f4)
    if (G.sr.check_condition(Condition::NE)) { goto Le4f4; }
    // 00e38a: MOVE.L dst:A5 src:A6
    G.a[5] = G.a[6];
    // 00e38c: ADDQ.W dst:(A6.L)+32 src:#1
    G.io->w(G.a[6] + 0x32, ADD<W>(G.io->w(G.a[6] + 0x32), 1));
    // 00e390: BTST.B dst:(A6.L)+30 src:#0
    BTST<B>(G.io->b(G.a[6] + 0x30), 0);
    // 00e396: Bcc cond:EQ src:(e3a0)
    if (G.sr.check_condition(Condition::EQ)) { goto Le3a0; }
    // 00e398: TST.W src:(A6.L)+34
    TST<W>(G.io->w(G.a[6] + 0x34));
    // 00e39c: Bcc cond:EQ src:(e3b2)
    if (G.sr.check_condition(Condition::EQ)) { goto Le3b2; }
    // 00e39e: Bcc cond:True src:(e3d2)
    goto Le3d2;

  Le3a0:;
    // 00e3a0: MOVE.W dst:(A6.L)+6 src:#8
    G.io->w(G.a[6] + 6, UCC(8));
    // 00e3a6: TST.W src:(A6.L)+34
    TST<W>(G.io->w(G.a[6] + 0x34));
    // 00e3aa: Bcc cond:EQ src:(e3b2)
    if (G.sr.check_condition(Condition::EQ)) { goto Le3b2; }
    // 00e3ac: MOVE.W dst:(A6.L)+6 src:#2
    G.io->w(G.a[6] + 6, UCC(2));

  Le3b2:;
    // 00e3b2: JSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 00e3b8: CMPI.W dst:(A6.L)+32 src:#178
    CMP<W>(G.io->w(G.a[6] + 0x32), 0x178);
    // 00e3be: Bcc cond:CS src:(e3ec)
    if (G.sr.check_condition(Condition::CS)) { goto Le3ec; }
    // 00e3c0: BSET.B dst:(A6.L)+30 src:#0
    G.io->b(G.a[6] + 0x30, BSET<B>(G.io->b(G.a[6] + 0x30), 0));
    // 00e3c6: MOVE.W dst:(A6.L)+6 src:#2
    G.io->w(G.a[6] + 6, 2);
    // 00e3cc: MOVE.W dst:(A6.L)+8 src:#10
    G.io->w(G.a[6] + 8, UCC(0x10));

  Le3d2:;
    // 00e3d2: CMPI.W dst:(A6.L)+32 src:#280
    CMP<W>(G.io->w(G.a[6] + 0x32), 0x280);
    // 00e3d8: Bcc cond:CS src:(e3ec)
    if (G.sr.check_condition(Condition::CS)) { goto Le3ec; }
    // 00e3da: BCLR.B dst:(A6.L)+30 src:#0
    G.io->b(G.a[6] + 0x30, BCLR<B>(G.io->b(G.a[6] + 0x30), 0));
    // 00e3e0: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, 0x30);
    // 00e3e6: MOVE.W dst:(A6.L)+32 src:#0
    G.io->w(G.a[6] + 0x32, UCC(0));

  Le3ec:;
    // 00e3ec: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00e3f0: ADDI.W dst:D0 src:#2000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x2000));
    // 00e3f4: CMPI.W dst:D0 src:#d000
    CMP<W>(G.d[0].w(), 0xd000);
    // 00e3f8: Bcc cond:HI src:(e4e6)
    if (G.sr.check_condition(Condition::HI)) { goto Le4e6; }
    // 00e3fc: ADDQ.W dst:(A6.L)+38 src:#1
    G.io->w(G.a[6] + 0x38, ADD<W>(G.io->w(G.a[6] + 0x38), 1));
    // 00e400: MOVE.W dst:D0 src:(A6.L)+36
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x36)));
    // 00e404: CMP.W dst:D0 src:(A6.L)+38
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x38));
    // 00e408: Bcc cond:CC src:(e41e)
    if (G.sr.check_condition(Condition::CC)) { goto Le41e; }
    // 00e40a: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 00e40e: MOVE.W dst:D0 src:#30
    G.d[0].w(0x30);
    // 00e412: MOVE.W dst:D3 src:#f000
    G.d[3].w(0xf000);
    // 00e416: MOVEQ.L dst:D4 src:#0
    G.d[4].l(UCC(0));
    // 00e418: JSR src:(6bd0)
    F6bd0();

  Le41e:;
    // 00e41e: CMPI.W dst:(A6.L)+3a src:#10
    CMP<W>(G.io->w(G.a[6] + 0x3a), 0x10);
    // 00e424: Bcc cond:CS src:(e4de)
    if (G.sr.check_condition(Condition::CS)) { goto Le4de; }
    // 00e428: TST.W src:(A6.L)+34
    TST<W>(G.io->w(G.a[6] + 0x34));
    // 00e42c: Bcc cond:EQ src:(e44a)
    if (G.sr.check_condition(Condition::EQ)) { goto Le44a; }
    // 00e42e: MOVE.W dst:D0 src:#ff00
    G.d[0].w(0xff00);
    // 00e432: SUBQ.W dst:(A6.L)+34 src:#1
    G.io->w(G.a[6] + 0x34, SUB<W>(G.io->w(G.a[6] + 0x34), 1));
    // 00e436: CMPI.W dst:(A6.L)+34 src:#1
    CMP<W>(G.io->w(G.a[6] + 0x34), 1);
    // 00e43c: Bcc cond:NE src:(e442)
    if (G.sr.check_condition(Condition::NE)) { goto Le442; }
    // 00e43e: MOVE.W dst:D0 src:#100
    G.d[0].w(UCC(0x100));

  Le442:;
    // 00e442: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00e446: Bcc cond:True src:(e4de)
    goto Le4de;

  Le44a:;
    // 00e44a: BTST.B dst:(A5.L)+30 src:#0
    BTST<B>(G.io->b(G.a[5] + 0x30), 0);
    // 00e450: Bcc cond:EQ src:(e458)
    if (G.sr.check_condition(Condition::EQ)) { goto Le458; }
    // 00e452: SUBQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, SUB<W>(G.io->w(G.a[6] + 0x3e), 1));
    // 00e456: Bcc cond:True src:(e45c)
    goto Le45c;

  Le458:;
    // 00e458: ADDQ.W dst:(A6.L)+3e src:#1
    G.io->w(G.a[6] + 0x3e, ADD<W>(G.io->w(G.a[6] + 0x3e), 1));

  Le45c:;
    // 00e45c: ANDI.W dst:(A6.L)+3e src:#7
    G.io->w(G.a[6] + 0x3e, AND<W>(G.io->w(G.a[6] + 0x3e), 7));
    // 00e462: MOVE.W dst:D0 src:(A6.L)+3e
    G.d[0].w(G.io->w(G.a[6] + 0x3e));
    // 00e466: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00e468: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 00e46c: Bcc cond:NE src:(e474)
    if (G.sr.check_condition(Condition::NE)) { goto Le474; }
    // 00e46e: MOVE.W dst:(A5.L)+34 src:#4
    G.io->w(G.a[5] + 0x34, UCC(4));

  Le474:;
    // 00e474: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00e476: MOVE.W dst:D2 src:D0
    G.d[2].w(UCC(G.d[0].w()));
    // 00e478: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));
    // 00e47a: LEA.L dst:A0 src:(e816)
    G.a[0] = 0xe816;
    // 00e480: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00e482: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 00e486: MOVE.L dst:(A1.L)+6 src:(A0)
    G.io->l(G.a[1] + 6, G.io->l(G.a[0]));
    // 00e48a: MOVE.L dst:(A1.L)+14 src:(A0)+
    G.io->l(G.a[1] + 0x14, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00e48e: SUBI.W dst:(A1.L)+16 src:#c00
    G.io->w(G.a[1] + 0x16, SUB<W>(G.io->w(G.a[1] + 0x16), 0xc00));
    // 00e494: ADDQ.W dst:D2 src:#4
    G.d[2].w(ADD<W>(G.d[2].w(), 4));
    // 00e496: ANDI.W dst:D2 src:#7
    G.d[2].w(AND<W>(G.d[2].w(), 7));
    // 00e49a: LSL.W dst:D2 src:#2
    G.d[2].w(LSL<W>(G.d[2].w(), 2));
    // 00e49c: LEA.L dst:A0 src:(e816)
    G.a[0] = 0xe816;
    // 00e4a2: ADDA.W dst:A0 src:D2
    G.a[0] = ADD<L>(G.a[0], G.d[2].w());
    // 00e4a4: LEA.L dst:A1 src:(A6.L)+96
    G.a[1] = G.a[6] + 0x96;
    // 00e4a8: MOVE.L dst:(A1.L)+6 src:(A0)
    G.io->l(G.a[1] + 6, G.io->l(G.a[0]));
    // 00e4ac: MOVE.L dst:(A1.L)+14 src:(A0)+
    G.io->l(G.a[1] + 0x14, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00e4b0: SUBI.W dst:(A1.L)+16 src:#c00
    G.io->w(G.a[1] + 0x16, SUB<W>(G.io->w(G.a[1] + 0x16), 0xc00));
    // 00e4b6: MULU.W dst:D1 src:#c
    G.d[1].l(MULU(G.d[1].w(), 12));
    // 00e4ba: LEA.L dst:A0 src:(e7b6)
    G.a[0] = 0xe7b6;
    // 00e4c0: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 00e4c2: LEA.L dst:A1 src:(A6.L)+6c
    G.a[1] = G.a[6] + 0x6c;
    // 00e4c6: MOVE.W dst:D1 src:(A0)+
    G.d[1].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00e4c8: ANDI.W dst:(A1.L)+2 src:#7ff
    G.io->w(G.a[1] + 2, AND<W>(G.io->w(G.a[1] + 2), 0x7ff));
    // 00e4ce: OR.W dst:(A1.L)+2 src:D1
    G.io->w(G.a[1] + 2, OR<W>(G.io->w(G.a[1] + 2), G.d[1].w()));
    // 00e4d2: MOVE.W dst:(A1.L)+4 src:(A0)+
    G.io->w(G.a[1] + 4, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00e4d6: MOVE.L dst:(A1.L)+6 src:(A0)+
    G.io->l(G.a[1] + 6, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00e4da: MOVE.L dst:(A1.L)+a src:(A0)
    G.io->l(G.a[1] + 10, UCC(G.io->l(G.a[0])));

  Le4de:;
    // 00e4de: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e4e0: JMP src:(5ade)
    F5ade();
    goto end;

  Le4e6:;
    // 00e4e6: BSET.B dst:(ff0043) src:#7
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 7));
    // 00e4ee: JMP src:(50a0)
    F50a0();
    goto end;

  Le4f4:;
    // 00e4f4: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 00e4fc: Bcc cond:NE src:(e658)
    if (G.sr.check_condition(Condition::NE)) { goto Le658; }
    // 00e500: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 00e508: Bcc cond:NE src:(d6a4)
    if (G.sr.check_condition(Condition::NE)) { goto Ld6a4; }
    // 00e50c: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00e512: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[5] + 0x14));
    // 00e518: ADDI.W dst:(A6.L)+14 src:#1800
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), 0x1800));
    // 00e51e: CMPI.W dst:(A6.L)+36 src:#60
    CMP<W>(G.io->w(G.a[6] + 0x36), 0x60);
    // 00e524: Bcc cond:CC src:(e538)
    if (G.sr.check_condition(Condition::CC)) { goto Le538; }
    // 00e526: MOVE.W dst:D2 src:(ff0858)
    G.d[2].w(UCC(G.io->w(0xff0858)));
    // 00e52c: CMP.W dst:D2 src:(A6.L)+16
    CMP<W>(G.d[2].w(), G.io->w(G.a[6] + 0x16));
    // 00e530: Bcc cond:CS src:(e622)
    if (G.sr.check_condition(Condition::CS)) { goto Le622; }
    // 00e534: Bcc cond:True src:(e61e)
    goto Le61e;

  Le538:;
    // 00e538: CMPI.W dst:(A6.L)+36 src:#80
    CMP<W>(G.io->w(G.a[6] + 0x36), 0x80);
    // 00e53e: Bcc cond:CS src:(e55c)
    if (G.sr.check_condition(Condition::CS)) { goto Le55c; }
    // 00e540: CMPI.W dst:(A6.L)+36 src:#df
    CMP<W>(G.io->w(G.a[6] + 0x36), 0xdf);
    // 00e546: Bcc cond:CS src:(e5dc)
    if (G.sr.check_condition(Condition::CS)) { goto Le5dc; }
    // 00e54a: CMPI.W dst:(A6.L)+36 src:#ff
    CMP<W>(G.io->w(G.a[6] + 0x36), 0xff);
    // 00e550: Bcc cond:CS src:(e59e)
    if (G.sr.check_condition(Condition::CS)) { goto Le59e; }
    // 00e552: MOVE.W dst:(A6.L)+36 src:#0
    G.io->w(G.a[6] + 0x36, UCC(0));
    // 00e558: Bcc cond:True src:(e61e)
    goto Le61e;

  Le55c:;
    // 00e55c: ADDI.W dst:(A6.L)+8e src:#80
    G.io->w(G.a[6] + 0x8e, ADD<W>(G.io->w(G.a[6] + 0x8e), 0x80));
    // 00e562: CMPI.W dst:(A6.L)+36 src:#68
    CMP<W>(G.io->w(G.a[6] + 0x36), 0x68);
    // 00e568: Bcc cond:CS src:(e61e)
    if (G.sr.check_condition(Condition::CS)) { goto Le61e; }
    // 00e56c: CMPI.W dst:(A6.L)+36 src:#70
    CMP<W>(G.io->w(G.a[6] + 0x36), 0x70);
    // 00e572: Bcc cond:CS src:(e58a)
    if (G.sr.check_condition(Condition::CS)) { goto Le58a; }
    // 00e576: CMPI.W dst:(A6.L)+36 src:#78
    CMP<W>(G.io->w(G.a[6] + 0x36), 0x78);
    // 00e57c: Bcc cond:CS src:(e594)
    if (G.sr.check_condition(Condition::CS)) { goto Le594; }
    // 00e580: MOVE.W dst:(A6.L)+8c src:#1
    G.io->w(G.a[6] + 0x8c, UCC(1));
    // 00e586: Bcc cond:True src:(e61e)
    goto Le61e;

  Le58a:;
    // 00e58a: MOVE.W dst:(A6.L)+8c src:#803
    G.io->w(G.a[6] + 0x8c, UCC(0x803));
    // 00e590: Bcc cond:True src:(e61e)
    goto Le61e;

  Le594:;
    // 00e594: MOVE.W dst:(A6.L)+8c src:#402
    G.io->w(G.a[6] + 0x8c, UCC(0x402));
    // 00e59a: Bcc cond:True src:(e61e)
    goto Le61e;

  Le59e:;
    // 00e59e: SUBI.W dst:(A6.L)+8e src:#80
    G.io->w(G.a[6] + 0x8e, SUB<W>(G.io->w(G.a[6] + 0x8e), 0x80));
    // 00e5a4: CMPI.W dst:(A6.L)+36 src:#e7
    CMP<W>(G.io->w(G.a[6] + 0x36), 0xe7);
    // 00e5aa: Bcc cond:CS src:(e61e)
    if (G.sr.check_condition(Condition::CS)) { goto Le61e; }
    // 00e5ae: CMPI.W dst:(A6.L)+36 src:#ef
    CMP<W>(G.io->w(G.a[6] + 0x36), 0xef);
    // 00e5b4: Bcc cond:CS src:(e5cc)
    if (G.sr.check_condition(Condition::CS)) { goto Le5cc; }
    // 00e5b8: CMPI.W dst:(A6.L)+36 src:#78
    CMP<W>(G.io->w(G.a[6] + 0x36), 0x78);
    // 00e5be: Bcc cond:CS src:(e5d4)
    if (G.sr.check_condition(Condition::CS)) { goto Le5d4; }
    // 00e5c2: MOVE.W dst:(A6.L)+8c src:#c04
    G.io->w(G.a[6] + 0x8c, UCC(0xc04));
    // 00e5c8: Bcc cond:True src:(e61e)
    goto Le61e;

  Le5cc:;
    // 00e5cc: MOVE.W dst:(A6.L)+8c src:#402
    G.io->w(G.a[6] + 0x8c, UCC(0x402));
    // 00e5d2: Bcc cond:True src:(e61e)
    goto Le61e;

  Le5d4:;
    // 00e5d4: MOVE.W dst:(A6.L)+8c src:#803
    G.io->w(G.a[6] + 0x8c, UCC(0x803));
    // 00e5da: Bcc cond:True src:(e61e)
    goto Le61e;

  Le5dc:;
    // 00e5dc: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(G.io->w(SOME_STATE_COUNTER));
    // 00e5e2: ANDI.W dst:D1 src:#f
    G.d[1].w(AND<W>(G.d[1].w(), 15));
    // 00e5e6: Bcc cond:NE src:(e61e)
    if (G.sr.check_condition(Condition::NE)) { goto Le61e; }
    // 00e5ea: MOVE.W dst:D0 src:#2
    G.d[0].w(2);
    // 00e5ee: MOVE.L dst:D1 src:#2b000000
    G.d[1].l(0x2b000000);
    // 00e5f4: MOVE.W dst:D2 src:(A6.L)+14
    G.d[2].w(G.io->w(G.a[6] + 0x14));
    // 00e5f8: SUBI.W dst:D2 src:#1000
    G.d[2].w(SUB<W>(G.d[2].w(), 0x1000));
    // 00e5fc: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 00e602: ROL.L dst:D2 src:#5
    G.d[2].l(ROL<L>(G.d[2].l(), 5));
    // 00e604: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 00e606: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(G.io->w(G.a[6] + 0x16));
    // 00e60a: ADDI.W dst:D2 src:#200
    G.d[2].w(ADD<W>(G.d[2].w(), 0x200));
    // 00e60e: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 00e614: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 00e616: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 00e618: JSR src:(6600)
    F6600();

  Le61e:;
    // 00e61e: ADDQ.W dst:(A6.L)+36 src:#1
    G.io->w(G.a[6] + 0x36, ADD<W>(G.io->w(G.a[6] + 0x36), 1));

  Le622:;
    // 00e622: MOVE.W dst:D0 src:(A5.L)+3a
    G.d[0].w(G.io->w(G.a[5] + 0x3a));
    // 00e626: ADDQ.W dst:(A5.L)+3a src:#1
    G.io->w(G.a[5] + 0x3a, ADD<W>(G.io->w(G.a[5] + 0x3a), 1));
    // 00e62a: CMPI.W dst:D0 src:#10
    CMP<W>(G.d[0].w(), 0x10);
    // 00e62e: Bcc cond:CS src:(e4de)
    if (G.sr.check_condition(Condition::CS)) { goto Le4de; }
    // 00e632: TST.W src:(A5.L)+34
    TST<W>(G.io->w(G.a[5] + 0x34));
    // 00e636: Bcc cond:EQ src:(e650)
    if (G.sr.check_condition(Condition::EQ)) { goto Le650; }
    // 00e638: CMPI.W dst:(A5.L)+34 src:#4
    CMP<W>(G.io->w(G.a[5] + 0x34), 4);
    // 00e63e: Bcc cond:EQ src:(e654)
    if (G.sr.check_condition(Condition::EQ)) { goto Le654; }
    // 00e640: SUBQ.W dst:(A5.L)+34 src:#1
    G.io->w(G.a[5] + 0x34, SUB<W>(G.io->w(G.a[5] + 0x34), 1));
    // 00e644: Bcc cond:NE src:(e4de)
    if (G.sr.check_condition(Condition::NE)) { goto Le4de; }
    // 00e648: CLR.W dst:(A5.L)+3a
    G.io->w(G.a[5] + 0x3a, UCC(0));
    // 00e64c: Bcc cond:True src:(e4de)
    goto Le4de;

  Le650:;
    // 00e650: CLR.W dst:(A5.L)+3a
    G.io->w(G.a[5] + 0x3a, UCC(0));

  Le654:;
    // 00e654: Bcc cond:True src:(e44a)
    goto Le44a;

  Le658:;
    // 00e658: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 00e65c: Bcc cond:NE src:(e680)
    if (G.sr.check_condition(Condition::NE)) { goto Le680; }
    // 00e65e: MOVE.W dst:D0 src:#80
    G.d[0].w(UCC(0x80));
    // 00e662: JSR src:(62d0)
    F62d0();
    // 00e668: BSET.B dst:(ff0043) src:#6
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 6));
    // 00e670: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, 0);
    // 00e674: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 00e678: CLR.L dst:(A6.L)+38
    G.io->l(G.a[6] + 0x38, 0);
    // 00e67c: CLR.L dst:(A6.L)+3c
    G.io->l(G.a[6] + 0x3c, UCC(0));

  Le680:;
    // 00e680: CMPI.W dst:(A6.L)+30 src:#40
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x40);
    // 00e686: Bcc cond:CC src:(e6e8)
    if (G.sr.check_condition(Condition::CC)) { goto Le6e8; }
    // 00e688: MOVEQ.L dst:D6 src:#6
    G.d[6].l(6);
    // 00e68a: MOVEQ.L dst:D5 src:#0
    G.d[5].l(UCC(0));
    // 00e68c: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 00e690: LEA.L dst:A5 src:(A6.L)+32
    G.a[5] = G.a[6] + 0x32;

  Le694:;
    // 00e694: CMP.W dst:D5 src:(A6.L)+30
    CMP<W>(G.d[5].w(), G.io->w(G.a[6] + 0x30));
    // 00e698: Bcc cond:HI src:(e6ce)
    if (G.sr.check_condition(Condition::HI)) { goto Le6ce; }
    // 00e69a: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00e69e: Bcc cond:NE src:(e6ca)
    if (G.sr.check_condition(Condition::NE)) { goto Le6ca; }
    // 00e6a0: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00e6a2: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(UCC(G.io->w(0xff2a9c)));
    // 00e6a8: MULU.W dst:D0 src:#3
    G.d[0].l(MULU(G.d[0].w(), 3));
    // 00e6ac: ADD.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(SOME_STATE_COUNTER)));
    // 00e6b2: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00e6b6: LEA.L dst:A0 src:(e6ee)
    G.a[0] = 0xe6ee;
    // 00e6bc: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00e6be: MOVEM.W src:(A0) regs:D0,D1
    G.d[0].l(G.io->w(G.a[0]));
    G.d[1].l(G.io->w(G.a[0] + 2));
    // 00e6c2: ADD.W dst:(A1.L)+6 src:D0
    G.io->w(G.a[1] + 6, ADD<W>(G.io->w(G.a[1] + 6), G.d[0].w()));
    // 00e6c6: ADD.W dst:(A1.L)+8 src:D1
    G.io->w(G.a[1] + 8, ADD<W>(G.io->w(G.a[1] + 8), G.d[1].w()));

  Le6ca:;
    // 00e6ca: BSR src:(75ca)
    F75ca();

  Le6ce:;
    // 00e6ce: ADDQ.W dst:D5 src:#8
    G.d[5].w(ADD<W>(G.d[5].w(), 8));
    // 00e6d0: LEA.L dst:A1 src:(A1.L)+e
    G.a[1] += 14;
    // 00e6d4: LEA.L dst:A5 src:(A5.L)+2
    G.a[5] += 2;
    // 00e6d8: DBcc.W cond:False dst:D6 src:(e694)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto Le694; }
    // 00e6dc: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00e6e0: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e6e2: JMP src:(5ade)
    F5ade();
    goto end;

  Le6e8:;
    // 00e6e8: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe836()
  {
    _log_call(__func__);

    // 00e836: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, 0x30);
    // 00e83c: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, 0);
    // 00e840: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 00e844: CLR.L dst:(A6.L)+38
    G.io->l(G.a[6] + 0x38, 0);
    // 00e848: CLR.L dst:(A6.L)+3c
    G.io->l(G.a[6] + 0x3c, 0);
    // 00e84c: CLR.W dst:(A6.L)+44
    G.io->w(G.a[6] + 0x44, 0);
    // 00e850: MOVE.W dst:(A6.L)+14 src:#c000
    G.io->w(G.a[6] + 0x14, 0xc000);
    // 00e856: CLR.W dst:(A6.L)+20
    G.io->w(G.a[6] + 0x20, UCC(0));
    // 00e85a: CMPI.W dst:(A6.L)+26 src:#c0
    CMP<W>(G.io->w(G.a[6] + 0x26), 0xc0);
    // 00e860: Bcc cond:CS src:(e8c4)
    if (G.sr.check_condition(Condition::CS)) { goto Le8c4; }
    // 00e864: MOVE.W dst:(A6.L)+16 src:#2000
    G.io->w(G.a[6] + 0x16, UCC(0x2000));
    // 00e86a: JSR src:(6820)
    F6820();
    // 00e870: CMPI.W dst:(A6.L)+28 src:#1
    CMP<W>(G.io->w(G.a[6] + 0x28), 1);
    // 00e876: Bcc cond:EQ src:(e924)
    if (G.sr.check_condition(Condition::EQ)) { goto Le924; }
    // 00e87a: LEA.L dst:A0 src:(f1a4)
    G.a[0] = 0xf1a4;
    // 00e880: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e882: JSR src:(5abc)
    F5abc();
    // 00e888: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00e88a: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 00e88c: MOVE.W dst:D1 src:(A6.L)+26
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00e890: SWAP.L dst:D1
    G.d[1].l(SWAP(G.d[1].l()));
    // 00e892: ROR.L dst:D1 src:#4
    G.d[1].l(ROR<L>(G.d[1].l(), 4));
    // 00e894: ORI.L dst:D1 src:#27000001
    G.d[1].l(OR<L>(G.d[1].l(), 0x27000001));
    // 00e89a: JSR src:(6600)
    F6600();
    // 00e8a0: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00e8a2: MOVE.L dst:D1 src:#28000000
    G.d[1].l(UCC(0x28000000));
    // 00e8a8: JSR src:(6600)
    F6600();
    // 00e8ae: ADD.W dst:D1 src:#2a
    G.d[1].w(ADD<W>(G.d[1].w(), 0x2a));
    // 00e8b2: JSR src:(6600)
    F6600();
    // 00e8b8: MOVE.L dst:D1 src:#280000a8
    G.d[1].l(UCC(0x280000a8));
    // 00e8be: JMP src:(6600)
    F6600();
    goto end;

  Le8c4:;
    // 00e8c4: MOVE.W dst:(A6.L)+16 src:#5000
    G.io->w(G.a[6] + 0x16, UCC(0x5000));
    // 00e8ca: JSR src:(6820)
    F6820();
    // 00e8d0: CMPI.W dst:(A6.L)+28 src:#2
    CMP<W>(G.io->w(G.a[6] + 0x28), 2);
    // 00e8d6: Bcc cond:EQ src:(e932)
    if (G.sr.check_condition(Condition::EQ)) { goto Le932; }
    // 00e8da: LEA.L dst:A0 src:(f1f8)
    G.a[0] = 0xf1f8;
    // 00e8e0: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e8e2: JSR src:(5abc)
    F5abc();
    // 00e8e8: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00e8ea: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 00e8ec: MOVE.W dst:D1 src:(A6.L)+26
    G.d[1].w(UCC(G.io->w(G.a[6] + 0x26)));
    // 00e8f0: SWAP.L dst:D1
    G.d[1].l(SWAP(G.d[1].l()));
    // 00e8f2: ROR.L dst:D1 src:#4
    G.d[1].l(ROR<L>(G.d[1].l(), 4));
    // 00e8f4: ORI.L dst:D1 src:#27000002
    G.d[1].l(OR<L>(G.d[1].l(), 0x27000002));
    // 00e8fa: JSR src:(6600)
    F6600();
    // 00e900: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00e902: MOVE.L dst:D1 src:#28000054
    G.d[1].l(UCC(0x28000054));
    // 00e908: JSR src:(6600)
    F6600();
    // 00e90e: ADD.W dst:D1 src:#2a
    G.d[1].w(ADD<W>(G.d[1].w(), 0x2a));
    // 00e912: JSR src:(6600)
    F6600();
    // 00e918: MOVE.L dst:D1 src:#280000b4
    G.d[1].l(UCC(0x280000b4));
    // 00e91e: JMP src:(6600)
    F6600();
    goto end;

  Le924:;
    // 00e924: LEA.L dst:A0 src:(f24c)
    G.a[0] = 0xf24c;
    // 00e92a: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e92c: JMP src:(5abc)
    F5abc();
    goto end;

  Le932:;
    // 00e932: LEA.L dst:A0 src:(f2a0)
    G.a[0] = 0xf2a0;
    // 00e938: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e93a: JMP src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe940()
  {
    _log_call(__func__);

    goto Le940;

  Ld6a4:;
    // 00d6a4: JMP src:(50a0)
    F50a0();
    goto end;

  Le940:;
    // 00e940: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00e944: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00e948: ADDI.W dst:D0 src:#2000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x2000));
    // 00e94c: CMPI.W dst:D0 src:#e000
    CMP<W>(G.d[0].w(), 0xe000);
    // 00e950: Bcc cond:HI src:(d6a4)
    if (G.sr.check_condition(Condition::HI)) { goto Ld6a4; }
    // 00e954: CMPI.W dst:(A6.L)+14 src:#5800
    CMP<W>(G.io->w(G.a[6] + 0x14), 0x5800);
    // 00e95a: Bcc cond:CC src:(e964)
    if (G.sr.check_condition(Condition::CC)) { goto Le964; }
    // 00e95e: MOVE.W dst:(A6.L)+6 src:#30
    G.io->w(G.a[6] + 6, UCC(0x30));

  Le964:;
    // 00e964: JSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 00e96a: CMPI.W dst:(A6.L)+28 src:#1
    CMP<W>(G.io->w(G.a[6] + 0x28), 1);
    // 00e970: Bcc cond:EQ src:(e9e2)
    if (G.sr.check_condition(Condition::EQ)) { goto Le9e2; }
    // 00e974: CMPI.W dst:(A6.L)+28 src:#2
    CMP<W>(G.io->w(G.a[6] + 0x28), 2);
    // 00e97a: Bcc cond:EQ src:(e9e2)
    if (G.sr.check_condition(Condition::EQ)) { goto Le9e2; }
    // 00e97e: ADDQ.W dst:(A6.L)+30 src:#1
    G.io->w(G.a[6] + 0x30, ADD<W>(G.io->w(G.a[6] + 0x30), 1));
    // 00e982: CMPI.W dst:(A6.L)+30 src:#90
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x90);
    // 00e988: Bcc cond:CS src:(e9e2)
    if (G.sr.check_condition(Condition::CS)) { goto Le9e2; }
    // 00e98a: CMPI.W dst:(A6.L)+30 src:#a0
    CMP<W>(G.io->w(G.a[6] + 0x30), 0xa0);
    // 00e990: Bcc cond:CC src:(e9a0)
    if (G.sr.check_condition(Condition::CC)) { goto Le9a0; }
    // 00e992: ADDI.W dst:(A6.L)+9e src:#80
    G.io->w(G.a[6] + 0x9e, ADD<W>(G.io->w(G.a[6] + 0x9e), 0x80));
    // 00e998: SUBI.W dst:(A6.L)+ac src:#80
    G.io->w(G.a[6] + 0xac, SUB<W>(G.io->w(G.a[6] + 0xac), 0x80));
    // 00e99e: Bcc cond:True src:(e9e2)
    goto Le9e2;

  Le9a0:;
    // 00e9a0: CMPI.W dst:(A6.L)+30 src:#140
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x140);
    // 00e9a6: Bcc cond:CC src:(e9ce)
    if (G.sr.check_condition(Condition::CC)) { goto Le9ce; }
    // 00e9a8: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00e9aa: MOVE.L dst:D1 src:#6000000
    G.d[1].l(0x6000000);
    // 00e9b0: ADD.W dst:D1 src:(A6.L)+28
    G.d[1].w(ADD<W>(G.d[1].w(), G.io->w(G.a[6] + 0x28)));
    // 00e9b4: CMPI.W dst:(A6.L)+30 src:#a0
    CMP<W>(G.io->w(G.a[6] + 0x30), 0xa0);
    // 00e9ba: Bcc cond:EQ src:(e9c6)
    if (G.sr.check_condition(Condition::EQ)) { goto Le9c6; }
    // 00e9bc: ADDQ.W dst:D1 src:#1
    G.d[1].w(ADD<W>(G.d[1].w(), 1));
    // 00e9be: CMPI.W dst:(A6.L)+30 src:#d0
    CMP<W>(G.io->w(G.a[6] + 0x30), 0xd0);
    // 00e9c4: Bcc cond:NE src:(e9e2)
    if (G.sr.check_condition(Condition::NE)) { goto Le9e2; }

  Le9c6:;
    // 00e9c6: JSR src:(6600)
    F6600();
    // 00e9cc: Bcc cond:True src:(e9e2)
    goto Le9e2;

  Le9ce:;
    // 00e9ce: CMPI.W dst:(A6.L)+30 src:#150
    CMP<W>(G.io->w(G.a[6] + 0x30), 0x150);
    // 00e9d4: Bcc cond:CC src:(e9e2)
    if (G.sr.check_condition(Condition::CC)) { goto Le9e2; }
    // 00e9d6: SUBI.W dst:(A6.L)+9e src:#80
    G.io->w(G.a[6] + 0x9e, SUB<W>(G.io->w(G.a[6] + 0x9e), 0x80));
    // 00e9dc: ADDI.W dst:(A6.L)+ac src:#80
    G.io->w(G.a[6] + 0xac, ADD<W>(G.io->w(G.a[6] + 0xac), 0x80));

  Le9e2:;
    // 00e9e2: MOVEQ.L dst:D7 src:#6
    G.d[7].l(UCC(6));
    // 00e9e4: JMP src:(5ade)
    F5ade();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fe9ea()
  {
    _log_call(__func__);

    // 00e9ea: MOVE.W dst:(A6.L)+8 src:#30
    G.io->w(G.a[6] + 8, UCC(0x30));
    // 00e9f0: LEA.L dst:A0 src:(f0e4)
    G.a[0] = 0xf0e4;
    // 00e9f6: ADDA.W dst:A0 src:(A6.L)+28
    G.a[0] = ADD<L>(G.a[0], G.io->w(G.a[6] + 0x28));
    // 00e9fa: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00e9fc: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00ea02: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00ea06: MOVE.W dst:(A6.L)+12 src:(A0)+
    G.io->w(G.a[6] + 0x12, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00ea0a: MOVE.L dst:(A6.L)+14 src:(A0)+
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00ea0e: MOVE.L dst:D1 src:(A0)+
    G.d[1].l(UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00ea10: JSR src:(6820)
    F6820();
    // 00ea16: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00ea1a: SUBI.W dst:D0 src:#6800
    G.d[0].w(SUB<W>(G.d[0].w(), 0x6800));
    // 00ea1e: MOVE.W dst:(A6.L)+34 src:D0
    G.io->w(G.a[6] + 0x34, UCC(G.d[0].w()));
    // 00ea22: JSR src:(5a9a)
    F5a9a();
    // 00ea28: MOVE.L dst:(A6.L)+30 src:A0
    G.io->l(G.a[6] + 0x30, UCC(G.a[0]));
    // 00ea2c: JSR src:(4f86)
    F4f86();
    // 00ea32: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 00ea3a: Bcc cond:CS src:(ea3e)
    if (G.sr.check_condition(Condition::CS)) { goto Lea3e; }
    // 00ea3c: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));

  Lea3e:;
    // 00ea3e: MOVE.W dst:(A6.L)+24 src:D0
    G.io->w(G.a[6] + 0x24, G.d[0].w());
    // 00ea42: CLR.W dst:(A6.L)+2a
    G.io->w(G.a[6] + 0x2a, UCC(0));
    // 00ea46: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fea48()
  {
    _log_call(__func__);

    goto Lea48;

  Ld6a4:;
    // 00d6a4: JMP src:(50a0)
    F50a0();
    goto end;

  Lea48:;
    // 00ea48: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00ea4c: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00ea50: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00ea54: Bcc cond:MI src:(eafa)
    if (G.sr.check_condition(Condition::MI)) { goto Leafa; }
    // 00ea58: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00ea5c: ADDI.W dst:D0 src:#800
    G.d[0].w(ADD<W>(G.d[0].w(), 0x800));
    // 00ea60: CMPI.W dst:D0 src:#f000
    CMP<W>(G.d[0].w(), 0xf000);
    // 00ea64: Bcc cond:HI src:(d6a4)
    if (G.sr.check_condition(Condition::HI)) { goto Ld6a4; }
    // 00ea68: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x14)));
    // 00ea6c: CMP.W dst:D0 src:(A6.L)+34
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x34));
    // 00ea70: Bcc cond:CC src:(ea7a)
    if (G.sr.check_condition(Condition::CC)) { goto Lea7a; }
    // 00ea74: MOVE.W dst:(A6.L)+6 src:#30
    G.io->w(G.a[6] + 6, UCC(0x30));

  Lea7a:;
    // 00ea7a: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00ea7e: Bcc cond:EQ src:(ea8a)
    if (G.sr.check_condition(Condition::EQ)) { goto Lea8a; }
    // 00ea80: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00ea84: CMP.W dst:D0 src:(A6.L)+24
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x24));
    // 00ea88: Bcc cond:CC src:(eafa)
    if (G.sr.check_condition(Condition::CC)) { goto Leafa; }

  Lea8a:;
    // 00ea8a: JSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 00ea90: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 00ea96: CMPI.W dst:(A6.L)+28 src:#a8
    CMP<W>(G.io->w(G.a[6] + 0x28), 0xa8);
    // 00ea9c: Bcc cond:CC src:(eaf8)
    if (G.sr.check_condition(Condition::CC)) { goto Leaf8; }
    // 00ea9e: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00eaa4: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00eaa6: AND.W dst:D0 src:#1f
    G.d[0].w(AND<W>(G.d[0].w(), 0x1f));
    // 00eaaa: Bcc cond:NE src:(eaf8)
    if (G.sr.check_condition(Condition::NE)) { goto Leaf8; }
    // 00eaac: MOVE.L dst:A0 src:(A6.L)+30
    G.a[0] = G.io->l(G.a[6] + 0x30);
    // 00eab0: AND.W dst:D1 src:#60
    G.d[1].w(AND<W>(G.d[1].w(), 0x60));
    // 00eab4: Bcc cond:NE src:(eace)
    if (G.sr.check_condition(Condition::NE)) { goto Leace; }
    // 00eab6: MOVEM.W src:(A0.L)+6 regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[0] + 6));
    G.d[3].l(G.io->w(G.a[0] + 8));
    G.d[4].l(G.io->w(G.a[0] + 10));
    // 00eabc: JSR src:(6b12)
    F6b12();
    // 00eac2: MOVEM.W src:(A0.L)+c regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[0] + 12));
    G.d[3].l(G.io->w(G.a[0] + 14));
    G.d[4].l(G.io->w(G.a[0] + 0x10));
    // 00eac8: JMP src:(6b12)
    F6b12();
    goto end;

  Leace:;
    // 00eace: CMP.W dst:D1 src:#40
    CMP<W>(G.d[1].w(), 0x40);
    // 00ead2: Bcc cond:EQ src:(eae0)
    if (G.sr.check_condition(Condition::EQ)) { goto Leae0; }
    // 00ead4: MOVEM.W src:(A0) regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[0]));
    G.d[3].l(G.io->w(G.a[0] + 2));
    G.d[4].l(G.io->w(G.a[0] + 4));
    // 00ead8: JSR src:(6b12)
    F6b12();
    // 00eade: RTS
    goto end;

  Leae0:;
    // 00eae0: MOVEM.W src:(A0.L)+12 regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[0] + 0x12));
    G.d[3].l(G.io->w(G.a[0] + 0x14));
    G.d[4].l(G.io->w(G.a[0] + 0x16));
    // 00eae6: JSR src:(6b12)
    F6b12();
    // 00eaec: MOVEM.W src:(A0.L)+18 regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[0] + 0x18));
    G.d[3].l(G.io->w(G.a[0] + 0x1a));
    G.d[4].l(G.io->w(G.a[0] + 0x1c));
    // 00eaf2: JSR src:(6b12)
    F6b12();

  Leaf8:;
    // 00eaf8: RTS
    goto end;

  Leafa:;
    // 00eafa: MOVEQ.L dst:D0 src:#22
    G.d[0].l(0x22);
    // 00eafc: MOVE.L dst:D1 src:(A6.L)+14
    G.d[1].l(G.io->l(G.a[6] + 0x14));
    // 00eb00: AND.W dst:D1 src:#ff80
    G.d[1].w(AND<W>(G.d[1].w(), 0xff80));
    // 00eb04: ADDQ.W dst:D1 src:#5
    G.d[1].w(ADD<W>(G.d[1].w(), 5));
    // 00eb06: CMPI.W dst:(A6.L)+28 src:#48
    CMP<W>(G.io->w(G.a[6] + 0x28), 0x48);
    // 00eb0c: Bcc cond:CS src:(eb10)
    if (G.sr.check_condition(Condition::CS)) { goto Leb10; }
    // 00eb0e: ADDQ.W dst:D1 src:#1
    G.d[1].w(ADD<W>(G.d[1].w(), 1));

  Leb10:;
    // 00eb10: JSR src:(6600)
    F6600();
    // 00eb16: Bcc cond:True src:(736a)
    F736a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Feb1a()
  {
    _log_call(__func__);

    // 00eb1a: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00eb1e: Bcc cond:NE src:(ebb6)
    if (G.sr.check_condition(Condition::NE)) { goto Lebb6; }
    // 00eb22: CLR.W dst:(ff0042)
    G.io->w(0xff0042, 0);
    // 00eb28: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, G.a[6]);
    // 00eb2e: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x28)));
    // 00eb32: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 00eb34: MOVE.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, G.d[0].w());
    // 00eb38: MOVE.W dst:(A6.L)+16 src:#0
    G.io->w(G.a[6] + 0x16, UCC(0));
    // 00eb3e: JSR src:(6820)
    F6820();
    // 00eb44: MOVEQ.L dst:D0 src:#3
    G.d[0].l(UCC(3));
    // 00eb46: LEA.L dst:A1 src:(f060)
    G.a[1] = 0xf060;
    // 00eb4c: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;

  Leb50:;
    // 00eb50: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 00eb56: MOVE.W dst:D1 src:(A1)+
    G.d[1].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00eb58: OR.W dst:(A0.L)+2 src:D1
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[1].w()));
    // 00eb5c: MOVE.W dst:(A0.L)+4 src:(A1)+
    G.io->w(G.a[0] + 4, UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00eb60: MOVE.L dst:(A0.L)+6 src:(A1)+
    G.io->l(G.a[0] + 6, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 00eb64: MOVE.L dst:(A0.L)+a src:(A1)+
    G.io->l(G.a[0] + 10, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 00eb68: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 00eb6c: DBcc.W cond:False dst:D0 src:(eb50)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto Leb50; }
    // 00eb70: MOVEQ.L dst:D0 src:#3
    G.d[0].l(UCC(3));
    // 00eb72: LEA.L dst:A1 src:(f030)
    G.a[1] = 0xf030;
    // 00eb78: LEA.L dst:A0 src:(A6.L)+88
    G.a[0] = G.a[6] + 0x88;

  Leb7c:;
    // 00eb7c: ANDI.W dst:(A0.L)+2 src:#7ff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x7ff));
    // 00eb82: MOVE.W dst:D1 src:(A1)+
    G.d[1].w(UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00eb84: OR.W dst:(A0.L)+2 src:D1
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[1].w()));
    // 00eb88: MOVE.W dst:(A0.L)+4 src:(A1)+
    G.io->w(G.a[0] + 4, UCC(G.io->w(G.a[1])));
    G.a[1] += 2;
    // 00eb8c: MOVE.L dst:(A0.L)+6 src:(A1)+
    G.io->l(G.a[0] + 6, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 00eb90: MOVE.L dst:(A0.L)+a src:(A1)+
    G.io->l(G.a[0] + 10, UCC(G.io->l(G.a[1])));
    G.a[1] += 4;
    // 00eb94: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 00eb98: DBcc.W cond:False dst:D0 src:(eb7c)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto Leb7c; }
    // 00eb9c: MOVE.W dst:(A6.L)+22 src:(A6.L)+16
    G.io->w(G.a[6] + 0x22, G.io->w(G.a[6] + 0x16));
    // 00eba2: SUBI.W dst:(A6.L)+22 src:#600
    G.io->w(G.a[6] + 0x22, SUB<W>(G.io->w(G.a[6] + 0x22), 0x600));
    // 00eba8: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00ebaa: MOVE.L dst:D1 src:#37001000
    G.d[1].l(UCC(0x37001000));
    // 00ebb0: JMP src:(6600)
    F6600();
    goto end;

  Lebb6:;
    // 00ebb6: MOVE.W dst:(A6.L)+2 src:#5c
    G.io->w(G.a[6] + 2, 0x5c);
    // 00ebbc: CLR.L dst:(A6.L)+6
    G.io->l(G.a[6] + 6, 0);
    // 00ebc0: CLR.L dst:(A6.L)+30
    G.io->l(G.a[6] + 0x30, 0);
    // 00ebc4: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00ebca: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[5] + 0x14));
    // 00ebd0: MOVE.L dst:(A6.L)+18 src:#200
    G.io->l(G.a[6] + 0x18, 0x200);
    // 00ebd8: MOVE.L dst:(A6.L)+1c src:#400
    G.io->l(G.a[6] + 0x1c, UCC(0x400));
    // 00ebe0: LEA.L dst:A0 src:(efe8)
    G.a[0] = 0xefe8;
    // 00ebe6: MOVEQ.L dst:D7 src:#5
    G.d[7].l(UCC(5));
    // 00ebe8: JMP src:(5abc)
    F5abc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Febee()
  {
    _log_call(__func__);

    goto Lebee;

  Ld6a4:;
    // 00d6a4: JMP src:(50a0)
    F50a0();
    goto end;

  Lebee:;
    // 00ebee: MOVE.W dst:D0 src:(ff008e)
    G.d[0].w(G.io->w(0xff008e));
    // 00ebf4: ADD.W dst:(A6.L)+22 src:D0
    G.io->w(G.a[6] + 0x22, ADD<W>(G.io->w(G.a[6] + 0x22), G.d[0].w()));
    // 00ebf8: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 00ebfc: Bcc cond:NE src:(ec4a)
    if (G.sr.check_condition(Condition::NE)) { goto Lec4a; }
    // 00ebfe: CMPI.W dst:(ff0042) src:#1
    CMP<W>(G.io->w(0xff0042), 1);
    // 00ec06: Bcc cond:EQ src:(d6a4)
    if (G.sr.check_condition(Condition::EQ)) { goto Ld6a4; }
    // 00ec0a: JSR src:(6870)
    F6870();
    // 00ec10: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00ec16: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00ec18: ANDI.W dst:D1 src:#3
    G.d[1].w(AND<W>(G.d[1].w(), 3));
    // 00ec1c: Bcc cond:EQ src:(ec26)
    if (G.sr.check_condition(Condition::EQ)) { goto Lec26; }
    // 00ec1e: MOVEQ.L dst:D7 src:#7
    G.d[7].l(UCC(7));
    // 00ec20: JMP src:(5ade)
    F5ade();
    goto end;

  Lec26:;
    // 00ec26: ANDI.W dst:D0 src:#4
    G.d[0].w(AND<W>(G.d[0].w(), 4));
    // 00ec2a: MULU.W dst:D0 src:#c
    G.d[0].l(MULU(G.d[0].w(), 12));
    // 00ec2e: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 00ec30: LEA.L dst:A0 src:(f060)
    G.a[0] = 0xf060;
    // 00ec36: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00ec38: JSR src:(5abc)
    F5abc();
    // 00ec3e: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 00ec40: LEA.L dst:A2 src:(A6.L)+88
    G.a[2] = G.a[6] + 0x88;
    // 00ec44: JMP src:(5ae2)
    F5ae2();
    goto end;

  Lec4a:;
    // 00ec4a: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00ec50: ADDQ.W dst:(A6.L)+6 src:#1
    G.io->w(G.a[6] + 6, ADD<W>(G.io->w(G.a[6] + 6), 1));
    // 00ec54: JSR src:(6870)
    F6870();
    // 00ec5a: BTST.B dst:(A6.L)+33 src:#1
    BTST<B>(G.io->b(G.a[6] + 0x33), 1);
    // 00ec60: Bcc cond:NE src:(ec7c)
    if (G.sr.check_condition(Condition::NE)) { goto Lec7c; }
    // 00ec62: CMPI.W dst:(A6.L)+6 src:#30
    CMP<W>(G.io->w(G.a[6] + 6), 0x30);
    // 00ec68: Bcc cond:CS src:(ee44)
    if (G.sr.check_condition(Condition::CS)) { goto Lee44; }
    // 00ec6c: CLR.W dst:(A6.L)+6
    G.io->w(G.a[6] + 6, UCC(0));
    // 00ec70: BSET.B dst:(A6.L)+33 src:#1
    G.io->b(G.a[6] + 0x33, BSET<B>(G.io->b(G.a[6] + 0x33), 1));
    // 00ec76: BCLR.B dst:(A6) src:#5
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 5));
    // 00ec7a: RTS
    goto end;

  Lec7c:;
    // 00ec7c: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00ec82: MOVE.W dst:D1 src:#2000
    G.d[1].w(UCC(0x2000));
    // 00ec86: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 00ec8a: MOVEQ.L dst:D2 src:#5
    G.d[2].l(5);
    // 00ec8c: ANDI.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00ec90: Bcc cond:EQ src:(ec96)
    if (G.sr.check_condition(Condition::EQ)) { goto Lec96; }
    // 00ec92: MOVE.W dst:D1 src:#6000
    G.d[1].w(UCC(0x6000));

  Lec96:;
    // 00ec96: ANDI.W dst:(A0.L)+2 src:#1fff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x1fff));
    // 00ec9c: OR.W dst:(A0.L)+2 src:D1
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[1].w()));
    // 00eca0: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 00eca4: DBcc.W cond:False dst:D2 src:(ec96)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto Lec96; }
    // 00eca8: LEA.L dst:A0 src:(A5.L)+88
    G.a[0] = G.a[5] + 0x88;
    // 00ecac: MOVEQ.L dst:D2 src:#3
    G.d[2].l(UCC(3));

  Lecae:;
    // 00ecae: ANDI.W dst:(A0.L)+2 src:#1fff
    G.io->w(G.a[0] + 2, AND<W>(G.io->w(G.a[0] + 2), 0x1fff));
    // 00ecb4: OR.W dst:(A0.L)+2 src:D1
    G.io->w(G.a[0] + 2, OR<W>(G.io->w(G.a[0] + 2), G.d[1].w()));
    // 00ecb8: LEA.L dst:A0 src:(A0.L)+e
    G.a[0] += 14;
    // 00ecbc: DBcc.W cond:False dst:D2 src:(ecae)
    G.d[2].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[2].w())) { goto Lecae; }
    // 00ecc0: BTST.B dst:(A6.L)+33 src:#2
    BTST<B>(G.io->b(G.a[6] + 0x33), 2);
    // 00ecc6: Bcc cond:NE src:(ed6c)
    if (G.sr.check_condition(Condition::NE)) { goto Led6c; }
    // 00ecca: ADDI.L dst:(A6.L)+18 src:#80
    G.io->l(G.a[6] + 0x18, ADD<L>(G.io->l(G.a[6] + 0x18), 0x80));
    // 00ecd2: ADDI.L dst:(A6.L)+1c src:#100
    G.io->l(G.a[6] + 0x1c, ADD<L>(G.io->l(G.a[6] + 0x1c), 0x100));
    // 00ecda: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 00ecde: ADDI.W dst:(A0.L)+8 src:#80
    G.io->w(G.a[0] + 8, ADD<W>(G.io->w(G.a[0] + 8), 0x80));
    // 00ece4: ADDI.W dst:(A0.L)+16 src:#80
    G.io->w(G.a[0] + 0x16, ADD<W>(G.io->w(G.a[0] + 0x16), 0x80));
    // 00ecea: ADDI.W dst:(A0.L)+24 src:#80
    G.io->w(G.a[0] + 0x24, ADD<W>(G.io->w(G.a[0] + 0x24), 0x80));
    // 00ecf0: ADDI.W dst:(A0.L)+32 src:#c0
    G.io->w(G.a[0] + 0x32, ADD<W>(G.io->w(G.a[0] + 0x32), 0xc0));
    // 00ecf6: ADDI.W dst:(A0.L)+40 src:#c0
    G.io->w(G.a[0] + 0x40, ADD<W>(G.io->w(G.a[0] + 0x40), 0xc0));
    // 00ecfc: ADDI.W dst:(A0.L)+4e src:#100
    G.io->w(G.a[0] + 0x4e, ADD<W>(G.io->w(G.a[0] + 0x4e), 0x100));
    // 00ed02: ADDI.W dst:(A5.L)+22 src:#100
    G.io->w(G.a[5] + 0x22, ADD<W>(G.io->w(G.a[5] + 0x22), 0x100));
    // 00ed08: MOVEQ.L dst:D7 src:#5
    G.d[7].l(UCC(5));
    // 00ed0a: JSR src:(5ade)
    F5ade();
    // 00ed10: LEA.L dst:A2 src:(A5.L)+88
    G.a[2] = G.a[5] + 0x88;
    // 00ed14: ADDI.W dst:(A2.L)+8 src:#40
    G.io->w(G.a[2] + 8, ADD<W>(G.io->w(G.a[2] + 8), 0x40));
    // 00ed1a: ADDI.W dst:(A2.L)+16 src:#40
    G.io->w(G.a[2] + 0x16, ADD<W>(G.io->w(G.a[2] + 0x16), 0x40));
    // 00ed20: ADDI.W dst:(A2.L)+24 src:#40
    G.io->w(G.a[2] + 0x24, ADD<W>(G.io->w(G.a[2] + 0x24), 0x40));
    // 00ed26: ADDI.W dst:(A2.L)+32 src:#40
    G.io->w(G.a[2] + 0x32, ADD<W>(G.io->w(G.a[2] + 0x32), 0x40));
    // 00ed2c: CMPI.W dst:(A6.L)+6 src:#10
    CMP<W>(G.io->w(G.a[6] + 6), 0x10);
    // 00ed32: Bcc cond:CS src:(ee44)
    if (G.sr.check_condition(Condition::CS)) { goto Lee44; }
    // 00ed36: CMPI.W dst:(A6.L)+6 src:#40
    CMP<W>(G.io->w(G.a[6] + 6), 0x40);
    // 00ed3c: Bcc cond:CS src:(ed5c)
    if (G.sr.check_condition(Condition::CS)) { goto Led5c; }
    // 00ed3e: CLR.W dst:(A6.L)+6
    G.io->w(G.a[6] + 6, UCC(0));
    // 00ed42: BSET.B dst:(A6.L)+33 src:#2
    G.io->b(G.a[6] + 0x33, BSET<B>(G.io->b(G.a[6] + 0x33), 2));
    // 00ed48: MOVE.L dst:(A6.L)+18 src:#2000
    G.io->l(G.a[6] + 0x18, 0x2000);
    // 00ed50: MOVE.L dst:(A6.L)+1c src:#4000
    G.io->l(G.a[6] + 0x1c, UCC(0x4000));
    // 00ed58: Bcc cond:True src:(ed9a)
    goto Led9a;

  Led5c:;
    // 00ed5c: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 00ed64: Bcc cond:CS src:(ee44)
    if (G.sr.check_condition(Condition::CS)) { goto Lee44; }
    // 00ed68: Bcc cond:True src:(ed9a)
    goto Led9a;

  Led6c:;
    // 00ed6c: BTST.B dst:(A6.L)+33 src:#3
    BTST<B>(G.io->b(G.a[6] + 0x33), 3);
    // 00ed72: Bcc cond:NE src:(edb6)
    if (G.sr.check_condition(Condition::NE)) { goto Ledb6; }
    // 00ed74: MOVEQ.L dst:D7 src:#5
    G.d[7].l(UCC(5));
    // 00ed76: JSR src:(5ade)
    F5ade();
    // 00ed7c: LEA.L dst:A2 src:(A5.L)+88
    G.a[2] = G.a[5] + 0x88;
    // 00ed80: MOVEQ.L dst:D7 src:#3
    G.d[7].l(UCC(3));
    // 00ed82: JSR src:(5ae2)
    F5ae2();
    // 00ed88: CMPI.W dst:(A6.L)+6 src:#60
    CMP<W>(G.io->w(G.a[6] + 6), 0x60);
    // 00ed8e: Bcc cond:CS src:(ed9a)
    if (G.sr.check_condition(Condition::CS)) { goto Led9a; }
    // 00ed90: CLR.W dst:(A6.L)+6
    G.io->w(G.a[6] + 6, UCC(0));
    // 00ed94: BSET.B dst:(A6.L)+33 src:#3
    G.io->b(G.a[6] + 0x33, BSET<B>(G.io->b(G.a[6] + 0x33), 3));

  Led9a:;
    // 00ed9a: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00eda0: AND.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00eda4: Bcc cond:NE src:(ee44)
    if (G.sr.check_condition(Condition::NE)) { goto Lee44; }
    // 00eda8: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00edaa: MOVE.L dst:D1 src:#22000000
    G.d[1].l(UCC(0x22000000));
    // 00edb0: JMP src:(6600)
    F6600();
    goto end;

  Ledb6:;
    // 00edb6: BTST.B dst:(A6.L)+33 src:#4
    BTST<B>(G.io->b(G.a[6] + 0x33), 4);
    // 00edbc: Bcc cond:NE src:(ee46)
    if (G.sr.check_condition(Condition::NE)) { goto Lee46; }
    // 00edc0: SUBI.L dst:(A6.L)+18 src:#80
    G.io->l(G.a[6] + 0x18, SUB<L>(G.io->l(G.a[6] + 0x18), 0x80));
    // 00edc8: SUBI.L dst:(A6.L)+1c src:#100
    G.io->l(G.a[6] + 0x1c, SUB<L>(G.io->l(G.a[6] + 0x1c), 0x100));
    // 00edd0: LEA.L dst:A0 src:(A6.L)+50
    G.a[0] = G.a[6] + 0x50;
    // 00edd4: SUBI.W dst:(A0.L)+8 src:#80
    G.io->w(G.a[0] + 8, SUB<W>(G.io->w(G.a[0] + 8), 0x80));
    // 00edda: SUBI.W dst:(A0.L)+16 src:#80
    G.io->w(G.a[0] + 0x16, SUB<W>(G.io->w(G.a[0] + 0x16), 0x80));
    // 00ede0: SUBI.W dst:(A0.L)+24 src:#80
    G.io->w(G.a[0] + 0x24, SUB<W>(G.io->w(G.a[0] + 0x24), 0x80));
    // 00ede6: SUBI.W dst:(A0.L)+32 src:#c0
    G.io->w(G.a[0] + 0x32, SUB<W>(G.io->w(G.a[0] + 0x32), 0xc0));
    // 00edec: SUBI.W dst:(A0.L)+40 src:#c0
    G.io->w(G.a[0] + 0x40, SUB<W>(G.io->w(G.a[0] + 0x40), 0xc0));
    // 00edf2: SUBI.W dst:(A0.L)+4e src:#100
    G.io->w(G.a[0] + 0x4e, SUB<W>(G.io->w(G.a[0] + 0x4e), 0x100));
    // 00edf8: SUBI.W dst:(A5.L)+22 src:#100
    G.io->w(G.a[5] + 0x22, SUB<W>(G.io->w(G.a[5] + 0x22), 0x100));
    // 00edfe: MOVEQ.L dst:D7 src:#5
    G.d[7].l(UCC(5));
    // 00ee00: JSR src:(5ade)
    F5ade();
    // 00ee06: LEA.L dst:A2 src:(A5.L)+88
    G.a[2] = G.a[5] + 0x88;
    // 00ee0a: SUBI.W dst:(A2.L)+8 src:#40
    G.io->w(G.a[2] + 8, SUB<W>(G.io->w(G.a[2] + 8), 0x40));
    // 00ee10: SUBI.W dst:(A2.L)+16 src:#40
    G.io->w(G.a[2] + 0x16, SUB<W>(G.io->w(G.a[2] + 0x16), 0x40));
    // 00ee16: SUBI.W dst:(A2.L)+24 src:#40
    G.io->w(G.a[2] + 0x24, SUB<W>(G.io->w(G.a[2] + 0x24), 0x40));
    // 00ee1c: SUBI.W dst:(A2.L)+32 src:#40
    G.io->w(G.a[2] + 0x32, SUB<W>(G.io->w(G.a[2] + 0x32), 0x40));
    // 00ee22: CMPI.W dst:(A6.L)+6 src:#30
    CMP<W>(G.io->w(G.a[6] + 6), 0x30);
    // 00ee28: Bcc cond:CS src:(ed9a)
    if (G.sr.check_condition(Condition::CS)) { goto Led9a; }
    // 00ee2c: CMPI.W dst:(A6.L)+6 src:#40
    CMP<W>(G.io->w(G.a[6] + 6), 0x40);
    // 00ee32: Bcc cond:CS src:(ee44)
    if (G.sr.check_condition(Condition::CS)) { goto Lee44; }
    // 00ee36: CLR.W dst:(A6.L)+6
    G.io->w(G.a[6] + 6, UCC(0));
    // 00ee3a: BSET.B dst:(A6.L)+33 src:#4
    G.io->b(G.a[6] + 0x33, BSET<B>(G.io->b(G.a[6] + 0x33), 4));
    // 00ee40: BSET.B dst:(A6) src:#5
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 5));

  Lee44:;
    // 00ee44: RTS
    goto end;

  Lee46:;
    // 00ee46: CMPI.W dst:(A6.L)+6 src:#30
    CMP<W>(G.io->w(G.a[6] + 6), 0x30);
    // 00ee4c: Bcc cond:CS src:(ee44)
    if (G.sr.check_condition(Condition::CS)) { goto Lee44; }
    // 00ee4e: MOVE.W dst:(ff0042) src:#1
    G.io->w(0xff0042, UCC(1));
    // 00ee56: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Fee5c()
  {
    _log_call(__func__);

    // 00ee5c: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00ee62: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(UCC(G.io->w(0xff0844)));
    // 00ee68: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 00ee6a: ADD.W dst:D0 src:#e
    G.d[0].w(ADD<W>(G.d[0].w(), 14));
    // 00ee6e: MOVE.W dst:(A6.L)+6 src:D0
    G.io->w(G.a[6] + 6, G.d[0].w());
    // 00ee72: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 00ee78: AND.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 00ee7c: ASL.W dst:D0 src:#1
    G.d[0].w(ASL<W>(G.d[0].w(), 1));
    // 00ee7e: MOVE.W dst:(A6.L)+8 src:(D0.W)+eeaa
    G.io->w(G.a[6] + 8, G.io->w(G.d[0].w() + 0xeeaa));
    // 00ee84: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 00ee8a: ORI.W dst:(A6.L)+10 src:#6000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x6000));
    // 00ee90: MOVE.W dst:(A6.L)+14 src:(A5.L)+14
    G.io->w(G.a[6] + 0x14, G.io->w(G.a[5] + 0x14));
    // 00ee96: MOVE.W dst:(A6.L)+16 src:(A5.L)+22
    G.io->w(G.a[6] + 0x16, G.io->w(G.a[5] + 0x22));
    // 00ee9c: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, 0);
    // 00eea0: MOVE.W dst:D1 src:#605
    G.d[1].w(UCC(0x605));
    // 00eea4: JMP src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Feeb2()
  {
    _log_call(__func__);

    goto Leeb2;

  Ld6a4:;
    // 00d6a4: JMP src:(50a0)
    F50a0();
    goto end;

  Leeb2:;
    // 00eeb2: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 00eeb8: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00eebc: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00eec0: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00eec4: Bcc cond:MI src:(736a)
    if (G.sr.check_condition(Condition::MI)) {
      F736a();
      goto end;
    }
    // 00eec8: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 00eecc: Bcc cond:NE src:(736a)
    if (G.sr.check_condition(Condition::NE)) {
      F736a();
      goto end;
    }
    // 00eed0: JSR src:(675a)
    F675a();
    // 00eed6: Bcc cond:CC src:(d6a4)
    if (G.sr.check_condition(Condition::CC)) { goto Ld6a4; }
    // 00eeda: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 00eee2: Bcc cond:NE src:(ef4a)
    if (G.sr.check_condition(Condition::NE)) { goto Lef4a; }
    // 00eee4: JSR src:(6870)
    F6870();
    // 00eeea: ADDQ.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, ADD<W>(G.io->w(G.a[6] + 0x24), 1));
    // 00eeee: CMPI.W dst:(A6.L)+24 src:#8
    CMP<W>(G.io->w(G.a[6] + 0x24), 8);
    // 00eef4: Bcc cond:CC src:(ef2c)
    if (G.sr.check_condition(Condition::CC)) { goto Lef2c; }
    // 00eef6: MOVE.W dst:(A6.L)+16 src:(A5.L)+22
    G.io->w(G.a[6] + 0x16, G.io->w(G.a[5] + 0x22));
    // 00eefc: MOVE.W dst:D0 src:(A6.L)+24
    G.d[0].w(UCC(G.io->w(G.a[6] + 0x24)));
    // 00ef00: LSL.W dst:D0 src:#7
    G.d[0].w(LSL<W>(G.d[0].w(), 7));
    // 00ef02: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00ef04: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 00ef08: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00ef0e: MOVE.W dst:D1 src:#6000
    G.d[1].w(0x6000);
    // 00ef12: ANDI.W dst:D0 src:#1
    G.d[0].w(AND<W>(G.d[0].w(), 1));
    // 00ef16: Bcc cond:NE src:(ef1c)
    if (G.sr.check_condition(Condition::NE)) { goto Lef1c; }
    // 00ef18: MOVE.W dst:D1 src:#0
    G.d[1].w(UCC(0));

  Lef1c:;
    // 00ef1c: ANDI.W dst:(A6.L)+10 src:#1fff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x1fff));
    // 00ef22: OR.W dst:(A6.L)+10 src:D1
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[1].w()));
    // 00ef26: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  Lef2c:;
    // 00ef2c: BCLR.B dst:(A6) src:#5
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 5));
    // 00ef30: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 00ef38: ANDI.W dst:(A6.L)+10 src:#1fff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x1fff));
    // 00ef3e: ORI.W dst:(A6.L)+10 src:#6000
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x6000));
    // 00ef44: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  Lef4a:;
    // 00ef4a: JSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 00ef50: BTST.B dst:(ff0842) src:#7
    BTST<B>(G.io->b(0xff0842), 7);
    // 00ef58: Bcc cond:EQ src:(ef84)
    if (G.sr.check_condition(Condition::EQ)) { goto Lef84; }
    // 00ef5a: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 00ef62: Bcc cond:EQ src:(ef84)
    if (G.sr.check_condition(Condition::EQ)) { goto Lef84; }
    // 00ef64: CMPI.W dst:(ff0844) src:#2
    CMP<W>(G.io->w(0xff0844), 2);
    // 00ef6c: Bcc cond:CC src:(ef78)
    if (G.sr.check_condition(Condition::CC)) { goto Lef78; }
    // 00ef6e: BTST.B dst:(ff0077) src:#1
    BTST<B>(G.io->b(0xff0077), 1);
    // 00ef76: Bcc cond:EQ src:(ef84)
    if (G.sr.check_condition(Condition::EQ)) { goto Lef84; }

  Lef78:;
    // 00ef78: MOVEQ.L dst:D4 src:#1
    G.d[4].l(UCC(1));
    // 00ef7a: JSR src:(66e2)
    F66e2();
    // 00ef80: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, UCC(G.d[1].w()));

  Lef84:;
    // 00ef84: MOVE.W dst:D1 src:#605
    G.d[1].w(0x605);
    // 00ef88: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 00ef8a: CMPI.W dst:(A6.L)+8 src:#8
    CMP<W>(G.io->w(G.a[6] + 8), 8);
    // 00ef90: Bcc cond:CS src:(efba)
    if (G.sr.check_condition(Condition::CS)) { goto Lefba; }
    // 00ef92: CMPI.W dst:(A6.L)+8 src:#18
    CMP<W>(G.io->w(G.a[6] + 8), 0x18);
    // 00ef98: Bcc cond:CS src:(efb2)
    if (G.sr.check_condition(Condition::CS)) { goto Lefb2; }
    // 00ef9a: CMPI.W dst:(A6.L)+8 src:#28
    CMP<W>(G.io->w(G.a[6] + 8), 0x28);
    // 00efa0: Bcc cond:CS src:(efba)
    if (G.sr.check_condition(Condition::CS)) { goto Lefba; }
    // 00efa2: CMPI.W dst:(A6.L)+8 src:#38
    CMP<W>(G.io->w(G.a[6] + 8), 0x38);
    // 00efa8: Bcc cond:CC src:(efba)
    if (G.sr.check_condition(Condition::CC)) { goto Lefba; }
    // 00efaa: MOVE.W dst:D1 src:#5f3
    G.d[1].w(0x5f3);
    // 00efae: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 00efb0: Bcc cond:True src:(efba)
    goto Lefba;

  Lefb2:;
    // 00efb2: MOVE.W dst:D1 src:#5f3
    G.d[1].w(0x5f3);
    // 00efb6: MOVE.W dst:D0 src:#800
    G.d[0].w(UCC(0x800));

  Lefba:;
    // 00efba: BTST.B dst:(ff0077) src:#2
    BTST<B>(G.io->b(0xff0077), 2);
    // 00efc2: Bcc cond:EQ src:(efc8)
    if (G.sr.check_condition(Condition::EQ)) { goto Lefc8; }
    // 00efc4: ADD.W dst:D1 src:#9
    G.d[1].w(ADD<W>(G.d[1].w(), 9));

  Lefc8:;
    // 00efc8: CMP.W dst:D1 src:(A6.L)+44
    CMP<W>(G.d[1].w(), G.io->w(G.a[6] + 0x44));
    // 00efcc: Bcc cond:NE src:(efd4)
    if (G.sr.check_condition(Condition::NE)) { goto Lefd4; }
    // 00efce: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  Lefd4:;
    // 00efd4: ANDI.W dst:(A6.L)+10 src:#e7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0xe7ff));
    // 00efda: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 00efde: MOVE.W dst:(A6.L)+44 src:D1
    G.io->w(G.a[6] + 0x44, UCC(G.d[1].w()));
    // 00efe2: JMP src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Ff6d4()
  {
    _log_call(__func__);

    // 00f6d4: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00f6d8: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00f6dc: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00f6de: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 00f6e0: Bcc cond:CC src:(f7c2)
    if (G.sr.check_condition(Condition::CC)) { goto Lf7c2; }
    // 00f6e4: TST.W src:D1
    TST<W>(G.d[1].w());
    // 00f6e6: Bcc cond:NE src:(f77a)
    if (G.sr.check_condition(Condition::NE)) { goto Lf77a; }
    // 00f6ea: BCLR.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 3));
    // 00f6f0: JSR src:(50e6)
    F50e6();
    // 00f6f6: SUBI.W dst:(A6.L)+14 src:#1f80
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x1f80));
    // 00f6fc: MOVE.W dst:(ff0042) src:#0
    G.io->w(0xff0042, 0);
    // 00f704: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, UCC(G.a[6]));
    // 00f70a: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00f710: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00f716: Bcc cond:EQ src:(f72e)
    if (G.sr.check_condition(Condition::EQ)) { goto Lf72e; }
    // 00f718: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 00f71e: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00f726: Bcc cond:NE src:(f72e)
    if (G.sr.check_condition(Condition::NE)) { goto Lf72e; }
    // 00f728: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  Lf72e:;
    // 00f72e: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00f734: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00f736: MOVE.W dst:(A6.L)+3e src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3e, G.io->w(G.a[0] + G.d[0].w()));
    // 00f73c: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00f73e: MOVE.L dst:D1 src:#38001000
    G.d[1].l(UCC(0x38001000));
    // 00f744: JSR src:(6600)
    F6600();
    // 00f74a: MOVEQ.L dst:D4 src:#2
    G.d[4].l(UCC(2));
    // 00f74c: LEA.L dst:A0 src:(fb7e)
    G.a[0] = 0xfb7e;
    // 00f752: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lf754:;
    // 00f754: MOVE.L dst:D1 src:#26000000
    G.d[1].l(UCC(0x26000000));
    // 00f75a: OR.W dst:D1 src:(A0)+
    G.d[1].w(OR<W>(G.d[1].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00f75c: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00f75e: JSR src:(6600)
    F6600();
    // 00f764: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00f766: DBcc.W cond:False dst:D4 src:(f754)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lf754; }
    // 00f76a: MOVE.L dst:D1 src:#38002000
    G.d[1].l(UCC(0x38002000));
    // 00f770: JSR src:(6600)
    F6600();
    // 00f776: Bcc cond:True src:(f786)
    goto Lf786;

  Lf77a:;
    // 00f77a: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00f780: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));

  Lf786:;
    // 00f786: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 00f78a: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, 0);
    // 00f78e: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 00f792: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 00f796: CLR.W dst:(A6.L)+3c
    G.io->w(G.a[6] + 0x3c, 0);
    // 00f79a: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00f79e: ANDI.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 00f7a2: MULU.W dst:D0 src:#30
    G.d[0].l(MULU(G.d[0].w(), 0x30));
    // 00f7a6: LEA.L dst:A0 src:(fb84)
    G.a[0] = 0xfb84;
    // 00f7ac: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00f7ae: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00f7b2: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00f7b6: MOVE.L dst:(A6.L)+30 src:(A0)+
    G.io->l(G.a[6] + 0x30, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00f7ba: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00f7bc: JMP src:(5abc)
    F5abc();
    goto end;

  Lf7c2:;
    // 00f7c2: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00f7c6: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00f7ca: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 00f7cc: Bcc cond:NE src:(f860)
    if (G.sr.check_condition(Condition::NE)) { goto Lf860; }
    // 00f7d0: BCLR.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 3));
    // 00f7d6: JSR src:(50e6)
    F50e6();
    // 00f7dc: SUBI.W dst:(A6.L)+14 src:#1f80
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x1f80));
    // 00f7e2: MOVE.W dst:(ff0044) src:#0
    G.io->w(0xff0044, 0);
    // 00f7ea: MOVE.L dst:(ff004a) src:A6
    G.io->l(0xff004a, UCC(G.a[6]));
    // 00f7f0: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00f7f6: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00f7fc: Bcc cond:EQ src:(f814)
    if (G.sr.check_condition(Condition::EQ)) { goto Lf814; }
    // 00f7fe: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 00f804: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00f80c: Bcc cond:NE src:(f814)
    if (G.sr.check_condition(Condition::NE)) { goto Lf814; }
    // 00f80e: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  Lf814:;
    // 00f814: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00f81a: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00f81c: MOVE.W dst:(A6.L)+3e src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3e, G.io->w(G.a[0] + G.d[0].w()));
    // 00f822: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00f824: MOVE.L dst:D1 src:#38009000
    G.d[1].l(UCC(0x38009000));
    // 00f82a: JSR src:(6600)
    F6600();
    // 00f830: MOVEQ.L dst:D4 src:#2
    G.d[4].l(UCC(2));
    // 00f832: LEA.L dst:A0 src:(fb7e)
    G.a[0] = 0xfb7e;
    // 00f838: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lf83a:;
    // 00f83a: MOVE.L dst:D1 src:#26001000
    G.d[1].l(UCC(0x26001000));
    // 00f840: OR.W dst:D1 src:(A0)+
    G.d[1].w(OR<W>(G.d[1].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00f842: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00f844: JSR src:(6600)
    F6600();
    // 00f84a: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00f84c: DBcc.W cond:False dst:D4 src:(f83a)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lf83a; }
    // 00f850: MOVE.L dst:D1 src:#3800a000
    G.d[1].l(UCC(0x3800a000));
    // 00f856: JSR src:(6600)
    F6600();
    // 00f85c: Bcc cond:True src:(f786)
    goto Lf786;

  Lf860:;
    // 00f860: MOVE.L dst:A5 src:(ff004a)
    G.a[5] = G.io->l(0xff004a);
    // 00f866: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 00f86c: Bcc cond:True src:(f786)
    goto Lf786;

  end:
    _log_ret(__func__);
  }

  void Ff870()
  {
    _log_call(__func__);

    // 00f870: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00f874: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00f878: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00f87a: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 00f87c: Bcc cond:CC src:(f9a4)
    if (G.sr.check_condition(Condition::CC)) { goto Lf9a4; }
    // 00f880: TST.W src:D1
    TST<W>(G.d[1].w());
    // 00f882: Bcc cond:NE src:(fa04)
    if (G.sr.check_condition(Condition::NE)) { goto Lfa04; }
    // 00f886: JSR src:(5114)
    F5114();
    // 00f88c: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00f890: ADDI.W dst:D0 src:#1f80
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1f80));
    // 00f894: CMPI.W dst:D0 src:#d000
    CMP<W>(G.d[0].w(), 0xd000);
    // 00f898: Bcc cond:CC src:(f8a2)
    if (G.sr.check_condition(Condition::CC)) { goto Lf8a2; }
    // 00f89a: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 00f8a0: Bcc cond:True src:(f8ac)
    goto Lf8ac;

  Lf8a2:;
    // 00f8a2: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 00f8a8: Bcc cond:NE src:(f996)
    if (G.sr.check_condition(Condition::NE)) { goto Lf996; }

  Lf8ac:;
    // 00f8ac: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00f8b0: Bcc cond:NE src:(f8d0)
    if (G.sr.check_condition(Condition::NE)) { goto Lf8d0; }
    // 00f8b2: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00f8b6: Bcc cond:MI src:(f8c8)
    if (G.sr.check_condition(Condition::MI)) { goto Lf8c8; }
    // 00f8b8: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00f8bc: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00f8c0: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 00f8c4: Bcc cond:CS src:(f8d4)
    if (G.sr.check_condition(Condition::CS)) { goto Lf8d4; }

  Lf8c8:;
    // 00f8c8: BSET.B dst:(ff0043) src:#6
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 6));

  Lf8d0:;
    // 00f8d0: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  Lf8d4:;
    // 00f8d4: JSR src:(3eb2)
    F3eb2();
    // 00f8da: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00f8dc: JSR src:(5ade)
    F5ade();
    // 00f8e2: JSR src:(6658)
    F6658();
    // 00f8e8: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00f8ea: SUBI.W dst:D1 src:#2c
    G.d[1].w(SUB<W>(G.d[1].w(), 0x2c));
    // 00f8ee: CMPI.W dst:D1 src:#c
    CMP<W>(G.d[1].w(), 12);
    // 00f8f2: Bcc cond:HI src:(f916)
    if (G.sr.check_condition(Condition::HI)) { goto Lf916; }
    // 00f8f4: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00f8fa: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00f8fe: Bcc cond:NE src:(f916)
    if (G.sr.check_condition(Condition::NE)) { goto Lf916; }
    // 00f900: MOVE.W dst:D0 src:#30
    G.d[0].w(0x30);
    // 00f904: MOVE.W dst:D3 src:#e800
    G.d[3].w(0xe800);
    // 00f908: MOVE.W dst:D4 src:#fb00
    G.d[4].w(0xfb00);
    // 00f90c: ADD.W dst:D0 src:#4000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x4000));
    // 00f910: JSR src:(6bd0)
    F6bd0();

  Lf916:;
    // 00f916: JSR src:(6658)
    F6658();
    // 00f91c: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00f91e: SUBI.W dst:D1 src:#c
    G.d[1].w(SUB<W>(G.d[1].w(), 12));
    // 00f922: CMPI.W dst:D1 src:#8
    CMP<W>(G.d[1].w(), 8);
    // 00f926: Bcc cond:HI src:(f94c)
    if (G.sr.check_condition(Condition::HI)) { goto Lf94c; }
    // 00f928: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00f92e: ADDQ.W dst:D0 src:#8
    G.d[0].w(ADD<W>(G.d[0].w(), 8));
    // 00f930: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00f934: Bcc cond:NE src:(f94c)
    if (G.sr.check_condition(Condition::NE)) { goto Lf94c; }
    // 00f936: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 00f93a: MOVE.W dst:D3 src:#1800
    G.d[3].w(0x1800);
    // 00f93e: MOVE.W dst:D4 src:#0
    G.d[4].w(0);
    // 00f942: ADD.W dst:D0 src:#4000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x4000));
    // 00f946: JSR src:(6bd0)
    F6bd0();

  Lf94c:;
    // 00f94c: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00f952: ADDQ.W dst:D0 src:#3
    G.d[0].w(ADD<W>(G.d[0].w(), 3));
    // 00f954: ANDI.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 00f958: Bcc cond:NE src:(f994)
    if (G.sr.check_condition(Condition::NE)) { goto Lf994; }
    // 00f95a: MOVE.W dst:D0 src:#30
    G.d[0].w(UCC(0x30));
    // 00f95e: MOVEM.W src:(A6.L)+14 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x14));
    G.d[4].l(G.io->w(G.a[6] + 0x16));
    // 00f964: ADDI.W dst:D3 src:#fc00
    G.d[3].w(ADD<W>(G.d[3].w(), 0xfc00));
    // 00f968: ADDI.W dst:D4 src:#400
    G.d[4].w(ADD<W>(G.d[4].w(), 0x400));
    // 00f96c: MOVE.W dst:-(USP) src:#0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(0));

  Lf970:;
    // 00f970: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 00f974: ORI.W dst:D0 src:#8000
    G.d[0].w(OR<W>(G.d[0].w(), 0x8000));
    // 00f978: JSR src:(6b22)
    F6b22();
    // 00f97e: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00f982: ADDQ.W dst:D0 src:#8
    G.d[0].w(ADD<W>(G.d[0].w(), 8));
    // 00f984: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00f988: CMPI.W dst:(USP) src:#3
    CMP<W>(G.io->w(G.a[7]), 3);
    // 00f98c: Bcc cond:CC src:(f992)
    if (G.sr.check_condition(Condition::CC)) { goto Lf992; }
    // 00f98e: ADDQ.W dst:(USP) src:#1
    G.io->w(G.a[7], ADD<W>(G.io->w(G.a[7]), 1));
    // 00f990: Bcc cond:True src:(f970)
    goto Lf970;

  Lf992:;
    // 00f992: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  Lf994:;
    // 00f994: RTS
    goto end;

  Lf996:;
    // 00f996: BSET.B dst:(ff0043) src:#7
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 7));
    // 00f99e: JMP src:(50a0)
    F50a0();
    goto end;

  Lf9a4:;
    // 00f9a4: TST.W src:D0
    TST<W>(G.d[0].w());
    // 00f9a6: Bcc cond:NE src:(fa68)
    if (G.sr.check_condition(Condition::NE)) { goto Lfa68; }
    // 00f9aa: JSR src:(5114)
    F5114();
    // 00f9b0: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00f9b4: ADDI.W dst:D0 src:#1f80
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1f80));
    // 00f9b8: CMPI.W dst:D0 src:#d000
    CMP<W>(G.d[0].w(), 0xd000);
    // 00f9bc: Bcc cond:CC src:(f9c6)
    if (G.sr.check_condition(Condition::CC)) { goto Lf9c6; }
    // 00f9be: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 00f9c4: Bcc cond:True src:(f9ce)
    goto Lf9ce;

  Lf9c6:;
    // 00f9c6: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 00f9cc: Bcc cond:NE src:(f9f6)
    if (G.sr.check_condition(Condition::NE)) { goto Lf9f6; }

  Lf9ce:;
    // 00f9ce: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00f9d2: Bcc cond:NE src:(f9f2)
    if (G.sr.check_condition(Condition::NE)) { goto Lf9f2; }
    // 00f9d4: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00f9d8: Bcc cond:MI src:(f9ea)
    if (G.sr.check_condition(Condition::MI)) { goto Lf9ea; }
    // 00f9da: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00f9de: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00f9e2: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 00f9e6: Bcc cond:CS src:(f8d4)
    if (G.sr.check_condition(Condition::CS)) { goto Lf8d4; }

  Lf9ea:;
    // 00f9ea: BSET.B dst:(ff0045) src:#6
    G.io->b(0xff0045, BSET<B>(G.io->b(0xff0045), 6));

  Lf9f2:;
    // 00f9f2: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  Lf9f6:;
    // 00f9f6: BSET.B dst:(ff0045) src:#7
    G.io->b(0xff0045, BSET<B>(G.io->b(0xff0045), 7));
    // 00f9fe: JMP src:(50a0)
    F50a0();
    goto end;

  Lfa04:;
    // 00fa04: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00fa08: Bcc cond:EQ src:(fa0e)
    if (G.sr.check_condition(Condition::EQ)) { goto Lfa0e; }
    // 00fa0a: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  Lfa0e:;
    // 00fa0e: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 00fa16: Bcc cond:NE src:(fa98)
    if (G.sr.check_condition(Condition::NE)) {
      Ffa98();
      goto end;
    }
    // 00fa1a: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 00fa22: Bcc cond:EQ src:(fa2a)
    if (G.sr.check_condition(Condition::EQ)) { goto Lfa2a; }
    // 00fa24: JMP src:(50a0)
    F50a0();
    goto end;

  Lfa2a:;
    // 00fa2a: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));

  Lfa30:;
    // 00fa30: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00fa34: Bcc cond:EQ src:(fa4c)
    if (G.sr.check_condition(Condition::EQ)) { goto Lfa4c; }
    // 00fa36: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(G.io->w(G.a[6] + 12));
    // 00fa3a: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 00fa3e: ADD.W dst:(A5.L)+c src:D0
    G.io->w(G.a[5] + 12, ADD<W>(G.io->w(G.a[5] + 12), G.d[0].w()));
    // 00fa42: MOVE.W dst:D0 src:#14
    G.d[0].w(UCC(0x14));
    // 00fa46: JSR src:(654c)
    F654c();

  Lfa4c:;
    // 00fa4c: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 00fa52: MOVEM.W src:(A6.L)+30 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x30));
    G.d[1].l(G.io->w(G.a[6] + 0x32));
    // 00fa58: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00fa5c: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00fa60: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00fa62: JMP src:(5ade)
    F5ade();
    goto end;

  Lfa68:;
    // 00fa68: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00fa6c: Bcc cond:EQ src:(fa72)
    if (G.sr.check_condition(Condition::EQ)) { goto Lfa72; }
    // 00fa6e: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  Lfa72:;
    // 00fa72: BTST.B dst:(ff0045) src:#6
    BTST<B>(G.io->b(0xff0045), 6);
    // 00fa7a: Bcc cond:NE src:(fa98)
    if (G.sr.check_condition(Condition::NE)) {
      Ffa98();
      goto end;
    }
    // 00fa7e: BTST.B dst:(ff0045) src:#7
    BTST<B>(G.io->b(0xff0045), 7);
    // 00fa86: Bcc cond:EQ src:(fa8e)
    if (G.sr.check_condition(Condition::EQ)) { goto Lfa8e; }
    // 00fa88: JMP src:(50a0)
    F50a0();
    goto end;

  Lfa8e:;
    // 00fa8e: MOVE.L dst:A5 src:(ff004a)
    G.a[5] = UCC(G.io->l(0xff004a));
    // 00fa94: Bcc cond:True src:(fa30)
    goto Lfa30;

  end:
    _log_ret(__func__);
  }

  void Ffa98()
  {
    _log_call(__func__);

    // 00fa98: BSET.B dst:(A6) src:#4
    G.io->b(G.a[6], BSET<B>(G.io->b(G.a[6]), 4));
    // 00fa9c: Bcc cond:NE src:(faa8)
    if (G.sr.check_condition(Condition::NE)) { goto Lfaa8; }
    // 00fa9e: MOVE.W dst:D0 src:#500
    G.d[0].w(UCC(0x500));
    // 00faa2: JSR src:(62d0)
    F62d0();

  Lfaa8:;
    // 00faa8: LEA.L dst:A1 src:(A6.L)+6c
    G.a[1] = G.a[6] + 0x6c;
    // 00faac: LEA.L dst:A5 src:(A6.L)+34
    G.a[5] = G.a[6] + 0x34;
    // 00fab0: CMPI.W dst:(A6.L)+3c src:#44
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x44);
    // 00fab6: Bcc cond:CC src:(fae8)
    if (G.sr.check_condition(Condition::CC)) { goto Lfae8; }
    // 00fab8: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00fabc: Bcc cond:NE src:(fae2)
    if (G.sr.check_condition(Condition::NE)) { goto Lfae2; }
    // 00fabe: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00fac0: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00fac6: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00facc: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00fad2: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00fad6: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 00fadc: MOVE.L dst:(A6.L)+72 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x72, UCC(G.io->l(G.a[0] + G.d[0].w())));

  Lfae2:;
    // 00fae2: JSR src:(75ca)
    F75ca();

  Lfae8:;
    // 00fae8: CMPI.W dst:(A6.L)+3c src:#48
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x48);
    // 00faee: Bcc cond:CC src:(fb30)
    if (G.sr.check_condition(Condition::CC)) { goto Lfb30; }
    // 00faf0: CMPI.W dst:(A6.L)+3c src:#6
    CMP<W>(G.io->w(G.a[6] + 0x3c), 6);
    // 00faf6: Bcc cond:CS src:(fb72)
    if (G.sr.check_condition(Condition::CS)) { goto Lfb72; }
    // 00faf8: LEA.L dst:A1 src:(A6.L)+5e
    G.a[1] = G.a[6] + 0x5e;
    // 00fafc: LEA.L dst:A5 src:(A6.L)+36
    G.a[5] = G.a[6] + 0x36;
    // 00fb00: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00fb04: Bcc cond:NE src:(fb2a)
    if (G.sr.check_condition(Condition::NE)) { goto Lfb2a; }
    // 00fb06: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00fb08: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00fb0e: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00fb14: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00fb1a: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00fb1e: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 00fb24: MOVE.L dst:(A6.L)+64 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x64, UCC(G.io->l(G.a[0] + G.d[0].w())));

  Lfb2a:;
    // 00fb2a: JSR src:(75ca)
    F75ca();

  Lfb30:;
    // 00fb30: CMPI.W dst:(A6.L)+3c src:#4e
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x4e);
    // 00fb36: Bcc cond:CC src:(fb78)
    if (G.sr.check_condition(Condition::CC)) { goto Lfb78; }
    // 00fb38: CMPI.W dst:(A6.L)+3c src:#c
    CMP<W>(G.io->w(G.a[6] + 0x3c), 12);
    // 00fb3e: Bcc cond:CS src:(fb72)
    if (G.sr.check_condition(Condition::CS)) { goto Lfb72; }
    // 00fb40: LEA.L dst:A1 src:(A6.L)+50
    G.a[1] = G.a[6] + 0x50;
    // 00fb44: LEA.L dst:A5 src:(A6.L)+38
    G.a[5] = G.a[6] + 0x38;
    // 00fb48: BTST.B dst:(A5) src:#7
    BTST<B>(G.io->b(G.a[5]), 7);
    // 00fb4c: Bcc cond:NE src:(fb6c)
    if (G.sr.check_condition(Condition::NE)) { goto Lfb6c; }
    // 00fb4e: CLR.W dst:(A5)
    G.io->w(G.a[5], 0);
    // 00fb50: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00fb56: ADD.W dst:D0 src:(ff2a9c)
    G.d[0].w(ADD<W>(G.d[0].w(), G.io->w(0xff2a9c)));
    // 00fb5c: ANDI.W dst:D0 src:#1c
    G.d[0].w(AND<W>(G.d[0].w(), 0x1c));
    // 00fb60: LEA.L dst:A0 src:(f334)
    G.a[0] = 0xf334;
    // 00fb66: MOVE.L dst:(A6.L)+56 src:(A0,D0.W)+0
    G.io->l(G.a[6] + 0x56, UCC(G.io->l(G.a[0] + G.d[0].w())));

  Lfb6c:;
    // 00fb6c: JSR src:(75ca)
    F75ca();

  Lfb72:;
    // 00fb72: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 00fb76: RTS
    goto end;

  Lfb78:;
    // 00fb78: JMP src:(50a0)
    F50a0();
    goto end;

  end:
    _log_ret(__func__);
  }

  void Ffc14()
  {
    _log_call(__func__);

    // 00fc14: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00fc18: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00fc1c: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00fc1e: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 00fc20: Bcc cond:CC src:(fd0a)
    if (G.sr.check_condition(Condition::CC)) { goto Lfd0a; }
    // 00fc24: TST.W src:D1
    TST<W>(G.d[1].w());
    // 00fc26: Bcc cond:NE src:(fcc2)
    if (G.sr.check_condition(Condition::NE)) { goto Lfcc2; }
    // 00fc2a: BCLR.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 3));
    // 00fc30: JSR src:(50e6)
    F50e6();
    // 00fc36: SUBI.W dst:(A6.L)+14 src:#3f80
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x3f80));
    // 00fc3c: MOVE.W dst:(ff0042) src:#0
    G.io->w(0xff0042, 0);
    // 00fc44: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, UCC(G.a[6]));
    // 00fc4a: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00fc50: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00fc56: Bcc cond:EQ src:(fc6e)
    if (G.sr.check_condition(Condition::EQ)) { goto Lfc6e; }
    // 00fc58: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 00fc5e: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00fc66: Bcc cond:NE src:(fc6e)
    if (G.sr.check_condition(Condition::NE)) { goto Lfc6e; }
    // 00fc68: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  Lfc6e:;
    // 00fc6e: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00fc74: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00fc76: MOVE.W dst:(A6.L)+3e src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3e, G.io->w(G.a[0] + G.d[0].w()));
    // 00fc7c: MOVEQ.L dst:D4 src:#2
    G.d[4].l(2);
    // 00fc7e: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00fc80: MOVE.L dst:D7 src:#1000
    G.d[7].l(UCC(0x1000));

  Lfc86:;
    // 00fc86: MOVE.L dst:D1 src:#39000000
    G.d[1].l(0x39000000);
    // 00fc8c: ADD.L dst:D1 src:D7
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[7].l()));
    // 00fc8e: JSR src:(6600)
    F6600();
    // 00fc94: ADD.L dst:D7 src:#1000
    G.d[7].l(ADD<L>(G.d[7].l(), 0x1000));
    // 00fc9a: DBcc.W cond:False dst:D4 src:(fc86)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lfc86; }
    // 00fc9e: MOVEQ.L dst:D4 src:#2
    G.d[4].l(UCC(2));
    // 00fca0: LEA.L dst:A0 src:(ffb0)
    G.a[0] = 0xffb0;
    // 00fca6: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lfca8:;
    // 00fca8: MOVE.L dst:D1 src:#26000000
    G.d[1].l(UCC(0x26000000));
    // 00fcae: OR.W dst:D1 src:(A0)+
    G.d[1].w(OR<W>(G.d[1].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00fcb0: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00fcb2: JSR src:(6600)
    F6600();
    // 00fcb8: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00fcba: DBcc.W cond:False dst:D4 src:(fca8)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lfca8; }
    // 00fcbe: Bcc cond:True src:(fcce)
    goto Lfcce;

  Lfcc2:;
    // 00fcc2: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 00fcc8: MOVE.L dst:(A6.L)+16 src:(A5.L)+14
    G.io->l(G.a[6] + 0x16, UCC(G.io->l(G.a[5] + 0x14)));

  Lfcce:;
    // 00fcce: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 00fcd2: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, 0);
    // 00fcd6: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 00fcda: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 00fcde: CLR.W dst:(A6.L)+3c
    G.io->w(G.a[6] + 0x3c, 0);
    // 00fce2: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00fce6: ANDI.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 00fcea: MULU.W dst:D0 src:#30
    G.d[0].l(MULU(G.d[0].w(), 0x30));
    // 00fcee: LEA.L dst:A0 src:(ffb6)
    G.a[0] = 0xffb6;
    // 00fcf4: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 00fcf6: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00fcfa: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00fcfe: MOVE.L dst:(A6.L)+30 src:(A0)+
    G.io->l(G.a[6] + 0x30, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 00fd02: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00fd04: JMP src:(5abc)
    F5abc();
    goto end;

  Lfd0a:;
    // 00fd0a: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00fd0e: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00fd12: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 00fd14: TST.W src:D0
    TST<W>(G.d[0].w());
    // 00fd16: Bcc cond:NE src:(fdb2)
    if (G.sr.check_condition(Condition::NE)) { goto Lfdb2; }
    // 00fd1a: BCLR.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 3));
    // 00fd20: JSR src:(50e6)
    F50e6();
    // 00fd26: SUBI.W dst:(A6.L)+14 src:#3f80
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x3f80));
    // 00fd2c: MOVE.W dst:(ff0044) src:#0
    G.io->w(0xff0044, 0);
    // 00fd34: MOVE.L dst:(ff004a) src:A6
    G.io->l(0xff004a, UCC(G.a[6]));
    // 00fd3a: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 00fd40: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 00fd46: Bcc cond:EQ src:(fd5e)
    if (G.sr.check_condition(Condition::EQ)) { goto Lfd5e; }
    // 00fd48: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 00fd4e: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 00fd56: Bcc cond:NE src:(fd5e)
    if (G.sr.check_condition(Condition::NE)) { goto Lfd5e; }
    // 00fd58: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  Lfd5e:;
    // 00fd5e: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 00fd64: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 00fd66: MOVE.W dst:(A6.L)+3e src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3e, G.io->w(G.a[0] + G.d[0].w()));
    // 00fd6c: MOVEQ.L dst:D4 src:#2
    G.d[4].l(2);
    // 00fd6e: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 00fd70: MOVE.L dst:D7 src:#9000
    G.d[7].l(UCC(0x9000));

  Lfd76:;
    // 00fd76: MOVE.L dst:D1 src:#39000000
    G.d[1].l(0x39000000);
    // 00fd7c: ADD.L dst:D1 src:D7
    G.d[1].l(ADD<L>(G.d[1].l(), G.d[7].l()));
    // 00fd7e: JSR src:(6600)
    F6600();
    // 00fd84: ADD.L dst:D7 src:#1000
    G.d[7].l(ADD<L>(G.d[7].l(), 0x1000));
    // 00fd8a: DBcc.W cond:False dst:D4 src:(fd76)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lfd76; }
    // 00fd8e: MOVEQ.L dst:D4 src:#2
    G.d[4].l(UCC(2));
    // 00fd90: LEA.L dst:A0 src:(ffb0)
    G.a[0] = 0xffb0;
    // 00fd96: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  Lfd98:;
    // 00fd98: MOVE.L dst:D1 src:#26001000
    G.d[1].l(UCC(0x26001000));
    // 00fd9e: OR.W dst:D1 src:(A0)+
    G.d[1].w(OR<W>(G.d[1].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 00fda0: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 00fda2: JSR src:(6600)
    F6600();
    // 00fda8: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 00fdaa: DBcc.W cond:False dst:D4 src:(fd98)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto Lfd98; }
    // 00fdae: Bcc cond:True src:(fcce)
    goto Lfcce;

  Lfdb2:;
    // 00fdb2: MOVE.L dst:A5 src:(ff004a)
    G.a[5] = G.io->l(0xff004a);
    // 00fdb8: MOVE.L dst:(A6.L)+16 src:(A5.L)+14
    G.io->l(G.a[6] + 0x16, UCC(G.io->l(G.a[5] + 0x14)));
    // 00fdbe: Bcc cond:True src:(fcce)
    goto Lfcce;

  end:
    _log_ret(__func__);
  }

  void Ffdc2()
  {
    _log_call(__func__);

    // 00fdc2: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 00fdc6: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 00fdca: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 00fdcc: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 00fdce: Bcc cond:CC src:(febc)
    if (G.sr.check_condition(Condition::CC)) { goto Lfebc; }
    // 00fdd2: TST.W src:D1
    TST<W>(G.d[1].w());
    // 00fdd4: Bcc cond:NE src:(ff1c)
    if (G.sr.check_condition(Condition::NE)) { goto Lff1c; }
    // 00fdd8: JSR src:(5114)
    F5114();
    // 00fdde: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00fde2: ADDI.W dst:D0 src:#3f80
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3f80));
    // 00fde6: CMPI.W dst:D0 src:#e000
    CMP<W>(G.d[0].w(), 0xe000);
    // 00fdea: Bcc cond:CC src:(fdf4)
    if (G.sr.check_condition(Condition::CC)) { goto Lfdf4; }
    // 00fdec: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 00fdf2: Bcc cond:True src:(fdfe)
    goto Lfdfe;

  Lfdf4:;
    // 00fdf4: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 00fdfa: Bcc cond:NE src:(feae)
    if (G.sr.check_condition(Condition::NE)) { goto Lfeae; }

  Lfdfe:;
    // 00fdfe: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00fe02: Bcc cond:NE src:(fe22)
    if (G.sr.check_condition(Condition::NE)) { goto Lfe22; }
    // 00fe04: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00fe08: Bcc cond:MI src:(fe1a)
    if (G.sr.check_condition(Condition::MI)) { goto Lfe1a; }
    // 00fe0a: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00fe0e: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00fe12: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 00fe16: Bcc cond:CS src:(fe26)
    if (G.sr.check_condition(Condition::CS)) { goto Lfe26; }

  Lfe1a:;
    // 00fe1a: BSET.B dst:(ff0043) src:#6
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 6));

  Lfe22:;
    // 00fe22: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  Lfe26:;
    // 00fe26: JSR src:(3eb2)
    F3eb2();
    // 00fe2c: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00fe2e: JSR src:(5ade)
    F5ade();
    // 00fe34: JSR src:(6658)
    F6658();
    // 00fe3a: MOVE.W dst:D0 src:D1
    G.d[0].w(G.d[1].w());
    // 00fe3c: SUBI.W dst:D1 src:#2c
    G.d[1].w(SUB<W>(G.d[1].w(), 0x2c));
    // 00fe40: CMPI.W dst:D1 src:#c
    CMP<W>(G.d[1].w(), 12);
    // 00fe44: Bcc cond:HI src:(fe68)
    if (G.sr.check_condition(Condition::HI)) { goto Lfe68; }
    // 00fe46: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00fe4c: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00fe50: Bcc cond:NE src:(fe68)
    if (G.sr.check_condition(Condition::NE)) { goto Lfe68; }
    // 00fe52: MOVE.W dst:D0 src:#30
    G.d[0].w(0x30);
    // 00fe56: MOVE.W dst:D3 src:#1400
    G.d[3].w(0x1400);
    // 00fe5a: MOVE.W dst:D4 src:#c00
    G.d[4].w(0xc00);
    // 00fe5e: ADD.W dst:D0 src:#4000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x4000));
    // 00fe62: JSR src:(6bd0)
    F6bd0();

  Lfe68:;
    // 00fe68: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 00fe6e: ADDQ.W dst:D0 src:#3
    G.d[0].w(ADD<W>(G.d[0].w(), 3));
    // 00fe70: ANDI.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 00fe74: Bcc cond:NE src:(feac)
    if (G.sr.check_condition(Condition::NE)) { goto Lfeac; }
    // 00fe76: MOVE.W dst:D0 src:#30
    G.d[0].w(UCC(0x30));
    // 00fe7a: MOVEM.W src:(A6.L)+14 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x14));
    G.d[4].l(G.io->w(G.a[6] + 0x16));
    // 00fe80: ADDI.W dst:D4 src:#400
    G.d[4].w(ADD<W>(G.d[4].w(), 0x400));
    // 00fe84: MOVE.W dst:-(USP) src:#0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(0));

  Lfe88:;
    // 00fe88: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 00fe8c: ORI.W dst:D0 src:#8000
    G.d[0].w(OR<W>(G.d[0].w(), 0x8000));
    // 00fe90: JSR src:(6b22)
    F6b22();
    // 00fe96: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 00fe9a: ADDQ.W dst:D0 src:#8
    G.d[0].w(ADD<W>(G.d[0].w(), 8));
    // 00fe9c: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 00fea0: CMPI.W dst:(USP) src:#3
    CMP<W>(G.io->w(G.a[7]), 3);
    // 00fea4: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 00fea6: Bcc cond:CC src:(feac)
    if (G.sr.check_condition(Condition::CC)) { goto Lfeac; }
    // 00fea8: ADDQ.W dst:(USP) src:#1
    G.io->w(G.a[7], ADD<W>(G.io->w(G.a[7]), 1));
    // 00feaa: Bcc cond:True src:(fe88)
    goto Lfe88;

  Lfeac:;
    // 00feac: RTS
    goto end;

  Lfeae:;
    // 00feae: BSET.B dst:(ff0043) src:#7
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 7));
    // 00feb6: JMP src:(50a0)
    F50a0();
    goto end;

  Lfebc:;
    // 00febc: TST.W src:D0
    TST<W>(G.d[0].w());
    // 00febe: Bcc cond:NE src:(ff80)
    if (G.sr.check_condition(Condition::NE)) { goto Lff80; }
    // 00fec2: JSR src:(5114)
    F5114();
    // 00fec8: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 00fecc: ADDI.W dst:D0 src:#3f80
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3f80));
    // 00fed0: CMPI.W dst:D0 src:#e000
    CMP<W>(G.d[0].w(), 0xe000);
    // 00fed4: Bcc cond:CC src:(fede)
    if (G.sr.check_condition(Condition::CC)) { goto Lfede; }
    // 00fed6: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 00fedc: Bcc cond:True src:(fee6)
    goto Lfee6;

  Lfede:;
    // 00fede: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 00fee4: Bcc cond:NE src:(ff0e)
    if (G.sr.check_condition(Condition::NE)) { goto Lff0e; }

  Lfee6:;
    // 00fee6: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00feea: Bcc cond:NE src:(ff0a)
    if (G.sr.check_condition(Condition::NE)) { goto Lff0a; }
    // 00feec: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 00fef0: Bcc cond:MI src:(ff02)
    if (G.sr.check_condition(Condition::MI)) { goto Lff02; }
    // 00fef2: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00fef6: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 00fefa: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 00fefe: Bcc cond:CS src:(fe26)
    if (G.sr.check_condition(Condition::CS)) { goto Lfe26; }

  Lff02:;
    // 00ff02: BSET.B dst:(ff0045) src:#6
    G.io->b(0xff0045, BSET<B>(G.io->b(0xff0045), 6));

  Lff0a:;
    // 00ff0a: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  Lff0e:;
    // 00ff0e: BSET.B dst:(ff0045) src:#7
    G.io->b(0xff0045, BSET<B>(G.io->b(0xff0045), 7));
    // 00ff16: JMP src:(50a0)
    F50a0();
    goto end;

  Lff1c:;
    // 00ff1c: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00ff20: Bcc cond:EQ src:(ff26)
    if (G.sr.check_condition(Condition::EQ)) { goto Lff26; }
    // 00ff22: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  Lff26:;
    // 00ff26: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 00ff2e: Bcc cond:NE src:(fa98)
    if (G.sr.check_condition(Condition::NE)) {
      Ffa98();
      goto end;
    }
    // 00ff32: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 00ff3a: Bcc cond:EQ src:(ff42)
    if (G.sr.check_condition(Condition::EQ)) { goto Lff42; }
    // 00ff3c: JMP src:(50a0)
    F50a0();
    goto end;

  Lff42:;
    // 00ff42: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));

  Lff48:;
    // 00ff48: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 00ff4c: Bcc cond:EQ src:(ff64)
    if (G.sr.check_condition(Condition::EQ)) { goto Lff64; }
    // 00ff4e: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(G.io->w(G.a[6] + 12));
    // 00ff52: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 00ff56: ADD.W dst:(A5.L)+c src:D0
    G.io->w(G.a[5] + 12, ADD<W>(G.io->w(G.a[5] + 12), G.d[0].w()));
    // 00ff5a: MOVE.W dst:D0 src:#14
    G.d[0].w(UCC(0x14));
    // 00ff5e: JSR src:(654c)
    F654c();

  Lff64:;
    // 00ff64: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 00ff6a: MOVEM.W src:(A6.L)+30 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x30));
    G.d[1].l(G.io->w(G.a[6] + 0x32));
    // 00ff70: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 00ff74: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 00ff78: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 00ff7a: JMP src:(5ade)
    F5ade();
    goto end;

  Lff80:;
    // 00ff80: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 00ff84: Bcc cond:EQ src:(ff8a)
    if (G.sr.check_condition(Condition::EQ)) { goto Lff8a; }
    // 00ff86: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  Lff8a:;
    // 00ff8a: BTST.B dst:(ff0045) src:#6
    BTST<B>(G.io->b(0xff0045), 6);
    // 00ff92: Bcc cond:NE src:(fa98)
    if (G.sr.check_condition(Condition::NE)) {
      Ffa98();
      goto end;
    }
    // 00ff96: BTST.B dst:(ff0045) src:#7
    BTST<B>(G.io->b(0xff0045), 7);
    // 00ff9e: Bcc cond:EQ src:(ffa6)
    if (G.sr.check_condition(Condition::EQ)) { goto Lffa6; }
    // 00ffa0: JMP src:(50a0)
    F50a0();
    goto end;

  Lffa6:;
    // 00ffa6: MOVE.L dst:A5 src:(ff004a)
    G.a[5] = UCC(G.io->l(0xff004a));
    // 00ffac: Bcc cond:True src:(ff48)
    goto Lff48;

  end:
    _log_ret(__func__);
  }

  void F10076()
  {
    _log_call(__func__);

    // 010076: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 01007a: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 01007e: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 010080: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 010082: Bcc cond:CC src:(10164)
    if (G.sr.check_condition(Condition::CC)) { goto L10164; }
    // 010086: TST.W src:D1
    TST<W>(G.d[1].w());
    // 010088: Bcc cond:NE src:(1011c)
    if (G.sr.check_condition(Condition::NE)) { goto L1011c; }
    // 01008c: BCLR.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 3));
    // 010092: JSR src:(50e6)
    F50e6();
    // 010098: SUBI.W dst:(A6.L)+14 src:#3f80
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x3f80));
    // 01009e: MOVE.W dst:(ff0042) src:#0
    G.io->w(0xff0042, 0);
    // 0100a6: MOVE.L dst:(ff0046) src:A6
    G.io->l(0xff0046, UCC(G.a[6]));
    // 0100ac: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 0100b2: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 0100b8: Bcc cond:EQ src:(100d0)
    if (G.sr.check_condition(Condition::EQ)) { goto L100d0; }
    // 0100ba: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 0100c0: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 0100c8: Bcc cond:NE src:(100d0)
    if (G.sr.check_condition(Condition::NE)) { goto L100d0; }
    // 0100ca: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  L100d0:;
    // 0100d0: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 0100d6: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 0100d8: MOVE.W dst:(A6.L)+3e src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3e, G.io->w(G.a[0] + G.d[0].w()));
    // 0100de: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 0100e0: MOVE.L dst:D1 src:#3b002000
    G.d[1].l(UCC(0x3b002000));
    // 0100e6: JSR src:(6600)
    F6600();
    // 0100ec: MOVEQ.L dst:D4 src:#3
    G.d[4].l(UCC(3));
    // 0100ee: LEA.L dst:A0 src:(103cc)
    G.a[0] = 0x103cc;
    // 0100f4: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  L100f6:;
    // 0100f6: MOVE.L dst:D1 src:#26000000
    G.d[1].l(UCC(0x26000000));
    // 0100fc: OR.W dst:D1 src:(A0)+
    G.d[1].w(OR<W>(G.d[1].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0100fe: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 010100: JSR src:(6600)
    F6600();
    // 010106: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 010108: DBcc.W cond:False dst:D4 src:(100f6)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto L100f6; }
    // 01010c: MOVE.L dst:D1 src:#3b001000
    G.d[1].l(UCC(0x3b001000));
    // 010112: JSR src:(6600)
    F6600();
    // 010118: Bcc cond:True src:(10128)
    goto L10128;

  L1011c:;
    // 01011c: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = G.io->l(0xff0046);
    // 010122: MOVE.L dst:(A6.L)+16 src:(A5.L)+14
    G.io->l(G.a[6] + 0x16, UCC(G.io->l(G.a[5] + 0x14)));

  L10128:;
    // 010128: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 01012c: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, 0);
    // 010130: CLR.L dst:(A6.L)+34
    G.io->l(G.a[6] + 0x34, 0);
    // 010134: CLR.W dst:(A6.L)+38
    G.io->w(G.a[6] + 0x38, 0);
    // 010138: CLR.W dst:(A6.L)+3c
    G.io->w(G.a[6] + 0x3c, 0);
    // 01013c: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 010140: ANDI.W dst:D0 src:#7
    G.d[0].w(AND<W>(G.d[0].w(), 7));
    // 010144: MULU.W dst:D0 src:#30
    G.d[0].l(MULU(G.d[0].w(), 0x30));
    // 010148: LEA.L dst:A0 src:(103d4)
    G.a[0] = 0x103d4;
    // 01014e: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 010150: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 010154: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 010158: MOVE.L dst:(A6.L)+30 src:(A0)+
    G.io->l(G.a[6] + 0x30, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 01015c: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 01015e: JMP src:(5abc)
    F5abc();
    goto end;

  L10164:;
    // 010164: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 010168: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 01016c: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 01016e: TST.W src:D0
    TST<W>(G.d[0].w());
    // 010170: Bcc cond:NE src:(10204)
    if (G.sr.check_condition(Condition::NE)) { goto L10204; }
    // 010174: BCLR.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 3));
    // 01017a: JSR src:(50e6)
    F50e6();
    // 010180: SUBI.W dst:(A6.L)+14 src:#3f80
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), 0x3f80));
    // 010186: MOVE.W dst:(ff0044) src:#0
    G.io->w(0xff0044, 0);
    // 01018e: MOVE.L dst:(ff004a) src:A6
    G.io->l(0xff004a, UCC(G.a[6]));
    // 010194: LEA.L dst:A0 src:(dc14)
    G.a[0] = 0xdc14;
    // 01019a: TST.W src:(ff000a)
    TST<W>(G.io->w(0xff000a));
    // 0101a0: Bcc cond:EQ src:(101b8)
    if (G.sr.check_condition(Condition::EQ)) { goto L101b8; }
    // 0101a2: LEA.L dst:A0 src:(dc20)
    G.a[0] = 0xdc20;
    // 0101a8: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 0101b0: Bcc cond:NE src:(101b8)
    if (G.sr.check_condition(Condition::NE)) { goto L101b8; }
    // 0101b2: LEA.L dst:A0 src:(dc2c)
    G.a[0] = 0xdc2c;

  L101b8:;
    // 0101b8: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 0101be: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 0101c0: MOVE.W dst:(A6.L)+3e src:(A0,D0.W)+0
    G.io->w(G.a[6] + 0x3e, G.io->w(G.a[0] + G.d[0].w()));
    // 0101c6: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 0101c8: MOVE.L dst:D1 src:#3b00a000
    G.d[1].l(UCC(0x3b00a000));
    // 0101ce: JSR src:(6600)
    F6600();
    // 0101d4: MOVEQ.L dst:D4 src:#3
    G.d[4].l(UCC(3));
    // 0101d6: LEA.L dst:A0 src:(103cc)
    G.a[0] = 0x103cc;
    // 0101dc: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));

  L101de:;
    // 0101de: MOVE.L dst:D1 src:#26001000
    G.d[1].l(UCC(0x26001000));
    // 0101e4: OR.W dst:D1 src:(A0)+
    G.d[1].w(OR<W>(G.d[1].w(), G.io->w(G.a[0])));
    G.a[0] += 2;
    // 0101e6: MOVE.L dst:-(USP) src:A0
    G.a[7] -= 4;
    G.io->l(G.a[7], UCC(G.a[0]));
    // 0101e8: JSR src:(6600)
    F6600();
    // 0101ee: MOVE.L dst:A0 src:(USP)+
    G.a[0] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 0101f0: DBcc.W cond:False dst:D4 src:(101de)
    G.d[4].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[4].w())) { goto L101de; }
    // 0101f4: MOVE.L dst:D1 src:#3b009000
    G.d[1].l(UCC(0x3b009000));
    // 0101fa: JSR src:(6600)
    F6600();
    // 010200: Bcc cond:True src:(10128)
    goto L10128;

  L10204:;
    // 010204: MOVE.L dst:A5 src:(ff004a)
    G.a[5] = G.io->l(0xff004a);
    // 01020a: MOVE.L dst:(A6.L)+16 src:(A5.L)+14
    G.io->l(G.a[6] + 0x16, UCC(G.io->l(G.a[5] + 0x14)));
    // 010210: Bcc cond:True src:(10128)
    goto L10128;

  end:
    _log_ret(__func__);
  }

  void F10214()
  {
    _log_call(__func__);

    // 010214: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 010218: ANDI.W dst:D0 src:#f
    G.d[0].w(AND<W>(G.d[0].w(), 15));
    // 01021c: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 01021e: SUBQ.W dst:D0 src:#8
    G.d[0].w(SUB<W>(G.d[0].w(), 8));
    // 010220: Bcc cond:CC src:(102d8)
    if (G.sr.check_condition(Condition::CC)) { goto L102d8; }
    // 010224: TST.W src:D1
    TST<W>(G.d[1].w());
    // 010226: Bcc cond:NE src:(10338)
    if (G.sr.check_condition(Condition::NE)) { goto L10338; }
    // 01022a: JSR src:(5114)
    F5114();
    // 010230: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 010234: ADDI.W dst:D0 src:#3f80
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3f80));
    // 010238: CMPI.W dst:D0 src:#e000
    CMP<W>(G.d[0].w(), 0xe000);
    // 01023c: Bcc cond:CC src:(10246)
    if (G.sr.check_condition(Condition::CC)) { goto L10246; }
    // 01023e: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 010244: Bcc cond:True src:(1024e)
    goto L1024e;

  L10246:;
    // 010246: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 01024c: Bcc cond:NE src:(102ca)
    if (G.sr.check_condition(Condition::NE)) { goto L102ca; }

  L1024e:;
    // 01024e: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 010252: Bcc cond:NE src:(10272)
    if (G.sr.check_condition(Condition::NE)) { goto L10272; }
    // 010254: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 010258: Bcc cond:MI src:(1026a)
    if (G.sr.check_condition(Condition::MI)) { goto L1026a; }
    // 01025a: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 01025e: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 010262: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 010266: Bcc cond:CS src:(10276)
    if (G.sr.check_condition(Condition::CS)) { goto L10276; }

  L1026a:;
    // 01026a: BSET.B dst:(ff0043) src:#6
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 6));

  L10272:;
    // 010272: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  L10276:;
    // 010276: JSR src:(3eb2)
    F3eb2();
    // 01027c: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 01027e: JSR src:(5ade)
    F5ade();
    // 010284: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 01028a: ADDQ.W dst:D0 src:#3
    G.d[0].w(ADD<W>(G.d[0].w(), 3));
    // 01028c: ANDI.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 010290: Bcc cond:NE src:(102c8)
    if (G.sr.check_condition(Condition::NE)) { goto L102c8; }
    // 010292: MOVE.W dst:D0 src:#30
    G.d[0].w(UCC(0x30));
    // 010296: MOVEM.W src:(A6.L)+14 regs:D3,D4
    G.d[3].l(G.io->w(G.a[6] + 0x14));
    G.d[4].l(G.io->w(G.a[6] + 0x16));
    // 01029c: ADDI.W dst:D4 src:#400
    G.d[4].w(ADD<W>(G.d[4].w(), 0x400));
    // 0102a0: MOVE.W dst:-(USP) src:#0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(0));

  L102a4:;
    // 0102a4: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 0102a8: ORI.W dst:D0 src:#8000
    G.d[0].w(OR<W>(G.d[0].w(), 0x8000));
    // 0102ac: JSR src:(6b22)
    F6b22();
    // 0102b2: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 0102b6: ADDQ.W dst:D0 src:#8
    G.d[0].w(ADD<W>(G.d[0].w(), 8));
    // 0102b8: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 0102bc: CMPI.W dst:(USP) src:#3
    CMP<W>(G.io->w(G.a[7]), 3);
    // 0102c0: Bcc cond:CC src:(102c6)
    if (G.sr.check_condition(Condition::CC)) { goto L102c6; }
    // 0102c2: ADDQ.W dst:(USP) src:#1
    G.io->w(G.a[7], ADD<W>(G.io->w(G.a[7]), 1));
    // 0102c4: Bcc cond:True src:(102a4)
    goto L102a4;

  L102c6:;
    // 0102c6: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  L102c8:;
    // 0102c8: RTS
    goto end;

  L102ca:;
    // 0102ca: BSET.B dst:(ff0043) src:#7
    G.io->b(0xff0043, BSET<B>(G.io->b(0xff0043), 7));
    // 0102d2: JMP src:(50a0)
    F50a0();
    goto end;

  L102d8:;
    // 0102d8: TST.W src:D0
    TST<W>(G.d[0].w());
    // 0102da: Bcc cond:NE src:(1039c)
    if (G.sr.check_condition(Condition::NE)) { goto L1039c; }
    // 0102de: JSR src:(5114)
    F5114();
    // 0102e4: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 0102e8: ADDI.W dst:D0 src:#3f80
    G.d[0].w(ADD<W>(G.d[0].w(), 0x3f80));
    // 0102ec: CMPI.W dst:D0 src:#e000
    CMP<W>(G.d[0].w(), 0xe000);
    // 0102f0: Bcc cond:CC src:(102fa)
    if (G.sr.check_condition(Condition::CC)) { goto L102fa; }
    // 0102f2: BSET.B dst:(A6.L)+31 src:#7
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 7));
    // 0102f8: Bcc cond:True src:(10302)
    goto L10302;

  L102fa:;
    // 0102fa: BTST.B dst:(A6.L)+31 src:#7
    BTST<B>(G.io->b(G.a[6] + 0x31), 7);
    // 010300: Bcc cond:NE src:(1032a)
    if (G.sr.check_condition(Condition::NE)) { goto L1032a; }

  L10302:;
    // 010302: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 010306: Bcc cond:NE src:(10326)
    if (G.sr.check_condition(Condition::NE)) { goto L10326; }
    // 010308: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 01030c: Bcc cond:MI src:(1031e)
    if (G.sr.check_condition(Condition::MI)) { goto L1031e; }
    // 01030e: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 010312: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(UCC(G.io->w(G.a[6] + 12)));
    // 010316: CMP.W dst:D0 src:(A6.L)+3e
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x3e));
    // 01031a: Bcc cond:CS src:(10276)
    if (G.sr.check_condition(Condition::CS)) { goto L10276; }

  L1031e:;
    // 01031e: BSET.B dst:(ff0045) src:#6
    G.io->b(0xff0045, BSET<B>(G.io->b(0xff0045), 6));

  L10326:;
    // 010326: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  L1032a:;
    // 01032a: BSET.B dst:(ff0045) src:#7
    G.io->b(0xff0045, BSET<B>(G.io->b(0xff0045), 7));
    // 010332: JMP src:(50a0)
    F50a0();
    goto end;

  L10338:;
    // 010338: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 01033c: Bcc cond:EQ src:(10342)
    if (G.sr.check_condition(Condition::EQ)) { goto L10342; }
    // 01033e: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  L10342:;
    // 010342: BTST.B dst:(ff0043) src:#6
    BTST<B>(G.io->b(0xff0043), 6);
    // 01034a: Bcc cond:NE src:(fa98)
    if (G.sr.check_condition(Condition::NE)) {
      Ffa98();
      goto end;
    }
    // 01034e: BTST.B dst:(ff0043) src:#7
    BTST<B>(G.io->b(0xff0043), 7);
    // 010356: Bcc cond:EQ src:(1035e)
    if (G.sr.check_condition(Condition::EQ)) { goto L1035e; }
    // 010358: JMP src:(50a0)
    F50a0();
    goto end;

  L1035e:;
    // 01035e: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));

  L10364:;
    // 010364: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 010368: Bcc cond:EQ src:(10380)
    if (G.sr.check_condition(Condition::EQ)) { goto L10380; }
    // 01036a: MOVE.W dst:D0 src:(A6.L)+c
    G.d[0].w(G.io->w(G.a[6] + 12));
    // 01036e: CLR.W dst:(A6.L)+c
    G.io->w(G.a[6] + 12, 0);
    // 010372: ADD.W dst:(A5.L)+c src:D0
    G.io->w(G.a[5] + 12, ADD<W>(G.io->w(G.a[5] + 12), G.d[0].w()));
    // 010376: MOVE.W dst:D0 src:#14
    G.d[0].w(UCC(0x14));
    // 01037a: JSR src:(654c)
    F654c();

  L10380:;
    // 010380: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 010386: MOVEM.W src:(A6.L)+30 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x30));
    G.d[1].l(G.io->w(G.a[6] + 0x32));
    // 01038c: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 010390: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 010394: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 010396: JMP src:(5ade)
    F5ade();
    goto end;

  L1039c:;
    // 01039c: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 0103a0: Bcc cond:EQ src:(103a6)
    if (G.sr.check_condition(Condition::EQ)) { goto L103a6; }
    // 0103a2: Bcc cond:True src:(fa98)
    Ffa98();
    goto end;

  L103a6:;
    // 0103a6: BTST.B dst:(ff0045) src:#6
    BTST<B>(G.io->b(0xff0045), 6);
    // 0103ae: Bcc cond:NE src:(fa98)
    if (G.sr.check_condition(Condition::NE)) {
      Ffa98();
      goto end;
    }
    // 0103b2: BTST.B dst:(ff0045) src:#7
    BTST<B>(G.io->b(0xff0045), 7);
    // 0103ba: Bcc cond:EQ src:(103c2)
    if (G.sr.check_condition(Condition::EQ)) { goto L103c2; }
    // 0103bc: JMP src:(50a0)
    F50a0();
    goto end;

  L103c2:;
    // 0103c2: MOVE.L dst:A5 src:(ff004a)
    G.a[5] = UCC(G.io->l(0xff004a));
    // 0103c8: Bcc cond:True src:(10364)
    goto L10364;

  end:
    _log_ret(__func__);
  }

  void F10464()
  {
    _log_call(__func__);

    // 010464: MOVEM.W src:(A6.L)+26 regs:D0,D1
    G.d[0].l(G.io->w(G.a[6] + 0x26));
    G.d[1].l(G.io->w(G.a[6] + 0x28));
    // 01046a: MOVE.W dst:D2 src:#180
    G.d[2].w(0x180);
    // 01046e: MOVE.W dst:(A6.L)+8 src:#10
    G.io->w(G.a[6] + 8, UCC(0x10));
    // 010474: BCLR.L dst:D0 src:#b
    G.d[0].l(BCLR<L>(G.d[0].l(), 11));
    // 010478: Bcc cond:EQ src:(1048a)
    if (G.sr.check_condition(Condition::EQ)) { goto L1048a; }
    // 01047a: BSET.B dst:(ff2aa3) src:#1
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 1));
    // 010482: NEG.W dst:D2
    G.d[2].w(NEG<W>(G.d[2].w()));
    // 010484: MOVE.W dst:(A6.L)+8 src:#8
    G.io->w(G.a[6] + 8, UCC(8));

  L1048a:;
    // 01048a: MOVE.W dst:(A6.L)+6 src:D2
    G.io->w(G.a[6] + 6, UCC(G.d[2].w()));
    // 01048e: ASL.W dst:D0 src:#7
    G.d[0].w(ASL<W>(G.d[0].w(), 7));
    // 010490: ASL.W dst:D1 src:#7
    G.d[1].w(ASL<W>(G.d[1].w(), 7));
    // 010492: MOVEM.W dst:(A6.L)+14 regs:D0,D1
    G.io->w(G.a[6] + 0x14, G.d[0].w());
    G.io->w(G.a[6] + 0x16, G.d[1].w());
    // 010498: JSR src:(6658)
    F6658();
    // 01049e: MOVE.W dst:D2 src:#20
    G.d[2].w(0x20);
    // 0104a2: MOVE.W dst:D3 src:#200
    G.d[3].w(UCC(0x200));
    // 0104a6: CMPI.W dst:D1 src:#20
    CMP<W>(G.d[1].w(), 0x20);
    // 0104aa: Bcc cond:CC src:(104bc)
    if (G.sr.check_condition(Condition::CC)) { goto L104bc; }
    // 0104ac: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 0104b2: ORI.W dst:(A6.L)+10 src:#800
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), 0x800));
    // 0104b8: NEG.W dst:D2
    G.d[2].w(NEG<W>(G.d[2].w()));
    // 0104ba: NEG.W dst:D3
    G.d[3].w(NEG<W>(G.d[3].w()));

  L104bc:;
    // 0104bc: MOVE.W dst:(A6.L)+30 src:D2
    G.io->w(G.a[6] + 0x30, G.d[2].w());
    // 0104c0: MOVE.W dst:(A6.L)+32 src:D3
    G.io->w(G.a[6] + 0x32, UCC(G.d[3].w()));
    // 0104c4: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F104c6()
  {
    _log_call(__func__);

    // 0104c6: BTST.B dst:(A6) src:#6
    BTST<B>(G.io->b(G.a[6]), 6);
    // 0104ca: Bcc cond:EQ src:(104d2)
    if (G.sr.check_condition(Condition::EQ)) { goto L104d2; }
    // 0104cc: JMP src:(736a)
    F736a();
    goto end;

  L104d2:;
    // 0104d2: JSR src:(675a)
    F675a();
    // 0104d8: Bcc cond:CS src:(104e0)
    if (G.sr.check_condition(Condition::CS)) { goto L104e0; }
    // 0104da: JMP src:(50a0)
    F50a0();
    goto end;

  L104e0:;
    // 0104e0: TST.W src:(A6.L)+8
    TST<W>(G.io->w(G.a[6] + 8));
    // 0104e4: Bcc cond:EQ src:(104f4)
    if (G.sr.check_condition(Condition::EQ)) { goto L104f4; }
    // 0104e6: SUBQ.W dst:(A6.L)+8 src:#1
    G.io->w(G.a[6] + 8, SUB<W>(G.io->w(G.a[6] + 8), 1));

  L104ea:;
    // 0104ea: MOVE.W dst:D0 src:(A6.L)+6
    G.d[0].w(G.io->w(G.a[6] + 6));
    // 0104ee: ADD.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[0].w()));
    // 0104f2: Bcc cond:True src:(1052c)
    goto L1052c;

  L104f4:;
    // 0104f4: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 0104fc: Bcc cond:NE src:(10524)
    if (G.sr.check_condition(Condition::NE)) { goto L10524; }
    // 0104fe: MOVE.W dst:D0 src:(ff0858)
    G.d[0].w(UCC(G.io->w(0xff0858)));
    // 010504: BTST.B dst:(ff2aa3) src:#1
    BTST<B>(G.io->b(0xff2aa3), 1);
    // 01050c: Bcc cond:NE src:(10516)
    if (G.sr.check_condition(Condition::NE)) { goto L10516; }
    // 01050e: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 010512: Bcc cond:CC src:(104ea)
    if (G.sr.check_condition(Condition::CC)) { goto L104ea; }
    // 010514: Bcc cond:True src:(1051c)
    goto L1051c;

  L10516:;
    // 010516: CMP.W dst:D0 src:(A6.L)+16
    CMP<W>(G.d[0].w(), G.io->w(G.a[6] + 0x16));
    // 01051a: Bcc cond:CS src:(104ea)
    if (G.sr.check_condition(Condition::CS)) { goto L104ea; }

  L1051c:;
    // 01051c: BSET.B dst:(ff2aa3) src:#2
    G.io->b(0xff2aa3, BSET<B>(G.io->b(0xff2aa3), 2));

  L10524:;
    // 010524: MOVE.W dst:D0 src:(A6.L)+32
    G.d[0].w(G.io->w(G.a[6] + 0x32));
    // 010528: SUB.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, SUB<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));

  L1052c:;
    // 01052c: MOVE.W dst:D1 src:#9b1
    G.d[1].w(UCC(0x9b1));
    // 010530: BTST.B dst:(ff2aa3) src:#2
    BTST<B>(G.io->b(0xff2aa3), 2);
    // 010538: Bcc cond:EQ src:(10548)
    if (G.sr.check_condition(Condition::EQ)) { goto L10548; }
    // 01053a: BTST.B dst:(ff0077) src:#0
    BTST<B>(G.io->b(0xff0077), 0);
    // 010542: Bcc cond:EQ src:(10548)
    if (G.sr.check_condition(Condition::EQ)) { goto L10548; }
    // 010544: MOVE.W dst:D1 src:#9ad
    G.d[1].w(UCC(0x9ad));

  L10548:;
    // 010548: JMP src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1054e()
  {
    _log_call(__func__);

    // 01054e: MOVE.W dst:(A6.L)+c src:#0
    G.io->w(G.a[6] + 12, 0);
    // 010554: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(G.io->w(G.a[6] + 0x28));
    // 010558: ANDI.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 01055c: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 01055e: LEA.L dst:A0 src:(10660)
    G.a[0] = 0x10660;
    // 010564: LSR.W dst:D0 src:#2
    G.d[0].w(LSR<W>(G.d[0].w(), 2));
    // 010566: MULU.W dst:D0 src:#16
    G.d[0].l(MULU(G.d[0].w(), 0x16));
    // 01056a: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 01056c: MOVE.W dst:D1 src:(A0)+
    G.d[1].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 01056e: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 010574: OR.W dst:(A6.L)+10 src:D1
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[1].w()));
    // 010578: MOVE.W dst:D1 src:(A0)+
    G.d[1].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 01057a: MOVE.W dst:(A6.L)+12 src:(A0)+
    G.io->w(G.a[6] + 0x12, UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 01057e: MOVE.L dst:(A6.L)+32 src:(A0)+
    G.io->l(G.a[6] + 0x32, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 010582: MOVE.L dst:(A6.L)+18 src:(A0)+
    G.io->l(G.a[6] + 0x18, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 010586: MOVE.L dst:(A6.L)+1c src:(A0)+
    G.io->l(G.a[6] + 0x1c, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 01058a: MOVE.L dst:(A6.L)+20 src:(A0)+
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 01058e: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 010592: CLR.L dst:(A6.L)+38
    G.io->l(G.a[6] + 0x38, 0);
    // 010596: CLR.L dst:(A6.L)+3c
    G.io->l(G.a[6] + 0x3c, 0);
    // 01059a: MOVE.W dst:(A6.L)+24 src:#0
    G.io->w(G.a[6] + 0x24, 0);
    // 0105a0: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 0105a6: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 0105aa: Bcc cond:EQ src:(105b2)
    if (G.sr.check_condition(Condition::EQ)) { goto L105b2; }
    // 0105ac: MOVE.L dst:A5 src:(ff004a)
    G.a[5] = UCC(G.io->l(0xff004a));

  L105b2:;
    // 0105b2: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 0105b8: MOVEM.W src:(A6.L)+32 regs:D0,D2
    G.d[0].l(G.io->w(G.a[6] + 0x32));
    G.d[2].l(G.io->w(G.a[6] + 0x34));
    // 0105be: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 0105c2: ADD.W dst:(A6.L)+16 src:D2
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[2].w()));
    // 0105c6: JMP src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F105ce()
  {
    _log_call(__func__);

    // 0105ce: MOVE.L dst:A5 src:(ff0046)
    G.a[5] = UCC(G.io->l(0xff0046));
    // 0105d4: LEA.L dst:A4 src:(ff0042)
    G.a[4] = 0xff0042;
    // 0105da: TST.W src:(A6.L)+26
    TST<W>(G.io->w(G.a[6] + 0x26));
    // 0105de: Bcc cond:EQ src:(105ec)
    if (G.sr.check_condition(Condition::EQ)) { goto L105ec; }
    // 0105e0: MOVE.L dst:A5 src:(ff004a)
    G.a[5] = UCC(G.io->l(0xff004a));
    // 0105e6: LEA.L dst:A4 src:(ff0044)
    G.a[4] = 0xff0044;

  L105ec:;
    // 0105ec: MOVE.L dst:(A6.L)+14 src:(A5.L)+14
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5] + 0x14)));
    // 0105f2: MOVEM.W src:(A6.L)+32 regs:D0,D2
    G.d[0].l(G.io->w(G.a[6] + 0x32));
    G.d[2].l(G.io->w(G.a[6] + 0x34));
    // 0105f8: ADD.W dst:(A6.L)+14 src:D0
    G.io->w(G.a[6] + 0x14, ADD<W>(G.io->w(G.a[6] + 0x14), G.d[0].w()));
    // 0105fc: ADD.W dst:(A6.L)+16 src:D2
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[2].w()));
    // 010600: BTST.B dst:(A4.L)+1 src:#7
    BTST<B>(G.io->b(G.a[4] + 1), 7);
    // 010606: Bcc cond:EQ src:(1060e)
    if (G.sr.check_condition(Condition::EQ)) { goto L1060e; }
    // 010608: JMP src:(50a0)
    F50a0();
    goto end;

  L1060e:;
    // 01060e: BTST.B dst:(A4.L)+1 src:#6
    BTST<B>(G.io->b(G.a[4] + 1), 6);
    // 010614: Bcc cond:NE src:(1061c)
    if (G.sr.check_condition(Condition::NE)) { goto L1061c; }
    // 010616: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 01061a: Bcc cond:EQ src:(10622)
    if (G.sr.check_condition(Condition::EQ)) { goto L10622; }

  L1061c:;
    // 01061c: JMP src:(736a)
    F736a();
    goto end;

  L10622:;
    // 010622: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 010626: LEA.L dst:A0 src:(10638)
    G.a[0] = 0x10638;
    // 01062c: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(G.io->w(G.a[6] + 0x28));
    // 010630: ANDI.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 010634: JMP src:(A0,D0.W)+0
    JUMP_MAP(G.a[0] + G.d[0].w());
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10638()
  {
    _log_call(__func__);

    // 010638: Bcc cond:True src:(1073c)
    goto L1073c;

  L1073c:;
    // 01073c: CMPI.W dst:(A6.L)+3c src:#3e
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x3e);
    // 010742: Bcc cond:CS src:(10822)
    if (G.sr.check_condition(Condition::CS)) { goto L10822; }
    // 010746: CMPI.W dst:(A6.L)+3c src:#50
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x50);
    // 01074c: Bcc cond:CS src:(10794)
    if (G.sr.check_condition(Condition::CS)) {
      F10794();
      goto end;
    }
    // 01074e: CMPI.W dst:(A6.L)+3c src:#6d
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x6d);
    // 010754: Bcc cond:CS src:(107b2)
    if (G.sr.check_condition(Condition::CS)) {
      F107b2();
      goto end;
    }
    // 010756: CMPI.W dst:(A6.L)+3c src:#7f
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x7f);
    // 01075c: Bcc cond:CS src:(107a4)
    if (G.sr.check_condition(Condition::CS)) {
      F107a4();
      goto end;
    }
    // 01075e: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, UCC(0));
    // 010764: Bcc cond:True src:(10822)
    goto L10822;

  L10822:;
    // 010822: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 010826: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1063c()
  {
    _log_call(__func__);

    // 01063c: Bcc cond:True src:(1082c)
    F1082c();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10640()
  {
    _log_call(__func__);

    // 010640: Bcc cond:True src:(108aa)
    goto L108aa;

  L108aa:;
    // 0108aa: BSET.B dst:(A6.L)+31 src:#0
    G.io->b(G.a[6] + 0x31, BSET<B>(G.io->b(G.a[6] + 0x31), 0));
    // 0108b0: Bcc cond:NE src:(108ec)
    if (G.sr.check_condition(Condition::NE)) { goto L108ec; }
    // 0108b2: MOVE.W dst:D0 src:(A6.L)+28
    G.d[0].w(G.io->w(G.a[6] + 0x28));
    // 0108b6: ANDI.W dst:D0 src:#700
    G.d[0].w(AND<W>(G.d[0].w(), 0x700));
    // 0108ba: ROR.W dst:D0 src:#4
    G.d[0].w(ROR<W>(G.d[0].w(), 4));
    // 0108bc: MOVE.W dst:D1 src:D0
    G.d[1].w(UCC(G.d[0].w()));
    // 0108be: ROR.W dst:D1 src:#2
    G.d[1].w(ROR<W>(G.d[1].w(), 2));
    // 0108c0: SUB.W dst:D0 src:D1
    G.d[0].w(SUB<W>(G.d[0].w(), G.d[1].w()));
    // 0108c2: LEA.L dst:A0 src:(109c0)
    G.a[0] = 0x109c0;
    // 0108c8: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 0108ca: MOVE.L dst:(A6.L)+32 src:(A0)+
    G.io->l(G.a[6] + 0x32, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 0108ce: MOVE.L dst:(A6.L)+2a src:(A0)+
    G.io->l(G.a[6] + 0x2a, UCC(G.io->l(G.a[0])));
    G.a[0] += 4;
    // 0108d2: MOVE.W dst:(A6.L)+8 src:#20
    G.io->w(G.a[6] + 8, 0x20);
    // 0108d8: CLR.W dst:(A6.L)+3a
    G.io->w(G.a[6] + 0x3a, 0);
    // 0108dc: MOVE.W dst:D0 src:(ff2a9c)
    G.d[0].w(G.io->w(0xff2a9c));
    // 0108e2: ANDI.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 0108e6: LSL.W dst:D0 src:#4
    G.d[0].w(LSL<W>(G.d[0].w(), 4));
    // 0108e8: MOVE.W dst:(A6.L)+3c src:D0
    G.io->w(G.a[6] + 0x3c, UCC(G.d[0].w()));

  L108ec:;
    // 0108ec: TST.W src:(A6.L)+38
    TST<W>(G.io->w(G.a[6] + 0x38));
    // 0108f0: Bcc cond:NE src:(10960)
    if (G.sr.check_condition(Condition::NE)) { goto L10960; }
    // 0108f2: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 0108f8: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 0108fa: MOVE.W dst:(A6.L)+38 src:#1f
    G.io->w(G.a[6] + 0x38, 0x1f);
    // 010900: SUB.W dst:(A6.L)+38 src:D0
    G.io->w(G.a[6] + 0x38, SUB<W>(G.io->w(G.a[6] + 0x38), G.d[0].w()));
    // 010904: MOVEQ.L dst:D4 src:#4
    G.d[4].l(UCC(4));
    // 010906: JSR src:(66e2)
    F66e2();
    // 01090c: ANDI.W dst:D1 src:#fffc
    G.d[1].w(AND<W>(G.d[1].w(), 0xfffc));
    // 010910: MOVE.W dst:D2 src:D1
    G.d[2].w(G.d[1].w());
    // 010912: SUB.W dst:D2 src:(A6.L)+2a
    G.d[2].w(SUB<W>(G.d[2].w(), G.io->w(G.a[6] + 0x2a)));
    // 010916: ANDI.W dst:D2 src:#3f
    G.d[2].w(AND<W>(G.d[2].w(), 0x3f));
    // 01091a: CMP.W dst:D2 src:(A6.L)+2c
    CMP<W>(G.d[2].w(), G.io->w(G.a[6] + 0x2c));
    // 01091e: Bcc cond:HI src:(10960)
    if (G.sr.check_condition(Condition::HI)) { goto L10960; }
    // 010920: MOVE.W dst:(A6.L)+8 src:D1
    G.io->w(G.a[6] + 8, UCC(G.d[1].w()));
    // 010924: LEA.L dst:A0 src:(10a26)
    G.a[0] = 0x10a26;
    // 01092a: ADDQ.W dst:D1 src:#2
    G.d[1].w(ADD<W>(G.d[1].w(), 2));
    // 01092c: ANDI.W dst:D1 src:#3c
    G.d[1].w(AND<W>(G.d[1].w(), 0x3c));
    // 010930: SUBI.W dst:D1 src:#10
    G.d[1].w(SUB<W>(G.d[1].w(), 0x10));
    // 010934: MOVE.W dst:(A6.L)+3a src:D1
    G.io->w(G.a[6] + 0x3a, G.d[1].w());
    // 010938: ADDA.W dst:A0 src:D1
    G.a[0] = ADD<L>(G.a[0], G.d[1].w());
    // 01093a: MOVE.L dst:(A6.L)+20 src:(A0)
    G.io->l(G.a[6] + 0x20, UCC(G.io->l(G.a[0])));
    // 01093e: LEA.L dst:A0 src:(109f0)
    G.a[0] = 0x109f0;
    // 010944: MOVE.W dst:D0 src:D1
    G.d[0].w(UCC(G.d[1].w()));
    // 010946: LSR.W dst:D0 src:#1
    G.d[0].w(LSR<W>(G.d[0].w(), 1));
    // 010948: ADD.W dst:D0 src:D1
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[1].w()));
    // 01094a: ADDA.W dst:A0 src:D0
    G.a[0] = ADD<L>(G.a[0], G.d[0].w());
    // 01094c: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 01094e: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 010954: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 010958: MOVE.L dst:D1 src:(A0)
    G.d[1].l(UCC(G.io->l(G.a[0])));
    // 01095a: JSR src:(5a9a)
    F5a9a();

  L10960:;
    // 010960: SUBQ.W dst:(A6.L)+38 src:#1
    G.io->w(G.a[6] + 0x38, SUB<W>(G.io->w(G.a[6] + 0x38), 1));
    // 010964: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 01096a: TST.W src:(A6.L)+3c
    TST<W>(G.io->w(G.a[6] + 0x3c));
    // 01096e: Bcc cond:NE src:(109ba)
    if (G.sr.check_condition(Condition::NE)) { goto L109ba; }
    // 010970: MOVE.W dst:D0 src:(ff0844)
    G.d[0].w(G.io->w(0xff0844));
    // 010976: ADD.W dst:D0 src:D0
    G.d[0].w(ADD<W>(G.d[0].w(), G.d[0].w()));
    // 010978: MOVE.W dst:(A6.L)+3c src:#4f
    G.io->w(G.a[6] + 0x3c, 0x4f);
    // 01097e: SUB.W dst:(A6.L)+3c src:D0
    G.io->w(G.a[6] + 0x3c, SUB<W>(G.io->w(G.a[6] + 0x3c), G.d[0].w()));
    // 010982: LEA.L dst:A0 src:(10a4a)
    G.a[0] = 0x10a4a;
    // 010988: ADDA.W dst:A0 src:(A6.L)+3a
    G.a[0] = ADD<L>(G.a[0], G.io->w(G.a[6] + 0x3a));
    // 01098c: MOVE.W dst:D0 src:(A6.L)+8
    G.d[0].w(G.io->w(G.a[6] + 8));
    // 010990: SUBQ.W dst:D0 src:#3
    G.d[0].w(SUB<W>(G.d[0].w(), 3));
    // 010992: MOVE.W dst:D3 src:(A0)+
    G.d[3].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 010994: MOVE.W dst:D4 src:(A0)
    G.d[4].w(UCC(G.io->w(G.a[0])));
    // 010996: MOVE.W dst:-(USP) src:#0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(0));

  L1099a:;
    // 01099a: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 01099e: ORI.W dst:D0 src:#8000
    G.d[0].w(OR<W>(G.d[0].w(), 0x8000));
    // 0109a2: JSR src:(6b12)
    F6b12();
    // 0109a8: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 0109ac: ADDQ.W dst:D0 src:#3
    G.d[0].w(ADD<W>(G.d[0].w(), 3));
    // 0109ae: CMPI.W dst:(USP) src:#2
    CMP<W>(G.io->w(G.a[7]), 2);
    // 0109b2: Bcc cond:CC src:(109b8)
    if (G.sr.check_condition(Condition::CC)) { goto L109b8; }
    // 0109b4: ADDQ.W dst:(USP) src:#1
    G.io->w(G.a[7], ADD<W>(G.io->w(G.a[7]), 1));
    // 0109b6: Bcc cond:True src:(1099a)
    goto L1099a;

  L109b8:;
    // 0109b8: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  L109ba:;
    // 0109ba: SUBQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, SUB<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 0109be: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10644()
  {
    _log_call(__func__);

    // 010644: Bcc cond:True src:(10a6e)
    goto L10a6e;

  L10a6e:;
    // 010a6e: CMPI.W dst:(A6.L)+3c src:#40
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x40);
    // 010a74: Bcc cond:CC src:(10a80)
    if (G.sr.check_condition(Condition::CC)) { goto L10a80; }
    // 010a76: BSET.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 3));
    // 010a7c: Bcc cond:True src:(10b6e)
    goto L10b6e;

  L10a80:;
    // 010a80: BCLR.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 3));
    // 010a86: CMPI.W dst:(A6.L)+3c src:#50
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x50);
    // 010a8c: Bcc cond:CS src:(10aa8)
    if (G.sr.check_condition(Condition::CS)) { goto L10aa8; }
    // 010a8e: CMPI.W dst:(A6.L)+3c src:#6f
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x6f);
    // 010a94: Bcc cond:CS src:(10ae0)
    if (G.sr.check_condition(Condition::CS)) { goto L10ae0; }
    // 010a96: CMPI.W dst:(A6.L)+3c src:#7f
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x7f);
    // 010a9c: Bcc cond:CS src:(10ac4)
    if (G.sr.check_condition(Condition::CS)) { goto L10ac4; }
    // 010a9e: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, UCC(0));
    // 010aa4: Bcc cond:True src:(10b6e)
    goto L10b6e;

  L10aa8:;
    // 010aa8: ADDI.W dst:(A6.L)+22 src:#80
    G.io->w(G.a[6] + 0x22, ADD<W>(G.io->w(G.a[6] + 0x22), 0x80));
    // 010aae: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 010ab2: ANDI.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 010ab6: Bcc cond:NE src:(10b6e)
    if (G.sr.check_condition(Condition::NE)) { goto L10b6e; }
    // 010aba: ADDI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, ADD<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010ac0: Bcc cond:True src:(10b6e)
    goto L10b6e;

  L10ac4:;
    // 010ac4: SUBI.W dst:(A6.L)+22 src:#80
    G.io->w(G.a[6] + 0x22, SUB<W>(G.io->w(G.a[6] + 0x22), 0x80));
    // 010aca: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 010ace: ANDI.W dst:D0 src:#3
    G.d[0].w(AND<W>(G.d[0].w(), 3));
    // 010ad2: Bcc cond:NE src:(10b6e)
    if (G.sr.check_condition(Condition::NE)) { goto L10b6e; }
    // 010ad6: SUBI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, SUB<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010adc: Bcc cond:True src:(10b6e)
    goto L10b6e;

  L10ae0:;
    // 010ae0: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 010ae4: SUBI.W dst:D0 src:#50
    G.d[0].w(SUB<W>(G.d[0].w(), 0x50));
    // 010ae8: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 010aea: ANDI.W dst:D1 src:#f
    G.d[1].w(AND<W>(G.d[1].w(), 15));
    // 010aee: Bcc cond:NE src:(10b6e)
    if (G.sr.check_condition(Condition::NE)) { goto L10b6e; }
    // 010af0: CMPI.W dst:D0 src:#a
    CMP<W>(G.d[0].w(), 10);
    // 010af4: Bcc cond:CC src:(10b34)
    if (G.sr.check_condition(Condition::CC)) { goto L10b34; }
    // 010af6: MOVE.W dst:D3 src:#fa00
    G.d[3].w(0xfa00);
    // 010afa: MOVE.W dst:D4 src:#800
    G.d[4].w(0x800);
    // 010afe: MOVEQ.L dst:D0 src:#30
    G.d[0].l(UCC(0x30));
    // 010b00: MOVE.W dst:-(USP) src:#0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(0));

  L10b04:;
    // 010b04: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 010b08: ADD.W dst:D0 src:#4000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x4000));
    // 010b0c: JSR src:(6bd0)
    F6bd0();
    // 010b12: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 010b16: CMPI.W dst:(USP) src:#2
    CMP<W>(G.io->w(G.a[7]), 2);
    // 010b1a: Bcc cond:CC src:(10b32)
    if (G.sr.check_condition(Condition::CC)) { goto L10b32; }
    // 010b1c: TST.W src:(USP)
    TST<W>(G.io->w(G.a[7]));
    // 010b1e: Bcc cond:NE src:(10b2a)
    if (G.sr.check_condition(Condition::NE)) { goto L10b2a; }
    // 010b20: ADDI.W dst:D3 src:#400
    G.d[3].w(ADD<W>(G.d[3].w(), 0x400));
    // 010b24: SUBI.W dst:D4 src:#200
    G.d[4].w(SUB<W>(G.d[4].w(), 0x200));
    // 010b28: Bcc cond:True src:(10b2e)
    goto L10b2e;

  L10b2a:;
    // 010b2a: ADDI.W dst:D4 src:#400
    G.d[4].w(ADD<W>(G.d[4].w(), 0x400));

  L10b2e:;
    // 010b2e: ADDQ.W dst:(USP) src:#1
    G.io->w(G.a[7], ADD<W>(G.io->w(G.a[7]), 1));
    // 010b30: Bcc cond:True src:(10b04)
    goto L10b04;

  L10b32:;
    // 010b32: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  L10b34:;
    // 010b34: MOVE.W dst:D3 src:#600
    G.d[3].w(0x600);
    // 010b38: MOVE.W dst:D4 src:#800
    G.d[4].w(0x800);
    // 010b3c: MOVEQ.L dst:D0 src:#10
    G.d[0].l(0x10);
    // 010b3e: ADD.W dst:D3 src:(A6.L)+14
    G.d[3].w(ADD<W>(G.d[3].w(), G.io->w(G.a[6] + 0x14)));
    // 010b42: ADD.W dst:D4 src:(A6.L)+16
    G.d[4].w(ADD<W>(G.d[4].w(), G.io->w(G.a[6] + 0x16)));
    // 010b46: MOVE.W dst:-(USP) src:#0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(0));

  L10b4a:;
    // 010b4a: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 010b4e: ORI.W dst:D0 src:#8000
    G.d[0].w(OR<W>(G.d[0].w(), 0x8000));
    // 010b52: JSR src:(6b22)
    F6b22();
    // 010b58: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 010b5c: SUBQ.W dst:D0 src:#6
    G.d[0].w(SUB<W>(G.d[0].w(), 6));
    // 010b5e: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 010b62: CMPI.W dst:(USP) src:#3
    CMP<W>(G.io->w(G.a[7]), 3);
    // 010b66: Bcc cond:CC src:(10b6c)
    if (G.sr.check_condition(Condition::CC)) { goto L10b6c; }
    // 010b68: ADDQ.W dst:(USP) src:#1
    G.io->w(G.a[7], ADD<W>(G.io->w(G.a[7]), 1));
    // 010b6a: Bcc cond:True src:(10b4a)
    goto L10b4a;

  L10b6c:;
    // 010b6c: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  L10b6e:;
    // 010b6e: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 010b72: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10648()
  {
    _log_call(__func__);

    // 010648: Bcc cond:True src:(1082c)
    F1082c();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1064c()
  {
    _log_call(__func__);

    // 01064c: Bcc cond:True src:(10b7a)
    goto L10b7a;

  L10b7a:;
    // 010b7a: CMPI.W dst:(A6.L)+3c src:#80
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x80);
    // 010b80: Bcc cond:CC src:(10b9a)
    if (G.sr.check_condition(Condition::CC)) { goto L10b9a; }
    // 010b82: BSET.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BSET<B>(G.io->b(G.a[6] + 1), 3));
    // 010b88: MOVE.W dst:D2 src:(ff0858)
    G.d[2].w(UCC(G.io->w(0xff0858)));
    // 010b8e: CMP.W dst:D2 src:(A6.L)+16
    CMP<W>(G.d[2].w(), G.io->w(G.a[6] + 0x16));
    // 010b92: Bcc cond:CS src:(10c16)
    if (G.sr.check_condition(Condition::CS)) { goto L10c16; }
    // 010b96: Bcc cond:True src:(10c12)
    goto L10c12;

  L10b9a:;
    // 010b9a: BCLR.B dst:(A6.L)+1 src:#3
    G.io->b(G.a[6] + 1, BCLR<B>(G.io->b(G.a[6] + 1), 3));
    // 010ba0: CMPI.W dst:(A6.L)+3c src:#98
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x98);
    // 010ba6: Bcc cond:CS src:(10bc4)
    if (G.sr.check_condition(Condition::CS)) { goto L10bc4; }
    // 010ba8: CMPI.W dst:(A6.L)+3c src:#e7
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xe7);
    // 010bae: Bcc cond:CS src:(10bd4)
    if (G.sr.check_condition(Condition::CS)) { goto L10bd4; }
    // 010bb2: CMPI.W dst:(A6.L)+3c src:#ff
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xff);
    // 010bb8: Bcc cond:CS src:(10bcc)
    if (G.sr.check_condition(Condition::CS)) { goto L10bcc; }
    // 010bba: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, UCC(0));
    // 010bc0: Bcc cond:True src:(10c12)
    goto L10c12;

  L10bc4:;
    // 010bc4: ADDI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, ADD<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010bca: Bcc cond:True src:(10c12)
    goto L10c12;

  L10bcc:;
    // 010bcc: SUBI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, SUB<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010bd2: Bcc cond:True src:(10c12)
    goto L10c12;

  L10bd4:;
    // 010bd4: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(G.io->w(SOME_STATE_COUNTER));
    // 010bda: ANDI.W dst:D1 src:#f
    G.d[1].w(AND<W>(G.d[1].w(), 15));
    // 010bde: Bcc cond:NE src:(10c12)
    if (G.sr.check_condition(Condition::NE)) { goto L10c12; }
    // 010be2: MOVE.W dst:D0 src:#2
    G.d[0].w(2);
    // 010be6: MOVE.L dst:D1 src:#2b000000
    G.d[1].l(0x2b000000);
    // 010bec: MOVE.W dst:D2 src:(A6.L)+14
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x14)));
    // 010bf0: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010bf6: ROL.L dst:D2 src:#5
    G.d[2].l(ROL<L>(G.d[2].l(), 5));
    // 010bf8: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010bfa: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(G.io->w(G.a[6] + 0x16));
    // 010bfe: ADDI.W dst:D2 src:#200
    G.d[2].w(ADD<W>(G.d[2].w(), 0x200));
    // 010c02: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010c08: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 010c0a: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010c0c: JSR src:(6600)
    F6600();

  L10c12:;
    // 010c12: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));

  L10c16:;
    // 010c16: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10650()
  {
    _log_call(__func__);

    // 010650: Bcc cond:True src:(10c1c)
    goto L10c1c;

  L10c1c:;
    // 010c1c: CMPI.W dst:(A6.L)+3c src:#40
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x40);
    // 010c22: Bcc cond:CC src:(10c40)
    if (G.sr.check_condition(Condition::CC)) { goto L10c40; }
    // 010c24: CLR.L dst:(A6.L)+38
    G.io->l(G.a[6] + 0x38, 0);
    // 010c28: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(G.io->w(G.a[6] + 0x16));
    // 010c2c: MOVE.W dst:D3 src:(ff0858)
    G.d[3].w(G.io->w(0xff0858));
    // 010c32: ADDI.W dst:D2 src:#c00
    G.d[2].w(ADD<W>(G.d[2].w(), 0xc00));
    // 010c36: CMP.W dst:D3 src:D2
    CMP<W>(G.d[3].w(), G.d[2].w());
    // 010c38: Bcc cond:CS src:(10cba)
    if (G.sr.check_condition(Condition::CS)) { goto L10cba; }
    // 010c3c: Bcc cond:True src:(10cb6)
    goto L10cb6;

  L10c40:;
    // 010c40: CMPI.W dst:(A6.L)+3c src:#60
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x60);
    // 010c46: Bcc cond:CS src:(10c64)
    if (G.sr.check_condition(Condition::CS)) { goto L10c64; }
    // 010c48: CMPI.W dst:(A6.L)+3c src:#d0
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xd0);
    // 010c4e: Bcc cond:CS src:(10c74)
    if (G.sr.check_condition(Condition::CS)) { goto L10c74; }
    // 010c52: CMPI.W dst:(A6.L)+3c src:#f0
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xf0);
    // 010c58: Bcc cond:CS src:(10c6c)
    if (G.sr.check_condition(Condition::CS)) { goto L10c6c; }
    // 010c5a: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, UCC(0));
    // 010c60: Bcc cond:True src:(10cb6)
    goto L10cb6;

  L10c64:;
    // 010c64: ADDI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, ADD<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010c6a: Bcc cond:True src:(10cb6)
    goto L10cb6;

  L10c6c:;
    // 010c6c: SUBI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, SUB<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010c72: Bcc cond:True src:(10cb6)
    goto L10cb6;

  L10c74:;
    // 010c74: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(G.io->w(SOME_STATE_COUNTER));
    // 010c7a: ANDI.W dst:D1 src:#f
    G.d[1].w(AND<W>(G.d[1].w(), 15));
    // 010c7e: Bcc cond:NE src:(10cb6)
    if (G.sr.check_condition(Condition::NE)) { goto L10cb6; }
    // 010c82: MOVE.W dst:D0 src:#2
    G.d[0].w(2);
    // 010c86: MOVE.L dst:D1 src:#2b000000
    G.d[1].l(0x2b000000);
    // 010c8c: MOVE.W dst:D2 src:(A6.L)+14
    G.d[2].w(G.io->w(G.a[6] + 0x14));
    // 010c90: ADDI.W dst:D2 src:#400
    G.d[2].w(ADD<W>(G.d[2].w(), 0x400));
    // 010c94: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010c9a: ROL.L dst:D2 src:#5
    G.d[2].l(ROL<L>(G.d[2].l(), 5));
    // 010c9c: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010c9e: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(G.io->w(G.a[6] + 0x16));
    // 010ca2: ADDI.W dst:D2 src:#200
    G.d[2].w(ADD<W>(G.d[2].w(), 0x200));
    // 010ca6: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010cac: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 010cae: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010cb0: JSR src:(6600)
    F6600();

  L10cb6:;
    // 010cb6: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));

  L10cba:;
    // 010cba: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10654()
  {
    _log_call(__func__);

    // 010654: Bcc cond:True src:(10cc2)
    goto L10cc2;

  L10cc2:;
    // 010cc2: CMPI.W dst:(A6.L)+3c src:#80
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x80);
    // 010cc8: Bcc cond:CC src:(10cde)
    if (G.sr.check_condition(Condition::CC)) { goto L10cde; }
    // 010cca: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(G.io->w(G.a[6] + 0x16));
    // 010cce: MOVE.W dst:D3 src:(ff0858)
    G.d[3].w(UCC(G.io->w(0xff0858)));
    // 010cd4: CMP.W dst:D3 src:D2
    CMP<W>(G.d[3].w(), G.d[2].w());
    // 010cd6: Bcc cond:CC src:(10d5e)
    if (G.sr.check_condition(Condition::CC)) { goto L10d5e; }
    // 010cda: Bcc cond:True src:(10d5a)
    goto L10d5a;

  L10cde:;
    // 010cde: CMPI.W dst:(A6.L)+3c src:#98
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x98);
    // 010ce4: Bcc cond:CS src:(10d02)
    if (G.sr.check_condition(Condition::CS)) { goto L10d02; }
    // 010ce6: CMPI.W dst:(A6.L)+3c src:#e7
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xe7);
    // 010cec: Bcc cond:CS src:(10d12)
    if (G.sr.check_condition(Condition::CS)) { goto L10d12; }
    // 010cf0: CMPI.W dst:(A6.L)+3c src:#ff
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xff);
    // 010cf6: Bcc cond:CS src:(10d0a)
    if (G.sr.check_condition(Condition::CS)) { goto L10d0a; }
    // 010cf8: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, UCC(0));
    // 010cfe: Bcc cond:True src:(10d5a)
    goto L10d5a;

  L10d02:;
    // 010d02: ADDI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, ADD<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010d08: Bcc cond:True src:(10d5a)
    goto L10d5a;

  L10d0a:;
    // 010d0a: SUBI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, SUB<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010d10: Bcc cond:True src:(10d5a)
    goto L10d5a;

  L10d12:;
    // 010d12: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(G.io->w(SOME_STATE_COUNTER));
    // 010d18: ANDI.W dst:D1 src:#f
    G.d[1].w(AND<W>(G.d[1].w(), 15));
    // 010d1c: Bcc cond:NE src:(10d5a)
    if (G.sr.check_condition(Condition::NE)) { goto L10d5a; }
    // 010d20: MOVE.W dst:D0 src:#2
    G.d[0].w(2);
    // 010d24: MOVE.L dst:D1 src:#2b000000
    G.d[1].l(0x2b000000);
    // 010d2a: MOVE.W dst:D2 src:(A6.L)+14
    G.d[2].w(G.io->w(G.a[6] + 0x14));
    // 010d2e: ADDI.W dst:D2 src:#600
    G.d[2].w(ADD<W>(G.d[2].w(), 0x600));
    // 010d32: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010d38: ROL.L dst:D2 src:#5
    G.d[2].l(ROL<L>(G.d[2].l(), 5));
    // 010d3a: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010d3c: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(G.io->w(G.a[6] + 0x16));
    // 010d40: SUBI.W dst:D2 src:#200
    G.d[2].w(SUB<W>(G.d[2].w(), 0x200));
    // 010d44: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010d4a: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 010d4c: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010d4e: ADDI.L dst:D1 src:#800000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x800000));
    // 010d54: JSR src:(6600)
    F6600();

  L10d5a:;
    // 010d5a: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));

  L10d5e:;
    // 010d5e: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10658()
  {
    _log_call(__func__);

    // 010658: Bcc cond:True src:(10d66)
    goto L10d66;

  L10d66:;
    // 010d66: CMPI.W dst:(A6.L)+3c src:#40
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x40);
    // 010d6c: Bcc cond:CC src:(10d82)
    if (G.sr.check_condition(Condition::CC)) { goto L10d82; }
    // 010d6e: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(G.io->w(G.a[6] + 0x16));
    // 010d72: MOVE.W dst:D3 src:(ff0858)
    G.d[3].w(UCC(G.io->w(0xff0858)));
    // 010d78: CMP.W dst:D3 src:D2
    CMP<W>(G.d[3].w(), G.d[2].w());
    // 010d7a: Bcc cond:CC src:(10e02)
    if (G.sr.check_condition(Condition::CC)) { goto L10e02; }
    // 010d7e: Bcc cond:True src:(10dfe)
    goto L10dfe;

  L10d82:;
    // 010d82: CMPI.W dst:(A6.L)+3c src:#58
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x58);
    // 010d88: Bcc cond:CS src:(10da6)
    if (G.sr.check_condition(Condition::CS)) { goto L10da6; }
    // 010d8a: CMPI.W dst:(A6.L)+3c src:#87
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x87);
    // 010d90: Bcc cond:CS src:(10db6)
    if (G.sr.check_condition(Condition::CS)) { goto L10db6; }
    // 010d94: CMPI.W dst:(A6.L)+3c src:#9f
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x9f);
    // 010d9a: Bcc cond:CS src:(10dae)
    if (G.sr.check_condition(Condition::CS)) { goto L10dae; }
    // 010d9c: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, UCC(0));
    // 010da2: Bcc cond:True src:(10dfe)
    goto L10dfe;

  L10da6:;
    // 010da6: ADDI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, ADD<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010dac: Bcc cond:True src:(10dfe)
    goto L10dfe;

  L10dae:;
    // 010dae: SUBI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, SUB<W>(G.io->w(G.a[6] + 0x20), 0x80));
    // 010db4: Bcc cond:True src:(10dfe)
    goto L10dfe;

  L10db6:;
    // 010db6: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(G.io->w(SOME_STATE_COUNTER));
    // 010dbc: ANDI.W dst:D1 src:#f
    G.d[1].w(AND<W>(G.d[1].w(), 15));
    // 010dc0: Bcc cond:NE src:(10dfe)
    if (G.sr.check_condition(Condition::NE)) { goto L10dfe; }
    // 010dc4: MOVE.W dst:D0 src:#2
    G.d[0].w(2);
    // 010dc8: MOVE.L dst:D1 src:#2b000000
    G.d[1].l(0x2b000000);
    // 010dce: MOVE.W dst:D2 src:(A6.L)+14
    G.d[2].w(G.io->w(G.a[6] + 0x14));
    // 010dd2: ADDI.W dst:D2 src:#400
    G.d[2].w(ADD<W>(G.d[2].w(), 0x400));
    // 010dd6: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010ddc: ROL.L dst:D2 src:#5
    G.d[2].l(ROL<L>(G.d[2].l(), 5));
    // 010dde: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010de0: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(G.io->w(G.a[6] + 0x16));
    // 010de4: SUBI.W dst:D2 src:#500
    G.d[2].w(SUB<W>(G.d[2].w(), 0x500));
    // 010de8: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010dee: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 010df0: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010df2: ADDI.L dst:D1 src:#800000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x800000));
    // 010df8: JSR src:(6600)
    F6600();

  L10dfe:;
    // 010dfe: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));

  L10e02:;
    // 010e02: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1065c()
  {
    _log_call(__func__);

    // 01065c: Bcc cond:True src:(10768)
    goto L10768;

  L10768:;
    // 010768: CMPI.W dst:(A6.L)+3c src:#7e
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x7e);
    // 01076e: Bcc cond:CS src:(10822)
    if (G.sr.check_condition(Condition::CS)) { goto L10822; }
    // 010772: CMPI.W dst:(A6.L)+3c src:#90
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x90);
    // 010778: Bcc cond:CS src:(10794)
    if (G.sr.check_condition(Condition::CS)) {
      F10794();
      goto end;
    }
    // 01077a: CMPI.W dst:(A6.L)+3c src:#ad
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xad);
    // 010780: Bcc cond:CS src:(107b2)
    if (G.sr.check_condition(Condition::CS)) {
      F107b2();
      goto end;
    }
    // 010782: CMPI.W dst:(A6.L)+3c src:#bf
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xbf);
    // 010788: Bcc cond:CS src:(107a4)
    if (G.sr.check_condition(Condition::CS)) {
      F107a4();
      goto end;
    }
    // 01078a: MOVE.W dst:(A6.L)+3c src:#40
    G.io->w(G.a[6] + 0x3c, UCC(0x40));
    // 010790: Bcc cond:True src:(10822)
    goto L10822;

  L10822:;
    // 010822: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 010826: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10794()
  {
    _log_call(__func__);

    // 010794: ADDI.W dst:(A6.L)+1e src:#80
    G.io->w(G.a[6] + 0x1e, ADD<W>(G.io->w(G.a[6] + 0x1e), 0x80));
    // 01079a: SUBI.W dst:(A6.L)+22 src:#80
    G.io->w(G.a[6] + 0x22, SUB<W>(G.io->w(G.a[6] + 0x22), 0x80));
    // 0107a0: Bcc cond:True src:(10822)
    goto L10822;

  L10822:;
    // 010822: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 010826: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F107a4()
  {
    _log_call(__func__);

    // 0107a4: SUBI.W dst:(A6.L)+1e src:#80
    G.io->w(G.a[6] + 0x1e, SUB<W>(G.io->w(G.a[6] + 0x1e), 0x80));
    // 0107aa: ADDI.W dst:(A6.L)+22 src:#80
    G.io->w(G.a[6] + 0x22, ADD<W>(G.io->w(G.a[6] + 0x22), 0x80));
    // 0107b0: Bcc cond:True src:(10822)
    goto L10822;

  L10822:;
    // 010822: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 010826: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F107b2()
  {
    _log_call(__func__);

    // 0107b2: MOVE.W dst:D2 src:(A6.L)+3c
    G.d[2].w(G.io->w(G.a[6] + 0x3c));
    // 0107b6: ANDI.W dst:D2 src:#f
    G.d[2].w(AND<W>(G.d[2].w(), 15));
    // 0107ba: Bcc cond:NE src:(10822)
    if (G.sr.check_condition(Condition::NE)) { goto L10822; }
    // 0107bc: JSR src:(6658)
    F6658();
    // 0107c2: MOVE.W dst:D0 src:D1
    G.d[0].w(UCC(G.d[1].w()));
    // 0107c4: CMPI.W dst:(A6.L)+3c src:#5a
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x5a);
    // 0107ca: Bcc cond:CC src:(107de)
    if (G.sr.check_condition(Condition::CC)) { goto L107de; }
    // 0107cc: SUBI.W dst:D1 src:#10
    G.d[1].w(SUB<W>(G.d[1].w(), 0x10));
    // 0107d0: CMPI.W dst:D1 src:#10
    CMP<W>(G.d[1].w(), 0x10);
    // 0107d4: Bcc cond:HI src:(107da)
    if (G.sr.check_condition(Condition::HI)) { goto L107da; }
    // 0107d6: SUBQ.W dst:D0 src:#6
    G.d[0].w(SUB<W>(G.d[0].w(), 6));
    // 0107d8: Bcc cond:True src:(107ee)
    goto L107ee;

  L107da:;
    // 0107da: MOVEQ.L dst:D0 src:#13
    G.d[0].l(UCC(0x13));
    // 0107dc: Bcc cond:True src:(107ee)
    goto L107ee;

  L107de:;
    // 0107de: SUBI.W dst:D1 src:#20
    G.d[1].w(SUB<W>(G.d[1].w(), 0x20));
    // 0107e2: CMPI.W dst:D1 src:#10
    CMP<W>(G.d[1].w(), 0x10);
    // 0107e6: Bcc cond:HI src:(107ec)
    if (G.sr.check_condition(Condition::HI)) { goto L107ec; }
    // 0107e8: SUBQ.W dst:D0 src:#6
    G.d[0].w(SUB<W>(G.d[0].w(), 6));
    // 0107ea: Bcc cond:True src:(107ee)
    goto L107ee;

  L107ec:;
    // 0107ec: MOVEQ.L dst:D0 src:#23
    G.d[0].l(UCC(0x23));

  L107ee:;
    // 0107ee: MOVE.W dst:D3 src:(A6.L)+14
    G.d[3].w(G.io->w(G.a[6] + 0x14));
    // 0107f2: MOVE.W dst:D4 src:(A6.L)+16
    G.d[4].w(G.io->w(G.a[6] + 0x16));
    // 0107f6: SUBI.W dst:D4 src:#900
    G.d[4].w(SUB<W>(G.d[4].w(), 0x900));
    // 0107fa: MOVE.W dst:-(USP) src:#0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(0));

  L107fe:;
    // 0107fe: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 010802: ORI.W dst:D0 src:#c000
    G.d[0].w(OR<W>(G.d[0].w(), 0xc000));
    // 010806: JSR src:(6b22)
    F6b22();
    // 01080c: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 010810: ADDQ.W dst:D0 src:#6
    G.d[0].w(ADD<W>(G.d[0].w(), 6));
    // 010812: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 010816: CMPI.W dst:(USP) src:#2
    CMP<W>(G.io->w(G.a[7]), 2);
    // 01081a: Bcc cond:CC src:(10820)
    if (G.sr.check_condition(Condition::CC)) { goto L10820; }
    // 01081c: ADDQ.W dst:(USP) src:#1
    G.io->w(G.a[7], ADD<W>(G.io->w(G.a[7]), 1));
    // 01081e: Bcc cond:True src:(107fe)
    goto L107fe;

  L10820:;
    // 010820: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;

  L10822:;
    // 010822: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 010826: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1082c()
  {
    _log_call(__func__);

    // 01082c: TST.W src:(A6.L)+38
    TST<W>(G.io->w(G.a[6] + 0x38));
    // 010830: Bcc cond:NE src:(10888)
    if (G.sr.check_condition(Condition::NE)) { goto L10888; }
    // 010832: MOVE.W dst:D0 src:(SOME_STATE_COUNTER)
    G.d[0].w(G.io->w(SOME_STATE_COUNTER));
    // 010838: ADDI.W dst:D0 src:#1f
    G.d[0].w(ADD<W>(G.d[0].w(), 0x1f));
    // 01083c: ANDI.W dst:D0 src:#3f
    G.d[0].w(AND<W>(G.d[0].w(), 0x3f));
    // 010840: Bcc cond:NE src:(108a2)
    if (G.sr.check_condition(Condition::NE)) { goto L108a2; }
    // 010842: MOVE.W dst:D0 src:#30
    G.d[0].w(0x30);
    // 010846: MOVE.W dst:D3 src:#fa00
    G.d[3].w(0xfa00);
    // 01084a: MOVEQ.L dst:D4 src:#0
    G.d[4].l(UCC(0));
    // 01084c: MOVE.W dst:-(USP) src:#0
    G.a[7] -= 2;
    G.io->w(G.a[7], UCC(0));

  L10850:;
    // 010850: MOVEM.W dst:-(USP) regs:D4,D3,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[4].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 010854: ADD.W dst:D0 src:#4000
    G.d[0].w(ADD<W>(G.d[0].w(), 0x4000));
    // 010858: JSR src:(6bd0)
    F6bd0();
    // 01085e: MOVEM.W src:(USP)+ regs:D0,D3,D4
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[4].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 010862: CMPI.W dst:(USP) src:#2
    CMP<W>(G.io->w(G.a[7]), 2);
    // 010866: Bcc cond:CC src:(1087e)
    if (G.sr.check_condition(Condition::CC)) { goto L1087e; }
    // 010868: TST.W src:(USP)
    TST<W>(G.io->w(G.a[7]));
    // 01086a: Bcc cond:NE src:(10876)
    if (G.sr.check_condition(Condition::NE)) { goto L10876; }
    // 01086c: SUBI.W dst:D3 src:#400
    G.d[3].w(SUB<W>(G.d[3].w(), 0x400));
    // 010870: SUBI.W dst:D4 src:#100
    G.d[4].w(SUB<W>(G.d[4].w(), 0x100));
    // 010874: Bcc cond:True src:(1087a)
    goto L1087a;

  L10876:;
    // 010876: ADDI.W dst:D4 src:#200
    G.d[4].w(ADD<W>(G.d[4].w(), 0x200));

  L1087a:;
    // 01087a: ADDQ.W dst:(USP) src:#1
    G.io->w(G.a[7], ADD<W>(G.io->w(G.a[7]), 1));
    // 01087c: Bcc cond:True src:(10850)
    goto L10850;

  L1087e:;
    // 01087e: MOVE.W dst:D0 src:(USP)+
    G.d[0].w(UCC(G.io->w(G.a[7])));
    G.a[7] += 2;
    // 010880: MOVE.W dst:(A6.L)+38 src:#c
    G.io->w(G.a[6] + 0x38, UCC(12));
    // 010886: Bcc cond:True src:(108a8)
    goto L108a8;

  L10888:;
    // 010888: CMPI.W dst:(A6.L)+38 src:#9
    CMP<W>(G.io->w(G.a[6] + 0x38), 9);
    // 01088e: Bcc cond:CS src:(10898)
    if (G.sr.check_condition(Condition::CS)) { goto L10898; }
    // 010890: ADDI.W dst:(A6.L)+20 src:#100
    G.io->w(G.a[6] + 0x20, ADD<W>(G.io->w(G.a[6] + 0x20), 0x100));
    // 010896: Bcc cond:True src:(1089e)
    goto L1089e;

  L10898:;
    // 010898: SUBI.W dst:(A6.L)+20 src:#80
    G.io->w(G.a[6] + 0x20, SUB<W>(G.io->w(G.a[6] + 0x20), 0x80));

  L1089e:;
    // 01089e: SUBQ.W dst:(A6.L)+38 src:#1
    G.io->w(G.a[6] + 0x38, SUB<W>(G.io->w(G.a[6] + 0x38), 1));

  L108a2:;
    // 0108a2: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  L108a8:;
    // 0108a8: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10e08()
  {
    _log_call(__func__);

    // 010e08: MOVE.W dst:(A6.L)+14 src:#ac00
    G.io->w(G.a[6] + 0x14, 0xac00);
    // 010e0e: MOVE.W dst:D0 src:(A6.L)+26
    G.d[0].w(G.io->w(G.a[6] + 0x26));
    // 010e12: AND.W dst:D0 src:#ff
    G.d[0].w(AND<W>(G.d[0].w(), 0xff));
    // 010e16: ROL.W dst:D0 src:#7
    G.d[0].w(ROL<W>(G.d[0].w(), 7));
    // 010e18: MOVE.W dst:(A6.L)+16 src:D0
    G.io->w(G.a[6] + 0x16, UCC(G.d[0].w()));
    // 010e1c: JSR src:(6820)
    F6820();
    // 010e22: MOVE.W dst:(A6.L)+c src:#0
    G.io->w(G.a[6] + 12, 0);
    // 010e28: CLR.W dst:(A6.L)+30
    G.io->w(G.a[6] + 0x30, 0);
    // 010e2c: CLR.L dst:(A6.L)+3c
    G.io->l(G.a[6] + 0x3c, 0);
    // 010e30: MOVE.W dst:(A6.L)+24 src:#0
    G.io->w(G.a[6] + 0x24, 0);
    // 010e36: MOVE.W dst:D0 src:#2000
    G.d[0].w(0x2000);
    // 010e3a: MOVE.W dst:D1 src:#fc00
    G.d[1].w(UCC(0xfc00));
    // 010e3e: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 010e42: Bcc cond:EQ src:(10e4c)
    if (G.sr.check_condition(Condition::EQ)) { goto L10e4c; }
    // 010e44: MOVE.W dst:D0 src:#3000
    G.d[0].w(0x3000);
    // 010e48: MOVE.W dst:D1 src:#400
    G.d[1].w(UCC(0x400));

  L10e4c:;
    // 010e4c: ADD.W dst:(A6.L)+16 src:D1
    G.io->w(G.a[6] + 0x16, ADD<W>(G.io->w(G.a[6] + 0x16), G.d[1].w()));
    // 010e50: ANDI.W dst:(A6.L)+10 src:#7ff
    G.io->w(G.a[6] + 0x10, AND<W>(G.io->w(G.a[6] + 0x10), 0x7ff));
    // 010e56: OR.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, OR<W>(G.io->w(G.a[6] + 0x10), G.d[0].w()));
    // 010e5a: MOVE.W dst:D1 src:#35d
    G.d[1].w(UCC(0x35d));
    // 010e5e: JMP src:(5a9a)
    F5a9a();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10e64()
  {
    _log_call(__func__);

    // 010e64: JSR src:(6858)
    F6858();
    // 010e6a: BTST.B dst:(A6) src:#4
    BTST<B>(G.io->b(G.a[6]), 4);
    // 010e6e: Bcc cond:EQ src:(10e76)
    if (G.sr.check_condition(Condition::EQ)) { goto L10e76; }

  L10e70:;
    // 010e70: JMP src:(736a)
    F736a();
    goto end;

  L10e76:;
    // 010e76: TST.W src:(A6.L)+48
    TST<W>(G.io->w(G.a[6] + 0x48));
    // 010e7a: Bcc cond:EQ src:(10e70)
    if (G.sr.check_condition(Condition::EQ)) { goto L10e70; }
    // 010e7c: BCLR.B dst:(A6) src:#6
    G.io->b(G.a[6], BCLR<B>(G.io->b(G.a[6]), 6));
    // 010e80: Bcc cond:EQ src:(10e8a)
    if (G.sr.check_condition(Condition::EQ)) { goto L10e8a; }
    // 010e82: CMPI.W dst:(A6.L)+c src:#4
    CMP<W>(G.io->w(G.a[6] + 12), 4);
    // 010e88: Bcc cond:CC src:(10e70)
    if (G.sr.check_condition(Condition::CC)) { goto L10e70; }

  L10e8a:;
    // 010e8a: JSR src:(675a)
    F675a();
    // 010e90: Bcc cond:CS src:(10e98)
    if (G.sr.check_condition(Condition::CS)) { goto L10e98; }
    // 010e92: JMP src:(50a0)
    F50a0();
    goto end;

  L10e98:;
    // 010e98: CMPI.W dst:(A6.L)+3c src:#40
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x40);
    // 010e9e: Bcc cond:CS src:(10f54)
    if (G.sr.check_condition(Condition::CS)) { goto L10f54; }
    // 010ea2: CMPI.W dst:(A6.L)+3c src:#48
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x48);
    // 010ea8: Bcc cond:CS src:(10ec6)
    if (G.sr.check_condition(Condition::CS)) { goto L10ec6; }
    // 010eaa: CMPI.W dst:(A6.L)+3c src:#98
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0x98);
    // 010eb0: Bcc cond:CS src:(10f0e)
    if (G.sr.check_condition(Condition::CS)) { goto L10f0e; }
    // 010eb4: CMPI.W dst:(A6.L)+3c src:#a0
    CMP<W>(G.io->w(G.a[6] + 0x3c), 0xa0);
    // 010eba: Bcc cond:CS src:(10eee)
    if (G.sr.check_condition(Condition::CS)) { goto L10eee; }
    // 010ebc: MOVE.W dst:(A6.L)+3c src:#0
    G.io->w(G.a[6] + 0x3c, UCC(0));
    // 010ec2: Bcc cond:True src:(10f54)
    goto L10f54;

  L10ec6:;
    // 010ec6: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 010eca: SUBI.W dst:D0 src:#40
    G.d[0].w(SUB<W>(G.d[0].w(), 0x40));
    // 010ece: MOVEQ.L dst:D1 src:#0
    G.d[1].l(0);
    // 010ed0: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 010ed2: ANDI.W dst:D0 src:#1
    G.d[0].w(AND<W>(G.d[0].w(), 1));
    // 010ed6: Bcc cond:NE src:(10f54)
    if (G.sr.check_condition(Condition::NE)) { goto L10f54; }
    // 010eda: ANDI.W dst:D1 src:#6
    G.d[1].w(AND<W>(G.d[1].w(), 6));
    // 010ede: LSL.W dst:D1 src:#2
    G.d[1].w(LSL<W>(G.d[1].w(), 2));
    // 010ee0: ADDI.W dst:D1 src:#35d
    G.d[1].w(ADD<W>(G.d[1].w(), 0x35d));

  L10ee4:;
    // 010ee4: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 010ee8: JMP src:(5a9a)
    F5a9a();
    goto end;

  L10eee:;
    // 010eee: MOVE.W dst:D0 src:(A6.L)+3c
    G.d[0].w(G.io->w(G.a[6] + 0x3c));
    // 010ef2: SUBI.W dst:D0 src:#98
    G.d[0].w(SUB<W>(G.d[0].w(), 0x98));
    // 010ef6: MOVE.W dst:D1 src:D0
    G.d[1].w(G.d[0].w());
    // 010ef8: ANDI.W dst:D1 src:#1
    G.d[1].w(AND<W>(G.d[1].w(), 1));
    // 010efc: Bcc cond:NE src:(10f54)
    if (G.sr.check_condition(Condition::NE)) { goto L10f54; }
    // 010efe: ANDI.W dst:D0 src:#6
    G.d[0].w(AND<W>(G.d[0].w(), 6));
    // 010f02: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));
    // 010f04: MOVE.L dst:D1 src:#36d
    G.d[1].l(0x36d);
    // 010f0a: SUB.W dst:D1 src:D0
    G.d[1].w(SUB<W>(G.d[1].w(), G.d[0].w()));
    // 010f0c: Bcc cond:True src:(10ee4)
    goto L10ee4;

  L10f0e:;
    // 010f0e: MOVE.W dst:D1 src:(SOME_STATE_COUNTER)
    G.d[1].w(G.io->w(SOME_STATE_COUNTER));
    // 010f14: ANDI.W dst:D1 src:#1f
    G.d[1].w(AND<W>(G.d[1].w(), 0x1f));
    // 010f18: Bcc cond:NE src:(10f54)
    if (G.sr.check_condition(Condition::NE)) { goto L10f54; }
    // 010f1c: MOVE.W dst:D0 src:#2
    G.d[0].w(2);
    // 010f20: MOVE.L dst:D1 src:#2b000000
    G.d[1].l(0x2b000000);
    // 010f26: MOVE.W dst:D2 src:(A6.L)+14
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x14)));
    // 010f2a: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010f30: ROL.L dst:D2 src:#5
    G.d[2].l(ROL<L>(G.d[2].l(), 5));
    // 010f32: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010f34: MOVE.W dst:D2 src:(A6.L)+16
    G.d[2].w(UCC(G.io->w(G.a[6] + 0x16)));
    // 010f38: ANDI.L dst:D2 src:#ff80
    G.d[2].l(AND<L>(G.d[2].l(), 0xff80));
    // 010f3e: ROR.L dst:D2 src:#7
    G.d[2].l(ROR<L>(G.d[2].l(), 7));
    // 010f40: OR.L dst:D1 src:D2
    G.d[1].l(OR<L>(G.d[1].l(), G.d[2].l()));
    // 010f42: TST.W src:(A6.L)+28
    TST<W>(G.io->w(G.a[6] + 0x28));
    // 010f46: Bcc cond:EQ src:(10f4e)
    if (G.sr.check_condition(Condition::EQ)) { goto L10f4e; }
    // 010f48: ADDI.L dst:D1 src:#800000
    G.d[1].l(ADD<L>(G.d[1].l(), 0x800000));

  L10f4e:;
    // 010f4e: JSR src:(6600)
    F6600();

  L10f54:;
    // 010f54: ADDQ.W dst:(A6.L)+3c src:#1
    G.io->w(G.a[6] + 0x3c, ADD<W>(G.io->w(G.a[6] + 0x3c), 1));
    // 010f58: JMP src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    goto end;

  end:
    _log_ret(__func__);
  }

  void F10f5e()
  {
    _log_call(__func__);

    // 010f5e: MOVE.W dst:(VDP_CTRL1) src:#9100
    G.io->w(VDP_CTRL1, 0x9100);
    // 010f66: MOVE.W dst:(VDP_CTRL1) src:#9200
    G.io->w(VDP_CTRL1, UCC(0x9200));
    // 010f6e: JSR src:(5bf4)
    _m->clear_sprites();
    // 010f74: CLR.W dst:(ff003c)
    G.io->w(0xff003c, 0);
    // 010f7a: CLR.W dst:(ff003e)
    G.io->w(0xff003e, 0);
    // 010f80: ADDQ.W dst:(ff0040) src:#1
    G.io->w(0xff0040, ADD<W>(G.io->w(0xff0040), 1));
    // 010f86: ADDQ.W dst:(ff0066) src:#1
    G.io->w(0xff0066, ADD<W>(G.io->w(0xff0066), 1));
    // 010f8c: MOVE.W dst:(RAM_BEGIN) src:#40
    G.io->w(RAM_BEGIN, 0x40);
    // 010f94: MOVE.W dst:D0 src:#27
    G.d[0].w(UCC(0x27));
    // 010f98: JSR src:(663a)
    F663a();
    // 010f9e: MOVE.W dst:D0 src:#e1
    G.d[0].w(0xe1);
    // 010fa2: MOVE.L dst:D1 src:#3e000
    G.d[1].l(0x3e000);
    // 010fa8: MOVE.W dst:D2 src:#406
    G.d[2].w(UCC(0x406));
    // 010fac: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 010fb2: MOVEQ.L dst:D0 src:#2
    G.d[0].l(2);
    // 010fb4: MOVE.L dst:D1 src:#369a0
    G.d[1].l(0x369a0);
    // 010fba: MOVE.W dst:D2 src:#3f2
    G.d[2].w(UCC(0x3f2));
    // 010fbe: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 010fc4: MOVE.W dst:D0 src:#2406
    G.d[0].w(0x2406);
    // 010fc8: MOVE.W dst:D1 src:#239a
    G.d[1].w(0x239a);
    // 010fcc: MOVEQ.L dst:D2 src:#e
    G.d[2].l(14);
    // 010fce: MOVEQ.L dst:D3 src:#e
    G.d[3].l(UCC(14));
    // 010fd0: JSR src:(6414)
    F6414();
    // 010fd6: MOVE.L dst:(ff009a) src:#1237e
    G.io->l(0xff009a, UCC(0x1237e));
    // 010fe0: JSR src:(5f28)
    F5f28();
    // 010fe6: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 010fea: MOVE.L dst:D1 src:#1237e
    G.d[1].l(0x1237e);
    // 010ff0: MOVE.W dst:D2 src:#40
    G.d[2].w(UCC(0x40));
    // 010ff4: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 010ffa: MOVE.W dst:D0 src:#4406
    G.d[0].w(0x4406);
    // 010ffe: MOVE.W dst:D1 src:#239a
    G.d[1].w(0x239a);
    // 011002: MOVEQ.L dst:D2 src:#e
    G.d[2].l(14);
    // 011004: MOVEQ.L dst:D3 src:#e
    G.d[3].l(UCC(14));
    // 011006: JSR src:(6414)
    F6414();
    // 01100c: MOVE.W dst:D0 src:#40
    G.d[0].w(UCC(0x40));
    // 011010: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 011016: MOVE.W dst:D1 src:#6a6
    G.d[1].w(0x6a6);
    // 01101a: MOVE.W dst:D2 src:#1
    G.d[2].w(UCC(1));

  L1101e:;
    // 01101e: MOVEM.W dst:-(USP) regs:D2,D1,D0
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[2].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[1].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[0].w());
    // 011022: MOVE.W dst:D0 src:#3f2
    G.d[0].w(0x3f2);
    // 011026: MOVEQ.L dst:D3 src:#0
    G.d[3].l(UCC(0));
    // 011028: JSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 01102e: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 011030: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 011036: MOVEM.W src:(USP)+ regs:D0,D1,D2
    G.d[0].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[1].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[2].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 01103a: SUBQ.W dst:D1 src:#2
    G.d[1].w(SUB<W>(G.d[1].w(), 2));
    // 01103c: ADDQ.W dst:D2 src:#2
    G.d[2].w(ADD<W>(G.d[2].w(), 2));
    // 01103e: CMP.W dst:D1 src:#680
    CMP<W>(G.d[1].w(), 0x680);
    // 011042: Bcc cond:CC src:(1101e)
    if (G.sr.check_condition(Condition::CC)) { goto L1101e; }
    // 011044: MOVEQ.L dst:D0 src:#20
    G.d[0].l(UCC(0x20));
    // 011046: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 01104c: MOVEQ.L dst:D0 src:#f
    G.d[0].l(15);
    // 01104e: MOVE.L dst:(VDP_CTRL1) src:#c0400000
    G.io->l(VDP_CTRL1, UCC(0xc0400000));

  L11058:;
    // 011058: MOVE.W dst:(VDP_DATA1) src:#eee
    G.io->w(VDP_DATA1, UCC(0xeee));
    // 011060: DBcc.W cond:False dst:D0 src:(11058)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L11058; }
    // 011064: MOVEQ.L dst:D0 src:#18
    G.d[0].l(UCC(0x18));
    // 011066: JSR src:(654c)
    F654c();
    // 01106c: MOVEQ.L dst:D0 src:#14
    G.d[0].l(UCC(0x14));
    // 01106e: JSR src:(654c)
    F654c();
    // 011074: MOVE.W dst:D1 src:#680
    G.d[1].w(0x680);
    // 011078: MOVE.W dst:D3 src:#1
    G.d[3].w(UCC(1));

  L1107c:;
    // 01107c: MOVEM.W dst:-(USP) regs:D3,D1
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[3].w());
    G.a[7] -= 2;
    G.io->w(G.a[7], G.d[1].w());
    // 011080: MOVE.W dst:D0 src:#3f3
    G.d[0].w(0x3f3);
    // 011084: MOVEQ.L dst:D2 src:#27
    G.d[2].l(UCC(0x27));
    // 011086: JSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 01108c: MOVEQ.L dst:D0 src:#2
    G.d[0].l(UCC(2));
    // 01108e: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 011094: MOVEM.W src:(USP)+ regs:D1,D3
    G.d[1].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    G.d[3].l(G.io->w(G.a[7]));
    G.a[7] += 2;
    // 011098: ADDQ.W dst:D3 src:#2
    G.d[3].w(ADD<W>(G.d[3].w(), 2));
    // 01109a: SUB.W dst:D1 src:#80
    G.d[1].w(SUB<W>(G.d[1].w(), 0x80));
    // 01109e: Bcc cond:CC src:(1107c)
    if (G.sr.check_condition(Condition::CC)) { goto L1107c; }
    // 0110a0: MOVE.W dst:D0 src:#40
    G.d[0].w(UCC(0x40));
    // 0110a4: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 0110aa: JSR src:(5e08)
    _m->clear_cram();
    // 0110b0: JSR src:(6442)
    _m->clear_all_planes();
    // 0110b6: MOVE.W dst:(VDP_CTRL1) src:#9100
    G.io->w(VDP_CTRL1, 0x9100);
    // 0110be: MOVE.W dst:(VDP_CTRL1) src:#9200
    G.io->w(VDP_CTRL1, UCC(0x9200));
    // 0110c6: JSR src:(65a4)
    F65a4();
    // 0110cc: MOVEQ.L dst:D0 src:#20
    G.d[0].l(UCC(0x20));
    // 0110ce: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 0110d4: MOVE.W dst:D0 src:#9
    G.d[0].w(UCC(9));
    // 0110d8: JSR src:(654c)
    F654c();
    // 0110de: MOVE.W dst:D0 src:#5
    G.d[0].w(5);
    // 0110e2: MOVE.L dst:D1 src:#66520
    G.d[1].l(0x66520);
    // 0110e8: MOVE.W dst:D2 src:#3f2
    G.d[2].w(UCC(0x3f2));
    // 0110ec: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 0110f2: MOVEQ.L dst:D0 src:#30
    G.d[0].l(0x30);
    // 0110f4: MOVE.L dst:D1 src:#363a0
    G.d[1].l(0x363a0);
    // 0110fa: MOVE.W dst:D2 src:#384
    G.d[2].w(UCC(0x384));
    // 0110fe: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 011104: MOVE.W dst:(VSCROLL_FG) src:#10
    G.io->w(VSCROLL_FG, 0x10);
    // 01110c: CLR.L dst:(ff009a)
    G.io->l(0xff009a, 0);
    // 011112: CLR.W dst:(ff009e)
    G.io->w(0xff009e, 0);
    // 011118: MOVE.L dst:(ff00a0) src:#11cb8
    G.io->l(0xff00a0, 0x11cb8);
    // 011122: ADDQ.W dst:(ff000a) src:#1
    G.io->w(0xff000a, ADD<W>(G.io->w(0xff000a), 1));
    // 011128: CMPI.W dst:(ff000a) src:#2
    CMP<W>(G.io->w(0xff000a), 2);
    // 011130: Bcc cond:LS src:(1114e)
    if (G.sr.check_condition(Condition::LS)) { goto L1114e; }
    // 011132: MOVE.W dst:(ff000a) src:#2
    G.io->w(0xff000a, 2);
    // 01113a: MOVE.W dst:(ff003a) src:#63
    G.io->w(0xff003a, 0x63);
    // 011142: MOVE.L dst:(ff00a0) src:#11d44
    G.io->l(0xff00a0, UCC(0x11d44));
    // 01114c: Bcc cond:True src:(11164)
    goto L11164;

  L1114e:;
    // 01114e: CMPI.W dst:(ff000a) src:#1
    CMP<W>(G.io->w(0xff000a), 1);
    // 011156: Bcc cond:EQ src:(11746)
    if (G.sr.check_condition(Condition::EQ)) { goto L11746; }
    // 01115a: MOVE.L dst:(ff00a0) src:#11cf4
    G.io->l(0xff00a0, UCC(0x11cf4));

  L11164:;
    // 011164: MOVE.W dst:D0 src:#5d
    G.d[0].w(0x5d);
    // 011168: MOVE.L dst:D1 src:#35800
    G.d[1].l(0x35800);
    // 01116e: MOVE.W dst:D2 src:#1b4
    G.d[2].w(UCC(0x1b4));
    // 011172: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 011178: MOVE.W dst:D0 src:#22d
    G.d[0].w(0x22d);
    // 01117c: MOVE.L dst:D1 src:#61f80
    G.d[1].l(0x61f80);
    // 011182: MOVE.W dst:D2 src:#406
    G.d[2].w(UCC(0x406));
    // 011186: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 01118c: MOVE.W dst:D0 src:#134
    G.d[0].w(0x134);
    // 011190: MOVE.L dst:D1 src:#682a0
    G.d[1].l(0x682a0);
    // 011196: MOVE.W dst:D2 src:#633
    G.d[2].w(UCC(0x633));
    // 01119a: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 0111a0: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 0111a4: MOVE.L dst:D1 src:#12292
    G.d[1].l(0x12292);
    // 0111aa: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 0111ae: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 0111b4: MOVE.W dst:D0 src:#20
    G.d[0].w(0x20);
    // 0111b8: MOVE.L dst:D1 src:#123be
    G.d[1].l(0x123be);
    // 0111be: MOVE.W dst:D2 src:#20
    G.d[2].w(UCC(0x20));
    // 0111c2: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 0111c8: CLR.L dst:(ff0842)
    G.io->l(0xff0842, UCC(0));
    // 0111ce: BSR src:(119fe)
    F119fe();
    // 0111d2: MOVE.W dst:D7 src:#100
    G.d[7].w(UCC(0x100));
    // 0111d6: BSR src:(115f4)
    F115f4();
    // 0111da: BSR src:(11580)
    F11580();
    // 0111de: MOVE.W dst:D7 src:#100
    G.d[7].w(UCC(0x100));
    // 0111e2: BSR src:(115f4)
    F115f4();
    // 0111e6: BSR src:(115e0)
    F115e0();
    // 0111ea: BSR src:(115e0)
    F115e0();
    // 0111ee: BSR src:(115c8)
    F115c8();
    // 0111f2: BSR src:(115e0)
    F115e0();
    // 0111f6: BSR src:(115c8)
    F115c8();
    // 0111fa: BSR src:(115e0)
    F115e0();
    // 0111fe: BSR src:(115e0)
    F115e0();
    // 011202: CMPI.W dst:(ff003a) src:#63
    CMP<W>(G.io->w(0xff003a), 0x63);
    // 01120a: Bcc cond:EQ src:(1124c)
    if (G.sr.check_condition(Condition::EQ)) { goto L1124c; }
    // 01120c: LEA.L dst:A0 src:(21ae)
    G.a[0] = 0x21ae;
    // 011212: JSR src:(1ed8)
    F1ed8();
    // 011218: LEA.L dst:A0 src:(21da)
    G.a[0] = 0x21da;
    // 01121e: JSR src:(1ed8)
    F1ed8();
    // 011224: LEA.L dst:A0 src:(2204)
    G.a[0] = 0x2204;
    // 01122a: JSR src:(1ed8)
    F1ed8();
    // 011230: BSR src:(115c8)
    F115c8();
    // 011234: BSR src:(115e0)
    F115e0();
    // 011238: BSR src:(115e0)
    F115e0();
    // 01123c: BSR src:(115c8)
    F115c8();
    // 011240: BSR src:(115a4)
    F115a4();
    // 011244: MOVE.W dst:D7 src:#40
    G.d[7].w(UCC(0x40));
    // 011248: Bcc cond:True src:(115f4)
    F115f4();
    goto end;

  L1124c:;
    // 01124c: LEA.L dst:A6 src:(1152c)
    G.a[6] = 0x1152c;
    // 011252: LEA.L dst:A5 src:(1151c)
    G.a[5] = 0x1151c;

  L11258:;
    // 011258: MOVE.L dst:A4 src:(A5)+
    G.a[4] = UCC(G.io->l(G.a[5]));
    G.a[5] += 4;
    // 01125a: MOVE.L dst:D7 src:#0
    G.d[7].l(0);
    // 011260: MOVE.W dst:D7 src:(A4)+
    G.d[7].w(UCC(G.io->w(G.a[4])));
    G.a[4] += 2;
    // 011262: SWAP.L dst:D7
    G.d[7].l(SWAP(G.d[7].l()));
    // 011264: OR.L dst:D7 src:#40000000
    G.d[7].l(OR<L>(G.d[7].l(), 0x40000000));

  L1126a:;
    // 01126a: MOVE.L dst:A0 src:(A6)+
    G.a[0] = UCC(G.io->l(G.a[6]));
    G.a[6] += 4;
    // 01126c: CMPA.L dst:A6 src:#1155c
    CMP<L>(G.a[6], 0x1155c);
    // 011272: Bcc cond:CS src:(1127a)
    if (G.sr.check_condition(Condition::CS)) { goto L1127a; }
    // 011274: LEA.L dst:A6 src:(1152c)
    G.a[6] = 0x1152c;

  L1127a:;
    // 01127a: JSR src:(A0)
    JUMP_MAP(G.a[0]);
    // 01127c: MOVEQ.L dst:D0 src:#1a
    G.d[0].l(UCC(0x1a));
    // 01127e: JSR src:(654c)
    F654c();
    // 011284: MOVE.L dst:(VDP_CTRL1) src:D7
    G.io->l(VDP_CTRL1, G.d[7].l());
    // 01128a: MOVE.W dst:(VDP_DATA1) src:(A4)+
    G.io->w(VDP_DATA1, UCC(G.io->w(G.a[4])));
    G.a[4] += 2;
    // 011290: ADD.L dst:D7 src:#20000
    G.d[7].l(ADD<L>(G.d[7].l(), 0x20000));
    // 011296: MOVEM.L dst:-(USP) regs:A6,A5,A4,D7
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[6]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[5]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[4]);
    G.a[7] -= 4;
    G.io->l(G.a[7], G.d[7].l());
    // 01129a: MOVEQ.L dst:D7 src:#7
    G.d[7].l(UCC(7));
    // 01129c: BSR src:(115f4)
    F115f4();
    // 0112a0: MOVEM.L src:(USP)+ regs:D7,A4,A5,A6
    G.d[7].l(G.io->l(G.a[7]));
    G.a[7] += 4;
    G.a[4] = G.io->l(G.a[7]);
    G.a[7] += 4;
    G.a[5] = G.io->l(G.a[7]);
    G.a[7] += 4;
    G.a[6] = G.io->l(G.a[7]);
    G.a[7] += 4;
    // 0112a4: CMPI.W dst:(A4) src:#ffff
    CMP<W>(G.io->w(G.a[4]), 0xffff);
    // 0112a8: Bcc cond:NE src:(1126a)
    if (G.sr.check_condition(Condition::NE)) { goto L1126a; }
    // 0112aa: CMPA.L dst:A5 src:#1152c
    CMP<L>(G.a[5], 0x1152c);
    // 0112b0: Bcc cond:CS src:(11258)
    if (G.sr.check_condition(Condition::CS)) { goto L11258; }
    // 0112b2: BSR src:(115c8)
    F115c8();
    // 0112b6: LEA.L dst:A5 src:(1135a)
    G.a[5] = 0x1135a;

  L112bc:;
    // 0112bc: LEA.L dst:A6 src:(ff0842)
    G.a[6] = 0xff0842;
    // 0112c2: CLR.W dst:(A6.L)+e
    G.io->w(G.a[6] + 14, 0);
    // 0112c6: MOVE.L dst:(A6.L)+14 src:#60003800
    G.io->l(G.a[6] + 0x14, 0x60003800);
    // 0112ce: MOVE.L dst:A0 src:(A5)+
    G.a[0] = UCC(G.io->l(G.a[5]));
    G.a[5] += 4;
    // 0112d0: JSR src:(5b70)
    F5b70();
    // 0112d6: MOVE.L dst:-(USP) src:A5
    G.a[7] -= 4;
    G.io->l(G.a[7], G.a[5]);
    // 0112d8: MOVEQ.L dst:D7 src:#2
    G.d[7].l(UCC(2));
    // 0112da: BSR src:(115f4)
    F115f4();
    // 0112de: MOVE.L dst:A5 src:(USP)+
    G.a[5] = UCC(G.io->l(G.a[7]));
    G.a[7] += 4;
    // 0112e0: CMPI.L dst:(A5) src:#ffffffff
    CMP<L>(G.io->l(G.a[5]), 0xffffffff);
    // 0112e6: Bcc cond:NE src:(112bc)
    if (G.sr.check_condition(Condition::NE)) { goto L112bc; }
    // 0112e8: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 0112ea: MOVEQ.L dst:D1 src:#8
    G.d[1].l(UCC(8));
    // 0112ec: JSR src:(5bd6)
    F5bd6();
    // 0112f2: BSR src:(11bf0)
    F11bf0();
    // 0112f6: MOVE.W dst:D0 src:#a6d1
    G.d[0].w(0xa6d1);
    // 0112fa: MOVE.W dst:D1 src:#2106
    G.d[1].w(0x2106);
    // 0112fe: MOVEQ.L dst:D2 src:#7
    G.d[2].l(7);
    // 011300: MOVEQ.L dst:D3 src:#7
    G.d[3].l(UCC(7));
    // 011302: JSR src:(6414)
    F6414();
    // 011308: MOVE.W dst:D0 src:#a711
    G.d[0].w(0xa711);
    // 01130c: MOVE.W dst:D1 src:#2504
    G.d[1].w(0x2504);
    // 011310: MOVEQ.L dst:D2 src:#9
    G.d[2].l(9);
    // 011312: MOVEQ.L dst:D3 src:#6
    G.d[3].l(UCC(6));
    // 011314: JSR src:(6414)
    F6414();
    // 01131a: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 01131e: MOVE.L dst:D1 src:#12292
    G.d[1].l(0x12292);
    // 011324: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 011328: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 01132e: MOVE.W dst:D0 src:#20
    G.d[0].w(0x20);
    // 011332: MOVE.L dst:D1 src:#123be
    G.d[1].l(0x123be);
    // 011338: MOVE.W dst:D2 src:#20
    G.d[2].w(UCC(0x20));
    // 01133c: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 011342: MOVE.W dst:D7 src:#40
    G.d[7].w(UCC(0x40));
    // 011346: BSR src:(115f4)
    F115f4();
    // 01134a: BSR src:(114ec)
    F114ec();
    // 01134e: BSR src:(114ec)
    F114ec();
    // 011352: MOVE.W dst:D7 src:#80
    G.d[7].w(UCC(0x80));
    // 011356: Bcc cond:True src:(115f4)
    F115f4();
    goto end;

  L11746:;
    // 011746: MOVE.W dst:D0 src:#8a
    G.d[0].w(0x8a);
    // 01174a: MOVE.L dst:D1 src:#36a00
    G.d[1].l(0x36a00);
    // 011750: MOVE.W dst:D2 src:#1b4
    G.d[2].w(UCC(0x1b4));
    // 011754: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 01175a: MOVE.W dst:D0 src:#2b2
    G.d[0].w(0x2b2);
    // 01175e: MOVE.L dst:D1 src:#6a920
    G.d[1].l(0x6a920);
    // 011764: MOVE.W dst:D2 src:#406
    G.d[2].w(UCC(0x406));
    // 011768: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 01176e: MOVE.W dst:D0 src:#40
    G.d[0].w(0x40);
    // 011772: MOVE.L dst:D1 src:#58d40
    G.d[1].l(0x58d40);
    // 011778: MOVE.W dst:D2 src:#2b4
    G.d[2].w(UCC(0x2b4));
    // 01177c: JSR src:(5e3c)
    _m->dma_push(G.d[0].w(), G.d[1].l(), G.d[2].l());
    // 011782: BSR src:(11908)
    F11908();
    // 011786: CLR.L dst:(ff0842)
    G.io->l(0xff0842, 0);
    // 01178c: CLR.W dst:(ff0850)
    G.io->w(0xff0850, 0);
    // 011792: MOVE.W dst:(ff0854) src:#f10
    G.io->w(0xff0854, 0xf10);
    // 01179a: MOVE.L dst:(ff0856) src:#18004800
    G.io->l(0xff0856, 0x18004800);
    // 0117a4: MOVE.L dst:(ff0862) src:#f8000800
    G.io->l(0xff0862, UCC(0xf8000800));
    // 0117ae: BSR src:(117fc)
    F117fc();
    // 0117b2: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 0117b6: MOVE.L dst:D1 src:#12292
    G.d[1].l(0x12292);
    // 0117bc: MOVE.W dst:D2 src:#0
    G.d[2].w(UCC(0));
    // 0117c0: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 0117c6: MOVE.W dst:D0 src:#10
    G.d[0].w(0x10);
    // 0117ca: MOVE.L dst:D1 src:#1239e
    G.d[1].l(0x1239e);
    // 0117d0: MOVE.W dst:D2 src:#20
    G.d[2].w(UCC(0x20));
    // 0117d4: JSR src:(5dc8)
    _m->vdp_copy_words_to_cram(G.d[0].w(), G.d[1].l(), G.d[2].w());
    // 0117da: MOVE.W dst:D7 src:#dff
    G.d[7].w(UCC(0xdff));

  L117de:;
    // 0117de: BSR src:(117e8)
    F117e8();
    // 0117e2: DBcc.W cond:False dst:D7 src:(117de)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L117de; }
    // 0117e6: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F114ec()
  {
    _log_call(__func__);

    // 0114ec: MOVE.W dst:D0 src:#a757
    G.d[0].w(0xa757);
    // 0114f0: MOVE.W dst:D1 src:#228c
    G.d[1].w(0x228c);
    // 0114f4: MOVEQ.L dst:D2 src:#3
    G.d[2].l(3);
    // 0114f6: MOVEQ.L dst:D3 src:#3
    G.d[3].l(UCC(3));
    // 0114f8: JSR src:(6414)
    F6414();
    // 0114fe: MOVEQ.L dst:D7 src:#10
    G.d[7].l(UCC(0x10));
    // 011500: BSR src:(115f4)
    F115f4();
    // 011504: MOVE.W dst:D0 src:#a6e9
    G.d[0].w(0xa6e9);
    // 011508: MOVE.W dst:D1 src:#2286
    G.d[1].w(0x2286);
    // 01150c: MOVEQ.L dst:D2 src:#7
    G.d[2].l(7);
    // 01150e: MOVEQ.L dst:D3 src:#3
    G.d[3].l(UCC(3));
    // 011510: JSR src:(6414)
    F6414();
    // 011516: MOVEQ.L dst:D7 src:#10
    G.d[7].l(UCC(0x10));
    // 011518: Bcc cond:True src:(115f4)
    F115f4();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1155c()
  {
    _log_call(__func__);

    // 01155c: MOVE.W dst:D0 src:#a6b9
    G.d[0].w(0xa6b9);
    // 011560: MOVE.W dst:D1 src:#228c
    G.d[1].w(0x228c);
    // 011564: MOVEQ.L dst:D2 src:#3
    G.d[2].l(3);
    // 011566: MOVEQ.L dst:D3 src:#1
    G.d[3].l(UCC(1));
    // 011568: JSR src:(6414)
    F6414();
    // 01156e: MOVE.W dst:D0 src:#a6c1
    G.d[0].w(0xa6c1);
    // 011572: MOVE.W dst:D1 src:#238e
    G.d[1].w(0x238e);
    // 011576: MOVEQ.L dst:D2 src:#1
    G.d[2].l(1);
    // 011578: MOVEQ.L dst:D3 src:#1
    G.d[3].l(UCC(1));
    // 01157a: JMP src:(6414)
    F6414();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F11580()
  {
    _log_call(__func__);

    // 011580: MOVE.W dst:D0 src:#a633
    G.d[0].w(0xa633);
    // 011584: MOVE.W dst:D1 src:#2106
    G.d[1].w(0x2106);
    // 011588: MOVEQ.L dst:D2 src:#7
    G.d[2].l(7);
    // 01158a: MOVEQ.L dst:D3 src:#7
    G.d[3].l(UCC(7));
    // 01158c: JSR src:(6414)
    F6414();
    // 011592: MOVE.W dst:D0 src:#a673
    G.d[0].w(0xa673);
    // 011596: MOVE.W dst:D1 src:#2504
    G.d[1].w(0x2504);
    // 01159a: MOVEQ.L dst:D2 src:#9
    G.d[2].l(9);
    // 01159c: MOVEQ.L dst:D3 src:#6
    G.d[3].l(UCC(6));
    // 01159e: JMP src:(6414)
    F6414();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F115a4()
  {
    _log_call(__func__);

    // 0115a4: MOVE.W dst:D0 src:#a6c5
    G.d[0].w(0xa6c5);
    // 0115a8: MOVE.W dst:D1 src:#228c
    G.d[1].w(0x228c);
    // 0115ac: MOVEQ.L dst:D2 src:#3
    G.d[2].l(3);
    // 0115ae: MOVEQ.L dst:D3 src:#1
    G.d[3].l(UCC(1));
    // 0115b0: JSR src:(6414)
    F6414();
    // 0115b6: MOVE.W dst:D0 src:#a6cd
    G.d[0].w(0xa6cd);
    // 0115ba: MOVE.W dst:D1 src:#238e
    G.d[1].w(0x238e);
    // 0115be: MOVEQ.L dst:D2 src:#1
    G.d[2].l(1);
    // 0115c0: MOVEQ.L dst:D3 src:#1
    G.d[3].l(UCC(1));
    // 0115c2: JMP src:(6414)
    F6414();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F115c8()
  {
    _log_call(__func__);

    // 0115c8: BSR src:(115a4)
    F115a4();
    // 0115cc: MOVE.W dst:D7 src:#40
    G.d[7].w(UCC(0x40));
    // 0115d0: BSR src:(115f4)
    F115f4();
    // 0115d4: BSR src:(11580)
    F11580();
    // 0115d8: MOVE.W dst:D7 src:#80
    G.d[7].w(UCC(0x80));
    // 0115dc: Bcc cond:True src:(115f4)
    F115f4();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F115e0()
  {
    _log_call(__func__);

    // 0115e0: BSR src:(1155c)
    F1155c();
    // 0115e4: MOVE.W dst:D7 src:#80
    G.d[7].w(UCC(0x80));
    // 0115e8: BSR src:(115f4)
    F115f4();
    // 0115ec: BSR src:(11580)
    F11580();
    // 0115f0: MOVE.W dst:D7 src:#c0
    G.d[7].w(UCC(0xc0));

  L115f4:;
    // 0115f4: JMP src:(115f4)
    F115f4();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F115f4()
  {
    _log_call(__func__);

  L115f4:;
    // 0115f4: BSR src:(1160e)
    F1160e();
    // 0115f8: BSR src:(11a3c)
    F11a3c();
    // 0115fc: BSR src:(11c38)
    F11c38();
    // 011600: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 011602: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 011608: DBcc.W cond:False dst:D7 src:(115f4)
    G.d[7].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[7].w())) { goto L115f4; }
    // 01160c: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F1160e()
  {
    _log_call(__func__);

    // 01160e: LEA.L dst:A6 src:(ff0842)
    G.a[6] = 0xff0842;
    // 011614: MOVE.W dst:(A6.L)+e src:#48
    G.io->w(G.a[6] + 14, 0x48);
    // 01161a: MOVE.L dst:(A6.L)+14 src:#72804080
    G.io->l(G.a[6] + 0x14, 0x72804080);
    // 011622: ANDI.W dst:(A6) src:#7
    G.io->w(G.a[6], AND<W>(G.io->w(G.a[6]), 7));
    // 011626: Bcc cond:NE src:(11668)
    if (G.sr.check_condition(Condition::NE)) { goto L11668; }
    // 011628: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 01162c: MOVE.W dst:D1 src:#23a4
    G.d[1].w(0x23a4);
    // 011630: MOVEQ.L dst:D2 src:#e
    G.d[2].l(14);
    // 011632: MOVEQ.L dst:D3 src:#e
    G.d[3].l(UCC(14));
    // 011634: JSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 01163a: ADDQ.W dst:(A6.L)+2 src:#4
    G.io->w(G.a[6] + 2, ADD<W>(G.io->w(G.a[6] + 2), 4));
    // 01163e: CMPI.W dst:(A6.L)+2 src:#10
    CMP<W>(G.io->w(G.a[6] + 2), 0x10);
    // 011644: Bcc cond:CS src:(1164a)
    if (G.sr.check_condition(Condition::CS)) { goto L1164a; }
    // 011646: CLR.W dst:(A6.L)+2
    G.io->w(G.a[6] + 2, UCC(0));

  L1164a:;
    // 01164a: LEA.L dst:A0 src:(116ae)
    G.a[0] = 0x116ae;
    // 011650: MOVE.W dst:D0 src:(A6.L)+2
    G.d[0].w(G.io->w(G.a[6] + 2));
    // 011654: MOVE.L dst:A0 src:(A0,D0.W)+0
    G.a[0] = UCC(G.io->l(G.a[0] + G.d[0].w()));

  L11658:;
    // 011658: MOVEM.W src:(A0)+ regs:D0,D1,D2,D3
    G.d[0].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    G.d[1].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    G.d[2].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    G.d[3].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    // 01165c: JSR src:(6414)
    F6414();
    // 011662: CMPI.W dst:(A0) src:#ffff
    CMP<W>(G.io->w(G.a[0]), 0xffff);
    // 011666: Bcc cond:NE src:(11658)
    if (G.sr.check_condition(Condition::NE)) { goto L11658; }

  L11668:;
    // 011668: MOVE.W dst:D0 src:(A6.L)+e
    G.d[0].w(G.io->w(G.a[6] + 14));
    // 01166c: MOVEQ.L dst:D1 src:#3
    G.d[1].l(UCC(3));
    // 01166e: JSR src:(5bd6)
    F5bd6();
    // 011674: BTST.B dst:(A6.L)+1 src:#0
    BTST<B>(G.io->b(G.a[6] + 1), 0);
    // 01167a: Bcc cond:EQ src:(11688)
    if (G.sr.check_condition(Condition::EQ)) { goto L11688; }
    // 01167c: LEA.L dst:A0 src:(1168c)
    G.a[0] = 0x1168c;
    // 011682: JSR src:(5b70)
    F5b70();

  L11688:;
    // 011688: ADDQ.W dst:(A6) src:#1
    G.io->w(G.a[6], ADD<W>(G.io->w(G.a[6]), 1));
    // 01168a: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F117e8()
  {
    _log_call(__func__);

    // 0117e8: BSR src:(117fc)
    F117fc();
    // 0117ec: BSR src:(11940)
    F11940();
    // 0117f0: BSR src:(11c38)
    F11c38();
    // 0117f4: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 0117f6: JSR src:(5d9a)
    _m->vblank(G.d[0].w());

  L117fc:;
    // 0117fc: JMP src:(117fc)
    F117fc();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F117fc()
  {
    _log_call(__func__);

    // 0117fc: LEA.L dst:A6 src:(ff0842)
    G.a[6] = 0xff0842;
    // 011802: ANDI.W dst:(A6) src:#f
    G.io->w(G.a[6], AND<W>(G.io->w(G.a[6]), 15));
    // 011806: Bcc cond:NE src:(11848)
    if (G.sr.check_condition(Condition::NE)) { goto L11848; }
    // 011808: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 01180c: MOVE.W dst:D1 src:#2408
    G.d[1].w(0x2408);
    // 011810: MOVEQ.L dst:D2 src:#d
    G.d[2].l(13);
    // 011812: MOVEQ.L dst:D3 src:#c
    G.d[3].l(UCC(12));
    // 011814: JSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 01181a: ADDQ.W dst:(A6.L)+2 src:#4
    G.io->w(G.a[6] + 2, ADD<W>(G.io->w(G.a[6] + 2), 4));
    // 01181e: CMPI.W dst:(A6.L)+2 src:#14
    CMP<W>(G.io->w(G.a[6] + 2), 0x14);
    // 011824: Bcc cond:CS src:(1182a)
    if (G.sr.check_condition(Condition::CS)) { goto L1182a; }
    // 011826: CLR.W dst:(A6.L)+2
    G.io->w(G.a[6] + 2, UCC(0));

  L1182a:;
    // 01182a: LEA.L dst:A0 src:(11862)
    G.a[0] = 0x11862;
    // 011830: MOVE.W dst:D0 src:(A6.L)+2
    G.d[0].w(G.io->w(G.a[6] + 2));
    // 011834: MOVE.L dst:A0 src:(A0,D0.W)+0
    G.a[0] = UCC(G.io->l(G.a[0] + G.d[0].w()));

  L11838:;
    // 011838: MOVEM.W src:(A0)+ regs:D0,D1,D2,D3
    G.d[0].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    G.d[1].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    G.d[2].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    G.d[3].l(G.io->w(G.a[0]));
    G.a[0] += 2;
    // 01183c: JSR src:(6414)
    F6414();
    // 011842: CMPI.W dst:(A0) src:#ffff
    CMP<W>(G.io->w(G.a[0]), 0xffff);
    // 011846: Bcc cond:NE src:(11838)
    if (G.sr.check_condition(Condition::NE)) { goto L11838; }

  L11848:;
    // 011848: MOVE.W dst:D0 src:(A6)
    G.d[0].w(G.io->w(G.a[6]));
    // 01184a: AND.W dst:D0 src:#c
    G.d[0].w(AND<W>(G.d[0].w(), 12));
    // 01184e: LSL.W dst:D0 src:#2
    G.d[0].w(LSL<W>(G.d[0].w(), 2));
    // 011850: ADD.W dst:D0 src:#22b4
    G.d[0].w(ADD<W>(G.d[0].w(), 0x22b4));
    // 011854: MOVE.W dst:(A6.L)+10 src:D0
    G.io->w(G.a[6] + 0x10, UCC(G.d[0].w()));
    // 011858: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 01185e: ADDQ.W dst:(A6) src:#1
    G.io->w(G.a[6], ADD<W>(G.io->w(G.a[6]), 1));
    // 011860: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F11908()
  {
    _log_call(__func__);

    // 011908: LEA.L dst:A5 src:(1195e)
    G.a[5] = 0x1195e;
    // 01190e: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 011914: MOVE.W dst:D0 src:#20
    G.d[0].w(0x20);
    // 011918: MOVEQ.L dst:D6 src:#13
    G.d[6].l(UCC(0x13));

  L1191a:;
    // 01191a: MOVE.W dst:(A6.L)+e src:D0
    G.io->w(G.a[6] + 14, G.d[0].w());
    // 01191e: MOVE.W dst:(A6.L)+10 src:(A5)+
    G.io->w(G.a[6] + 0x10, UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 011922: MOVE.W dst:(A6.L)+12 src:#1
    G.io->w(G.a[6] + 0x12, 1);
    // 011928: MOVE.L dst:(A6.L)+14 src:(A5)+
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5])));
    G.a[5] += 4;
    // 01192c: MOVE.W dst:(A6.L)+6 src:(A5)+
    G.io->w(G.a[6] + 6, UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 011930: MOVE.W dst:(A6.L)+8 src:#38
    G.io->w(G.a[6] + 8, 0x38);
    // 011936: ADDQ.W dst:D0 src:#8
    G.d[0].w(ADD<W>(G.d[0].w(), 8));
    // 011938: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 01193c: DBcc.W cond:False dst:D6 src:(1191a)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L1191a; }

  L11940:;
    // 011940: JMP src:(11940)
    F11940();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F11940()
  {
    _log_call(__func__);

    // 011940: LEA.L dst:A6 src:(ff02c2)
    G.a[6] = 0xff02c2;
    // 011946: MOVEQ.L dst:D6 src:#13
    G.d[6].l(UCC(0x13));

  L11948:;
    // 011948: JSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 01194e: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 011954: LEA.L dst:A6 src:(A6.L)+40
    G.a[6] += 0x40;
    // 011958: DBcc.W cond:False dst:D6 src:(11948)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L11948; }
    // 01195c: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F119fe()
  {
    _log_call(__func__);

    // 0119fe: LEA.L dst:A5 src:(11ab0)
    G.a[5] = 0x11ab0;
    // 011a04: LEA.L dst:A6 src:(ff08c2)
    G.a[6] = 0xff08c2;
    // 011a0a: MOVEQ.L dst:D0 src:#1f
    G.d[0].l(0x1f);
    // 011a0c: MOVE.W dst:D1 src:#68
    G.d[1].w(UCC(0x68));

  L11a10:;
    // 011a10: MOVE.W dst:(A6.L)+e src:D1
    G.io->w(G.a[6] + 14, G.d[1].w());
    // 011a14: MOVE.W dst:(A6.L)+10 src:(A5)+
    G.io->w(G.a[6] + 0x10, UCC(G.io->w(G.a[5])));
    G.a[5] += 2;
    // 011a18: MOVE.W dst:(A6.L)+12 src:#1
    G.io->w(G.a[6] + 0x12, 1);
    // 011a1e: MOVE.L dst:(A6.L)+14 src:(A5)+
    G.io->l(G.a[6] + 0x14, UCC(G.io->l(G.a[5])));
    G.a[5] += 4;
    // 011a22: MOVE.L dst:(A6.L)+6 src:(A5)+
    G.io->l(G.a[6] + 6, UCC(G.io->l(G.a[5])));
    G.a[5] += 4;
    // 011a26: MOVE.L dst:(A6.L)+20 src:#fe000200
    G.io->l(G.a[6] + 0x20, 0xfe000200);
    // 011a2e: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, UCC(0));
    // 011a32: LEA.L dst:A6 src:(A6.L)+30
    G.a[6] += 0x30;
    // 011a36: ADDQ.W dst:D1 src:#8
    G.d[1].w(ADD<W>(G.d[1].w(), 8));
    // 011a38: DBcc.W cond:False dst:D0 src:(11a10)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L11a10; }

  L11a3c:;
    // 011a3c: JMP src:(11a3c)
    F11a3c();
    goto end;

  end:
    _log_ret(__func__);
  }

  void F11a3c()
  {
    _log_call(__func__);

    // 011a3c: LEA.L dst:A6 src:(ff08c2)
    G.a[6] = 0xff08c2;
    // 011a42: MOVEQ.L dst:D6 src:#1f
    G.d[6].l(UCC(0x1f));

  L11a44:;
    // 011a44: JSR src:(677c)
    _m->F677c_manual(G.a[6]);
    // 011a4a: MOVE.W dst:D0 src:(A6.L)+16
    G.d[0].w(G.io->w(G.a[6] + 0x16));
    // 011a4e: SUB.W dst:D0 src:#3800
    G.d[0].w(SUB<W>(G.d[0].w(), 0x3800));
    // 011a52: CMP.W dst:D0 src:#1000
    CMP<W>(G.d[0].w(), 0x1000);
    // 011a56: Bcc cond:CC src:(11a88)
    if (G.sr.check_condition(Condition::CC)) { goto L11a88; }
    // 011a58: MOVE.W dst:D0 src:(A6.L)+14
    G.d[0].w(G.io->w(G.a[6] + 0x14));
    // 011a5c: SUB.W dst:D0 src:#7400
    G.d[0].w(SUB<W>(G.d[0].w(), 0x7400));
    // 011a60: CMP.W dst:D0 src:#1000
    CMP<W>(G.d[0].w(), 0x1000);
    // 011a64: Bcc cond:CC src:(11a88)
    if (G.sr.check_condition(Condition::CC)) { goto L11a88; }
    // 011a66: MOVE.W dst:D0 src:D6
    G.d[0].w(UCC(G.d[6].w()));
    // 011a68: MULU.W dst:D0 src:#a
    G.d[0].l(MULU(G.d[0].w(), 10));
    // 011a6c: LEA.L dst:A5 src:(11ab0)
    G.a[5] = 0x11ab0;
    // 011a72: MOVE.W dst:(A6.L)+10 src:(A5,D0.W)+0
    G.io->w(G.a[6] + 0x10, G.io->w(G.a[5] + G.d[0].w()));
    // 011a78: MOVE.L dst:(A6.L)+14 src:(A5,D0.W)+2
    G.io->l(G.a[6] + 0x14, G.io->l(G.a[5] + G.d[0].w() + 2));
    // 011a7e: MOVE.L dst:(A6.L)+6 src:(A5,D0.W)+6
    G.io->l(G.a[6] + 6, G.io->l(G.a[5] + G.d[0].w() + 6));
    // 011a84: CLR.W dst:(A6.L)+24
    G.io->w(G.a[6] + 0x24, UCC(0));

  L11a88:;
    // 011a88: CMPI.W dst:(A6.L)+10 src:#3f2
    CMP<W>(G.io->w(G.a[6] + 0x10), 0x3f2);
    // 011a8e: Bcc cond:EQ src:(11aa0)
    if (G.sr.check_condition(Condition::EQ)) { goto L11aa0; }
    // 011a90: ADDQ.W dst:(A6.L)+24 src:#1
    G.io->w(G.a[6] + 0x24, ADD<W>(G.io->w(G.a[6] + 0x24), 1));
    // 011a94: ANDI.W dst:(A6.L)+24 src:#7
    G.io->w(G.a[6] + 0x24, AND<W>(G.io->w(G.a[6] + 0x24), 7));
    // 011a9a: Bcc cond:NE src:(11aa0)
    if (G.sr.check_condition(Condition::NE)) { goto L11aa0; }
    // 011a9c: SUBQ.W dst:(A6.L)+10 src:#1
    G.io->w(G.a[6] + 0x10, SUB<W>(G.io->w(G.a[6] + 0x10), 1));

  L11aa0:;
    // 011aa0: JSR src:(5984)
    _m->update_sprite_with_something(G.a[6]);
    // 011aa6: LEA.L dst:A6 src:(A6.L)+30
    G.a[6] += 0x30;
    // 011aaa: DBcc.W cond:False dst:D6 src:(11a44)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L11a44; }
    // 011aae: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F11bf0()
  {
    _log_call(__func__);

    // 011bf0: MOVEQ.L dst:D6 src:#7
    G.d[6].l(UCC(7));

  L11bf2:;
    // 011bf2: MOVEQ.L dst:D0 src:#3f
    G.d[0].l(0x3f);
    // 011bf4: MOVE.L dst:(VDP_CTRL1) src:#WRITE_TO_CRAM
    G.io->l(VDP_CTRL1, UCC(WRITE_TO_CRAM));

  L11bfe:;
    // 011bfe: MOVE.W dst:(VDP_DATA1) src:#eee
    G.io->w(VDP_DATA1, UCC(0xeee));
    // 011c06: DBcc.W cond:False dst:D0 src:(11bfe)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L11bfe; }
    // 011c0a: MOVEQ.L dst:D0 src:#0
    G.d[0].l(UCC(0));
    // 011c0c: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 011c12: MOVEQ.L dst:D0 src:#3f
    G.d[0].l(0x3f);
    // 011c14: MOVE.L dst:(VDP_CTRL1) src:#WRITE_TO_CRAM
    G.io->l(VDP_CTRL1, UCC(WRITE_TO_CRAM));

  L11c1e:;
    // 011c1e: MOVE.W dst:(VDP_DATA1) src:#0
    G.io->w(VDP_DATA1, UCC(0));
    // 011c26: DBcc.W cond:False dst:D0 src:(11c1e)
    G.d[0].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[0].w())) { goto L11c1e; }
    // 011c2a: MOVEQ.L dst:D0 src:#4
    G.d[0].l(UCC(4));
    // 011c2c: JSR src:(5d9a)
    _m->vblank(G.d[0].w());
    // 011c32: DBcc.W cond:False dst:D6 src:(11bf2)
    G.d[6].dec<W>(1);
    if (NOT_MINUS_ONE(G.d[6].w())) { goto L11bf2; }
    // 011c36: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  void F11c38()
  {
    _log_call(__func__);

    // 011c38: LEA.L dst:A6 src:(ff009a)
    G.a[6] = 0xff009a;
    // 011c3e: ADDQ.W dst:(A6) src:#1
    G.io->w(G.a[6], ADD<W>(G.io->w(G.a[6]), 1));
    // 011c40: CMPI.W dst:(A6) src:#6
    CMP<W>(G.io->w(G.a[6]), 6);
    // 011c44: Bcc cond:CC src:(11c48)
    if (G.sr.check_condition(Condition::CC)) { goto L11c48; }

  L11c46:;
    // 011c46: RTS
    goto end;

  L11c48:;
    // 011c48: CLR.W dst:(A6)
    G.io->w(G.a[6], 0);
    // 011c4a: ADDQ.W dst:(VSCROLL_FG) src:#1
    G.io->w(VSCROLL_FG, ADD<W>(G.io->w(VSCROLL_FG), 1));
    // 011c50: ADDQ.W dst:(A6.L)+2 src:#1
    G.io->w(G.a[6] + 2, ADD<W>(G.io->w(G.a[6] + 2), 1));
    // 011c54: ANDI.W dst:(A6.L)+2 src:#f
    G.io->w(G.a[6] + 2, AND<W>(G.io->w(G.a[6] + 2), 15));
    // 011c5a: Bcc cond:NE src:(11c46)
    if (G.sr.check_condition(Condition::NE)) { goto L11c46; }
    // 011c5c: MOVE.W dst:D0 src:#83e1
    G.d[0].w(0x83e1);
    // 011c60: MOVE.W dst:D1 src:(A6.L)+4
    G.d[1].w(G.io->w(G.a[6] + 4));
    // 011c64: ADD.W dst:D1 src:#1c
    G.d[1].w(ADD<W>(G.d[1].w(), 0x1c));
    // 011c68: MOVEQ.L dst:D2 src:#19
    G.d[2].l(0x19);
    // 011c6a: MOVEQ.L dst:D3 src:#1
    G.d[3].l(UCC(1));
    // 011c6c: JSR src:(63e8)
    _m->vdp_set_d3_blocks_of_size_d2_with_d0_starting_at_d1(
      G.d[0].w(), G.d[1].l(), G.d[2].w(), G.d[3].w());
    // 011c72: ADDI.W dst:(A6.L)+4 src:#100
    G.io->w(G.a[6] + 4, ADD<W>(G.io->w(G.a[6] + 4), 0x100));
    // 011c78: ANDI.W dst:(A6.L)+4 src:#fff
    G.io->w(G.a[6] + 4, AND<W>(G.io->w(G.a[6] + 4), 0xfff));
    // 011c7e: MOVE.L dst:A0 src:(A6.L)+6
    G.a[0] = G.io->l(G.a[6] + 6);
    // 011c82: CMPI.L dst:(A0) src:#ffffffff
    CMP<L>(G.io->l(G.a[0]), 0xffffffff);
    // 011c88: Bcc cond:EQ src:(11c46)
    if (G.sr.check_condition(Condition::EQ)) { goto L11c46; }
    // 011c8a: ADDQ.L dst:(A6.L)+6 src:#4
    G.io->l(G.a[6] + 6, ADD<L>(G.io->l(G.a[6] + 6), 4));
    // 011c8e: MOVE.L dst:A0 src:(A0)
    G.a[0] = G.io->l(G.a[0]);
    // 011c90: MOVE.W dst:D0 src:(A0)+
    G.d[0].w(UCC(G.io->w(G.a[0])));
    G.a[0] += 2;
    // 011c92: EXT.L dst:D0
    G.d[0].l(EXT<L>(G.d[0].w()));
    // 011c94: SWAP.L dst:D0
    G.d[0].l(SWAP(G.d[0].l()));
    // 011c96: OR.L dst:D0 src:#40000000
    G.d[0].l(OR<L>(G.d[0].l(), 0x40000000));
    // 011c9c: MOVE.L dst:(VDP_CTRL1) src:D0
    G.io->l(VDP_CTRL1, UCC(G.d[0].l()));

  L11ca2:;
    // 011ca2: MOVEQ.L dst:D0 src:#0
    G.d[0].l(0);
    // 011ca4: MOVE.B dst:D0 src:(A0)+
    G.d[0].b(UCC(G.io->b(G.a[0])));
    G.a[0] += 1;
    // 011ca6: ADD.W dst:D0 src:#8384
    G.d[0].w(ADD<W>(G.d[0].w(), 0x8384));
    // 011caa: MOVE.W dst:(VDP_DATA1) src:D0
    G.io->w(VDP_DATA1, UCC(G.d[0].w()));
    // 011cb0: CMPI.B dst:(A0) src:#ff
    CMP<B>(G.io->b(G.a[0]), 0xff);
    // 011cb4: Bcc cond:NE src:(11ca2)
    if (G.sr.check_condition(Condition::NE)) { goto L11ca2; }
    // 011cb6: RTS
    goto end;

  end:
    _log_ret(__func__);
  }

  GeneratedImpl(bool v, const ManualFunctions::ptr& m) : _m(m), _verbose(v) {}
  void run() { _m->start(); }
  void jump_map(ulong_t addr) { JUMP_MAP(addr); }
  void vblank_int() { F5c88(); }
  void _log_call(const char* fn_name) const
  {
    if (_verbose) P("Call $", fn_name);
  }
  void _log_ret(const char* fn_name) const
  {
    if (_verbose) P("Returned $", fn_name);
  }
  ManualFunctions::ptr _m;
  bool _verbose;
};

} // namespace

GeneratedIntf::ptr Generated::create(
  bool verbose, const ManualFunctions::ptr& m)
{
  return std::make_shared<GeneratedImpl>(verbose, m);
}

} // namespace heaven_ice
